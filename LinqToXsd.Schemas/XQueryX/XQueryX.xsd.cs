//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace W3C.XQueryX {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    
    public abstract partial class itemType : XTypedElement, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("itemType", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator itemType(XElement xe) {  return (itemType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public itemType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static itemType Load(string xmlFile) {
            return ((itemType)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static itemType Load(System.IO.TextReader xmlFile) {
            return ((itemType)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static itemType Parse(string xml) {
            return ((itemType)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public abstract partial class forLetClauseItemExtensions : XTypedElement, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("forLetClauseItemExtensions", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator forLetClauseItemExtensions(XElement xe) {  return (forLetClauseItemExtensions)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public forLetClauseItemExtensions() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static forLetClauseItemExtensions Load(string xmlFile) {
            return ((forLetClauseItemExtensions)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static forLetClauseItemExtensions Load(System.IO.TextReader xmlFile) {
            return ((forLetClauseItemExtensions)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static forLetClauseItemExtensions Parse(string xml) {
            return ((forLetClauseItemExtensions)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public abstract partial class anyElementTest : global::W3C.XQueryX.kindTest, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("anyElementTest", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator anyElementTest(XElement xe) {  return (anyElementTest)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public anyElementTest() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static anyElementTest Load(string xmlFile) {
            return ((anyElementTest)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static anyElementTest Load(System.IO.TextReader xmlFile) {
            return ((anyElementTest)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public new static anyElementTest Parse(string xml) {
            return ((anyElementTest)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
    }
    
    public partial class kindTest : global::W3C.XQueryX.itemType, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("kindTest", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator kindTest(XElement xe) {  return (kindTest)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public kindTest() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static kindTest Load(string xmlFile) {
            return ((kindTest)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static kindTest Load(System.IO.TextReader xmlFile) {
            return ((kindTest)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public new static kindTest Parse(string xml) {
            return ((kindTest)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<kindTest>(this);
        }
    }
    
    public abstract partial class prologPartOneItem : XTypedElement, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("prologPartOneItem", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator prologPartOneItem(XElement xe) {  return (prologPartOneItem)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public prologPartOneItem() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static prologPartOneItem Load(string xmlFile) {
            return ((prologPartOneItem)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static prologPartOneItem Load(System.IO.TextReader xmlFile) {
            return ((prologPartOneItem)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static prologPartOneItem Parse(string xml) {
            return ((prologPartOneItem)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public abstract partial class prologPartTwoItem : XTypedElement, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("prologPartTwoItem", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator prologPartTwoItem(XElement xe) {  return (prologPartTwoItem)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public prologPartTwoItem() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static prologPartTwoItem Load(string xmlFile) {
            return ((prologPartTwoItem)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static prologPartTwoItem Load(System.IO.TextReader xmlFile) {
            return ((prologPartTwoItem)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static prologPartTwoItem Parse(string xml) {
            return ((prologPartTwoItem)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class emptyContent : XTypedElement, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("emptyContent", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator emptyContent(XElement xe) { return XTypedServices.ToXTypedElement<emptyContent>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public emptyContent() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<emptyContent>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class QName : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName prefixXName = System.Xml.Linq.XName.Get("prefix", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("QName", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator QName(XElement xe) { return XTypedServices.ToXTypedElement<QName>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public QName() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string prefix {
            get {
                XAttribute x = this.Attribute(prefixXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
            set {
                this.SetAttribute(prefixXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<QName>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class EQName : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName prefixXName = System.Xml.Linq.XName.Get("prefix", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName URIXName = System.Xml.Linq.XName.Get("URI", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EQName", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator EQName(XElement xe) { return XTypedServices.ToXTypedElement<EQName>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public EQName() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string prefix {
            get {
                XAttribute x = this.Attribute(prefixXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
            set {
                this.SetAttribute(prefixXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string URI {
            get {
                XAttribute x = this.Attribute(URIXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(URIXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<EQName>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class exprType : XTypedElement, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("expr", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator exprType(XElement xe) { return XTypedServices.ToXTypedElement<exprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public exprType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<exprType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (expr*)
    /// </para>
    /// </summary>
    public partial class exprList : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName exprXName = System.Xml.Linq.XName.Get("expr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<expr> exprField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("exprList", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator exprList(XElement xe) { return XTypedServices.ToXTypedElement<exprList>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static exprList() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("expr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("constantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("integerConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("decimalConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("doubleConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("varRef", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("contextItemExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("extensionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("simpleMapExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("functionCallExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("constructorFunctionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("sequenceExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("rangeSequenceExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("operatorExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arithmeticOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("addOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("subtractOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("multiplyOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("divOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("idivOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("modOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryMinusOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryPlusOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConcatenateOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("comparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("valueComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("eqOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("neOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("gtOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("geOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("ltOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("leOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("generalComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("equalOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("notEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("lessThanOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("lessThanOrEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("greaterThanOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("greaterThanOrEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("isOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orderComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeBeforeOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeAfterOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("logicalOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("andOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("setOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unionOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("intersectOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("exceptOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("flworExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("ifThenElseExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("quantifiedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("switchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("typeswitchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("tryCatchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("instanceOfExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("treatExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("castableExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("castExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arrowExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("validateExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("elementConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedElementConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedAttributeConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedDocumentConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedTextConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedCommentConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedNamespaceConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedPIConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unorderedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orderedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("namedFunctionRef", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("inlineFunctionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("dynamicFunctionInvocationExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("mapConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arrayConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryLookup", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("pathExpr", "http://www.w3.org/2005/XQueryX")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (expr*)
        /// </para>
        /// </summary>
        public exprList() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Substitution members: expr, constantExpr, integerConstantExpr, decimalConstantExpr, doubleConstantExpr, stringConstantExpr, varRef, contextItemExpr, extensionExpr, simpleMapExpr, functionCallExpr, constructorFunctionExpr, sequenceExpr, rangeSequenceExpr, operatorExpr, arithmeticOp, addOp, subtractOp, multiplyOp, divOp, idivOp, modOp, unaryMinusOp, unaryPlusOp, stringOp, stringConcatenateOp, comparisonOp, valueComparisonOp, eqOp, neOp, gtOp, geOp, ltOp, leOp, generalComparisonOp, equalOp, notEqualOp, lessThanOp, lessThanOrEqualOp, greaterThanOp, greaterThanOrEqualOp, nodeComparisonOp, isOp, orderComparisonOp, nodeBeforeOp, nodeAfterOp, logicalOp, andOp, orOp, setOp, unionOp, intersectOp, exceptOp, flworExpr, ifThenElseExpr, quantifiedExpr, switchExpr, typeswitchExpr, tryCatchExpr, instanceOfExpr, treatExpr, castableExpr, castExpr, arrowExpr, validateExpr, elementConstructor, computedElementConstructor, computedAttributeConstructor, computedDocumentConstructor, computedTextConstructor, computedCommentConstructor, computedNamespaceConstructor, computedPIConstructor, unorderedExpr, orderedExpr, namedFunctionRef, inlineFunctionExpr, dynamicFunctionInvocationExpr, mapConstructor, arrayConstructor, stringConstructor, unaryLookup, pathExpr
        /// </para>
        /// <para>
        /// Regular expression: (expr*)
        /// </para>
        /// </summary>
        public virtual IList<expr> expr {
            get {
                if ((this.exprField == null)) {
                    this.exprField = new XTypedSubstitutedList<expr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("expr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("constantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("integerConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("decimalConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("doubleConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("varRef", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("contextItemExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("extensionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("simpleMapExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("functionCallExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("constructorFunctionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("sequenceExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("rangeSequenceExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("operatorExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arithmeticOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("addOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("subtractOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("multiplyOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("divOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("idivOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("modOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryMinusOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryPlusOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConcatenateOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("comparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("valueComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("eqOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("neOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("gtOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("geOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("ltOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("leOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("generalComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("equalOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("notEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("lessThanOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("lessThanOrEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("greaterThanOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("greaterThanOrEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("isOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orderComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeBeforeOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeAfterOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("logicalOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("andOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("setOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unionOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("intersectOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("exceptOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("flworExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("ifThenElseExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("quantifiedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("switchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("typeswitchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("tryCatchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("instanceOfExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("treatExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("castableExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("castExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arrowExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("validateExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("elementConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedElementConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedAttributeConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedDocumentConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedTextConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedCommentConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedNamespaceConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedPIConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unorderedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orderedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("namedFunctionRef", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("inlineFunctionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("dynamicFunctionInvocationExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("mapConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arrayConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryLookup", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("pathExpr", "http://www.w3.org/2005/XQueryX"));
                }
                return this.exprField;
            }
            set {
                if ((value == null)) {
                    this.exprField = null;
                }
                else {
                    if ((this.exprField == null)) {
                        this.exprField = XTypedSubstitutedList<expr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("expr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("constantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("integerConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("decimalConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("doubleConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("varRef", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("contextItemExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("extensionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("simpleMapExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("functionCallExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("constructorFunctionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("sequenceExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("rangeSequenceExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("operatorExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arithmeticOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("addOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("subtractOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("multiplyOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("divOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("idivOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("modOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryMinusOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryPlusOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConcatenateOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("comparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("valueComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("eqOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("neOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("gtOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("geOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("ltOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("leOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("generalComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("equalOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("notEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("lessThanOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("lessThanOrEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("greaterThanOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("greaterThanOrEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("isOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orderComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeBeforeOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeAfterOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("logicalOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("andOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("setOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unionOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("intersectOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("exceptOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("flworExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("ifThenElseExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("quantifiedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("switchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("typeswitchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("tryCatchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("instanceOfExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("treatExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("castableExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("castExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arrowExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("validateExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("elementConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedElementConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedAttributeConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedDocumentConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedTextConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedCommentConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedNamespaceConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedPIConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unorderedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orderedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("namedFunctionRef", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("inlineFunctionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("dynamicFunctionInvocationExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("mapConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arrayConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryLookup", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("pathExpr", "http://www.w3.org/2005/XQueryX"));
                    }
                    else {
                        XTypedServices.SetList<expr>(this.exprField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<exprList>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(exprXName, typeof(expr));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((expr | argumentPlaceholder)*)
    /// </para>
    /// </summary>
    public partial class exprOrPlaceholderList : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName exprXName = System.Xml.Linq.XName.Get("expr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<expr> exprField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName argumentPlaceholderXName = System.Xml.Linq.XName.Get("argumentPlaceholder", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emptyContent> argumentPlaceholderField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("exprOrPlaceholderList", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator exprOrPlaceholderList(XElement xe) { return XTypedServices.ToXTypedElement<exprOrPlaceholderList>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static exprOrPlaceholderList() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("expr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("constantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("integerConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("decimalConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("doubleConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("varRef", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("contextItemExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("extensionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("simpleMapExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("functionCallExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("constructorFunctionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("sequenceExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("rangeSequenceExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("operatorExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arithmeticOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("addOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("subtractOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("multiplyOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("divOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("idivOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("modOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryMinusOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryPlusOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConcatenateOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("comparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("valueComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("eqOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("neOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("gtOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("geOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("ltOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("leOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("generalComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("equalOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("notEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("lessThanOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("lessThanOrEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("greaterThanOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("greaterThanOrEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("isOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orderComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeBeforeOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeAfterOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("logicalOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("andOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("setOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unionOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("intersectOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("exceptOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("flworExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("ifThenElseExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("quantifiedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("switchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("typeswitchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("tryCatchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("instanceOfExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("treatExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("castableExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("castExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arrowExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("validateExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("elementConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedElementConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedAttributeConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedDocumentConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedTextConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedCommentConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedNamespaceConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedPIConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unorderedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orderedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("namedFunctionRef", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("inlineFunctionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("dynamicFunctionInvocationExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("mapConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arrayConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryLookup", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("pathExpr", "http://www.w3.org/2005/XQueryX")), new NamedContentModelEntity(argumentPlaceholderXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((expr | argumentPlaceholder)*)
        /// </para>
        /// </summary>
        public exprOrPlaceholderList() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: expr, constantExpr, integerConstantExpr, decimalConstantExpr, doubleConstantExpr, stringConstantExpr, varRef, contextItemExpr, extensionExpr, simpleMapExpr, functionCallExpr, constructorFunctionExpr, sequenceExpr, rangeSequenceExpr, operatorExpr, arithmeticOp, addOp, subtractOp, multiplyOp, divOp, idivOp, modOp, unaryMinusOp, unaryPlusOp, stringOp, stringConcatenateOp, comparisonOp, valueComparisonOp, eqOp, neOp, gtOp, geOp, ltOp, leOp, generalComparisonOp, equalOp, notEqualOp, lessThanOp, lessThanOrEqualOp, greaterThanOp, greaterThanOrEqualOp, nodeComparisonOp, isOp, orderComparisonOp, nodeBeforeOp, nodeAfterOp, logicalOp, andOp, orOp, setOp, unionOp, intersectOp, exceptOp, flworExpr, ifThenElseExpr, quantifiedExpr, switchExpr, typeswitchExpr, tryCatchExpr, instanceOfExpr, treatExpr, castableExpr, castExpr, arrowExpr, validateExpr, elementConstructor, computedElementConstructor, computedAttributeConstructor, computedDocumentConstructor, computedTextConstructor, computedCommentConstructor, computedNamespaceConstructor, computedPIConstructor, unorderedExpr, orderedExpr, namedFunctionRef, inlineFunctionExpr, dynamicFunctionInvocationExpr, mapConstructor, arrayConstructor, stringConstructor, unaryLookup, pathExpr
        /// </para>
        /// <para>
        /// Regular expression: ((expr | argumentPlaceholder)*)
        /// </para>
        /// </summary>
        public virtual IList<expr> expr {
            get {
                if ((this.exprField == null)) {
                    this.exprField = new XTypedSubstitutedList<expr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("expr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("constantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("integerConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("decimalConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("doubleConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("varRef", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("contextItemExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("extensionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("simpleMapExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("functionCallExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("constructorFunctionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("sequenceExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("rangeSequenceExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("operatorExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arithmeticOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("addOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("subtractOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("multiplyOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("divOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("idivOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("modOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryMinusOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryPlusOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConcatenateOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("comparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("valueComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("eqOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("neOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("gtOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("geOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("ltOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("leOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("generalComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("equalOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("notEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("lessThanOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("lessThanOrEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("greaterThanOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("greaterThanOrEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("isOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orderComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeBeforeOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeAfterOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("logicalOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("andOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("setOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unionOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("intersectOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("exceptOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("flworExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("ifThenElseExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("quantifiedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("switchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("typeswitchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("tryCatchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("instanceOfExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("treatExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("castableExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("castExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arrowExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("validateExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("elementConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedElementConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedAttributeConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedDocumentConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedTextConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedCommentConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedNamespaceConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedPIConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unorderedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orderedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("namedFunctionRef", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("inlineFunctionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("dynamicFunctionInvocationExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("mapConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arrayConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryLookup", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("pathExpr", "http://www.w3.org/2005/XQueryX"));
                }
                return this.exprField;
            }
            set {
                if ((value == null)) {
                    this.exprField = null;
                }
                else {
                    if ((this.exprField == null)) {
                        this.exprField = XTypedSubstitutedList<expr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("expr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("constantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("integerConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("decimalConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("doubleConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("varRef", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("contextItemExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("extensionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("simpleMapExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("functionCallExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("constructorFunctionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("sequenceExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("rangeSequenceExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("operatorExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arithmeticOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("addOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("subtractOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("multiplyOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("divOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("idivOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("modOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryMinusOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryPlusOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConcatenateOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("comparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("valueComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("eqOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("neOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("gtOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("geOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("ltOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("leOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("generalComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("equalOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("notEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("lessThanOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("lessThanOrEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("greaterThanOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("greaterThanOrEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("isOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orderComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeBeforeOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeAfterOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("logicalOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("andOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("setOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unionOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("intersectOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("exceptOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("flworExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("ifThenElseExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("quantifiedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("switchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("typeswitchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("tryCatchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("instanceOfExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("treatExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("castableExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("castExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arrowExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("validateExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("elementConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedElementConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedAttributeConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedDocumentConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedTextConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedCommentConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedNamespaceConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedPIConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unorderedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orderedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("namedFunctionRef", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("inlineFunctionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("dynamicFunctionInvocationExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("mapConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arrayConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryLookup", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("pathExpr", "http://www.w3.org/2005/XQueryX"));
                    }
                    else {
                        XTypedServices.SetList<expr>(this.exprField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((expr | argumentPlaceholder)*)
        /// </para>
        /// </summary>
        public virtual IList<emptyContent> argumentPlaceholder {
            get {
                if ((this.argumentPlaceholderField == null)) {
                    this.argumentPlaceholderField = new XTypedList<emptyContent>(this, LinqToXsdTypeManager.Instance, argumentPlaceholderXName);
                }
                return this.argumentPlaceholderField;
            }
            set {
                if ((value == null)) {
                    this.argumentPlaceholderField = null;
                }
                else {
                    if ((this.argumentPlaceholderField == null)) {
                        this.argumentPlaceholderField = XTypedList<emptyContent>.Initialize(this, LinqToXsdTypeManager.Instance, value, argumentPlaceholderXName);
                    }
                    else {
                        XTypedServices.SetList<emptyContent>(this.argumentPlaceholderField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<exprOrPlaceholderList>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(exprXName, typeof(expr));
            localElementDictionary.Add(argumentPlaceholderXName, typeof(emptyContent));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (expr?)
    /// </para>
    /// </summary>
    public partial class exprWrapperOptional : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName exprXName = System.Xml.Linq.XName.Get("expr", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("exprWrapperOptional", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator exprWrapperOptional(XElement xe) { return XTypedServices.ToXTypedElement<exprWrapperOptional>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static exprWrapperOptional() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("expr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("constantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("integerConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("decimalConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("doubleConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("varRef", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("contextItemExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("extensionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("simpleMapExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("functionCallExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("constructorFunctionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("sequenceExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("rangeSequenceExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("operatorExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arithmeticOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("addOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("subtractOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("multiplyOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("divOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("idivOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("modOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryMinusOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryPlusOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConcatenateOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("comparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("valueComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("eqOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("neOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("gtOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("geOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("ltOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("leOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("generalComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("equalOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("notEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("lessThanOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("lessThanOrEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("greaterThanOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("greaterThanOrEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("isOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orderComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeBeforeOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeAfterOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("logicalOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("andOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("setOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unionOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("intersectOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("exceptOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("flworExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("ifThenElseExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("quantifiedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("switchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("typeswitchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("tryCatchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("instanceOfExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("treatExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("castableExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("castExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arrowExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("validateExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("elementConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedElementConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedAttributeConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedDocumentConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedTextConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedCommentConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedNamespaceConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedPIConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unorderedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orderedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("namedFunctionRef", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("inlineFunctionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("dynamicFunctionInvocationExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("mapConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arrayConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryLookup", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("pathExpr", "http://www.w3.org/2005/XQueryX")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (expr?)
        /// </para>
        /// </summary>
        public exprWrapperOptional() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Substitution members: expr, constantExpr, integerConstantExpr, decimalConstantExpr, doubleConstantExpr, stringConstantExpr, varRef, contextItemExpr, extensionExpr, simpleMapExpr, functionCallExpr, constructorFunctionExpr, sequenceExpr, rangeSequenceExpr, operatorExpr, arithmeticOp, addOp, subtractOp, multiplyOp, divOp, idivOp, modOp, unaryMinusOp, unaryPlusOp, stringOp, stringConcatenateOp, comparisonOp, valueComparisonOp, eqOp, neOp, gtOp, geOp, ltOp, leOp, generalComparisonOp, equalOp, notEqualOp, lessThanOp, lessThanOrEqualOp, greaterThanOp, greaterThanOrEqualOp, nodeComparisonOp, isOp, orderComparisonOp, nodeBeforeOp, nodeAfterOp, logicalOp, andOp, orOp, setOp, unionOp, intersectOp, exceptOp, flworExpr, ifThenElseExpr, quantifiedExpr, switchExpr, typeswitchExpr, tryCatchExpr, instanceOfExpr, treatExpr, castableExpr, castExpr, arrowExpr, validateExpr, elementConstructor, computedElementConstructor, computedAttributeConstructor, computedDocumentConstructor, computedTextConstructor, computedCommentConstructor, computedNamespaceConstructor, computedPIConstructor, unorderedExpr, orderedExpr, namedFunctionRef, inlineFunctionExpr, dynamicFunctionInvocationExpr, mapConstructor, arrayConstructor, stringConstructor, unaryLookup, pathExpr
        /// </para>
        /// <para>
        /// Regular expression: (expr?)
        /// </para>
        /// </summary>
        public virtual expr expr {
            get {
                XTypedElement x = XTypedServices.ToSubstitutedXTypedElement(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("expr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("constantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("integerConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("decimalConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("doubleConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("varRef", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("contextItemExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("extensionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("simpleMapExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("functionCallExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("constructorFunctionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("sequenceExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("rangeSequenceExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("operatorExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arithmeticOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("addOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("subtractOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("multiplyOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("divOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("idivOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("modOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryMinusOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryPlusOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConcatenateOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("comparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("valueComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("eqOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("neOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("gtOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("geOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("ltOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("leOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("generalComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("equalOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("notEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("lessThanOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("lessThanOrEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("greaterThanOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("greaterThanOrEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("isOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orderComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeBeforeOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeAfterOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("logicalOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("andOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("setOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unionOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("intersectOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("exceptOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("flworExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("ifThenElseExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("quantifiedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("switchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("typeswitchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("tryCatchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("instanceOfExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("treatExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("castableExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("castExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arrowExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("validateExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("elementConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedElementConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedAttributeConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedDocumentConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedTextConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedCommentConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedNamespaceConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedPIConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unorderedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orderedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("namedFunctionRef", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("inlineFunctionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("dynamicFunctionInvocationExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("mapConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arrayConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryLookup", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("pathExpr", "http://www.w3.org/2005/XQueryX"));
                return ((expr)(x));
            }
            set {
                this.SetElement(exprXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<exprWrapperOptional>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(exprXName, typeof(expr));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (expr)
    /// </para>
    /// </summary>
    public partial class exprWrapper : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName exprXName = System.Xml.Linq.XName.Get("expr", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("exprWrapper", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator exprWrapper(XElement xe) { return XTypedServices.ToXTypedElement<exprWrapper>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static exprWrapper() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("expr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("constantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("integerConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("decimalConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("doubleConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("varRef", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("contextItemExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("extensionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("simpleMapExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("functionCallExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("constructorFunctionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("sequenceExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("rangeSequenceExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("operatorExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arithmeticOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("addOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("subtractOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("multiplyOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("divOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("idivOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("modOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryMinusOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryPlusOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConcatenateOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("comparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("valueComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("eqOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("neOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("gtOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("geOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("ltOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("leOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("generalComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("equalOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("notEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("lessThanOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("lessThanOrEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("greaterThanOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("greaterThanOrEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("isOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orderComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeBeforeOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeAfterOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("logicalOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("andOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("setOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unionOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("intersectOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("exceptOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("flworExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("ifThenElseExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("quantifiedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("switchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("typeswitchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("tryCatchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("instanceOfExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("treatExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("castableExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("castExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arrowExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("validateExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("elementConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedElementConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedAttributeConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedDocumentConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedTextConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedCommentConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedNamespaceConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedPIConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unorderedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orderedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("namedFunctionRef", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("inlineFunctionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("dynamicFunctionInvocationExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("mapConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arrayConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryLookup", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("pathExpr", "http://www.w3.org/2005/XQueryX")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (expr)
        /// </para>
        /// </summary>
        public exprWrapper() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Substitution members: expr, constantExpr, integerConstantExpr, decimalConstantExpr, doubleConstantExpr, stringConstantExpr, varRef, contextItemExpr, extensionExpr, simpleMapExpr, functionCallExpr, constructorFunctionExpr, sequenceExpr, rangeSequenceExpr, operatorExpr, arithmeticOp, addOp, subtractOp, multiplyOp, divOp, idivOp, modOp, unaryMinusOp, unaryPlusOp, stringOp, stringConcatenateOp, comparisonOp, valueComparisonOp, eqOp, neOp, gtOp, geOp, ltOp, leOp, generalComparisonOp, equalOp, notEqualOp, lessThanOp, lessThanOrEqualOp, greaterThanOp, greaterThanOrEqualOp, nodeComparisonOp, isOp, orderComparisonOp, nodeBeforeOp, nodeAfterOp, logicalOp, andOp, orOp, setOp, unionOp, intersectOp, exceptOp, flworExpr, ifThenElseExpr, quantifiedExpr, switchExpr, typeswitchExpr, tryCatchExpr, instanceOfExpr, treatExpr, castableExpr, castExpr, arrowExpr, validateExpr, elementConstructor, computedElementConstructor, computedAttributeConstructor, computedDocumentConstructor, computedTextConstructor, computedCommentConstructor, computedNamespaceConstructor, computedPIConstructor, unorderedExpr, orderedExpr, namedFunctionRef, inlineFunctionExpr, dynamicFunctionInvocationExpr, mapConstructor, arrayConstructor, stringConstructor, unaryLookup, pathExpr
        /// </para>
        /// <para>
        /// Regular expression: (expr)
        /// </para>
        /// </summary>
        public virtual expr expr {
            get {
                XTypedElement x = XTypedServices.ToSubstitutedXTypedElement(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("expr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("constantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("integerConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("decimalConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("doubleConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("varRef", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("contextItemExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("extensionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("simpleMapExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("functionCallExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("constructorFunctionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("sequenceExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("rangeSequenceExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("operatorExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arithmeticOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("addOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("subtractOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("multiplyOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("divOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("idivOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("modOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryMinusOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryPlusOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConcatenateOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("comparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("valueComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("eqOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("neOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("gtOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("geOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("ltOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("leOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("generalComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("equalOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("notEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("lessThanOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("lessThanOrEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("greaterThanOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("greaterThanOrEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("isOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orderComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeBeforeOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeAfterOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("logicalOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("andOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("setOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unionOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("intersectOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("exceptOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("flworExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("ifThenElseExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("quantifiedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("switchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("typeswitchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("tryCatchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("instanceOfExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("treatExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("castableExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("castExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arrowExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("validateExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("elementConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedElementConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedAttributeConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedDocumentConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedTextConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedCommentConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedNamespaceConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedPIConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unorderedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orderedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("namedFunctionRef", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("inlineFunctionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("dynamicFunctionInvocationExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("mapConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arrayConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryLookup", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("pathExpr", "http://www.w3.org/2005/XQueryX"));
                return ((expr)(x));
            }
            set {
                this.SetElement(exprXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<exprWrapper>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(exprXName, typeof(expr));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (constantExpr*)
    /// </para>
    /// </summary>
    public partial class literalList : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName constantExprXName = System.Xml.Linq.XName.Get("constantExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<constantExpr> constantExprField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("literalList", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator literalList(XElement xe) { return XTypedServices.ToXTypedElement<literalList>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static literalList() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("constantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("integerConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("decimalConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("doubleConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstantExpr", "http://www.w3.org/2005/XQueryX")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (constantExpr*)
        /// </para>
        /// </summary>
        public literalList() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Substitution members: constantExpr, integerConstantExpr, decimalConstantExpr, doubleConstantExpr, stringConstantExpr
        /// </para>
        /// <para>
        /// Regular expression: (constantExpr*)
        /// </para>
        /// </summary>
        public virtual IList<constantExpr> constantExpr {
            get {
                if ((this.constantExprField == null)) {
                    this.constantExprField = new XTypedSubstitutedList<constantExpr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("constantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("integerConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("decimalConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("doubleConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstantExpr", "http://www.w3.org/2005/XQueryX"));
                }
                return this.constantExprField;
            }
            set {
                if ((value == null)) {
                    this.constantExprField = null;
                }
                else {
                    if ((this.constantExprField == null)) {
                        this.constantExprField = XTypedSubstitutedList<constantExpr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("constantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("integerConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("decimalConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("doubleConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstantExpr", "http://www.w3.org/2005/XQueryX"));
                    }
                    else {
                        XTypedServices.SetList<constantExpr>(this.constantExprField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<literalList>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(constantExprXName, typeof(constantExpr));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (value)
    /// </para>
    /// </summary>
    public partial class constantExprType : global::W3C.XQueryX.exprType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valueXName = System.Xml.Linq.XName.Get("value", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("constantExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator constantExprType(XElement xe) { return XTypedServices.ToXTypedElement<constantExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static constantExprType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(valueXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (value)
        /// </para>
        /// </summary>
        public constantExprType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (value)
        /// </para>
        /// </summary>
        public virtual XTypedElement value {
            get {
                XElement x = this.GetElement(valueXName);
                return ((XTypedElement)(x));
            }
            set {
                this.SetElement(valueXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<constantExprType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(valueXName, typeof(XTypedElement));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class integerConstantExprType : global::W3C.XQueryX.constantExprType, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("integerConstantExpr", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator integerConstantExprType(XElement xe) { return XTypedServices.ToXTypedElement<integerConstantExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public integerConstantExprType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<integerConstantExprType>(this);
        }
    }
    
    public partial class decimalConstantExprType : global::W3C.XQueryX.constantExprType, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("decimalConstantExpr", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator decimalConstantExprType(XElement xe) { return XTypedServices.ToXTypedElement<decimalConstantExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public decimalConstantExprType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<decimalConstantExprType>(this);
        }
    }
    
    public partial class doubleConstantExprType : global::W3C.XQueryX.constantExprType, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("doubleConstantExpr", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator doubleConstantExprType(XElement xe) { return XTypedServices.ToXTypedElement<doubleConstantExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public doubleConstantExprType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<doubleConstantExprType>(this);
        }
    }
    
    public partial class stringConstantExprType : global::W3C.XQueryX.constantExprType, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("stringConstantExpr", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator stringConstantExprType(XElement xe) { return XTypedServices.ToXTypedElement<stringConstantExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public stringConstantExprType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<stringConstantExprType>(this);
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (name)
    /// </para>
    /// </summary>
    public partial class varRefType : global::W3C.XQueryX.exprType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("varRef", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator varRefType(XElement xe) { return XTypedServices.ToXTypedElement<varRefType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static varRefType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(nameXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (name)
        /// </para>
        /// </summary>
        public varRefType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name)
        /// </para>
        /// </summary>
        public virtual EQName name {
            get {
                XElement x = this.GetElement(nameXName);
                return ((EQName)(x));
            }
            set {
                this.SetElement(nameXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<varRefType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(nameXName, typeof(EQName));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class contextItemExprType : global::W3C.XQueryX.exprType, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("contextItemExpr", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator contextItemExprType(XElement xe) { return XTypedServices.ToXTypedElement<contextItemExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public contextItemExprType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<contextItemExprType>(this);
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (pragmaName, pragmaContents)
    /// </para>
    /// </summary>
    public partial class pragmaType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pragmaNameXName = System.Xml.Linq.XName.Get("pragmaName", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pragmaContentsXName = System.Xml.Linq.XName.Get("pragmaContents", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("pragma", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator pragmaType(XElement xe) { return XTypedServices.ToXTypedElement<pragmaType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static pragmaType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(pragmaNameXName), new NamedContentModelEntity(pragmaContentsXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (pragmaName, pragmaContents)
        /// </para>
        /// </summary>
        public pragmaType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (pragmaName, pragmaContents)
        /// </para>
        /// </summary>
        public virtual EQName pragmaName {
            get {
                XElement x = this.GetElement(pragmaNameXName);
                return ((EQName)(x));
            }
            set {
                this.SetElement(pragmaNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (pragmaName, pragmaContents)
        /// </para>
        /// </summary>
        public virtual string pragmaContents {
            get {
                XElement x = this.GetElement(pragmaContentsXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(pragmaContentsXName, value, "pragmaContents", pragmaContentsLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<pragmaType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(pragmaNameXName, typeof(EQName));
            localElementDictionary.Add(pragmaContentsXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class pragmaContentsLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                            "(([^#]|#+[^\\)#])*#*)"}, 0, XmlSchemaWhiteSpace.Preserve));
            
            private pragmaContentsLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (pragma+, argExpr?)
    /// </para>
    /// </summary>
    public partial class extensionExprType : global::W3C.XQueryX.exprType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pragmaXName = System.Xml.Linq.XName.Get("pragma", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<pragma> pragmaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName argExprXName = System.Xml.Linq.XName.Get("argExpr", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("extensionExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator extensionExprType(XElement xe) { return XTypedServices.ToXTypedElement<extensionExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static extensionExprType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(pragmaXName), new NamedContentModelEntity(argExprXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (pragma+, argExpr?)
        /// </para>
        /// </summary>
        public extensionExprType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (pragma+, argExpr?)
        /// </para>
        /// </summary>
        public virtual IList<pragma> pragma {
            get {
                if ((this.pragmaField == null)) {
                    this.pragmaField = new XTypedList<pragma>(this, LinqToXsdTypeManager.Instance, pragmaXName);
                }
                return this.pragmaField;
            }
            set {
                if ((value == null)) {
                    this.pragmaField = null;
                }
                else {
                    if ((this.pragmaField == null)) {
                        this.pragmaField = XTypedList<pragma>.Initialize(this, LinqToXsdTypeManager.Instance, value, pragmaXName);
                    }
                    else {
                        XTypedServices.SetList<pragma>(this.pragmaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (pragma+, argExpr?)
        /// </para>
        /// </summary>
        public virtual exprWrapper argExpr {
            get {
                XElement x = this.GetElement(argExprXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(argExprXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<extensionExprType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(pragmaXName, typeof(pragma));
            localElementDictionary.Add(argExprXName, typeof(exprWrapper));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (pathExpr)+
    /// </para>
    /// </summary>
    public partial class simpleMapExprType : global::W3C.XQueryX.exprType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pathExprXName = System.Xml.Linq.XName.Get("pathExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<pathExpr> pathExprField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("simpleMapExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator simpleMapExprType(XElement xe) { return XTypedServices.ToXTypedElement<simpleMapExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static simpleMapExprType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(pathExprXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (pathExpr)+
        /// </para>
        /// </summary>
        public simpleMapExprType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (pathExpr)+
        /// </para>
        /// </summary>
        public virtual IList<pathExpr> pathExpr {
            get {
                if ((this.pathExprField == null)) {
                    this.pathExprField = new XTypedList<pathExpr>(this, LinqToXsdTypeManager.Instance, pathExprXName);
                }
                return this.pathExprField;
            }
            set {
                if ((value == null)) {
                    this.pathExprField = null;
                }
                else {
                    if ((this.pathExprField == null)) {
                        this.pathExprField = XTypedList<pathExpr>.Initialize(this, LinqToXsdTypeManager.Instance, value, pathExprXName);
                    }
                    else {
                        XTypedServices.SetList<pathExpr>(this.pathExprField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<simpleMapExprType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(pathExprXName, typeof(pathExpr));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (functionName, arguments?)
    /// </para>
    /// </summary>
    public partial class functionCallExprType : global::W3C.XQueryX.exprType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName functionNameXName = System.Xml.Linq.XName.Get("functionName", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName argumentsXName = System.Xml.Linq.XName.Get("arguments", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("functionCallExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator functionCallExprType(XElement xe) { return XTypedServices.ToXTypedElement<functionCallExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static functionCallExprType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(functionNameXName), new NamedContentModelEntity(argumentsXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (functionName, arguments?)
        /// </para>
        /// </summary>
        public functionCallExprType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (functionName, arguments?)
        /// </para>
        /// </summary>
        public virtual EQName functionName {
            get {
                XElement x = this.GetElement(functionNameXName);
                return ((EQName)(x));
            }
            set {
                this.SetElement(functionNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (functionName, arguments?)
        /// </para>
        /// </summary>
        public virtual exprOrPlaceholderList arguments {
            get {
                XElement x = this.GetElement(argumentsXName);
                return ((exprOrPlaceholderList)(x));
            }
            set {
                this.SetElement(argumentsXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<functionCallExprType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(functionNameXName, typeof(EQName));
            localElementDictionary.Add(argumentsXName, typeof(exprOrPlaceholderList));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (typeName, argExpr)
    /// </para>
    /// </summary>
    public partial class constructorFunctionExprType : global::W3C.XQueryX.exprType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeNameXName = System.Xml.Linq.XName.Get("typeName", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName argExprXName = System.Xml.Linq.XName.Get("argExpr", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("constructorFunctionExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator constructorFunctionExprType(XElement xe) { return XTypedServices.ToXTypedElement<constructorFunctionExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static constructorFunctionExprType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(typeNameXName), new NamedContentModelEntity(argExprXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (typeName, argExpr)
        /// </para>
        /// </summary>
        public constructorFunctionExprType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (typeName, argExpr)
        /// </para>
        /// </summary>
        public virtual EQName typeName {
            get {
                XElement x = this.GetElement(typeNameXName);
                return ((EQName)(x));
            }
            set {
                this.SetElement(typeNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (typeName, argExpr)
        /// </para>
        /// </summary>
        public virtual exprWrapper argExpr {
            get {
                XElement x = this.GetElement(argExprXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(argExprXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<constructorFunctionExprType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(typeNameXName, typeof(EQName));
            localElementDictionary.Add(argExprXName, typeof(exprWrapper));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (expr*)
    /// </para>
    /// </summary>
    public partial class sequenceExprType : global::W3C.XQueryX.exprType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName exprXName = System.Xml.Linq.XName.Get("expr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<expr> exprField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("sequenceExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator sequenceExprType(XElement xe) { return XTypedServices.ToXTypedElement<sequenceExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static sequenceExprType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("expr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("constantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("integerConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("decimalConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("doubleConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("varRef", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("contextItemExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("extensionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("simpleMapExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("functionCallExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("constructorFunctionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("sequenceExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("rangeSequenceExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("operatorExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arithmeticOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("addOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("subtractOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("multiplyOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("divOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("idivOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("modOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryMinusOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryPlusOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConcatenateOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("comparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("valueComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("eqOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("neOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("gtOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("geOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("ltOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("leOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("generalComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("equalOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("notEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("lessThanOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("lessThanOrEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("greaterThanOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("greaterThanOrEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("isOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orderComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeBeforeOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeAfterOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("logicalOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("andOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("setOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unionOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("intersectOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("exceptOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("flworExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("ifThenElseExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("quantifiedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("switchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("typeswitchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("tryCatchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("instanceOfExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("treatExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("castableExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("castExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arrowExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("validateExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("elementConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedElementConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedAttributeConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedDocumentConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedTextConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedCommentConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedNamespaceConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedPIConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unorderedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orderedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("namedFunctionRef", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("inlineFunctionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("dynamicFunctionInvocationExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("mapConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arrayConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryLookup", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("pathExpr", "http://www.w3.org/2005/XQueryX")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (expr*)
        /// </para>
        /// </summary>
        public sequenceExprType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Substitution members: expr, constantExpr, integerConstantExpr, decimalConstantExpr, doubleConstantExpr, stringConstantExpr, varRef, contextItemExpr, extensionExpr, simpleMapExpr, functionCallExpr, constructorFunctionExpr, sequenceExpr, rangeSequenceExpr, operatorExpr, arithmeticOp, addOp, subtractOp, multiplyOp, divOp, idivOp, modOp, unaryMinusOp, unaryPlusOp, stringOp, stringConcatenateOp, comparisonOp, valueComparisonOp, eqOp, neOp, gtOp, geOp, ltOp, leOp, generalComparisonOp, equalOp, notEqualOp, lessThanOp, lessThanOrEqualOp, greaterThanOp, greaterThanOrEqualOp, nodeComparisonOp, isOp, orderComparisonOp, nodeBeforeOp, nodeAfterOp, logicalOp, andOp, orOp, setOp, unionOp, intersectOp, exceptOp, flworExpr, ifThenElseExpr, quantifiedExpr, switchExpr, typeswitchExpr, tryCatchExpr, instanceOfExpr, treatExpr, castableExpr, castExpr, arrowExpr, validateExpr, elementConstructor, computedElementConstructor, computedAttributeConstructor, computedDocumentConstructor, computedTextConstructor, computedCommentConstructor, computedNamespaceConstructor, computedPIConstructor, unorderedExpr, orderedExpr, namedFunctionRef, inlineFunctionExpr, dynamicFunctionInvocationExpr, mapConstructor, arrayConstructor, stringConstructor, unaryLookup, pathExpr
        /// </para>
        /// <para>
        /// Regular expression: (expr*)
        /// </para>
        /// </summary>
        public virtual IList<expr> expr {
            get {
                if ((this.exprField == null)) {
                    this.exprField = new XTypedSubstitutedList<expr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("expr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("constantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("integerConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("decimalConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("doubleConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("varRef", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("contextItemExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("extensionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("simpleMapExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("functionCallExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("constructorFunctionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("sequenceExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("rangeSequenceExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("operatorExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arithmeticOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("addOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("subtractOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("multiplyOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("divOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("idivOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("modOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryMinusOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryPlusOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConcatenateOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("comparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("valueComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("eqOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("neOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("gtOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("geOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("ltOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("leOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("generalComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("equalOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("notEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("lessThanOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("lessThanOrEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("greaterThanOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("greaterThanOrEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("isOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orderComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeBeforeOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeAfterOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("logicalOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("andOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("setOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unionOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("intersectOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("exceptOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("flworExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("ifThenElseExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("quantifiedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("switchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("typeswitchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("tryCatchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("instanceOfExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("treatExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("castableExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("castExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arrowExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("validateExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("elementConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedElementConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedAttributeConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedDocumentConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedTextConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedCommentConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedNamespaceConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedPIConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unorderedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orderedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("namedFunctionRef", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("inlineFunctionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("dynamicFunctionInvocationExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("mapConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arrayConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryLookup", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("pathExpr", "http://www.w3.org/2005/XQueryX"));
                }
                return this.exprField;
            }
            set {
                if ((value == null)) {
                    this.exprField = null;
                }
                else {
                    if ((this.exprField == null)) {
                        this.exprField = XTypedSubstitutedList<expr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("expr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("constantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("integerConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("decimalConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("doubleConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("varRef", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("contextItemExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("extensionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("simpleMapExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("functionCallExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("constructorFunctionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("sequenceExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("rangeSequenceExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("operatorExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arithmeticOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("addOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("subtractOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("multiplyOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("divOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("idivOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("modOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryMinusOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryPlusOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConcatenateOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("comparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("valueComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("eqOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("neOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("gtOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("geOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("ltOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("leOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("generalComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("equalOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("notEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("lessThanOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("lessThanOrEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("greaterThanOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("greaterThanOrEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("isOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orderComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeBeforeOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeAfterOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("logicalOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("andOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("setOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unionOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("intersectOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("exceptOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("flworExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("ifThenElseExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("quantifiedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("switchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("typeswitchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("tryCatchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("instanceOfExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("treatExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("castableExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("castExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arrowExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("validateExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("elementConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedElementConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedAttributeConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedDocumentConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedTextConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedCommentConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedNamespaceConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedPIConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unorderedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orderedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("namedFunctionRef", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("inlineFunctionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("dynamicFunctionInvocationExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("mapConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arrayConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryLookup", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("pathExpr", "http://www.w3.org/2005/XQueryX"));
                    }
                    else {
                        XTypedServices.SetList<expr>(this.exprField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<sequenceExprType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(exprXName, typeof(expr));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (startExpr, endExpr)
    /// </para>
    /// </summary>
    public partial class rangeSequenceExprType : global::W3C.XQueryX.exprType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName startExprXName = System.Xml.Linq.XName.Get("startExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName endExprXName = System.Xml.Linq.XName.Get("endExpr", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("rangeSequenceExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator rangeSequenceExprType(XElement xe) { return XTypedServices.ToXTypedElement<rangeSequenceExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static rangeSequenceExprType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(startExprXName), new NamedContentModelEntity(endExprXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (startExpr, endExpr)
        /// </para>
        /// </summary>
        public rangeSequenceExprType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (startExpr, endExpr)
        /// </para>
        /// </summary>
        public virtual exprWrapper startExpr {
            get {
                XElement x = this.GetElement(startExprXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(startExprXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (startExpr, endExpr)
        /// </para>
        /// </summary>
        public virtual exprWrapper endExpr {
            get {
                XElement x = this.GetElement(endExprXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(endExprXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<rangeSequenceExprType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(startExprXName, typeof(exprWrapper));
            localElementDictionary.Add(endExprXName, typeof(exprWrapper));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class operatorExprType : global::W3C.XQueryX.exprType, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("operatorExpr", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator operatorExprType(XElement xe) { return XTypedServices.ToXTypedElement<operatorExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public operatorExprType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<operatorExprType>(this);
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (operand)
    /// </para>
    /// </summary>
    public partial class unaryOperatorExpr : global::W3C.XQueryX.operatorExprType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName operandXName = System.Xml.Linq.XName.Get("operand", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("unaryOperatorExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator unaryOperatorExpr(XElement xe) { return XTypedServices.ToXTypedElement<unaryOperatorExpr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static unaryOperatorExpr() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(operandXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (operand)
        /// </para>
        /// </summary>
        public unaryOperatorExpr() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (operand)
        /// </para>
        /// </summary>
        public virtual exprWrapper operand {
            get {
                XElement x = this.GetElement(operandXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(operandXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<unaryOperatorExpr>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(operandXName, typeof(exprWrapper));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (firstOperand, secondOperand)
    /// </para>
    /// </summary>
    public partial class binaryOperatorExpr : global::W3C.XQueryX.operatorExprType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName firstOperandXName = System.Xml.Linq.XName.Get("firstOperand", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName secondOperandXName = System.Xml.Linq.XName.Get("secondOperand", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("binaryOperatorExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator binaryOperatorExpr(XElement xe) { return XTypedServices.ToXTypedElement<binaryOperatorExpr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static binaryOperatorExpr() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(firstOperandXName), new NamedContentModelEntity(secondOperandXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (firstOperand, secondOperand)
        /// </para>
        /// </summary>
        public binaryOperatorExpr() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (firstOperand, secondOperand)
        /// </para>
        /// </summary>
        public virtual exprWrapper firstOperand {
            get {
                XElement x = this.GetElement(firstOperandXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(firstOperandXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (firstOperand, secondOperand)
        /// </para>
        /// </summary>
        public virtual exprWrapper secondOperand {
            get {
                XElement x = this.GetElement(secondOperandXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(secondOperandXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<binaryOperatorExpr>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(firstOperandXName, typeof(exprWrapper));
            localElementDictionary.Add(secondOperandXName, typeof(exprWrapper));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (atomicType, optional?)
    /// </para>
    /// </summary>
    public partial class singleTypeType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName atomicTypeXName = System.Xml.Linq.XName.Get("atomicType", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName optionalXName = System.Xml.Linq.XName.Get("optional", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("singleType", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator singleTypeType(XElement xe) { return XTypedServices.ToXTypedElement<singleTypeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static singleTypeType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(atomicTypeXName), new NamedContentModelEntity(optionalXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (atomicType, optional?)
        /// </para>
        /// </summary>
        public singleTypeType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (atomicType, optional?)
        /// </para>
        /// </summary>
        public virtual atomicType atomicType {
            get {
                XElement x = this.GetElement(atomicTypeXName);
                return ((atomicType)(x));
            }
            set {
                this.SetElement(atomicTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (atomicType, optional?)
        /// </para>
        /// </summary>
        public virtual emptyContent optional {
            get {
                XElement x = this.GetElement(optionalXName);
                return ((emptyContent)(x));
            }
            set {
                this.SetElement(optionalXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<singleTypeType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(atomicTypeXName, typeof(atomicType));
            localElementDictionary.Add(optionalXName, typeof(emptyContent));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (itemType)
    /// </para>
    /// </summary>
    public partial class contextItemTypeType : global::W3C.XQueryX.emptyItemTypeContent, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName itemTypeXName = System.Xml.Linq.XName.Get("itemType", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("contextItemType", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator contextItemTypeType(XElement xe) { return XTypedServices.ToXTypedElement<contextItemTypeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static contextItemTypeType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("itemType", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("atomicType", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("contextItemType", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("anyItemType", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("schemaAttributeTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("attributeTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("anyElementTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("schemaElementTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("elementTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("documentTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("piTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("kindTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("textTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("commentTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("namespaceTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("anyKindTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("anyFunctionTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("typedFunctionTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("parenthesizedItemType", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("anyMapTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("typedMapTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("anyArrayTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("typedArrayTest", "http://www.w3.org/2005/XQueryX")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (itemType)
        /// </para>
        /// </summary>
        public contextItemTypeType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Substitution members: itemType, atomicType, contextItemType, anyItemType, schemaAttributeTest, attributeTest, anyElementTest, schemaElementTest, elementTest, documentTest, piTest, kindTest, textTest, commentTest, namespaceTest, anyKindTest, anyFunctionTest, typedFunctionTest, parenthesizedItemType, anyMapTest, typedMapTest, anyArrayTest, typedArrayTest
        /// </para>
        /// <para>
        /// Regular expression: (itemType)
        /// </para>
        /// </summary>
        public virtual itemType itemType {
            get {
                XTypedElement x = XTypedServices.ToSubstitutedXTypedElement(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("itemType", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("atomicType", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("contextItemType", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("anyItemType", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("schemaAttributeTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("attributeTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("anyElementTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("schemaElementTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("elementTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("documentTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("piTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("kindTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("textTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("commentTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("namespaceTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("anyKindTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("anyFunctionTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("typedFunctionTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("parenthesizedItemType", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("anyMapTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("typedMapTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("anyArrayTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("typedArrayTest", "http://www.w3.org/2005/XQueryX"));
                return ((itemType)(x));
            }
            set {
                this.SetElement(itemTypeXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<contextItemTypeType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(itemTypeXName, typeof(itemType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class emptyItemTypeContent : XTypedElement, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("emptyItemTypeContent", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator emptyItemTypeContent(XElement xe) { return XTypedServices.ToXTypedElement<emptyItemTypeContent>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public emptyItemTypeContent() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<emptyItemTypeContent>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class occurrenceIndicator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "?",
                        "*",
                        "+"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private occurrenceIndicator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (voidSequenceType | (itemType, occurrenceIndicator?))
    /// </para>
    /// </summary>
    public partial class sequenceTypeType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName voidSequenceTypeXName = System.Xml.Linq.XName.Get("voidSequenceType", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName itemTypeXName = System.Xml.Linq.XName.Get("itemType", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName occurrenceIndicatorXName = System.Xml.Linq.XName.Get("occurrenceIndicator", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("sequenceType", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator sequenceTypeType(XElement xe) { return XTypedServices.ToXTypedElement<sequenceTypeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static sequenceTypeType() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(voidSequenceTypeXName), new SequenceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("itemType", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("atomicType", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("contextItemType", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("anyItemType", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("schemaAttributeTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("attributeTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("anyElementTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("schemaElementTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("elementTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("documentTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("piTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("kindTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("textTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("commentTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("namespaceTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("anyKindTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("anyFunctionTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("typedFunctionTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("parenthesizedItemType", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("anyMapTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("typedMapTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("anyArrayTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("typedArrayTest", "http://www.w3.org/2005/XQueryX")), new NamedContentModelEntity(occurrenceIndicatorXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (voidSequenceType | (itemType, occurrenceIndicator?))
        /// </para>
        /// </summary>
        public sequenceTypeType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (voidSequenceType | (itemType, occurrenceIndicator?))
        /// </para>
        /// </summary>
        public virtual emptyContent voidSequenceType {
            get {
                XElement x = this.GetElement(voidSequenceTypeXName);
                return ((emptyContent)(x));
            }
            set {
                this.SetElement(voidSequenceTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: itemType, atomicType, contextItemType, anyItemType, schemaAttributeTest, attributeTest, anyElementTest, schemaElementTest, elementTest, documentTest, piTest, kindTest, textTest, commentTest, namespaceTest, anyKindTest, anyFunctionTest, typedFunctionTest, parenthesizedItemType, anyMapTest, typedMapTest, anyArrayTest, typedArrayTest
        /// </para>
        /// <para>
        /// Regular expression: (voidSequenceType | (itemType, occurrenceIndicator?))
        /// </para>
        /// </summary>
        public virtual itemType itemType {
            get {
                XTypedElement x = XTypedServices.ToSubstitutedXTypedElement(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("itemType", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("atomicType", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("contextItemType", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("anyItemType", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("schemaAttributeTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("attributeTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("anyElementTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("schemaElementTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("elementTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("documentTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("piTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("kindTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("textTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("commentTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("namespaceTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("anyKindTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("anyFunctionTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("typedFunctionTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("parenthesizedItemType", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("anyMapTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("typedMapTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("anyArrayTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("typedArrayTest", "http://www.w3.org/2005/XQueryX"));
                return ((itemType)(x));
            }
            set {
                this.SetElement(itemTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (voidSequenceType | (itemType, occurrenceIndicator?))
        /// </para>
        /// </summary>
        public virtual string occurrenceIndicator {
            get {
                XElement x = this.GetElement(occurrenceIndicatorXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(occurrenceIndicatorXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(occurrenceIndicatorXName, value, "occurrenceIndicator", global::W3C.XQueryX.occurrenceIndicator.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<sequenceTypeType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(voidSequenceTypeXName, typeof(emptyContent));
            localElementDictionary.Add(itemTypeXName, typeof(itemType));
            localElementDictionary.Add(occurrenceIndicatorXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (sequenceType)+
    /// </para>
    /// </summary>
    public partial class sequenceTypeUnionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sequenceTypeXName = System.Xml.Linq.XName.Get("sequenceType", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<sequenceType> sequenceTypeField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("sequenceTypeUnion", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator sequenceTypeUnionType(XElement xe) { return XTypedServices.ToXTypedElement<sequenceTypeUnionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static sequenceTypeUnionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(sequenceTypeXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (sequenceType)+
        /// </para>
        /// </summary>
        public sequenceTypeUnionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (sequenceType)+
        /// </para>
        /// </summary>
        public virtual IList<sequenceType> sequenceType {
            get {
                if ((this.sequenceTypeField == null)) {
                    this.sequenceTypeField = new XTypedList<sequenceType>(this, LinqToXsdTypeManager.Instance, sequenceTypeXName);
                }
                return this.sequenceTypeField;
            }
            set {
                if ((value == null)) {
                    this.sequenceTypeField = null;
                }
                else {
                    if ((this.sequenceTypeField == null)) {
                        this.sequenceTypeField = XTypedList<sequenceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, sequenceTypeXName);
                    }
                    else {
                        XTypedServices.SetList<sequenceType>(this.sequenceTypeField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<sequenceTypeUnionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(sequenceTypeXName, typeof(sequenceType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (varName, typeDeclaration?)
    /// </para>
    /// </summary>
    public partial class typedVariableBindingType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName varNameXName = System.Xml.Linq.XName.Get("varName", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeDeclarationXName = System.Xml.Linq.XName.Get("typeDeclaration", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("typedVariableBinding", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator typedVariableBindingType(XElement xe) { return XTypedServices.ToXTypedElement<typedVariableBindingType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static typedVariableBindingType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(varNameXName), new NamedContentModelEntity(typeDeclarationXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (varName, typeDeclaration?)
        /// </para>
        /// </summary>
        public typedVariableBindingType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (varName, typeDeclaration?)
        /// </para>
        /// </summary>
        public virtual EQName varName {
            get {
                XElement x = this.GetElement(varNameXName);
                return ((EQName)(x));
            }
            set {
                this.SetElement(varNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (varName, typeDeclaration?)
        /// </para>
        /// </summary>
        public virtual typeDeclaration typeDeclaration {
            get {
                XElement x = this.GetElement(typeDeclarationXName);
                return ((typeDeclaration)(x));
            }
            set {
                this.SetElement(typeDeclarationXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<typedVariableBindingType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(varNameXName, typeof(EQName));
            localElementDictionary.Add(typeDeclarationXName, typeof(typeDeclaration));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (typedVariableBinding, allowingEmpty?, positionalVariableBinding?, forLetClauseItemExtensions*, forExpr)
    /// </para>
    /// </summary>
    public partial class forClauseItemType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typedVariableBindingXName = System.Xml.Linq.XName.Get("typedVariableBinding", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName allowingEmptyXName = System.Xml.Linq.XName.Get("allowingEmpty", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName positionalVariableBindingXName = System.Xml.Linq.XName.Get("positionalVariableBinding", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName forLetClauseItemExtensionsXName = System.Xml.Linq.XName.Get("forLetClauseItemExtensions", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<forLetClauseItemExtensions> forLetClauseItemExtensionsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName forExprXName = System.Xml.Linq.XName.Get("forExpr", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("forClauseItem", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator forClauseItemType(XElement xe) { return XTypedServices.ToXTypedElement<forClauseItemType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static forClauseItemType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(typedVariableBindingXName), new NamedContentModelEntity(allowingEmptyXName), new NamedContentModelEntity(positionalVariableBindingXName), new NamedContentModelEntity(forLetClauseItemExtensionsXName), new NamedContentModelEntity(forExprXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (typedVariableBinding, allowingEmpty?, positionalVariableBinding?, forLetClauseItemExtensions*, forExpr)
        /// </para>
        /// </summary>
        public forClauseItemType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (typedVariableBinding, allowingEmpty?, positionalVariableBinding?, forLetClauseItemExtensions*, forExpr)
        /// </para>
        /// </summary>
        public virtual typedVariableBinding typedVariableBinding {
            get {
                XElement x = this.GetElement(typedVariableBindingXName);
                return ((typedVariableBinding)(x));
            }
            set {
                this.SetElement(typedVariableBindingXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (typedVariableBinding, allowingEmpty?, positionalVariableBinding?, forLetClauseItemExtensions*, forExpr)
        /// </para>
        /// </summary>
        public virtual emptyContent allowingEmpty {
            get {
                XElement x = this.GetElement(allowingEmptyXName);
                return ((emptyContent)(x));
            }
            set {
                this.SetElement(allowingEmptyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (typedVariableBinding, allowingEmpty?, positionalVariableBinding?, forLetClauseItemExtensions*, forExpr)
        /// </para>
        /// </summary>
        public virtual positionalVariableBinding positionalVariableBinding {
            get {
                XElement x = this.GetElement(positionalVariableBindingXName);
                return ((positionalVariableBinding)(x));
            }
            set {
                this.SetElement(positionalVariableBindingXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (typedVariableBinding, allowingEmpty?, positionalVariableBinding?, forLetClauseItemExtensions*, forExpr)
        /// </para>
        /// </summary>
        public virtual IList<forLetClauseItemExtensions> forLetClauseItemExtensions {
            get {
                if ((this.forLetClauseItemExtensionsField == null)) {
                    this.forLetClauseItemExtensionsField = new XTypedList<forLetClauseItemExtensions>(this, LinqToXsdTypeManager.Instance, forLetClauseItemExtensionsXName);
                }
                return this.forLetClauseItemExtensionsField;
            }
            set {
                if ((value == null)) {
                    this.forLetClauseItemExtensionsField = null;
                }
                else {
                    if ((this.forLetClauseItemExtensionsField == null)) {
                        this.forLetClauseItemExtensionsField = XTypedList<forLetClauseItemExtensions>.Initialize(this, LinqToXsdTypeManager.Instance, value, forLetClauseItemExtensionsXName);
                    }
                    else {
                        XTypedServices.SetList<forLetClauseItemExtensions>(this.forLetClauseItemExtensionsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (typedVariableBinding, allowingEmpty?, positionalVariableBinding?, forLetClauseItemExtensions*, forExpr)
        /// </para>
        /// </summary>
        public virtual exprWrapper forExpr {
            get {
                XElement x = this.GetElement(forExprXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(forExprXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<forClauseItemType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(typedVariableBindingXName, typeof(typedVariableBinding));
            localElementDictionary.Add(allowingEmptyXName, typeof(emptyContent));
            localElementDictionary.Add(positionalVariableBindingXName, typeof(positionalVariableBinding));
            localElementDictionary.Add(forLetClauseItemExtensionsXName, typeof(forLetClauseItemExtensions));
            localElementDictionary.Add(forExprXName, typeof(exprWrapper));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (forClauseItem+)
    /// </para>
    /// </summary>
    public partial class forClauseType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName forClauseItemXName = System.Xml.Linq.XName.Get("forClauseItem", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<forClauseItem> forClauseItemField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("forClause", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator forClauseType(XElement xe) { return XTypedServices.ToXTypedElement<forClauseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static forClauseType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(forClauseItemXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (forClauseItem+)
        /// </para>
        /// </summary>
        public forClauseType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (forClauseItem+)
        /// </para>
        /// </summary>
        public virtual IList<forClauseItem> forClauseItem {
            get {
                if ((this.forClauseItemField == null)) {
                    this.forClauseItemField = new XTypedList<forClauseItem>(this, LinqToXsdTypeManager.Instance, forClauseItemXName);
                }
                return this.forClauseItemField;
            }
            set {
                if ((value == null)) {
                    this.forClauseItemField = null;
                }
                else {
                    if ((this.forClauseItemField == null)) {
                        this.forClauseItemField = XTypedList<forClauseItem>.Initialize(this, LinqToXsdTypeManager.Instance, value, forClauseItemXName);
                    }
                    else {
                        XTypedServices.SetList<forClauseItem>(this.forClauseItemField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<forClauseType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(forClauseItemXName, typeof(forClauseItem));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (((typedVariableBinding, forLetClauseItemExtensions*)|forLetClauseItemExtensions*), letExpr)
    /// </para>
    /// </summary>
    public partial class letClauseItemType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typedVariableBindingXName = System.Xml.Linq.XName.Get("typedVariableBinding", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName forLetClauseItemExtensionsXName = System.Xml.Linq.XName.Get("forLetClauseItemExtensions", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<forLetClauseItemExtensions> forLetClauseItemExtensionsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName letExprXName = System.Xml.Linq.XName.Get("letExpr", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("letClauseItem", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator letClauseItemType(XElement xe) { return XTypedServices.ToXTypedElement<letClauseItemType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static letClauseItemType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(typedVariableBindingXName), new NamedContentModelEntity(forLetClauseItemExtensionsXName)), new NamedContentModelEntity(forLetClauseItemExtensionsXName)), new NamedContentModelEntity(letExprXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (((typedVariableBinding, forLetClauseItemExtensions*)|forLetClauseItemExtensions*), letExpr)
        /// </para>
        /// </summary>
        public letClauseItemType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (((typedVariableBinding, forLetClauseItemExtensions*)|forLetClauseItemExtensions*), letExpr)
        /// </para>
        /// </summary>
        public virtual typedVariableBinding typedVariableBinding {
            get {
                XElement x = this.GetElement(typedVariableBindingXName);
                return ((typedVariableBinding)(x));
            }
            set {
                this.SetElement(typedVariableBindingXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (((typedVariableBinding, forLetClauseItemExtensions*)|forLetClauseItemExtensions*), letExpr)
        /// </para>
        /// </summary>
        public virtual IList<forLetClauseItemExtensions> forLetClauseItemExtensions {
            get {
                if ((this.forLetClauseItemExtensionsField == null)) {
                    this.forLetClauseItemExtensionsField = new XTypedList<forLetClauseItemExtensions>(this, LinqToXsdTypeManager.Instance, forLetClauseItemExtensionsXName);
                }
                return this.forLetClauseItemExtensionsField;
            }
            set {
                if ((value == null)) {
                    this.forLetClauseItemExtensionsField = null;
                }
                else {
                    if ((this.forLetClauseItemExtensionsField == null)) {
                        this.forLetClauseItemExtensionsField = XTypedList<forLetClauseItemExtensions>.Initialize(this, LinqToXsdTypeManager.Instance, value, forLetClauseItemExtensionsXName);
                    }
                    else {
                        XTypedServices.SetList<forLetClauseItemExtensions>(this.forLetClauseItemExtensionsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (((typedVariableBinding, forLetClauseItemExtensions*)|forLetClauseItemExtensions*), letExpr)
        /// </para>
        /// </summary>
        public virtual exprWrapper letExpr {
            get {
                XElement x = this.GetElement(letExprXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(letExprXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<letClauseItemType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(typedVariableBindingXName, typeof(typedVariableBinding));
            localElementDictionary.Add(forLetClauseItemExtensionsXName, typeof(forLetClauseItemExtensions));
            localElementDictionary.Add(letExprXName, typeof(exprWrapper));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (letClauseItem+)
    /// </para>
    /// </summary>
    public partial class letClauseType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName letClauseItemXName = System.Xml.Linq.XName.Get("letClauseItem", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<letClauseItem> letClauseItemField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("letClause", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator letClauseType(XElement xe) { return XTypedServices.ToXTypedElement<letClauseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static letClauseType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(letClauseItemXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (letClauseItem+)
        /// </para>
        /// </summary>
        public letClauseType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (letClauseItem+)
        /// </para>
        /// </summary>
        public virtual IList<letClauseItem> letClauseItem {
            get {
                if ((this.letClauseItemField == null)) {
                    this.letClauseItemField = new XTypedList<letClauseItem>(this, LinqToXsdTypeManager.Instance, letClauseItemXName);
                }
                return this.letClauseItemField;
            }
            set {
                if ((value == null)) {
                    this.letClauseItemField = null;
                }
                else {
                    if ((this.letClauseItemField == null)) {
                        this.letClauseItemField = XTypedList<letClauseItem>.Initialize(this, LinqToXsdTypeManager.Instance, value, letClauseItemXName);
                    }
                    else {
                        XTypedServices.SetList<letClauseItem>(this.letClauseItemField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<letClauseType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(letClauseItemXName, typeof(letClauseItem));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (tumblingWindowClause | slidingWindowClause)
    /// </para>
    /// </summary>
    public partial class windowClauseType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tumblingWindowClauseXName = System.Xml.Linq.XName.Get("tumblingWindowClause", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName slidingWindowClauseXName = System.Xml.Linq.XName.Get("slidingWindowClause", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("windowClause", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator windowClauseType(XElement xe) { return XTypedServices.ToXTypedElement<windowClauseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static windowClauseType() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(tumblingWindowClauseXName), new NamedContentModelEntity(slidingWindowClauseXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (tumblingWindowClause | slidingWindowClause)
        /// </para>
        /// </summary>
        public windowClauseType() {
        }
        
        public windowClauseType(tumblingWindowClause tumblingWindowClause) {
            this.tumblingWindowClause = tumblingWindowClause;
        }
        
        public windowClauseType(slidingWindowClause slidingWindowClause) {
            this.slidingWindowClause = slidingWindowClause;
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (tumblingWindowClause | slidingWindowClause)
        /// </para>
        /// </summary>
        public virtual tumblingWindowClause tumblingWindowClause {
            get {
                XElement x = this.GetElement(tumblingWindowClauseXName);
                return ((tumblingWindowClause)(x));
            }
            set {
                this.SetElement(tumblingWindowClauseXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (tumblingWindowClause | slidingWindowClause)
        /// </para>
        /// </summary>
        public virtual slidingWindowClause slidingWindowClause {
            get {
                XElement x = this.GetElement(slidingWindowClauseXName);
                return ((slidingWindowClause)(x));
            }
            set {
                this.SetElement(slidingWindowClauseXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<windowClauseType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(tumblingWindowClauseXName, typeof(tumblingWindowClause));
            localElementDictionary.Add(slidingWindowClauseXName, typeof(slidingWindowClause));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (typedVariableBinding, bindingSequence, windowStartCondition, windowEndCondition?)
    /// </para>
    /// </summary>
    public partial class tumblingWindowClauseType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typedVariableBindingXName = System.Xml.Linq.XName.Get("typedVariableBinding", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bindingSequenceXName = System.Xml.Linq.XName.Get("bindingSequence", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName windowStartConditionXName = System.Xml.Linq.XName.Get("windowStartCondition", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName windowEndConditionXName = System.Xml.Linq.XName.Get("windowEndCondition", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("tumblingWindowClause", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator tumblingWindowClauseType(XElement xe) { return XTypedServices.ToXTypedElement<tumblingWindowClauseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static tumblingWindowClauseType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(typedVariableBindingXName), new NamedContentModelEntity(bindingSequenceXName), new NamedContentModelEntity(windowStartConditionXName), new NamedContentModelEntity(windowEndConditionXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (typedVariableBinding, bindingSequence, windowStartCondition, windowEndCondition?)
        /// </para>
        /// </summary>
        public tumblingWindowClauseType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (typedVariableBinding, bindingSequence, windowStartCondition, windowEndCondition?)
        /// </para>
        /// </summary>
        public virtual typedVariableBinding typedVariableBinding {
            get {
                XElement x = this.GetElement(typedVariableBindingXName);
                return ((typedVariableBinding)(x));
            }
            set {
                this.SetElement(typedVariableBindingXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (typedVariableBinding, bindingSequence, windowStartCondition, windowEndCondition?)
        /// </para>
        /// </summary>
        public virtual exprWrapper bindingSequence {
            get {
                XElement x = this.GetElement(bindingSequenceXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(bindingSequenceXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (typedVariableBinding, bindingSequence, windowStartCondition, windowEndCondition?)
        /// </para>
        /// </summary>
        public virtual windowStartCondition windowStartCondition {
            get {
                XElement x = this.GetElement(windowStartConditionXName);
                return ((windowStartCondition)(x));
            }
            set {
                this.SetElement(windowStartConditionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (typedVariableBinding, bindingSequence, windowStartCondition, windowEndCondition?)
        /// </para>
        /// </summary>
        public virtual windowEndCondition windowEndCondition {
            get {
                XElement x = this.GetElement(windowEndConditionXName);
                return ((windowEndCondition)(x));
            }
            set {
                this.SetElement(windowEndConditionXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<tumblingWindowClauseType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(typedVariableBindingXName, typeof(typedVariableBinding));
            localElementDictionary.Add(bindingSequenceXName, typeof(exprWrapper));
            localElementDictionary.Add(windowStartConditionXName, typeof(windowStartCondition));
            localElementDictionary.Add(windowEndConditionXName, typeof(windowEndCondition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (typedVariableBinding, bindingSequence, windowStartCondition, windowEndCondition)
    /// </para>
    /// </summary>
    public partial class slidingWindowClauseType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typedVariableBindingXName = System.Xml.Linq.XName.Get("typedVariableBinding", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bindingSequenceXName = System.Xml.Linq.XName.Get("bindingSequence", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName windowStartConditionXName = System.Xml.Linq.XName.Get("windowStartCondition", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName windowEndConditionXName = System.Xml.Linq.XName.Get("windowEndCondition", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("slidingWindowClause", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator slidingWindowClauseType(XElement xe) { return XTypedServices.ToXTypedElement<slidingWindowClauseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static slidingWindowClauseType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(typedVariableBindingXName), new NamedContentModelEntity(bindingSequenceXName), new NamedContentModelEntity(windowStartConditionXName), new NamedContentModelEntity(windowEndConditionXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (typedVariableBinding, bindingSequence, windowStartCondition, windowEndCondition)
        /// </para>
        /// </summary>
        public slidingWindowClauseType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (typedVariableBinding, bindingSequence, windowStartCondition, windowEndCondition)
        /// </para>
        /// </summary>
        public virtual typedVariableBinding typedVariableBinding {
            get {
                XElement x = this.GetElement(typedVariableBindingXName);
                return ((typedVariableBinding)(x));
            }
            set {
                this.SetElement(typedVariableBindingXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (typedVariableBinding, bindingSequence, windowStartCondition, windowEndCondition)
        /// </para>
        /// </summary>
        public virtual exprWrapper bindingSequence {
            get {
                XElement x = this.GetElement(bindingSequenceXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(bindingSequenceXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (typedVariableBinding, bindingSequence, windowStartCondition, windowEndCondition)
        /// </para>
        /// </summary>
        public virtual windowStartCondition windowStartCondition {
            get {
                XElement x = this.GetElement(windowStartConditionXName);
                return ((windowStartCondition)(x));
            }
            set {
                this.SetElement(windowStartConditionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (typedVariableBinding, bindingSequence, windowStartCondition, windowEndCondition)
        /// </para>
        /// </summary>
        public virtual windowEndCondition windowEndCondition {
            get {
                XElement x = this.GetElement(windowEndConditionXName);
                return ((windowEndCondition)(x));
            }
            set {
                this.SetElement(windowEndConditionXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<slidingWindowClauseType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(typedVariableBindingXName, typeof(typedVariableBinding));
            localElementDictionary.Add(bindingSequenceXName, typeof(exprWrapper));
            localElementDictionary.Add(windowStartConditionXName, typeof(windowStartCondition));
            localElementDictionary.Add(windowEndConditionXName, typeof(windowEndCondition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (windowVars?, winStartExpr)
    /// </para>
    /// </summary>
    public partial class windowStartConditionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName windowVarsXName = System.Xml.Linq.XName.Get("windowVars", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName winStartExprXName = System.Xml.Linq.XName.Get("winStartExpr", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("windowStartCondition", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator windowStartConditionType(XElement xe) { return XTypedServices.ToXTypedElement<windowStartConditionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static windowStartConditionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(windowVarsXName), new NamedContentModelEntity(winStartExprXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (windowVars?, winStartExpr)
        /// </para>
        /// </summary>
        public windowStartConditionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (windowVars?, winStartExpr)
        /// </para>
        /// </summary>
        public virtual windowVars windowVars {
            get {
                XElement x = this.GetElement(windowVarsXName);
                return ((windowVars)(x));
            }
            set {
                this.SetElement(windowVarsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (windowVars?, winStartExpr)
        /// </para>
        /// </summary>
        public virtual exprWrapper winStartExpr {
            get {
                XElement x = this.GetElement(winStartExprXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(winStartExprXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<windowStartConditionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(windowVarsXName, typeof(windowVars));
            localElementDictionary.Add(winStartExprXName, typeof(exprWrapper));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (windowVars?, winEndExpr)
    /// </para>
    /// </summary>
    public partial class windowEndConditionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName windowVarsXName = System.Xml.Linq.XName.Get("windowVars", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName winEndExprXName = System.Xml.Linq.XName.Get("winEndExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName onlyEndXName = System.Xml.Linq.XName.Get("onlyEnd", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool onlyEndDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("windowEndCondition", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator windowEndConditionType(XElement xe) { return XTypedServices.ToXTypedElement<windowEndConditionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static windowEndConditionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(windowVarsXName), new NamedContentModelEntity(winEndExprXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (windowVars?, winEndExpr)
        /// </para>
        /// </summary>
        public windowEndConditionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (windowVars?, winEndExpr)
        /// </para>
        /// </summary>
        public virtual windowVars windowVars {
            get {
                XElement x = this.GetElement(windowVarsXName);
                return ((windowVars)(x));
            }
            set {
                this.SetElement(windowVarsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (windowVars?, winEndExpr)
        /// </para>
        /// </summary>
        public virtual exprWrapper winEndExpr {
            get {
                XElement x = this.GetElement(winEndExprXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(winEndExprXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool onlyEnd {
            get {
                XAttribute x = this.Attribute(onlyEndXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, onlyEndDefaultValue);
            }
            set {
                this.SetAttribute(onlyEndXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<windowEndConditionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(windowVarsXName, typeof(windowVars));
            localElementDictionary.Add(winEndExprXName, typeof(exprWrapper));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (currentItem?, positionalVariableBinding?, previousItem?, nextItem?)
    /// </para>
    /// </summary>
    public partial class windowVarsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName currentItemXName = System.Xml.Linq.XName.Get("currentItem", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName positionalVariableBindingXName = System.Xml.Linq.XName.Get("positionalVariableBinding", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName previousItemXName = System.Xml.Linq.XName.Get("previousItem", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nextItemXName = System.Xml.Linq.XName.Get("nextItem", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("windowVars", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator windowVarsType(XElement xe) { return XTypedServices.ToXTypedElement<windowVarsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static windowVarsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(currentItemXName), new NamedContentModelEntity(positionalVariableBindingXName), new NamedContentModelEntity(previousItemXName), new NamedContentModelEntity(nextItemXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (currentItem?, positionalVariableBinding?, previousItem?, nextItem?)
        /// </para>
        /// </summary>
        public windowVarsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (currentItem?, positionalVariableBinding?, previousItem?, nextItem?)
        /// </para>
        /// </summary>
        public virtual EQName currentItem {
            get {
                XElement x = this.GetElement(currentItemXName);
                return ((EQName)(x));
            }
            set {
                this.SetElement(currentItemXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (currentItem?, positionalVariableBinding?, previousItem?, nextItem?)
        /// </para>
        /// </summary>
        public virtual positionalVariableBinding positionalVariableBinding {
            get {
                XElement x = this.GetElement(positionalVariableBindingXName);
                return ((positionalVariableBinding)(x));
            }
            set {
                this.SetElement(positionalVariableBindingXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (currentItem?, positionalVariableBinding?, previousItem?, nextItem?)
        /// </para>
        /// </summary>
        public virtual EQName previousItem {
            get {
                XElement x = this.GetElement(previousItemXName);
                return ((EQName)(x));
            }
            set {
                this.SetElement(previousItemXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (currentItem?, positionalVariableBinding?, previousItem?, nextItem?)
        /// </para>
        /// </summary>
        public virtual EQName nextItem {
            get {
                XElement x = this.GetElement(nextItemXName);
                return ((EQName)(x));
            }
            set {
                this.SetElement(nextItemXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<windowVarsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(currentItemXName, typeof(EQName));
            localElementDictionary.Add(positionalVariableBindingXName, typeof(positionalVariableBinding));
            localElementDictionary.Add(previousItemXName, typeof(EQName));
            localElementDictionary.Add(nextItemXName, typeof(EQName));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (varRef)
    /// </para>
    /// </summary>
    public partial class countClauseType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName varRefXName = System.Xml.Linq.XName.Get("varRef", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("countClause", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator countClauseType(XElement xe) { return XTypedServices.ToXTypedElement<countClauseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static countClauseType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(varRefXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (varRef)
        /// </para>
        /// </summary>
        public countClauseType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (varRef)
        /// </para>
        /// </summary>
        public virtual varRef varRef {
            get {
                XElement x = this.GetElement(varRefXName);
                return ((varRef)(x));
            }
            set {
                this.SetElement(varRefXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<countClauseType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(varRefXName, typeof(varRef));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (groupingSpec)+
    /// </para>
    /// </summary>
    public partial class groupByClauseType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName groupingSpecXName = System.Xml.Linq.XName.Get("groupingSpec", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<groupingSpec> groupingSpecField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("groupByClause", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator groupByClauseType(XElement xe) { return XTypedServices.ToXTypedElement<groupByClauseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static groupByClauseType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(groupingSpecXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (groupingSpec)+
        /// </para>
        /// </summary>
        public groupByClauseType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (groupingSpec)+
        /// </para>
        /// </summary>
        public virtual IList<groupingSpec> groupingSpec {
            get {
                if ((this.groupingSpecField == null)) {
                    this.groupingSpecField = new XTypedList<groupingSpec>(this, LinqToXsdTypeManager.Instance, groupingSpecXName);
                }
                return this.groupingSpecField;
            }
            set {
                if ((value == null)) {
                    this.groupingSpecField = null;
                }
                else {
                    if ((this.groupingSpecField == null)) {
                        this.groupingSpecField = XTypedList<groupingSpec>.Initialize(this, LinqToXsdTypeManager.Instance, value, groupingSpecXName);
                    }
                    else {
                        XTypedServices.SetList<groupingSpec>(this.groupingSpecField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<groupByClauseType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(groupingSpecXName, typeof(groupingSpec));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (varName, groupVarInitialize?, collation?)
    /// </para>
    /// </summary>
    public partial class groupingSpecType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName varNameXName = System.Xml.Linq.XName.Get("varName", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName groupVarInitializeXName = System.Xml.Linq.XName.Get("groupVarInitialize", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName collationXName = System.Xml.Linq.XName.Get("collation", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("groupingSpec", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator groupingSpecType(XElement xe) { return XTypedServices.ToXTypedElement<groupingSpecType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static groupingSpecType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(varNameXName), new NamedContentModelEntity(groupVarInitializeXName), new NamedContentModelEntity(collationXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (varName, groupVarInitialize?, collation?)
        /// </para>
        /// </summary>
        public groupingSpecType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (varName, groupVarInitialize?, collation?)
        /// </para>
        /// </summary>
        public virtual EQName varName {
            get {
                XElement x = this.GetElement(varNameXName);
                return ((EQName)(x));
            }
            set {
                this.SetElement(varNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (varName, groupVarInitialize?, collation?)
        /// </para>
        /// </summary>
        public virtual groupVarInitializeLocalType groupVarInitialize {
            get {
                XElement x = this.GetElement(groupVarInitializeXName);
                return ((groupVarInitializeLocalType)(x));
            }
            set {
                this.SetElement(groupVarInitializeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (varName, groupVarInitialize?, collation?)
        /// </para>
        /// </summary>
        public virtual string collation {
            get {
                XElement x = this.GetElement(collationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(collationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<groupingSpecType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(varNameXName, typeof(EQName));
            localElementDictionary.Add(groupVarInitializeXName, typeof(groupVarInitializeLocalType));
            localElementDictionary.Add(collationXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (typeDeclaration?, varValue)
        /// </para>
        /// </summary>
        public partial class groupVarInitializeLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName typeDeclarationXName = System.Xml.Linq.XName.Get("typeDeclaration", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName varValueXName = System.Xml.Linq.XName.Get("varValue", "http://www.w3.org/2005/XQueryX");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("groupVarInitialize", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator groupVarInitializeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<groupVarInitializeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static groupVarInitializeLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(typeDeclarationXName), new NamedContentModelEntity(varValueXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (typeDeclaration?, varValue)
            /// </para>
            /// </summary>
            public groupVarInitializeLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (typeDeclaration?, varValue)
            /// </para>
            /// </summary>
            public virtual typeDeclaration typeDeclaration {
                get {
                    XElement x = this.GetElement(typeDeclarationXName);
                    return ((typeDeclaration)(x));
                }
                set {
                    this.SetElement(typeDeclarationXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (typeDeclaration?, varValue)
            /// </para>
            /// </summary>
            public virtual exprWrapper varValue {
                get {
                    XElement x = this.GetElement(varValueXName);
                    return ((exprWrapper)(x));
                }
                set {
                    this.SetElement(varValueXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<groupVarInitializeLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(typeDeclarationXName, typeof(typeDeclaration));
                localElementDictionary.Add(varValueXName, typeof(exprWrapper));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    public sealed class emptyOrderingMode {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "empty greatest",
                        "empty least"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private emptyOrderingMode() {
        }
    }
    
    public enum orderingKind {
        
        ascending,
        
        descending,
    }
    
    public sealed class orderingKindValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "ascending",
                        "descending"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private orderingKindValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (orderingKind?, emptyOrderingMode?, collation?)
    /// </para>
    /// </summary>
    public partial class orderModifierType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName orderingKindXName = System.Xml.Linq.XName.Get("orderingKind", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emptyOrderingModeXName = System.Xml.Linq.XName.Get("emptyOrderingMode", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName collationXName = System.Xml.Linq.XName.Get("collation", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("orderModifier", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator orderModifierType(XElement xe) { return XTypedServices.ToXTypedElement<orderModifierType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static orderModifierType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(orderingKindXName), new NamedContentModelEntity(emptyOrderingModeXName), new NamedContentModelEntity(collationXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (orderingKind?, emptyOrderingMode?, collation?)
        /// </para>
        /// </summary>
        public orderModifierType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (orderingKind?, emptyOrderingMode?, collation?)
        /// </para>
        /// </summary>
        public virtual W3C.XQueryX.orderingKind? orderingKind {
            get {
                XElement x = this.GetElement(orderingKindXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XQueryX.orderingKind)(Enum.Parse(typeof(W3C.XQueryX.orderingKind), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                if (value == null) {
                    this.SetElement(orderingKindXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(orderingKindXName, value.ToString(), "orderingKind", global::W3C.XQueryX.orderingKindValidator.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (orderingKind?, emptyOrderingMode?, collation?)
        /// </para>
        /// </summary>
        public virtual string emptyOrderingMode {
            get {
                XElement x = this.GetElement(emptyOrderingModeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(emptyOrderingModeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(emptyOrderingModeXName, value, "emptyOrderingMode", global::W3C.XQueryX.emptyOrderingMode.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (orderingKind?, emptyOrderingMode?, collation?)
        /// </para>
        /// </summary>
        public virtual string collation {
            get {
                XElement x = this.GetElement(collationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(collationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<orderModifierType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(orderingKindXName, typeof(string));
            localElementDictionary.Add(emptyOrderingModeXName, typeof(string));
            localElementDictionary.Add(collationXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (orderByExpr, orderModifier?)
    /// </para>
    /// </summary>
    public partial class orderBySpecType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName orderByExprXName = System.Xml.Linq.XName.Get("orderByExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName orderModifierXName = System.Xml.Linq.XName.Get("orderModifier", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("orderBySpec", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator orderBySpecType(XElement xe) { return XTypedServices.ToXTypedElement<orderBySpecType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static orderBySpecType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(orderByExprXName), new NamedContentModelEntity(orderModifierXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (orderByExpr, orderModifier?)
        /// </para>
        /// </summary>
        public orderBySpecType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (orderByExpr, orderModifier?)
        /// </para>
        /// </summary>
        public virtual exprWrapper orderByExpr {
            get {
                XElement x = this.GetElement(orderByExprXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(orderByExprXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (orderByExpr, orderModifier?)
        /// </para>
        /// </summary>
        public virtual orderModifier orderModifier {
            get {
                XElement x = this.GetElement(orderModifierXName);
                return ((orderModifier)(x));
            }
            set {
                this.SetElement(orderModifierXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<orderBySpecType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(orderByExprXName, typeof(exprWrapper));
            localElementDictionary.Add(orderModifierXName, typeof(orderModifier));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (stable?, orderBySpec+)
    /// </para>
    /// </summary>
    public partial class orderByClauseType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stableXName = System.Xml.Linq.XName.Get("stable", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName orderBySpecXName = System.Xml.Linq.XName.Get("orderBySpec", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<orderBySpec> orderBySpecField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("orderByClause", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator orderByClauseType(XElement xe) { return XTypedServices.ToXTypedElement<orderByClauseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static orderByClauseType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(stableXName), new NamedContentModelEntity(orderBySpecXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (stable?, orderBySpec+)
        /// </para>
        /// </summary>
        public orderByClauseType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (stable?, orderBySpec+)
        /// </para>
        /// </summary>
        public virtual emptyContent stable {
            get {
                XElement x = this.GetElement(stableXName);
                return ((emptyContent)(x));
            }
            set {
                this.SetElement(stableXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (stable?, orderBySpec+)
        /// </para>
        /// </summary>
        public virtual IList<orderBySpec> orderBySpec {
            get {
                if ((this.orderBySpecField == null)) {
                    this.orderBySpecField = new XTypedList<orderBySpec>(this, LinqToXsdTypeManager.Instance, orderBySpecXName);
                }
                return this.orderBySpecField;
            }
            set {
                if ((value == null)) {
                    this.orderBySpecField = null;
                }
                else {
                    if ((this.orderBySpecField == null)) {
                        this.orderBySpecField = XTypedList<orderBySpec>.Initialize(this, LinqToXsdTypeManager.Instance, value, orderBySpecXName);
                    }
                    else {
                        XTypedServices.SetList<orderBySpec>(this.orderBySpecField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<orderByClauseType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(stableXName, typeof(emptyContent));
            localElementDictionary.Add(orderBySpecXName, typeof(orderBySpec));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((forClause | letClause | windowClause), (forClause | letClause | windowClause | countClause | whereClause | groupByClause | orderByClause)*, returnClause)
    /// </para>
    /// </summary>
    public partial class flworExprType : global::W3C.XQueryX.exprType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName forClauseXName = System.Xml.Linq.XName.Get("forClause", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<forClause> forClauseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName letClauseXName = System.Xml.Linq.XName.Get("letClause", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<letClause> letClauseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName windowClauseXName = System.Xml.Linq.XName.Get("windowClause", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<windowClause> windowClauseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName countClauseXName = System.Xml.Linq.XName.Get("countClause", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<countClause> countClauseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName whereClauseXName = System.Xml.Linq.XName.Get("whereClause", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<whereClause> whereClauseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName groupByClauseXName = System.Xml.Linq.XName.Get("groupByClause", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<groupByClause> groupByClauseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName orderByClauseXName = System.Xml.Linq.XName.Get("orderByClause", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<orderByClause> orderByClauseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName returnClauseXName = System.Xml.Linq.XName.Get("returnClause", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("flworExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator flworExprType(XElement xe) { return XTypedServices.ToXTypedElement<flworExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static flworExprType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(forClauseXName), new NamedContentModelEntity(letClauseXName), new NamedContentModelEntity(windowClauseXName)), new ChoiceContentModelEntity(new NamedContentModelEntity(forClauseXName), new NamedContentModelEntity(letClauseXName), new NamedContentModelEntity(windowClauseXName), new NamedContentModelEntity(countClauseXName), new NamedContentModelEntity(whereClauseXName), new NamedContentModelEntity(groupByClauseXName), new NamedContentModelEntity(orderByClauseXName)), new NamedContentModelEntity(returnClauseXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((forClause | letClause | windowClause), (forClause | letClause | windowClause | countClause | whereClause | groupByClause | orderByClause)*, returnClause)
        /// </para>
        /// </summary>
        public flworExprType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((forClause | letClause | windowClause), (forClause | letClause | windowClause | countClause | whereClause | groupByClause | orderByClause)*, returnClause)
        /// </para>
        /// </summary>
        public virtual IList<forClause> forClause {
            get {
                if ((this.forClauseField == null)) {
                    this.forClauseField = new XTypedList<forClause>(this, LinqToXsdTypeManager.Instance, forClauseXName);
                }
                return this.forClauseField;
            }
            set {
                if ((value == null)) {
                    this.forClauseField = null;
                }
                else {
                    if ((this.forClauseField == null)) {
                        this.forClauseField = XTypedList<forClause>.Initialize(this, LinqToXsdTypeManager.Instance, value, forClauseXName);
                    }
                    else {
                        XTypedServices.SetList<forClause>(this.forClauseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((forClause | letClause | windowClause), (forClause | letClause | windowClause | countClause | whereClause | groupByClause | orderByClause)*, returnClause)
        /// </para>
        /// </summary>
        public virtual IList<letClause> letClause {
            get {
                if ((this.letClauseField == null)) {
                    this.letClauseField = new XTypedList<letClause>(this, LinqToXsdTypeManager.Instance, letClauseXName);
                }
                return this.letClauseField;
            }
            set {
                if ((value == null)) {
                    this.letClauseField = null;
                }
                else {
                    if ((this.letClauseField == null)) {
                        this.letClauseField = XTypedList<letClause>.Initialize(this, LinqToXsdTypeManager.Instance, value, letClauseXName);
                    }
                    else {
                        XTypedServices.SetList<letClause>(this.letClauseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((forClause | letClause | windowClause), (forClause | letClause | windowClause | countClause | whereClause | groupByClause | orderByClause)*, returnClause)
        /// </para>
        /// </summary>
        public virtual IList<windowClause> windowClause {
            get {
                if ((this.windowClauseField == null)) {
                    this.windowClauseField = new XTypedList<windowClause>(this, LinqToXsdTypeManager.Instance, windowClauseXName);
                }
                return this.windowClauseField;
            }
            set {
                if ((value == null)) {
                    this.windowClauseField = null;
                }
                else {
                    if ((this.windowClauseField == null)) {
                        this.windowClauseField = XTypedList<windowClause>.Initialize(this, LinqToXsdTypeManager.Instance, value, windowClauseXName);
                    }
                    else {
                        XTypedServices.SetList<windowClause>(this.windowClauseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((forClause | letClause | windowClause), (forClause | letClause | windowClause | countClause | whereClause | groupByClause | orderByClause)*, returnClause)
        /// </para>
        /// </summary>
        public virtual IList<countClause> countClause {
            get {
                if ((this.countClauseField == null)) {
                    this.countClauseField = new XTypedList<countClause>(this, LinqToXsdTypeManager.Instance, countClauseXName);
                }
                return this.countClauseField;
            }
            set {
                if ((value == null)) {
                    this.countClauseField = null;
                }
                else {
                    if ((this.countClauseField == null)) {
                        this.countClauseField = XTypedList<countClause>.Initialize(this, LinqToXsdTypeManager.Instance, value, countClauseXName);
                    }
                    else {
                        XTypedServices.SetList<countClause>(this.countClauseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((forClause | letClause | windowClause), (forClause | letClause | windowClause | countClause | whereClause | groupByClause | orderByClause)*, returnClause)
        /// </para>
        /// </summary>
        public virtual IList<whereClause> whereClause {
            get {
                if ((this.whereClauseField == null)) {
                    this.whereClauseField = new XTypedList<whereClause>(this, LinqToXsdTypeManager.Instance, whereClauseXName);
                }
                return this.whereClauseField;
            }
            set {
                if ((value == null)) {
                    this.whereClauseField = null;
                }
                else {
                    if ((this.whereClauseField == null)) {
                        this.whereClauseField = XTypedList<whereClause>.Initialize(this, LinqToXsdTypeManager.Instance, value, whereClauseXName);
                    }
                    else {
                        XTypedServices.SetList<whereClause>(this.whereClauseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((forClause | letClause | windowClause), (forClause | letClause | windowClause | countClause | whereClause | groupByClause | orderByClause)*, returnClause)
        /// </para>
        /// </summary>
        public virtual IList<groupByClause> groupByClause {
            get {
                if ((this.groupByClauseField == null)) {
                    this.groupByClauseField = new XTypedList<groupByClause>(this, LinqToXsdTypeManager.Instance, groupByClauseXName);
                }
                return this.groupByClauseField;
            }
            set {
                if ((value == null)) {
                    this.groupByClauseField = null;
                }
                else {
                    if ((this.groupByClauseField == null)) {
                        this.groupByClauseField = XTypedList<groupByClause>.Initialize(this, LinqToXsdTypeManager.Instance, value, groupByClauseXName);
                    }
                    else {
                        XTypedServices.SetList<groupByClause>(this.groupByClauseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((forClause | letClause | windowClause), (forClause | letClause | windowClause | countClause | whereClause | groupByClause | orderByClause)*, returnClause)
        /// </para>
        /// </summary>
        public virtual IList<orderByClause> orderByClause {
            get {
                if ((this.orderByClauseField == null)) {
                    this.orderByClauseField = new XTypedList<orderByClause>(this, LinqToXsdTypeManager.Instance, orderByClauseXName);
                }
                return this.orderByClauseField;
            }
            set {
                if ((value == null)) {
                    this.orderByClauseField = null;
                }
                else {
                    if ((this.orderByClauseField == null)) {
                        this.orderByClauseField = XTypedList<orderByClause>.Initialize(this, LinqToXsdTypeManager.Instance, value, orderByClauseXName);
                    }
                    else {
                        XTypedServices.SetList<orderByClause>(this.orderByClauseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: ((forClause | letClause | windowClause), (forClause | letClause | windowClause | countClause | whereClause | groupByClause | orderByClause)*, returnClause)
        /// </para>
        /// </summary>
        public virtual returnClause returnClause {
            get {
                XElement x = this.GetElement(returnClauseXName);
                return ((returnClause)(x));
            }
            set {
                this.SetElement(returnClauseXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<flworExprType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(forClauseXName, typeof(forClause));
            localElementDictionary.Add(letClauseXName, typeof(letClause));
            localElementDictionary.Add(windowClauseXName, typeof(windowClause));
            localElementDictionary.Add(countClauseXName, typeof(countClause));
            localElementDictionary.Add(whereClauseXName, typeof(whereClause));
            localElementDictionary.Add(groupByClauseXName, typeof(groupByClause));
            localElementDictionary.Add(orderByClauseXName, typeof(orderByClause));
            localElementDictionary.Add(returnClauseXName, typeof(returnClause));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ifClause, thenClause, elseClause)
    /// </para>
    /// </summary>
    public partial class ifThenElseExprType : global::W3C.XQueryX.exprType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ifClauseXName = System.Xml.Linq.XName.Get("ifClause", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName thenClauseXName = System.Xml.Linq.XName.Get("thenClause", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName elseClauseXName = System.Xml.Linq.XName.Get("elseClause", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ifThenElseExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ifThenElseExprType(XElement xe) { return XTypedServices.ToXTypedElement<ifThenElseExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ifThenElseExprType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ifClauseXName), new NamedContentModelEntity(thenClauseXName), new NamedContentModelEntity(elseClauseXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ifClause, thenClause, elseClause)
        /// </para>
        /// </summary>
        public ifThenElseExprType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ifClause, thenClause, elseClause)
        /// </para>
        /// </summary>
        public virtual exprWrapper ifClause {
            get {
                XElement x = this.GetElement(ifClauseXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(ifClauseXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ifClause, thenClause, elseClause)
        /// </para>
        /// </summary>
        public virtual exprWrapper thenClause {
            get {
                XElement x = this.GetElement(thenClauseXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(thenClauseXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ifClause, thenClause, elseClause)
        /// </para>
        /// </summary>
        public virtual exprWrapper elseClause {
            get {
                XElement x = this.GetElement(elseClauseXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(elseClauseXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ifThenElseExprType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ifClauseXName, typeof(exprWrapper));
            localElementDictionary.Add(thenClauseXName, typeof(exprWrapper));
            localElementDictionary.Add(elseClauseXName, typeof(exprWrapper));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public enum quantifier {
        
        some,
        
        every,
    }
    
    public sealed class quantifierValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "some",
                        "every"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private quantifierValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (typedVariableBinding, sourceExpr)
    /// </para>
    /// </summary>
    public partial class quantifiedExprInClauseType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typedVariableBindingXName = System.Xml.Linq.XName.Get("typedVariableBinding", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceExprXName = System.Xml.Linq.XName.Get("sourceExpr", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("quantifiedExprInClause", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator quantifiedExprInClauseType(XElement xe) { return XTypedServices.ToXTypedElement<quantifiedExprInClauseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static quantifiedExprInClauseType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(typedVariableBindingXName), new NamedContentModelEntity(sourceExprXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (typedVariableBinding, sourceExpr)
        /// </para>
        /// </summary>
        public quantifiedExprInClauseType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (typedVariableBinding, sourceExpr)
        /// </para>
        /// </summary>
        public virtual typedVariableBinding typedVariableBinding {
            get {
                XElement x = this.GetElement(typedVariableBindingXName);
                return ((typedVariableBinding)(x));
            }
            set {
                this.SetElement(typedVariableBindingXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (typedVariableBinding, sourceExpr)
        /// </para>
        /// </summary>
        public virtual exprWrapper sourceExpr {
            get {
                XElement x = this.GetElement(sourceExprXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(sourceExprXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<quantifiedExprInClauseType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(typedVariableBindingXName, typeof(typedVariableBinding));
            localElementDictionary.Add(sourceExprXName, typeof(exprWrapper));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (quantifier, quantifiedExprInClause+, predicateExpr)
    /// </para>
    /// </summary>
    public partial class quantifiedExprType : global::W3C.XQueryX.exprType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName quantifierXName = System.Xml.Linq.XName.Get("quantifier", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName quantifiedExprInClauseXName = System.Xml.Linq.XName.Get("quantifiedExprInClause", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<quantifiedExprInClause> quantifiedExprInClauseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName predicateExprXName = System.Xml.Linq.XName.Get("predicateExpr", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("quantifiedExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator quantifiedExprType(XElement xe) { return XTypedServices.ToXTypedElement<quantifiedExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static quantifiedExprType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(quantifierXName), new NamedContentModelEntity(quantifiedExprInClauseXName), new NamedContentModelEntity(predicateExprXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (quantifier, quantifiedExprInClause+, predicateExpr)
        /// </para>
        /// </summary>
        public quantifiedExprType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (quantifier, quantifiedExprInClause+, predicateExpr)
        /// </para>
        /// </summary>
        public virtual W3C.XQueryX.quantifier quantifier {
            get {
                XElement x = this.GetElement(quantifierXName);
                return ((W3C.XQueryX.quantifier)(Enum.Parse(typeof(W3C.XQueryX.quantifier), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype))));
            }
            set {
                this.SetElementWithValidation(quantifierXName, value.ToString(), "quantifier", global::W3C.XQueryX.quantifierValidator.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (quantifier, quantifiedExprInClause+, predicateExpr)
        /// </para>
        /// </summary>
        public virtual IList<quantifiedExprInClause> quantifiedExprInClause {
            get {
                if ((this.quantifiedExprInClauseField == null)) {
                    this.quantifiedExprInClauseField = new XTypedList<quantifiedExprInClause>(this, LinqToXsdTypeManager.Instance, quantifiedExprInClauseXName);
                }
                return this.quantifiedExprInClauseField;
            }
            set {
                if ((value == null)) {
                    this.quantifiedExprInClauseField = null;
                }
                else {
                    if ((this.quantifiedExprInClauseField == null)) {
                        this.quantifiedExprInClauseField = XTypedList<quantifiedExprInClause>.Initialize(this, LinqToXsdTypeManager.Instance, value, quantifiedExprInClauseXName);
                    }
                    else {
                        XTypedServices.SetList<quantifiedExprInClause>(this.quantifiedExprInClauseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (quantifier, quantifiedExprInClause+, predicateExpr)
        /// </para>
        /// </summary>
        public virtual exprWrapper predicateExpr {
            get {
                XElement x = this.GetElement(predicateExprXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(predicateExprXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<quantifiedExprType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(quantifierXName, typeof(string));
            localElementDictionary.Add(quantifiedExprInClauseXName, typeof(quantifiedExprInClause));
            localElementDictionary.Add(predicateExprXName, typeof(exprWrapper));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (switchCaseExpr+, resultExpr)
    /// </para>
    /// </summary>
    public partial class switchExprCaseClauseType : global::W3C.XQueryX.exprType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName switchCaseExprXName = System.Xml.Linq.XName.Get("switchCaseExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<exprWrapper> switchCaseExprField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName resultExprXName = System.Xml.Linq.XName.Get("resultExpr", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("switchExprCaseClause", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator switchExprCaseClauseType(XElement xe) { return XTypedServices.ToXTypedElement<switchExprCaseClauseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static switchExprCaseClauseType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(switchCaseExprXName), new NamedContentModelEntity(resultExprXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (switchCaseExpr+, resultExpr)
        /// </para>
        /// </summary>
        public switchExprCaseClauseType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (switchCaseExpr+, resultExpr)
        /// </para>
        /// </summary>
        public virtual IList<exprWrapper> switchCaseExpr {
            get {
                if ((this.switchCaseExprField == null)) {
                    this.switchCaseExprField = new XTypedList<exprWrapper>(this, LinqToXsdTypeManager.Instance, switchCaseExprXName);
                }
                return this.switchCaseExprField;
            }
            set {
                if ((value == null)) {
                    this.switchCaseExprField = null;
                }
                else {
                    if ((this.switchCaseExprField == null)) {
                        this.switchCaseExprField = XTypedList<exprWrapper>.Initialize(this, LinqToXsdTypeManager.Instance, value, switchCaseExprXName);
                    }
                    else {
                        XTypedServices.SetList<exprWrapper>(this.switchCaseExprField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (switchCaseExpr+, resultExpr)
        /// </para>
        /// </summary>
        public virtual exprWrapper resultExpr {
            get {
                XElement x = this.GetElement(resultExprXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(resultExprXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<switchExprCaseClauseType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(switchCaseExprXName, typeof(exprWrapper));
            localElementDictionary.Add(resultExprXName, typeof(exprWrapper));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (resultExpr)
    /// </para>
    /// </summary>
    public partial class switchExprDefaultClauseType : global::W3C.XQueryX.exprType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName resultExprXName = System.Xml.Linq.XName.Get("resultExpr", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("switchExprDefaultClause", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator switchExprDefaultClauseType(XElement xe) { return XTypedServices.ToXTypedElement<switchExprDefaultClauseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static switchExprDefaultClauseType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(resultExprXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (resultExpr)
        /// </para>
        /// </summary>
        public switchExprDefaultClauseType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (resultExpr)
        /// </para>
        /// </summary>
        public virtual exprWrapper resultExpr {
            get {
                XElement x = this.GetElement(resultExprXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(resultExprXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<switchExprDefaultClauseType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(resultExprXName, typeof(exprWrapper));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (argExpr, switchExprCaseClause+, switchExprDefaultClause)
    /// </para>
    /// </summary>
    public partial class switchExprType : global::W3C.XQueryX.exprType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName argExprXName = System.Xml.Linq.XName.Get("argExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName switchExprCaseClauseXName = System.Xml.Linq.XName.Get("switchExprCaseClause", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<switchExprCaseClause> switchExprCaseClauseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName switchExprDefaultClauseXName = System.Xml.Linq.XName.Get("switchExprDefaultClause", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("switchExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator switchExprType(XElement xe) { return XTypedServices.ToXTypedElement<switchExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static switchExprType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(argExprXName), new NamedContentModelEntity(switchExprCaseClauseXName), new NamedContentModelEntity(switchExprDefaultClauseXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (argExpr, switchExprCaseClause+, switchExprDefaultClause)
        /// </para>
        /// </summary>
        public switchExprType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (argExpr, switchExprCaseClause+, switchExprDefaultClause)
        /// </para>
        /// </summary>
        public virtual exprWrapper argExpr {
            get {
                XElement x = this.GetElement(argExprXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(argExprXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (argExpr, switchExprCaseClause+, switchExprDefaultClause)
        /// </para>
        /// </summary>
        public virtual IList<switchExprCaseClause> switchExprCaseClause {
            get {
                if ((this.switchExprCaseClauseField == null)) {
                    this.switchExprCaseClauseField = new XTypedList<switchExprCaseClause>(this, LinqToXsdTypeManager.Instance, switchExprCaseClauseXName);
                }
                return this.switchExprCaseClauseField;
            }
            set {
                if ((value == null)) {
                    this.switchExprCaseClauseField = null;
                }
                else {
                    if ((this.switchExprCaseClauseField == null)) {
                        this.switchExprCaseClauseField = XTypedList<switchExprCaseClause>.Initialize(this, LinqToXsdTypeManager.Instance, value, switchExprCaseClauseXName);
                    }
                    else {
                        XTypedServices.SetList<switchExprCaseClause>(this.switchExprCaseClauseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (argExpr, switchExprCaseClause+, switchExprDefaultClause)
        /// </para>
        /// </summary>
        public virtual switchExprDefaultClause switchExprDefaultClause {
            get {
                XElement x = this.GetElement(switchExprDefaultClauseXName);
                return ((switchExprDefaultClause)(x));
            }
            set {
                this.SetElement(switchExprDefaultClauseXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<switchExprType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(argExprXName, typeof(exprWrapper));
            localElementDictionary.Add(switchExprCaseClauseXName, typeof(switchExprCaseClause));
            localElementDictionary.Add(switchExprDefaultClauseXName, typeof(switchExprDefaultClause));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (variableBinding?, (sequenceType | sequenceTypeUnion), resultExpr)
    /// </para>
    /// </summary>
    public partial class typeswitchExprCaseClauseType : global::W3C.XQueryX.exprType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName variableBindingXName = System.Xml.Linq.XName.Get("variableBinding", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sequenceTypeXName = System.Xml.Linq.XName.Get("sequenceType", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sequenceTypeUnionXName = System.Xml.Linq.XName.Get("sequenceTypeUnion", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName resultExprXName = System.Xml.Linq.XName.Get("resultExpr", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("typeswitchExprCaseClause", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator typeswitchExprCaseClauseType(XElement xe) { return XTypedServices.ToXTypedElement<typeswitchExprCaseClauseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static typeswitchExprCaseClauseType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(variableBindingXName), new ChoiceContentModelEntity(new NamedContentModelEntity(sequenceTypeXName), new NamedContentModelEntity(sequenceTypeUnionXName)), new NamedContentModelEntity(resultExprXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (variableBinding?, (sequenceType | sequenceTypeUnion), resultExpr)
        /// </para>
        /// </summary>
        public typeswitchExprCaseClauseType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (variableBinding?, (sequenceType | sequenceTypeUnion), resultExpr)
        /// </para>
        /// </summary>
        public virtual variableBinding variableBinding {
            get {
                XElement x = this.GetElement(variableBindingXName);
                return ((variableBinding)(x));
            }
            set {
                this.SetElement(variableBindingXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (variableBinding?, (sequenceType | sequenceTypeUnion), resultExpr)
        /// </para>
        /// </summary>
        public virtual sequenceType sequenceType {
            get {
                XElement x = this.GetElement(sequenceTypeXName);
                return ((sequenceType)(x));
            }
            set {
                this.SetElement(sequenceTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (variableBinding?, (sequenceType | sequenceTypeUnion), resultExpr)
        /// </para>
        /// </summary>
        public virtual sequenceTypeUnion sequenceTypeUnion {
            get {
                XElement x = this.GetElement(sequenceTypeUnionXName);
                return ((sequenceTypeUnion)(x));
            }
            set {
                this.SetElement(sequenceTypeUnionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (variableBinding?, (sequenceType | sequenceTypeUnion), resultExpr)
        /// </para>
        /// </summary>
        public virtual exprWrapper resultExpr {
            get {
                XElement x = this.GetElement(resultExprXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(resultExprXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<typeswitchExprCaseClauseType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(variableBindingXName, typeof(variableBinding));
            localElementDictionary.Add(sequenceTypeXName, typeof(sequenceType));
            localElementDictionary.Add(sequenceTypeUnionXName, typeof(sequenceTypeUnion));
            localElementDictionary.Add(resultExprXName, typeof(exprWrapper));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (variableBinding?, resultExpr)
    /// </para>
    /// </summary>
    public partial class typeswitchExprDefaultClauseType : global::W3C.XQueryX.exprType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName variableBindingXName = System.Xml.Linq.XName.Get("variableBinding", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName resultExprXName = System.Xml.Linq.XName.Get("resultExpr", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("typeswitchExprDefaultClause", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator typeswitchExprDefaultClauseType(XElement xe) { return XTypedServices.ToXTypedElement<typeswitchExprDefaultClauseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static typeswitchExprDefaultClauseType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(variableBindingXName), new NamedContentModelEntity(resultExprXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (variableBinding?, resultExpr)
        /// </para>
        /// </summary>
        public typeswitchExprDefaultClauseType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (variableBinding?, resultExpr)
        /// </para>
        /// </summary>
        public virtual variableBinding variableBinding {
            get {
                XElement x = this.GetElement(variableBindingXName);
                return ((variableBinding)(x));
            }
            set {
                this.SetElement(variableBindingXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (variableBinding?, resultExpr)
        /// </para>
        /// </summary>
        public virtual exprWrapper resultExpr {
            get {
                XElement x = this.GetElement(resultExprXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(resultExprXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<typeswitchExprDefaultClauseType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(variableBindingXName, typeof(variableBinding));
            localElementDictionary.Add(resultExprXName, typeof(exprWrapper));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (argExpr, typeswitchExprCaseClause+, typeswitchExprDefaultClause)
    /// </para>
    /// </summary>
    public partial class typeswitchExprType : global::W3C.XQueryX.exprType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName argExprXName = System.Xml.Linq.XName.Get("argExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeswitchExprCaseClauseXName = System.Xml.Linq.XName.Get("typeswitchExprCaseClause", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<typeswitchExprCaseClause> typeswitchExprCaseClauseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeswitchExprDefaultClauseXName = System.Xml.Linq.XName.Get("typeswitchExprDefaultClause", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("typeswitchExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator typeswitchExprType(XElement xe) { return XTypedServices.ToXTypedElement<typeswitchExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static typeswitchExprType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(argExprXName), new NamedContentModelEntity(typeswitchExprCaseClauseXName), new NamedContentModelEntity(typeswitchExprDefaultClauseXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (argExpr, typeswitchExprCaseClause+, typeswitchExprDefaultClause)
        /// </para>
        /// </summary>
        public typeswitchExprType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (argExpr, typeswitchExprCaseClause+, typeswitchExprDefaultClause)
        /// </para>
        /// </summary>
        public virtual exprWrapper argExpr {
            get {
                XElement x = this.GetElement(argExprXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(argExprXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (argExpr, typeswitchExprCaseClause+, typeswitchExprDefaultClause)
        /// </para>
        /// </summary>
        public virtual IList<typeswitchExprCaseClause> typeswitchExprCaseClause {
            get {
                if ((this.typeswitchExprCaseClauseField == null)) {
                    this.typeswitchExprCaseClauseField = new XTypedList<typeswitchExprCaseClause>(this, LinqToXsdTypeManager.Instance, typeswitchExprCaseClauseXName);
                }
                return this.typeswitchExprCaseClauseField;
            }
            set {
                if ((value == null)) {
                    this.typeswitchExprCaseClauseField = null;
                }
                else {
                    if ((this.typeswitchExprCaseClauseField == null)) {
                        this.typeswitchExprCaseClauseField = XTypedList<typeswitchExprCaseClause>.Initialize(this, LinqToXsdTypeManager.Instance, value, typeswitchExprCaseClauseXName);
                    }
                    else {
                        XTypedServices.SetList<typeswitchExprCaseClause>(this.typeswitchExprCaseClauseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (argExpr, typeswitchExprCaseClause+, typeswitchExprDefaultClause)
        /// </para>
        /// </summary>
        public virtual typeswitchExprDefaultClause typeswitchExprDefaultClause {
            get {
                XElement x = this.GetElement(typeswitchExprDefaultClauseXName);
                return ((typeswitchExprDefaultClause)(x));
            }
            set {
                this.SetElement(typeswitchExprDefaultClauseXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<typeswitchExprType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(argExprXName, typeof(exprWrapper));
            localElementDictionary.Add(typeswitchExprCaseClauseXName, typeof(typeswitchExprCaseClause));
            localElementDictionary.Add(typeswitchExprDefaultClauseXName, typeof(typeswitchExprDefaultClause));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (tryClause, catchClause*)
    /// </para>
    /// </summary>
    public partial class tryCatchExprType : global::W3C.XQueryX.exprType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tryClauseXName = System.Xml.Linq.XName.Get("tryClause", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName catchClauseXName = System.Xml.Linq.XName.Get("catchClause", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<catchClause> catchClauseField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("tryCatchExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator tryCatchExprType(XElement xe) { return XTypedServices.ToXTypedElement<tryCatchExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static tryCatchExprType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(tryClauseXName), new NamedContentModelEntity(catchClauseXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (tryClause, catchClause*)
        /// </para>
        /// </summary>
        public tryCatchExprType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (tryClause, catchClause*)
        /// </para>
        /// </summary>
        public virtual exprWrapper tryClause {
            get {
                XElement x = this.GetElement(tryClauseXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(tryClauseXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (tryClause, catchClause*)
        /// </para>
        /// </summary>
        public virtual IList<catchClause> catchClause {
            get {
                if ((this.catchClauseField == null)) {
                    this.catchClauseField = new XTypedList<catchClause>(this, LinqToXsdTypeManager.Instance, catchClauseXName);
                }
                return this.catchClauseField;
            }
            set {
                if ((value == null)) {
                    this.catchClauseField = null;
                }
                else {
                    if ((this.catchClauseField == null)) {
                        this.catchClauseField = XTypedList<catchClause>.Initialize(this, LinqToXsdTypeManager.Instance, value, catchClauseXName);
                    }
                    else {
                        XTypedServices.SetList<catchClause>(this.catchClauseField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<tryCatchExprType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(tryClauseXName, typeof(exprWrapper));
            localElementDictionary.Add(catchClauseXName, typeof(catchClause));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (catchErrorList, catchExpr?)
    /// </para>
    /// </summary>
    public partial class catchClauseType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName catchErrorListXName = System.Xml.Linq.XName.Get("catchErrorList", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName catchExprXName = System.Xml.Linq.XName.Get("catchExpr", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("catchClause", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator catchClauseType(XElement xe) { return XTypedServices.ToXTypedElement<catchClauseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static catchClauseType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(catchErrorListXName), new NamedContentModelEntity(catchExprXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (catchErrorList, catchExpr?)
        /// </para>
        /// </summary>
        public catchClauseType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (catchErrorList, catchExpr?)
        /// </para>
        /// </summary>
        public virtual catchErrorList catchErrorList {
            get {
                XElement x = this.GetElement(catchErrorListXName);
                return ((catchErrorList)(x));
            }
            set {
                this.SetElement(catchErrorListXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (catchErrorList, catchExpr?)
        /// </para>
        /// </summary>
        public virtual exprWrapper catchExpr {
            get {
                XElement x = this.GetElement(catchExprXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(catchExprXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<catchClauseType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(catchErrorListXName, typeof(catchErrorList));
            localElementDictionary.Add(catchExprXName, typeof(exprWrapper));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((nameTest | Wildcard))+
    /// </para>
    /// </summary>
    public partial class catchErrorListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameTestXName = System.Xml.Linq.XName.Get("nameTest", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<nameTest> nameTestField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WildcardXName = System.Xml.Linq.XName.Get("Wildcard", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Wildcard> WildcardField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("catchErrorList", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator catchErrorListType(XElement xe) { return XTypedServices.ToXTypedElement<catchErrorListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static catchErrorListType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(nameTestXName), new NamedContentModelEntity(WildcardXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((nameTest | Wildcard))+
        /// </para>
        /// </summary>
        public catchErrorListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((nameTest | Wildcard))+
        /// </para>
        /// </summary>
        public virtual IList<nameTest> nameTest {
            get {
                if ((this.nameTestField == null)) {
                    this.nameTestField = new XTypedList<nameTest>(this, LinqToXsdTypeManager.Instance, nameTestXName);
                }
                return this.nameTestField;
            }
            set {
                if ((value == null)) {
                    this.nameTestField = null;
                }
                else {
                    if ((this.nameTestField == null)) {
                        this.nameTestField = XTypedList<nameTest>.Initialize(this, LinqToXsdTypeManager.Instance, value, nameTestXName);
                    }
                    else {
                        XTypedServices.SetList<nameTest>(this.nameTestField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((nameTest | Wildcard))+
        /// </para>
        /// </summary>
        public virtual IList<Wildcard> Wildcard {
            get {
                if ((this.WildcardField == null)) {
                    this.WildcardField = new XTypedList<Wildcard>(this, LinqToXsdTypeManager.Instance, WildcardXName);
                }
                return this.WildcardField;
            }
            set {
                if ((value == null)) {
                    this.WildcardField = null;
                }
                else {
                    if ((this.WildcardField == null)) {
                        this.WildcardField = XTypedList<Wildcard>.Initialize(this, LinqToXsdTypeManager.Instance, value, WildcardXName);
                    }
                    else {
                        XTypedServices.SetList<Wildcard>(this.WildcardField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<catchErrorListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(nameTestXName, typeof(nameTest));
            localElementDictionary.Add(WildcardXName, typeof(Wildcard));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (argExpr, sequenceType)
    /// </para>
    /// </summary>
    public partial class instanceOfExprType : global::W3C.XQueryX.exprType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName argExprXName = System.Xml.Linq.XName.Get("argExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sequenceTypeXName = System.Xml.Linq.XName.Get("sequenceType", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("instanceOfExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator instanceOfExprType(XElement xe) { return XTypedServices.ToXTypedElement<instanceOfExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static instanceOfExprType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(argExprXName), new NamedContentModelEntity(sequenceTypeXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (argExpr, sequenceType)
        /// </para>
        /// </summary>
        public instanceOfExprType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (argExpr, sequenceType)
        /// </para>
        /// </summary>
        public virtual exprWrapper argExpr {
            get {
                XElement x = this.GetElement(argExprXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(argExprXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (argExpr, sequenceType)
        /// </para>
        /// </summary>
        public virtual sequenceType sequenceType {
            get {
                XElement x = this.GetElement(sequenceTypeXName);
                return ((sequenceType)(x));
            }
            set {
                this.SetElement(sequenceTypeXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<instanceOfExprType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(argExprXName, typeof(exprWrapper));
            localElementDictionary.Add(sequenceTypeXName, typeof(sequenceType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (argExpr, sequenceType)
    /// </para>
    /// </summary>
    public partial class treatExprType : global::W3C.XQueryX.exprType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName argExprXName = System.Xml.Linq.XName.Get("argExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sequenceTypeXName = System.Xml.Linq.XName.Get("sequenceType", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("treatExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator treatExprType(XElement xe) { return XTypedServices.ToXTypedElement<treatExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static treatExprType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(argExprXName), new NamedContentModelEntity(sequenceTypeXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (argExpr, sequenceType)
        /// </para>
        /// </summary>
        public treatExprType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (argExpr, sequenceType)
        /// </para>
        /// </summary>
        public virtual exprWrapper argExpr {
            get {
                XElement x = this.GetElement(argExprXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(argExprXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (argExpr, sequenceType)
        /// </para>
        /// </summary>
        public virtual sequenceType sequenceType {
            get {
                XElement x = this.GetElement(sequenceTypeXName);
                return ((sequenceType)(x));
            }
            set {
                this.SetElement(sequenceTypeXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<treatExprType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(argExprXName, typeof(exprWrapper));
            localElementDictionary.Add(sequenceTypeXName, typeof(sequenceType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (argExpr, singleType)
    /// </para>
    /// </summary>
    public partial class castableExprType : global::W3C.XQueryX.exprType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName argExprXName = System.Xml.Linq.XName.Get("argExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName singleTypeXName = System.Xml.Linq.XName.Get("singleType", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("castableExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator castableExprType(XElement xe) { return XTypedServices.ToXTypedElement<castableExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static castableExprType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(argExprXName), new NamedContentModelEntity(singleTypeXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (argExpr, singleType)
        /// </para>
        /// </summary>
        public castableExprType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (argExpr, singleType)
        /// </para>
        /// </summary>
        public virtual exprWrapper argExpr {
            get {
                XElement x = this.GetElement(argExprXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(argExprXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (argExpr, singleType)
        /// </para>
        /// </summary>
        public virtual singleType singleType {
            get {
                XElement x = this.GetElement(singleTypeXName);
                return ((singleType)(x));
            }
            set {
                this.SetElement(singleTypeXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<castableExprType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(argExprXName, typeof(exprWrapper));
            localElementDictionary.Add(singleTypeXName, typeof(singleType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (argExpr, singleType)
    /// </para>
    /// </summary>
    public partial class castExprType : global::W3C.XQueryX.exprType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName argExprXName = System.Xml.Linq.XName.Get("argExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName singleTypeXName = System.Xml.Linq.XName.Get("singleType", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("castExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator castExprType(XElement xe) { return XTypedServices.ToXTypedElement<castExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static castExprType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(argExprXName), new NamedContentModelEntity(singleTypeXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (argExpr, singleType)
        /// </para>
        /// </summary>
        public castExprType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (argExpr, singleType)
        /// </para>
        /// </summary>
        public virtual exprWrapper argExpr {
            get {
                XElement x = this.GetElement(argExprXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(argExprXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (argExpr, singleType)
        /// </para>
        /// </summary>
        public virtual singleType singleType {
            get {
                XElement x = this.GetElement(singleTypeXName);
                return ((singleType)(x));
            }
            set {
                this.SetElement(singleTypeXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<castExprType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(argExprXName, typeof(exprWrapper));
            localElementDictionary.Add(singleTypeXName, typeof(singleType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (argExpr, ((EQName | expr), arguments?)+)
    /// </para>
    /// </summary>
    public partial class arrowExprType : global::W3C.XQueryX.exprType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName argExprXName = System.Xml.Linq.XName.Get("argExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EQNameXName = System.Xml.Linq.XName.Get("EQName", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<EQName> EQNameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName exprXName = System.Xml.Linq.XName.Get("expr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<expr> exprField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName argumentsXName = System.Xml.Linq.XName.Get("arguments", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<exprOrPlaceholderList> argumentsField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("arrowExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator arrowExprType(XElement xe) { return XTypedServices.ToXTypedElement<arrowExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static arrowExprType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(argExprXName), new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(EQNameXName), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("expr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("constantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("integerConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("decimalConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("doubleConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("varRef", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("contextItemExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("extensionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("simpleMapExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("functionCallExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("constructorFunctionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("sequenceExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("rangeSequenceExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("operatorExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arithmeticOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("addOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("subtractOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("multiplyOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("divOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("idivOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("modOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryMinusOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryPlusOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConcatenateOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("comparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("valueComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("eqOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("neOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("gtOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("geOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("ltOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("leOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("generalComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("equalOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("notEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("lessThanOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("lessThanOrEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("greaterThanOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("greaterThanOrEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("isOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orderComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeBeforeOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeAfterOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("logicalOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("andOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("setOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unionOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("intersectOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("exceptOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("flworExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("ifThenElseExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("quantifiedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("switchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("typeswitchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("tryCatchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("instanceOfExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("treatExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("castableExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("castExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arrowExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("validateExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("elementConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedElementConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedAttributeConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedDocumentConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedTextConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedCommentConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedNamespaceConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedPIConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unorderedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orderedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("namedFunctionRef", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("inlineFunctionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("dynamicFunctionInvocationExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("mapConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arrayConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryLookup", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("pathExpr", "http://www.w3.org/2005/XQueryX"))), new NamedContentModelEntity(argumentsXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (argExpr, ((EQName | expr), arguments?)+)
        /// </para>
        /// </summary>
        public arrowExprType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (argExpr, ((EQName | expr), arguments?)+)
        /// </para>
        /// </summary>
        public virtual exprWrapper argExpr {
            get {
                XElement x = this.GetElement(argExprXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(argExprXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (argExpr, ((EQName | expr), arguments?)+)
        /// </para>
        /// </summary>
        public virtual IList<EQName> EQName {
            get {
                if ((this.EQNameField == null)) {
                    this.EQNameField = new XTypedList<EQName>(this, LinqToXsdTypeManager.Instance, EQNameXName);
                }
                return this.EQNameField;
            }
            set {
                if ((value == null)) {
                    this.EQNameField = null;
                }
                else {
                    if ((this.EQNameField == null)) {
                        this.EQNameField = XTypedList<EQName>.Initialize(this, LinqToXsdTypeManager.Instance, value, EQNameXName);
                    }
                    else {
                        XTypedServices.SetList<EQName>(this.EQNameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: expr, constantExpr, integerConstantExpr, decimalConstantExpr, doubleConstantExpr, stringConstantExpr, varRef, contextItemExpr, extensionExpr, simpleMapExpr, functionCallExpr, constructorFunctionExpr, sequenceExpr, rangeSequenceExpr, operatorExpr, arithmeticOp, addOp, subtractOp, multiplyOp, divOp, idivOp, modOp, unaryMinusOp, unaryPlusOp, stringOp, stringConcatenateOp, comparisonOp, valueComparisonOp, eqOp, neOp, gtOp, geOp, ltOp, leOp, generalComparisonOp, equalOp, notEqualOp, lessThanOp, lessThanOrEqualOp, greaterThanOp, greaterThanOrEqualOp, nodeComparisonOp, isOp, orderComparisonOp, nodeBeforeOp, nodeAfterOp, logicalOp, andOp, orOp, setOp, unionOp, intersectOp, exceptOp, flworExpr, ifThenElseExpr, quantifiedExpr, switchExpr, typeswitchExpr, tryCatchExpr, instanceOfExpr, treatExpr, castableExpr, castExpr, arrowExpr, validateExpr, elementConstructor, computedElementConstructor, computedAttributeConstructor, computedDocumentConstructor, computedTextConstructor, computedCommentConstructor, computedNamespaceConstructor, computedPIConstructor, unorderedExpr, orderedExpr, namedFunctionRef, inlineFunctionExpr, dynamicFunctionInvocationExpr, mapConstructor, arrayConstructor, stringConstructor, unaryLookup, pathExpr
        /// </para>
        /// <para>
        /// Regular expression: (argExpr, ((EQName | expr), arguments?)+)
        /// </para>
        /// </summary>
        public virtual IList<expr> expr {
            get {
                if ((this.exprField == null)) {
                    this.exprField = new XTypedSubstitutedList<expr>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("expr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("constantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("integerConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("decimalConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("doubleConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("varRef", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("contextItemExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("extensionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("simpleMapExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("functionCallExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("constructorFunctionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("sequenceExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("rangeSequenceExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("operatorExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arithmeticOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("addOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("subtractOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("multiplyOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("divOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("idivOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("modOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryMinusOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryPlusOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConcatenateOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("comparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("valueComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("eqOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("neOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("gtOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("geOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("ltOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("leOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("generalComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("equalOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("notEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("lessThanOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("lessThanOrEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("greaterThanOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("greaterThanOrEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("isOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orderComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeBeforeOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeAfterOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("logicalOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("andOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("setOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unionOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("intersectOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("exceptOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("flworExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("ifThenElseExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("quantifiedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("switchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("typeswitchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("tryCatchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("instanceOfExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("treatExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("castableExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("castExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arrowExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("validateExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("elementConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedElementConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedAttributeConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedDocumentConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedTextConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedCommentConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedNamespaceConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedPIConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unorderedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orderedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("namedFunctionRef", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("inlineFunctionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("dynamicFunctionInvocationExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("mapConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arrayConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryLookup", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("pathExpr", "http://www.w3.org/2005/XQueryX"));
                }
                return this.exprField;
            }
            set {
                if ((value == null)) {
                    this.exprField = null;
                }
                else {
                    if ((this.exprField == null)) {
                        this.exprField = XTypedSubstitutedList<expr>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("expr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("constantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("integerConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("decimalConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("doubleConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("varRef", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("contextItemExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("extensionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("simpleMapExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("functionCallExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("constructorFunctionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("sequenceExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("rangeSequenceExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("operatorExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arithmeticOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("addOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("subtractOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("multiplyOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("divOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("idivOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("modOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryMinusOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryPlusOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConcatenateOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("comparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("valueComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("eqOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("neOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("gtOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("geOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("ltOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("leOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("generalComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("equalOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("notEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("lessThanOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("lessThanOrEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("greaterThanOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("greaterThanOrEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("isOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orderComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeBeforeOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeAfterOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("logicalOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("andOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("setOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unionOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("intersectOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("exceptOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("flworExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("ifThenElseExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("quantifiedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("switchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("typeswitchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("tryCatchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("instanceOfExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("treatExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("castableExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("castExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arrowExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("validateExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("elementConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedElementConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedAttributeConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedDocumentConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedTextConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedCommentConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedNamespaceConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedPIConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unorderedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orderedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("namedFunctionRef", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("inlineFunctionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("dynamicFunctionInvocationExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("mapConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arrayConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryLookup", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("pathExpr", "http://www.w3.org/2005/XQueryX"));
                    }
                    else {
                        XTypedServices.SetList<expr>(this.exprField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (argExpr, ((EQName | expr), arguments?)+)
        /// </para>
        /// </summary>
        public virtual IList<exprOrPlaceholderList> arguments {
            get {
                if ((this.argumentsField == null)) {
                    this.argumentsField = new XTypedList<exprOrPlaceholderList>(this, LinqToXsdTypeManager.Instance, argumentsXName);
                }
                return this.argumentsField;
            }
            set {
                if ((value == null)) {
                    this.argumentsField = null;
                }
                else {
                    if ((this.argumentsField == null)) {
                        this.argumentsField = XTypedList<exprOrPlaceholderList>.Initialize(this, LinqToXsdTypeManager.Instance, value, argumentsXName);
                    }
                    else {
                        XTypedServices.SetList<exprOrPlaceholderList>(this.argumentsField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<arrowExprType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(argExprXName, typeof(exprWrapper));
            localElementDictionary.Add(EQNameXName, typeof(EQName));
            localElementDictionary.Add(exprXName, typeof(expr));
            localElementDictionary.Add(argumentsXName, typeof(exprOrPlaceholderList));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public enum validationMode {
        
        lax,
        
        strict,
    }
    
    public sealed class validationModeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "lax",
                        "strict"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private validationModeValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((validationMode? | typeName?), argExpr)
    /// </para>
    /// </summary>
    public partial class validateExprType : global::W3C.XQueryX.exprType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName validationModeXName = System.Xml.Linq.XName.Get("validationMode", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeNameXName = System.Xml.Linq.XName.Get("typeName", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName argExprXName = System.Xml.Linq.XName.Get("argExpr", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("validateExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator validateExprType(XElement xe) { return XTypedServices.ToXTypedElement<validateExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static validateExprType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(validationModeXName), new NamedContentModelEntity(typeNameXName)), new NamedContentModelEntity(argExprXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((validationMode? | typeName?), argExpr)
        /// </para>
        /// </summary>
        public validateExprType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((validationMode? | typeName?), argExpr)
        /// </para>
        /// </summary>
        public virtual W3C.XQueryX.validationMode? validationMode {
            get {
                XElement x = this.GetElement(validationModeXName);
                if ((x == null)) {
                    return null;
                }
                return ((W3C.XQueryX.validationMode)(Enum.Parse(typeof(W3C.XQueryX.validationMode), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype))));
            }
            set {
                if (value == null) {
                    this.SetElement(validationModeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
                }
                else {
                    this.SetElementWithValidation(validationModeXName, value.ToString(), "validationMode", global::W3C.XQueryX.validationModeValidator.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((validationMode? | typeName?), argExpr)
        /// </para>
        /// </summary>
        public virtual EQName typeName {
            get {
                XElement x = this.GetElement(typeNameXName);
                return ((EQName)(x));
            }
            set {
                this.SetElement(typeNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: ((validationMode? | typeName?), argExpr)
        /// </para>
        /// </summary>
        public virtual exprWrapper argExpr {
            get {
                XElement x = this.GetElement(argExprXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(argExprXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<validateExprType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(validationModeXName, typeof(string));
            localElementDictionary.Add(typeNameXName, typeof(EQName));
            localElementDictionary.Add(argExprXName, typeof(exprWrapper));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (attributeName, (attributeValueExpr | attributeValue))
    /// </para>
    /// </summary>
    public partial class attributeConstructor : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName attributeNameXName = System.Xml.Linq.XName.Get("attributeName", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName attributeValueExprXName = System.Xml.Linq.XName.Get("attributeValueExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName attributeValueXName = System.Xml.Linq.XName.Get("attributeValue", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("attributeConstructor", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator attributeConstructor(XElement xe) { return XTypedServices.ToXTypedElement<attributeConstructor>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static attributeConstructor() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(attributeNameXName), new ChoiceContentModelEntity(new NamedContentModelEntity(attributeValueExprXName), new NamedContentModelEntity(attributeValueXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (attributeName, (attributeValueExpr | attributeValue))
        /// </para>
        /// </summary>
        public attributeConstructor() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (attributeName, (attributeValueExpr | attributeValue))
        /// </para>
        /// </summary>
        public virtual QName attributeName {
            get {
                XElement x = this.GetElement(attributeNameXName);
                return ((QName)(x));
            }
            set {
                this.SetElement(attributeNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (attributeName, (attributeValueExpr | attributeValue))
        /// </para>
        /// </summary>
        public virtual exprList attributeValueExpr {
            get {
                XElement x = this.GetElement(attributeValueExprXName);
                return ((exprList)(x));
            }
            set {
                this.SetElement(attributeValueExprXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (attributeName, (attributeValueExpr | attributeValue))
        /// </para>
        /// </summary>
        public virtual string attributeValue {
            get {
                XElement x = this.GetElement(attributeValueXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(attributeValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<attributeConstructor>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(attributeNameXName, typeof(QName));
            localElementDictionary.Add(attributeValueExprXName, typeof(exprList));
            localElementDictionary.Add(attributeValueXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (prefix?, uri)
    /// </para>
    /// </summary>
    public partial class namespaceDeclaration : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName prefixXName = System.Xml.Linq.XName.Get("prefix", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uriXName = System.Xml.Linq.XName.Get("uri", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("namespaceDeclaration", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator namespaceDeclaration(XElement xe) { return XTypedServices.ToXTypedElement<namespaceDeclaration>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static namespaceDeclaration() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(prefixXName), new NamedContentModelEntity(uriXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (prefix?, uri)
        /// </para>
        /// </summary>
        public namespaceDeclaration() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (prefix?, uri)
        /// </para>
        /// </summary>
        public virtual string prefix {
            get {
                XElement x = this.GetElement(prefixXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
            set {
                this.SetElement(prefixXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (prefix?, uri)
        /// </para>
        /// </summary>
        public virtual string uri {
            get {
                XElement x = this.GetElement(uriXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(uriXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<namespaceDeclaration>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(prefixXName, typeof(string));
            localElementDictionary.Add(uriXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((attributeConstructor | namespaceDeclaration)+)
    /// </para>
    /// </summary>
    public partial class attributeListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName attributeConstructorXName = System.Xml.Linq.XName.Get("attributeConstructor", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<attributeConstructor> attributeConstructorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName namespaceDeclarationXName = System.Xml.Linq.XName.Get("namespaceDeclaration", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<namespaceDeclaration> namespaceDeclarationField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("attributeList", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator attributeListType(XElement xe) { return XTypedServices.ToXTypedElement<attributeListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static attributeListType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(attributeConstructorXName), new NamedContentModelEntity(namespaceDeclarationXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((attributeConstructor | namespaceDeclaration)+)
        /// </para>
        /// </summary>
        public attributeListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((attributeConstructor | namespaceDeclaration)+)
        /// </para>
        /// </summary>
        public virtual IList<attributeConstructor> attributeConstructor {
            get {
                if ((this.attributeConstructorField == null)) {
                    this.attributeConstructorField = new XTypedList<attributeConstructor>(this, LinqToXsdTypeManager.Instance, attributeConstructorXName);
                }
                return this.attributeConstructorField;
            }
            set {
                if ((value == null)) {
                    this.attributeConstructorField = null;
                }
                else {
                    if ((this.attributeConstructorField == null)) {
                        this.attributeConstructorField = XTypedList<attributeConstructor>.Initialize(this, LinqToXsdTypeManager.Instance, value, attributeConstructorXName);
                    }
                    else {
                        XTypedServices.SetList<attributeConstructor>(this.attributeConstructorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((attributeConstructor | namespaceDeclaration)+)
        /// </para>
        /// </summary>
        public virtual IList<namespaceDeclaration> namespaceDeclaration {
            get {
                if ((this.namespaceDeclarationField == null)) {
                    this.namespaceDeclarationField = new XTypedList<namespaceDeclaration>(this, LinqToXsdTypeManager.Instance, namespaceDeclarationXName);
                }
                return this.namespaceDeclarationField;
            }
            set {
                if ((value == null)) {
                    this.namespaceDeclarationField = null;
                }
                else {
                    if ((this.namespaceDeclarationField == null)) {
                        this.namespaceDeclarationField = XTypedList<namespaceDeclaration>.Initialize(this, LinqToXsdTypeManager.Instance, value, namespaceDeclarationXName);
                    }
                    else {
                        XTypedServices.SetList<namespaceDeclaration>(this.namespaceDeclarationField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<attributeListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(attributeConstructorXName, typeof(attributeConstructor));
            localElementDictionary.Add(namespaceDeclarationXName, typeof(namespaceDeclaration));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (tagName, attributeList?, elementContent?)
    /// </para>
    /// </summary>
    public partial class elementConstructorType : global::W3C.XQueryX.exprType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tagNameXName = System.Xml.Linq.XName.Get("tagName", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName attributeListXName = System.Xml.Linq.XName.Get("attributeList", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName elementContentXName = System.Xml.Linq.XName.Get("elementContent", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("elementConstructor", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator elementConstructorType(XElement xe) { return XTypedServices.ToXTypedElement<elementConstructorType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static elementConstructorType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(tagNameXName), new NamedContentModelEntity(attributeListXName), new NamedContentModelEntity(elementContentXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (tagName, attributeList?, elementContent?)
        /// </para>
        /// </summary>
        public elementConstructorType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (tagName, attributeList?, elementContent?)
        /// </para>
        /// </summary>
        public virtual QName tagName {
            get {
                XElement x = this.GetElement(tagNameXName);
                return ((QName)(x));
            }
            set {
                this.SetElement(tagNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (tagName, attributeList?, elementContent?)
        /// </para>
        /// </summary>
        public virtual attributeList attributeList {
            get {
                XElement x = this.GetElement(attributeListXName);
                return ((attributeList)(x));
            }
            set {
                this.SetElement(attributeListXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (tagName, attributeList?, elementContent?)
        /// </para>
        /// </summary>
        public virtual elementContent elementContent {
            get {
                XElement x = this.GetElement(elementContentXName);
                return ((elementContent)(x));
            }
            set {
                this.SetElement(elementContentXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<elementConstructorType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(tagNameXName, typeof(QName));
            localElementDictionary.Add(attributeListXName, typeof(attributeList));
            localElementDictionary.Add(elementContentXName, typeof(elementContent));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((tagName | tagNameExpr), contentExpr?)
    /// </para>
    /// </summary>
    public partial class computedElementConstructorType : global::W3C.XQueryX.exprType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tagNameXName = System.Xml.Linq.XName.Get("tagName", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tagNameExprXName = System.Xml.Linq.XName.Get("tagNameExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName contentExprXName = System.Xml.Linq.XName.Get("contentExpr", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("computedElementConstructor", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator computedElementConstructorType(XElement xe) { return XTypedServices.ToXTypedElement<computedElementConstructorType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static computedElementConstructorType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(tagNameXName), new NamedContentModelEntity(tagNameExprXName)), new NamedContentModelEntity(contentExprXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((tagName | tagNameExpr), contentExpr?)
        /// </para>
        /// </summary>
        public computedElementConstructorType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((tagName | tagNameExpr), contentExpr?)
        /// </para>
        /// </summary>
        public virtual EQName tagName {
            get {
                XElement x = this.GetElement(tagNameXName);
                return ((EQName)(x));
            }
            set {
                this.SetElement(tagNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((tagName | tagNameExpr), contentExpr?)
        /// </para>
        /// </summary>
        public virtual exprWrapper tagNameExpr {
            get {
                XElement x = this.GetElement(tagNameExprXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(tagNameExprXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((tagName | tagNameExpr), contentExpr?)
        /// </para>
        /// </summary>
        public virtual exprWrapper contentExpr {
            get {
                XElement x = this.GetElement(contentExprXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(contentExprXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<computedElementConstructorType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(tagNameXName, typeof(EQName));
            localElementDictionary.Add(tagNameExprXName, typeof(exprWrapper));
            localElementDictionary.Add(contentExprXName, typeof(exprWrapper));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((tagName | tagNameExpr), valueExpr?)
    /// </para>
    /// </summary>
    public partial class computedAttributeConstructorType : global::W3C.XQueryX.exprType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tagNameXName = System.Xml.Linq.XName.Get("tagName", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tagNameExprXName = System.Xml.Linq.XName.Get("tagNameExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valueExprXName = System.Xml.Linq.XName.Get("valueExpr", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("computedAttributeConstructor", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator computedAttributeConstructorType(XElement xe) { return XTypedServices.ToXTypedElement<computedAttributeConstructorType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static computedAttributeConstructorType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(tagNameXName), new NamedContentModelEntity(tagNameExprXName)), new NamedContentModelEntity(valueExprXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((tagName | tagNameExpr), valueExpr?)
        /// </para>
        /// </summary>
        public computedAttributeConstructorType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((tagName | tagNameExpr), valueExpr?)
        /// </para>
        /// </summary>
        public virtual EQName tagName {
            get {
                XElement x = this.GetElement(tagNameXName);
                return ((EQName)(x));
            }
            set {
                this.SetElement(tagNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((tagName | tagNameExpr), valueExpr?)
        /// </para>
        /// </summary>
        public virtual exprWrapper tagNameExpr {
            get {
                XElement x = this.GetElement(tagNameExprXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(tagNameExprXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((tagName | tagNameExpr), valueExpr?)
        /// </para>
        /// </summary>
        public virtual exprWrapper valueExpr {
            get {
                XElement x = this.GetElement(valueExprXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(valueExprXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<computedAttributeConstructorType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(tagNameXName, typeof(EQName));
            localElementDictionary.Add(tagNameExprXName, typeof(exprWrapper));
            localElementDictionary.Add(valueExprXName, typeof(exprWrapper));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (argExpr?)
    /// </para>
    /// </summary>
    public partial class computedDocumentConstructorType : global::W3C.XQueryX.exprType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName argExprXName = System.Xml.Linq.XName.Get("argExpr", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("computedDocumentConstructor", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator computedDocumentConstructorType(XElement xe) { return XTypedServices.ToXTypedElement<computedDocumentConstructorType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static computedDocumentConstructorType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(argExprXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (argExpr?)
        /// </para>
        /// </summary>
        public computedDocumentConstructorType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (argExpr?)
        /// </para>
        /// </summary>
        public virtual exprWrapper argExpr {
            get {
                XElement x = this.GetElement(argExprXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(argExprXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<computedDocumentConstructorType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(argExprXName, typeof(exprWrapper));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (argExpr?)
    /// </para>
    /// </summary>
    public partial class computedTextConstructorType : global::W3C.XQueryX.exprType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName argExprXName = System.Xml.Linq.XName.Get("argExpr", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("computedTextConstructor", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator computedTextConstructorType(XElement xe) { return XTypedServices.ToXTypedElement<computedTextConstructorType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static computedTextConstructorType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(argExprXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (argExpr?)
        /// </para>
        /// </summary>
        public computedTextConstructorType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (argExpr?)
        /// </para>
        /// </summary>
        public virtual exprWrapper argExpr {
            get {
                XElement x = this.GetElement(argExprXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(argExprXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<computedTextConstructorType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(argExprXName, typeof(exprWrapper));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (argExpr?)
    /// </para>
    /// </summary>
    public partial class computedCommentConstructorType : global::W3C.XQueryX.exprType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName argExprXName = System.Xml.Linq.XName.Get("argExpr", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("computedCommentConstructor", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator computedCommentConstructorType(XElement xe) { return XTypedServices.ToXTypedElement<computedCommentConstructorType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static computedCommentConstructorType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(argExprXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (argExpr?)
        /// </para>
        /// </summary>
        public computedCommentConstructorType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (argExpr?)
        /// </para>
        /// </summary>
        public virtual exprWrapper argExpr {
            get {
                XElement x = this.GetElement(argExprXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(argExprXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<computedCommentConstructorType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(argExprXName, typeof(exprWrapper));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((prefix | prefixExpr), URIExpr?)
    /// </para>
    /// </summary>
    public partial class computedNamespaceConstructorType : global::W3C.XQueryX.exprType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName prefixXName = System.Xml.Linq.XName.Get("prefix", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName prefixExprXName = System.Xml.Linq.XName.Get("prefixExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName URIExprXName = System.Xml.Linq.XName.Get("URIExpr", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("computedNamespaceConstructor", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator computedNamespaceConstructorType(XElement xe) { return XTypedServices.ToXTypedElement<computedNamespaceConstructorType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static computedNamespaceConstructorType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(prefixXName), new NamedContentModelEntity(prefixExprXName)), new NamedContentModelEntity(URIExprXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((prefix | prefixExpr), URIExpr?)
        /// </para>
        /// </summary>
        public computedNamespaceConstructorType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((prefix | prefixExpr), URIExpr?)
        /// </para>
        /// </summary>
        public virtual string prefix {
            get {
                XElement x = this.GetElement(prefixXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
            set {
                this.SetElement(prefixXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((prefix | prefixExpr), URIExpr?)
        /// </para>
        /// </summary>
        public virtual exprWrapper prefixExpr {
            get {
                XElement x = this.GetElement(prefixExprXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(prefixExprXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((prefix | prefixExpr), URIExpr?)
        /// </para>
        /// </summary>
        public virtual exprWrapper URIExpr {
            get {
                XElement x = this.GetElement(URIExprXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(URIExprXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<computedNamespaceConstructorType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(prefixXName, typeof(string));
            localElementDictionary.Add(prefixExprXName, typeof(exprWrapper));
            localElementDictionary.Add(URIExprXName, typeof(exprWrapper));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((piTarget | piTargetExpr), piValueExpr?)
    /// </para>
    /// </summary>
    public partial class computedPIConstructorType : global::W3C.XQueryX.exprType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName piTargetXName = System.Xml.Linq.XName.Get("piTarget", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName piTargetExprXName = System.Xml.Linq.XName.Get("piTargetExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName piValueExprXName = System.Xml.Linq.XName.Get("piValueExpr", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("computedPIConstructor", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator computedPIConstructorType(XElement xe) { return XTypedServices.ToXTypedElement<computedPIConstructorType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static computedPIConstructorType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(piTargetXName), new NamedContentModelEntity(piTargetExprXName)), new NamedContentModelEntity(piValueExprXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((piTarget | piTargetExpr), piValueExpr?)
        /// </para>
        /// </summary>
        public computedPIConstructorType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((piTarget | piTargetExpr), piValueExpr?)
        /// </para>
        /// </summary>
        public virtual string piTarget {
            get {
                XElement x = this.GetElement(piTargetXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
            set {
                this.SetElement(piTargetXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((piTarget | piTargetExpr), piValueExpr?)
        /// </para>
        /// </summary>
        public virtual exprWrapper piTargetExpr {
            get {
                XElement x = this.GetElement(piTargetExprXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(piTargetExprXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((piTarget | piTargetExpr), piValueExpr?)
        /// </para>
        /// </summary>
        public virtual exprWrapper piValueExpr {
            get {
                XElement x = this.GetElement(piValueExprXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(piValueExprXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<computedPIConstructorType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(piTargetXName, typeof(string));
            localElementDictionary.Add(piTargetExprXName, typeof(exprWrapper));
            localElementDictionary.Add(piValueExprXName, typeof(exprWrapper));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (argExpr?)
    /// </para>
    /// </summary>
    public partial class unorderedExprType : global::W3C.XQueryX.exprType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName argExprXName = System.Xml.Linq.XName.Get("argExpr", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("unorderedExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator unorderedExprType(XElement xe) { return XTypedServices.ToXTypedElement<unorderedExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static unorderedExprType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(argExprXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (argExpr?)
        /// </para>
        /// </summary>
        public unorderedExprType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (argExpr?)
        /// </para>
        /// </summary>
        public virtual exprWrapper argExpr {
            get {
                XElement x = this.GetElement(argExprXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(argExprXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<unorderedExprType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(argExprXName, typeof(exprWrapper));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (argExpr?)
    /// </para>
    /// </summary>
    public partial class orderedExprType : global::W3C.XQueryX.exprType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName argExprXName = System.Xml.Linq.XName.Get("argExpr", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("orderedExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator orderedExprType(XElement xe) { return XTypedServices.ToXTypedElement<orderedExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static orderedExprType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(argExprXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (argExpr?)
        /// </para>
        /// </summary>
        public orderedExprType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (argExpr?)
        /// </para>
        /// </summary>
        public virtual exprWrapper argExpr {
            get {
                XElement x = this.GetElement(argExprXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(argExprXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<orderedExprType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(argExprXName, typeof(exprWrapper));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (functionName, integerConstantExpr)
    /// </para>
    /// </summary>
    public partial class namedFunctionRefType : global::W3C.XQueryX.exprType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName functionNameXName = System.Xml.Linq.XName.Get("functionName", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName integerConstantExprXName = System.Xml.Linq.XName.Get("integerConstantExpr", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("namedFunctionRef", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator namedFunctionRefType(XElement xe) { return XTypedServices.ToXTypedElement<namedFunctionRefType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static namedFunctionRefType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(functionNameXName), new NamedContentModelEntity(integerConstantExprXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (functionName, integerConstantExpr)
        /// </para>
        /// </summary>
        public namedFunctionRefType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (functionName, integerConstantExpr)
        /// </para>
        /// </summary>
        public virtual EQName functionName {
            get {
                XElement x = this.GetElement(functionNameXName);
                return ((EQName)(x));
            }
            set {
                this.SetElement(functionNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (functionName, integerConstantExpr)
        /// </para>
        /// </summary>
        public virtual integerConstantExprType integerConstantExpr {
            get {
                XElement x = this.GetElement(integerConstantExprXName);
                return ((integerConstantExprType)(x));
            }
            set {
                this.SetElement(integerConstantExprXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<namedFunctionRefType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(functionNameXName, typeof(EQName));
            localElementDictionary.Add(integerConstantExprXName, typeof(integerConstantExprType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (annotation*, paramList, typeDeclaration?, functionBody)
    /// </para>
    /// </summary>
    public partial class inlineFunctionExprType : global::W3C.XQueryX.exprType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName annotationXName = System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<annotation> annotationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName paramListXName = System.Xml.Linq.XName.Get("paramList", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeDeclarationXName = System.Xml.Linq.XName.Get("typeDeclaration", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName functionBodyXName = System.Xml.Linq.XName.Get("functionBody", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("inlineFunctionExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator inlineFunctionExprType(XElement xe) { return XTypedServices.ToXTypedElement<inlineFunctionExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static inlineFunctionExprType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(annotationXName), new NamedContentModelEntity(paramListXName), new NamedContentModelEntity(typeDeclarationXName), new NamedContentModelEntity(functionBodyXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (annotation*, paramList, typeDeclaration?, functionBody)
        /// </para>
        /// </summary>
        public inlineFunctionExprType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (annotation*, paramList, typeDeclaration?, functionBody)
        /// </para>
        /// </summary>
        public virtual IList<annotation> annotation {
            get {
                if ((this.annotationField == null)) {
                    this.annotationField = new XTypedList<annotation>(this, LinqToXsdTypeManager.Instance, annotationXName);
                }
                return this.annotationField;
            }
            set {
                if ((value == null)) {
                    this.annotationField = null;
                }
                else {
                    if ((this.annotationField == null)) {
                        this.annotationField = XTypedList<annotation>.Initialize(this, LinqToXsdTypeManager.Instance, value, annotationXName);
                    }
                    else {
                        XTypedServices.SetList<annotation>(this.annotationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (annotation*, paramList, typeDeclaration?, functionBody)
        /// </para>
        /// </summary>
        public virtual paramList paramList {
            get {
                XElement x = this.GetElement(paramListXName);
                return ((paramList)(x));
            }
            set {
                this.SetElement(paramListXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (annotation*, paramList, typeDeclaration?, functionBody)
        /// </para>
        /// </summary>
        public virtual typeDeclaration typeDeclaration {
            get {
                XElement x = this.GetElement(typeDeclarationXName);
                return ((typeDeclaration)(x));
            }
            set {
                this.SetElement(typeDeclarationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (annotation*, paramList, typeDeclaration?, functionBody)
        /// </para>
        /// </summary>
        public virtual exprWrapper functionBody {
            get {
                XElement x = this.GetElement(functionBodyXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(functionBodyXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<inlineFunctionExprType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(annotationXName, typeof(annotation));
            localElementDictionary.Add(paramListXName, typeof(paramList));
            localElementDictionary.Add(typeDeclarationXName, typeof(typeDeclaration));
            localElementDictionary.Add(functionBodyXName, typeof(exprWrapper));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (functionItem, predicates?, arguments?)
    /// </para>
    /// </summary>
    public partial class dynamicFunctionInvocationExprType : global::W3C.XQueryX.exprType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName functionItemXName = System.Xml.Linq.XName.Get("functionItem", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName predicatesXName = System.Xml.Linq.XName.Get("predicates", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName argumentsXName = System.Xml.Linq.XName.Get("arguments", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("dynamicFunctionInvocationExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator dynamicFunctionInvocationExprType(XElement xe) { return XTypedServices.ToXTypedElement<dynamicFunctionInvocationExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static dynamicFunctionInvocationExprType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(functionItemXName), new NamedContentModelEntity(predicatesXName), new NamedContentModelEntity(argumentsXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (functionItem, predicates?, arguments?)
        /// </para>
        /// </summary>
        public dynamicFunctionInvocationExprType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (functionItem, predicates?, arguments?)
        /// </para>
        /// </summary>
        public virtual functionItemLocalType functionItem {
            get {
                XElement x = this.GetElement(functionItemXName);
                return ((functionItemLocalType)(x));
            }
            set {
                this.SetElement(functionItemXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (functionItem, predicates?, arguments?)
        /// </para>
        /// </summary>
        public virtual exprList predicates {
            get {
                XElement x = this.GetElement(predicatesXName);
                return ((exprList)(x));
            }
            set {
                this.SetElement(predicatesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (functionItem, predicates?, arguments?)
        /// </para>
        /// </summary>
        public virtual exprOrPlaceholderList arguments {
            get {
                XElement x = this.GetElement(argumentsXName);
                return ((exprOrPlaceholderList)(x));
            }
            set {
                this.SetElement(argumentsXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<dynamicFunctionInvocationExprType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(functionItemXName, typeof(functionItemLocalType));
            localElementDictionary.Add(predicatesXName, typeof(exprList));
            localElementDictionary.Add(argumentsXName, typeof(exprOrPlaceholderList));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
        /// </para>
        /// </summary>
        public partial class functionItemLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName constantExprXName = System.Xml.Linq.XName.Get("constantExpr", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName varRefXName = System.Xml.Linq.XName.Get("varRef", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName contextItemExprXName = System.Xml.Linq.XName.Get("contextItemExpr", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName functionCallExprXName = System.Xml.Linq.XName.Get("functionCallExpr", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName sequenceExprXName = System.Xml.Linq.XName.Get("sequenceExpr", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName elementConstructorXName = System.Xml.Linq.XName.Get("elementConstructor", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName computedElementConstructorXName = System.Xml.Linq.XName.Get("computedElementConstructor", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName computedAttributeConstructorXName = System.Xml.Linq.XName.Get("computedAttributeConstructor", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName computedDocumentConstructorXName = System.Xml.Linq.XName.Get("computedDocumentConstructor", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName computedTextConstructorXName = System.Xml.Linq.XName.Get("computedTextConstructor", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName computedCommentConstructorXName = System.Xml.Linq.XName.Get("computedCommentConstructor", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName computedNamespaceConstructorXName = System.Xml.Linq.XName.Get("computedNamespaceConstructor", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName computedPIConstructorXName = System.Xml.Linq.XName.Get("computedPIConstructor", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName orderedExprXName = System.Xml.Linq.XName.Get("orderedExpr", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName unorderedExprXName = System.Xml.Linq.XName.Get("unorderedExpr", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName namedFunctionRefXName = System.Xml.Linq.XName.Get("namedFunctionRef", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName inlineFunctionExprXName = System.Xml.Linq.XName.Get("inlineFunctionExpr", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName dynamicFunctionInvocationExprXName = System.Xml.Linq.XName.Get("dynamicFunctionInvocationExpr", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName mapConstructorXName = System.Xml.Linq.XName.Get("mapConstructor", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName arrayConstructorXName = System.Xml.Linq.XName.Get("arrayConstructor", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName stringConstructorXName = System.Xml.Linq.XName.Get("stringConstructor", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName unaryLookupXName = System.Xml.Linq.XName.Get("unaryLookup", "http://www.w3.org/2005/XQueryX");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("functionItem", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator functionItemLocalType(XElement xe) { return XTypedServices.ToXTypedElement<functionItemLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static functionItemLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("constantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("integerConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("decimalConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("doubleConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstantExpr", "http://www.w3.org/2005/XQueryX")), new NamedContentModelEntity(varRefXName), new NamedContentModelEntity(contextItemExprXName), new NamedContentModelEntity(functionCallExprXName), new NamedContentModelEntity(sequenceExprXName), new NamedContentModelEntity(elementConstructorXName), new NamedContentModelEntity(computedElementConstructorXName), new NamedContentModelEntity(computedAttributeConstructorXName), new NamedContentModelEntity(computedDocumentConstructorXName), new NamedContentModelEntity(computedTextConstructorXName), new NamedContentModelEntity(computedCommentConstructorXName), new NamedContentModelEntity(computedNamespaceConstructorXName), new NamedContentModelEntity(computedPIConstructorXName), new NamedContentModelEntity(orderedExprXName), new NamedContentModelEntity(unorderedExprXName), new NamedContentModelEntity(namedFunctionRefXName), new NamedContentModelEntity(inlineFunctionExprXName), new NamedContentModelEntity(dynamicFunctionInvocationExprXName), new NamedContentModelEntity(mapConstructorXName), new NamedContentModelEntity(arrayConstructorXName), new NamedContentModelEntity(stringConstructorXName), new NamedContentModelEntity(unaryLookupXName)));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public functionItemLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Substitution members: constantExpr, integerConstantExpr, decimalConstantExpr, doubleConstantExpr, stringConstantExpr
            /// </para>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public virtual constantExpr constantExpr {
                get {
                    XTypedElement x = XTypedServices.ToSubstitutedXTypedElement(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("constantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("integerConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("decimalConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("doubleConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstantExpr", "http://www.w3.org/2005/XQueryX"));
                    return ((constantExpr)(x));
                }
                set {
                    this.SetElement(constantExprXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public virtual varRef varRef {
                get {
                    XElement x = this.GetElement(varRefXName);
                    return ((varRef)(x));
                }
                set {
                    this.SetElement(varRefXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public virtual contextItemExpr contextItemExpr {
                get {
                    XElement x = this.GetElement(contextItemExprXName);
                    return ((contextItemExpr)(x));
                }
                set {
                    this.SetElement(contextItemExprXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public virtual functionCallExpr functionCallExpr {
                get {
                    XElement x = this.GetElement(functionCallExprXName);
                    return ((functionCallExpr)(x));
                }
                set {
                    this.SetElement(functionCallExprXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public virtual sequenceExpr sequenceExpr {
                get {
                    XElement x = this.GetElement(sequenceExprXName);
                    return ((sequenceExpr)(x));
                }
                set {
                    this.SetElement(sequenceExprXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public virtual elementConstructor elementConstructor {
                get {
                    XElement x = this.GetElement(elementConstructorXName);
                    return ((elementConstructor)(x));
                }
                set {
                    this.SetElement(elementConstructorXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public virtual computedElementConstructor computedElementConstructor {
                get {
                    XElement x = this.GetElement(computedElementConstructorXName);
                    return ((computedElementConstructor)(x));
                }
                set {
                    this.SetElement(computedElementConstructorXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public virtual computedAttributeConstructor computedAttributeConstructor {
                get {
                    XElement x = this.GetElement(computedAttributeConstructorXName);
                    return ((computedAttributeConstructor)(x));
                }
                set {
                    this.SetElement(computedAttributeConstructorXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public virtual computedDocumentConstructor computedDocumentConstructor {
                get {
                    XElement x = this.GetElement(computedDocumentConstructorXName);
                    return ((computedDocumentConstructor)(x));
                }
                set {
                    this.SetElement(computedDocumentConstructorXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public virtual computedTextConstructor computedTextConstructor {
                get {
                    XElement x = this.GetElement(computedTextConstructorXName);
                    return ((computedTextConstructor)(x));
                }
                set {
                    this.SetElement(computedTextConstructorXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public virtual computedCommentConstructor computedCommentConstructor {
                get {
                    XElement x = this.GetElement(computedCommentConstructorXName);
                    return ((computedCommentConstructor)(x));
                }
                set {
                    this.SetElement(computedCommentConstructorXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public virtual computedNamespaceConstructor computedNamespaceConstructor {
                get {
                    XElement x = this.GetElement(computedNamespaceConstructorXName);
                    return ((computedNamespaceConstructor)(x));
                }
                set {
                    this.SetElement(computedNamespaceConstructorXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public virtual computedPIConstructor computedPIConstructor {
                get {
                    XElement x = this.GetElement(computedPIConstructorXName);
                    return ((computedPIConstructor)(x));
                }
                set {
                    this.SetElement(computedPIConstructorXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public virtual orderedExpr orderedExpr {
                get {
                    XElement x = this.GetElement(orderedExprXName);
                    return ((orderedExpr)(x));
                }
                set {
                    this.SetElement(orderedExprXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public virtual unorderedExpr unorderedExpr {
                get {
                    XElement x = this.GetElement(unorderedExprXName);
                    return ((unorderedExpr)(x));
                }
                set {
                    this.SetElement(unorderedExprXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public virtual namedFunctionRef namedFunctionRef {
                get {
                    XElement x = this.GetElement(namedFunctionRefXName);
                    return ((namedFunctionRef)(x));
                }
                set {
                    this.SetElement(namedFunctionRefXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public virtual inlineFunctionExpr inlineFunctionExpr {
                get {
                    XElement x = this.GetElement(inlineFunctionExprXName);
                    return ((inlineFunctionExpr)(x));
                }
                set {
                    this.SetElement(inlineFunctionExprXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public virtual dynamicFunctionInvocationExpr dynamicFunctionInvocationExpr {
                get {
                    XElement x = this.GetElement(dynamicFunctionInvocationExprXName);
                    return ((dynamicFunctionInvocationExpr)(x));
                }
                set {
                    this.SetElement(dynamicFunctionInvocationExprXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public virtual mapConstructor mapConstructor {
                get {
                    XElement x = this.GetElement(mapConstructorXName);
                    return ((mapConstructor)(x));
                }
                set {
                    this.SetElement(mapConstructorXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public virtual arrayConstructor arrayConstructor {
                get {
                    XElement x = this.GetElement(arrayConstructorXName);
                    return ((arrayConstructor)(x));
                }
                set {
                    this.SetElement(arrayConstructorXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public virtual stringConstructor stringConstructor {
                get {
                    XElement x = this.GetElement(stringConstructorXName);
                    return ((stringConstructor)(x));
                }
                set {
                    this.SetElement(stringConstructorXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public virtual unaryLookup unaryLookup {
                get {
                    XElement x = this.GetElement(unaryLookupXName);
                    return ((unaryLookup)(x));
                }
                set {
                    this.SetElement(unaryLookupXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<functionItemLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(constantExprXName, typeof(constantExpr));
                localElementDictionary.Add(varRefXName, typeof(varRef));
                localElementDictionary.Add(contextItemExprXName, typeof(contextItemExpr));
                localElementDictionary.Add(functionCallExprXName, typeof(functionCallExpr));
                localElementDictionary.Add(sequenceExprXName, typeof(sequenceExpr));
                localElementDictionary.Add(elementConstructorXName, typeof(elementConstructor));
                localElementDictionary.Add(computedElementConstructorXName, typeof(computedElementConstructor));
                localElementDictionary.Add(computedAttributeConstructorXName, typeof(computedAttributeConstructor));
                localElementDictionary.Add(computedDocumentConstructorXName, typeof(computedDocumentConstructor));
                localElementDictionary.Add(computedTextConstructorXName, typeof(computedTextConstructor));
                localElementDictionary.Add(computedCommentConstructorXName, typeof(computedCommentConstructor));
                localElementDictionary.Add(computedNamespaceConstructorXName, typeof(computedNamespaceConstructor));
                localElementDictionary.Add(computedPIConstructorXName, typeof(computedPIConstructor));
                localElementDictionary.Add(orderedExprXName, typeof(orderedExpr));
                localElementDictionary.Add(unorderedExprXName, typeof(unorderedExpr));
                localElementDictionary.Add(namedFunctionRefXName, typeof(namedFunctionRef));
                localElementDictionary.Add(inlineFunctionExprXName, typeof(inlineFunctionExpr));
                localElementDictionary.Add(dynamicFunctionInvocationExprXName, typeof(dynamicFunctionInvocationExpr));
                localElementDictionary.Add(mapConstructorXName, typeof(mapConstructor));
                localElementDictionary.Add(arrayConstructorXName, typeof(arrayConstructor));
                localElementDictionary.Add(stringConstructorXName, typeof(stringConstructor));
                localElementDictionary.Add(unaryLookupXName, typeof(unaryLookup));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (mapConstructorEntry*)
    /// </para>
    /// </summary>
    public partial class mapConstructorType : global::W3C.XQueryX.exprType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName mapConstructorEntryXName = System.Xml.Linq.XName.Get("mapConstructorEntry", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<mapConstructorEntry> mapConstructorEntryField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("mapConstructor", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator mapConstructorType(XElement xe) { return XTypedServices.ToXTypedElement<mapConstructorType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static mapConstructorType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(mapConstructorEntryXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (mapConstructorEntry*)
        /// </para>
        /// </summary>
        public mapConstructorType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (mapConstructorEntry*)
        /// </para>
        /// </summary>
        public virtual IList<mapConstructorEntry> mapConstructorEntry {
            get {
                if ((this.mapConstructorEntryField == null)) {
                    this.mapConstructorEntryField = new XTypedList<mapConstructorEntry>(this, LinqToXsdTypeManager.Instance, mapConstructorEntryXName);
                }
                return this.mapConstructorEntryField;
            }
            set {
                if ((value == null)) {
                    this.mapConstructorEntryField = null;
                }
                else {
                    if ((this.mapConstructorEntryField == null)) {
                        this.mapConstructorEntryField = XTypedList<mapConstructorEntry>.Initialize(this, LinqToXsdTypeManager.Instance, value, mapConstructorEntryXName);
                    }
                    else {
                        XTypedServices.SetList<mapConstructorEntry>(this.mapConstructorEntryField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<mapConstructorType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(mapConstructorEntryXName, typeof(mapConstructorEntry));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (mapKeyExpr, mapValueExpr)
    /// </para>
    /// </summary>
    public partial class mapConstructorEntryType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName mapKeyExprXName = System.Xml.Linq.XName.Get("mapKeyExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName mapValueExprXName = System.Xml.Linq.XName.Get("mapValueExpr", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("mapConstructorEntry", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator mapConstructorEntryType(XElement xe) { return XTypedServices.ToXTypedElement<mapConstructorEntryType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static mapConstructorEntryType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(mapKeyExprXName), new NamedContentModelEntity(mapValueExprXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (mapKeyExpr, mapValueExpr)
        /// </para>
        /// </summary>
        public mapConstructorEntryType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (mapKeyExpr, mapValueExpr)
        /// </para>
        /// </summary>
        public virtual exprWrapper mapKeyExpr {
            get {
                XElement x = this.GetElement(mapKeyExprXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(mapKeyExprXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (mapKeyExpr, mapValueExpr)
        /// </para>
        /// </summary>
        public virtual exprWrapper mapValueExpr {
            get {
                XElement x = this.GetElement(mapValueExprXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(mapValueExprXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<mapConstructorEntryType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(mapKeyExprXName, typeof(exprWrapper));
            localElementDictionary.Add(mapValueExprXName, typeof(exprWrapper));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (squareArray | curlyArray)
    /// </para>
    /// </summary>
    public partial class arrayConstructorType : global::W3C.XQueryX.exprType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName squareArrayXName = System.Xml.Linq.XName.Get("squareArray", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName curlyArrayXName = System.Xml.Linq.XName.Get("curlyArray", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("arrayConstructor", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator arrayConstructorType(XElement xe) { return XTypedServices.ToXTypedElement<arrayConstructorType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static arrayConstructorType() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(squareArrayXName), new NamedContentModelEntity(curlyArrayXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (squareArray | curlyArray)
        /// </para>
        /// </summary>
        public arrayConstructorType() {
        }
        
        public arrayConstructorType(squareArray squareArray) {
            this.squareArray = squareArray;
        }
        
        public arrayConstructorType(curlyArray curlyArray) {
            this.curlyArray = curlyArray;
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (squareArray | curlyArray)
        /// </para>
        /// </summary>
        public virtual squareArray squareArray {
            get {
                XElement x = this.GetElement(squareArrayXName);
                return ((squareArray)(x));
            }
            set {
                this.SetElement(squareArrayXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (squareArray | curlyArray)
        /// </para>
        /// </summary>
        public virtual curlyArray curlyArray {
            get {
                XElement x = this.GetElement(curlyArrayXName);
                return ((curlyArray)(x));
            }
            set {
                this.SetElement(curlyArrayXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<arrayConstructorType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(squareArrayXName, typeof(squareArray));
            localElementDictionary.Add(curlyArrayXName, typeof(curlyArray));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (arrayElem)*
    /// </para>
    /// </summary>
    public partial class squareArrayType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arrayElemXName = System.Xml.Linq.XName.Get("arrayElem", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<exprWrapper> arrayElemField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("squareArray", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator squareArrayType(XElement xe) { return XTypedServices.ToXTypedElement<squareArrayType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static squareArrayType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(arrayElemXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (arrayElem)*
        /// </para>
        /// </summary>
        public squareArrayType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (arrayElem)*
        /// </para>
        /// </summary>
        public virtual IList<exprWrapper> arrayElem {
            get {
                if ((this.arrayElemField == null)) {
                    this.arrayElemField = new XTypedList<exprWrapper>(this, LinqToXsdTypeManager.Instance, arrayElemXName);
                }
                return this.arrayElemField;
            }
            set {
                if ((value == null)) {
                    this.arrayElemField = null;
                }
                else {
                    if ((this.arrayElemField == null)) {
                        this.arrayElemField = XTypedList<exprWrapper>.Initialize(this, LinqToXsdTypeManager.Instance, value, arrayElemXName);
                    }
                    else {
                        XTypedServices.SetList<exprWrapper>(this.arrayElemField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<squareArrayType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(arrayElemXName, typeof(exprWrapper));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (arrayElem)?
    /// </para>
    /// </summary>
    public partial class curlyArrayType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arrayElemXName = System.Xml.Linq.XName.Get("arrayElem", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("curlyArray", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator curlyArrayType(XElement xe) { return XTypedServices.ToXTypedElement<curlyArrayType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static curlyArrayType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(arrayElemXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (arrayElem)?
        /// </para>
        /// </summary>
        public curlyArrayType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (arrayElem)?
        /// </para>
        /// </summary>
        public virtual exprWrapper arrayElem {
            get {
                XElement x = this.GetElement(arrayElemXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(arrayElemXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<curlyArrayType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(arrayElemXName, typeof(exprWrapper));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((stringConstructorChars | stringConstructorInterpolation)*)
    /// </para>
    /// </summary>
    public partial class stringConstructorType : global::W3C.XQueryX.exprType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stringConstructorCharsXName = System.Xml.Linq.XName.Get("stringConstructorChars", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> stringConstructorCharsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stringConstructorInterpolationXName = System.Xml.Linq.XName.Get("stringConstructorInterpolation", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<exprWrapperOptional> stringConstructorInterpolationField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("stringConstructor", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator stringConstructorType(XElement xe) { return XTypedServices.ToXTypedElement<stringConstructorType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static stringConstructorType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(stringConstructorCharsXName), new NamedContentModelEntity(stringConstructorInterpolationXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((stringConstructorChars | stringConstructorInterpolation)*)
        /// </para>
        /// </summary>
        public stringConstructorType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((stringConstructorChars | stringConstructorInterpolation)*)
        /// </para>
        /// </summary>
        public virtual IList<string> stringConstructorChars {
            get {
                if ((this.stringConstructorCharsField == null)) {
                    this.stringConstructorCharsField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, stringConstructorCharsXName);
                }
                return this.stringConstructorCharsField;
            }
            set {
                if ((value == null)) {
                    this.stringConstructorCharsField = null;
                }
                else {
                    if ((this.stringConstructorCharsField == null)) {
                        this.stringConstructorCharsField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, stringConstructorCharsXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.stringConstructorCharsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((stringConstructorChars | stringConstructorInterpolation)*)
        /// </para>
        /// </summary>
        public virtual IList<exprWrapperOptional> stringConstructorInterpolation {
            get {
                if ((this.stringConstructorInterpolationField == null)) {
                    this.stringConstructorInterpolationField = new XTypedList<exprWrapperOptional>(this, LinqToXsdTypeManager.Instance, stringConstructorInterpolationXName);
                }
                return this.stringConstructorInterpolationField;
            }
            set {
                if ((value == null)) {
                    this.stringConstructorInterpolationField = null;
                }
                else {
                    if ((this.stringConstructorInterpolationField == null)) {
                        this.stringConstructorInterpolationField = XTypedList<exprWrapperOptional>.Initialize(this, LinqToXsdTypeManager.Instance, value, stringConstructorInterpolationXName);
                    }
                    else {
                        XTypedServices.SetList<exprWrapperOptional>(this.stringConstructorInterpolationField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<stringConstructorType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(stringConstructorCharsXName, typeof(string));
            localElementDictionary.Add(stringConstructorInterpolationXName, typeof(exprWrapperOptional));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (QName | star)
    /// </para>
    /// </summary>
    public partial class simpleWildcard : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName QNameXName = System.Xml.Linq.XName.Get("QName", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName starXName = System.Xml.Linq.XName.Get("star", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("simpleWildcard", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator simpleWildcard(XElement xe) { return XTypedServices.ToXTypedElement<simpleWildcard>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static simpleWildcard() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(QNameXName), new NamedContentModelEntity(starXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (QName | star)
        /// </para>
        /// </summary>
        public simpleWildcard() {
        }
        
        public simpleWildcard(EQName QName) {
            this.QName = QName;
        }
        
        public simpleWildcard(emptyContent star) {
            this.star = star;
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (QName | star)
        /// </para>
        /// </summary>
        public virtual EQName QName {
            get {
                XElement x = this.GetElement(QNameXName);
                return ((EQName)(x));
            }
            set {
                this.SetElement(QNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (QName | star)
        /// </para>
        /// </summary>
        public virtual emptyContent star {
            get {
                XElement x = this.GetElement(starXName);
                return ((emptyContent)(x));
            }
            set {
                this.SetElement(starXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<simpleWildcard>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(QNameXName, typeof(EQName));
            localElementDictionary.Add(starXName, typeof(emptyContent));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((star, NCName)|(NCName, star)|(uri, star))?
    /// </para>
    /// </summary>
    public partial class WildcardType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName starXName = System.Xml.Linq.XName.Get("star", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<emptyContent> starField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NCNameXName = System.Xml.Linq.XName.Get("NCName", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<NCName> NCNameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uriXName = System.Xml.Linq.XName.Get("uri", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Wildcard", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator WildcardType(XElement xe) { return XTypedServices.ToXTypedElement<WildcardType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static WildcardType() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(starXName), new NamedContentModelEntity(NCNameXName)), new SequenceContentModelEntity(new NamedContentModelEntity(NCNameXName), new NamedContentModelEntity(starXName)), new SequenceContentModelEntity(new NamedContentModelEntity(uriXName), new NamedContentModelEntity(starXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((star, NCName)|(NCName, star)|(uri, star))?
        /// </para>
        /// </summary>
        public WildcardType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((star, NCName)|(NCName, star)|(uri, star))?
        /// </para>
        /// </summary>
        public virtual IList<emptyContent> star {
            get {
                if ((this.starField == null)) {
                    this.starField = new XTypedList<emptyContent>(this, LinqToXsdTypeManager.Instance, starXName);
                }
                return this.starField;
            }
            set {
                if ((value == null)) {
                    this.starField = null;
                }
                else {
                    if ((this.starField == null)) {
                        this.starField = XTypedList<emptyContent>.Initialize(this, LinqToXsdTypeManager.Instance, value, starXName);
                    }
                    else {
                        XTypedServices.SetList<emptyContent>(this.starField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((star, NCName)|(NCName, star)|(uri, star))?
        /// </para>
        /// </summary>
        public virtual IList<NCName> NCName {
            get {
                if ((this.NCNameField == null)) {
                    this.NCNameField = new XSimpleList<NCName>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype, NCNameXName);
                }
                return this.NCNameField;
            }
            set {
                if ((value == null)) {
                    this.NCNameField = null;
                }
                else {
                    if ((this.NCNameField == null)) {
                        this.NCNameField = XSimpleList<NCName>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype, value, NCNameXName);
                    }
                    else {
                        XTypedServices.SetList<NCName>(this.NCNameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((star, NCName)|(NCName, star)|(uri, star))?
        /// </para>
        /// </summary>
        public virtual string uri {
            get {
                XElement x = this.GetElement(uriXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(uriXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<WildcardType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(starXName, typeof(emptyContent));
            localElementDictionary.Add(NCNameXName, typeof(NCName));
            localElementDictionary.Add(uriXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (attributeName, typeName?)?
    /// </para>
    /// </summary>
    public partial class attributeTestType : global::W3C.XQueryX.emptyItemTypeContent, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName attributeNameXName = System.Xml.Linq.XName.Get("attributeName", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeNameXName = System.Xml.Linq.XName.Get("typeName", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("attributeTest", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator attributeTestType(XElement xe) { return XTypedServices.ToXTypedElement<attributeTestType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static attributeTestType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(attributeNameXName), new NamedContentModelEntity(typeNameXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (attributeName, typeName?)?
        /// </para>
        /// </summary>
        public attributeTestType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (attributeName, typeName?)?
        /// </para>
        /// </summary>
        public virtual simpleWildcard attributeName {
            get {
                XElement x = this.GetElement(attributeNameXName);
                return ((simpleWildcard)(x));
            }
            set {
                this.SetElement(attributeNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (attributeName, typeName?)?
        /// </para>
        /// </summary>
        public virtual EQName typeName {
            get {
                XElement x = this.GetElement(typeNameXName);
                return ((EQName)(x));
            }
            set {
                this.SetElement(typeNameXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<attributeTestType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(attributeNameXName, typeof(simpleWildcard));
            localElementDictionary.Add(typeNameXName, typeof(EQName));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (elementName, (typeName, nillable?)?)?
    /// </para>
    /// </summary>
    public partial class elementTestType : global::W3C.XQueryX.emptyItemTypeContent, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName elementNameXName = System.Xml.Linq.XName.Get("elementName", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeNameXName = System.Xml.Linq.XName.Get("typeName", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nillableXName = System.Xml.Linq.XName.Get("nillable", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("elementTest", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator elementTestType(XElement xe) { return XTypedServices.ToXTypedElement<elementTestType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static elementTestType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(elementNameXName), new SequenceContentModelEntity(new NamedContentModelEntity(typeNameXName), new NamedContentModelEntity(nillableXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (elementName, (typeName, nillable?)?)?
        /// </para>
        /// </summary>
        public elementTestType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (elementName, (typeName, nillable?)?)?
        /// </para>
        /// </summary>
        public virtual simpleWildcard elementName {
            get {
                XElement x = this.GetElement(elementNameXName);
                return ((simpleWildcard)(x));
            }
            set {
                this.SetElement(elementNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (elementName, (typeName, nillable?)?)?
        /// </para>
        /// </summary>
        public virtual EQName typeName {
            get {
                XElement x = this.GetElement(typeNameXName);
                return ((EQName)(x));
            }
            set {
                this.SetElement(typeNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (elementName, (typeName, nillable?)?)?
        /// </para>
        /// </summary>
        public virtual emptyContent nillable {
            get {
                XElement x = this.GetElement(nillableXName);
                return ((emptyContent)(x));
            }
            set {
                this.SetElement(nillableXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<elementTestType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(elementNameXName, typeof(simpleWildcard));
            localElementDictionary.Add(typeNameXName, typeof(EQName));
            localElementDictionary.Add(nillableXName, typeof(emptyContent));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (anyElementTest?)
    /// </para>
    /// </summary>
    public partial class documentTestType : global::W3C.XQueryX.emptyItemTypeContent, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName anyElementTestXName = System.Xml.Linq.XName.Get("anyElementTest", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("documentTest", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator documentTestType(XElement xe) { return XTypedServices.ToXTypedElement<documentTestType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static documentTestType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("anyElementTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("schemaElementTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("elementTest", "http://www.w3.org/2005/XQueryX")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (anyElementTest?)
        /// </para>
        /// </summary>
        public documentTestType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Substitution members: anyElementTest, schemaElementTest, elementTest
        /// </para>
        /// <para>
        /// Regular expression: (anyElementTest?)
        /// </para>
        /// </summary>
        public virtual anyElementTest anyElementTest {
            get {
                XTypedElement x = XTypedServices.ToSubstitutedXTypedElement(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("anyElementTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("schemaElementTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("elementTest", "http://www.w3.org/2005/XQueryX"));
                return ((anyElementTest)(x));
            }
            set {
                this.SetElement(anyElementTestXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<documentTestType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(anyElementTestXName, typeof(anyElementTest));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (piTarget?)
    /// </para>
    /// </summary>
    public partial class piTestType : global::W3C.XQueryX.emptyItemTypeContent, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName piTargetXName = System.Xml.Linq.XName.Get("piTarget", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("piTest", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator piTestType(XElement xe) { return XTypedServices.ToXTypedElement<piTestType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static piTestType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(piTargetXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (piTarget?)
        /// </para>
        /// </summary>
        public piTestType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (piTarget?)
        /// </para>
        /// </summary>
        public virtual string piTarget {
            get {
                XElement x = this.GetElement(piTargetXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
            set {
                this.SetElement(piTargetXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<piTestType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(piTargetXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (annotation*)
    /// </para>
    /// </summary>
    public partial class anyFunctionTestType : global::W3C.XQueryX.emptyItemTypeContent, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName annotationXName = System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<annotation> annotationField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("anyFunctionTest", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator anyFunctionTestType(XElement xe) { return XTypedServices.ToXTypedElement<anyFunctionTestType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static anyFunctionTestType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(annotationXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (annotation*)
        /// </para>
        /// </summary>
        public anyFunctionTestType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (annotation*)
        /// </para>
        /// </summary>
        public virtual IList<annotation> annotation {
            get {
                if ((this.annotationField == null)) {
                    this.annotationField = new XTypedList<annotation>(this, LinqToXsdTypeManager.Instance, annotationXName);
                }
                return this.annotationField;
            }
            set {
                if ((value == null)) {
                    this.annotationField = null;
                }
                else {
                    if ((this.annotationField == null)) {
                        this.annotationField = XTypedList<annotation>.Initialize(this, LinqToXsdTypeManager.Instance, value, annotationXName);
                    }
                    else {
                        XTypedServices.SetList<annotation>(this.annotationField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<anyFunctionTestType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(annotationXName, typeof(annotation));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (annotation*, paramTypeList?, sequenceType)
    /// </para>
    /// </summary>
    public partial class typedFunctionTestType : global::W3C.XQueryX.emptyItemTypeContent, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName annotationXName = System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<annotation> annotationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName paramTypeListXName = System.Xml.Linq.XName.Get("paramTypeList", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sequenceTypeXName = System.Xml.Linq.XName.Get("sequenceType", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("typedFunctionTest", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator typedFunctionTestType(XElement xe) { return XTypedServices.ToXTypedElement<typedFunctionTestType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static typedFunctionTestType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(annotationXName), new NamedContentModelEntity(paramTypeListXName), new NamedContentModelEntity(sequenceTypeXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (annotation*, paramTypeList?, sequenceType)
        /// </para>
        /// </summary>
        public typedFunctionTestType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (annotation*, paramTypeList?, sequenceType)
        /// </para>
        /// </summary>
        public virtual IList<annotation> annotation {
            get {
                if ((this.annotationField == null)) {
                    this.annotationField = new XTypedList<annotation>(this, LinqToXsdTypeManager.Instance, annotationXName);
                }
                return this.annotationField;
            }
            set {
                if ((value == null)) {
                    this.annotationField = null;
                }
                else {
                    if ((this.annotationField == null)) {
                        this.annotationField = XTypedList<annotation>.Initialize(this, LinqToXsdTypeManager.Instance, value, annotationXName);
                    }
                    else {
                        XTypedServices.SetList<annotation>(this.annotationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (annotation*, paramTypeList?, sequenceType)
        /// </para>
        /// </summary>
        public virtual paramTypeList paramTypeList {
            get {
                XElement x = this.GetElement(paramTypeListXName);
                return ((paramTypeList)(x));
            }
            set {
                this.SetElement(paramTypeListXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (annotation*, paramTypeList?, sequenceType)
        /// </para>
        /// </summary>
        public virtual sequenceType sequenceType {
            get {
                XElement x = this.GetElement(sequenceTypeXName);
                return ((sequenceType)(x));
            }
            set {
                this.SetElement(sequenceTypeXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<typedFunctionTestType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(annotationXName, typeof(annotation));
            localElementDictionary.Add(paramTypeListXName, typeof(paramTypeList));
            localElementDictionary.Add(sequenceTypeXName, typeof(sequenceType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (sequenceType*)
    /// </para>
    /// </summary>
    public partial class paramTypeListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sequenceTypeXName = System.Xml.Linq.XName.Get("sequenceType", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<sequenceType> sequenceTypeField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("paramTypeList", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator paramTypeListType(XElement xe) { return XTypedServices.ToXTypedElement<paramTypeListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static paramTypeListType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(sequenceTypeXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (sequenceType*)
        /// </para>
        /// </summary>
        public paramTypeListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (sequenceType*)
        /// </para>
        /// </summary>
        public virtual IList<sequenceType> sequenceType {
            get {
                if ((this.sequenceTypeField == null)) {
                    this.sequenceTypeField = new XTypedList<sequenceType>(this, LinqToXsdTypeManager.Instance, sequenceTypeXName);
                }
                return this.sequenceTypeField;
            }
            set {
                if ((value == null)) {
                    this.sequenceTypeField = null;
                }
                else {
                    if ((this.sequenceTypeField == null)) {
                        this.sequenceTypeField = XTypedList<sequenceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, sequenceTypeXName);
                    }
                    else {
                        XTypedServices.SetList<sequenceType>(this.sequenceTypeField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<paramTypeListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(sequenceTypeXName, typeof(sequenceType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (itemType)
    /// </para>
    /// </summary>
    public partial class parenthesizedItemTypeType : global::W3C.XQueryX.emptyItemTypeContent, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName itemTypeXName = System.Xml.Linq.XName.Get("itemType", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("parenthesizedItemType", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator parenthesizedItemTypeType(XElement xe) { return XTypedServices.ToXTypedElement<parenthesizedItemTypeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static parenthesizedItemTypeType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("itemType", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("atomicType", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("contextItemType", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("anyItemType", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("schemaAttributeTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("attributeTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("anyElementTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("schemaElementTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("elementTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("documentTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("piTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("kindTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("textTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("commentTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("namespaceTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("anyKindTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("anyFunctionTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("typedFunctionTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("parenthesizedItemType", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("anyMapTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("typedMapTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("anyArrayTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("typedArrayTest", "http://www.w3.org/2005/XQueryX")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (itemType)
        /// </para>
        /// </summary>
        public parenthesizedItemTypeType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Substitution members: itemType, atomicType, contextItemType, anyItemType, schemaAttributeTest, attributeTest, anyElementTest, schemaElementTest, elementTest, documentTest, piTest, kindTest, textTest, commentTest, namespaceTest, anyKindTest, anyFunctionTest, typedFunctionTest, parenthesizedItemType, anyMapTest, typedMapTest, anyArrayTest, typedArrayTest
        /// </para>
        /// <para>
        /// Regular expression: (itemType)
        /// </para>
        /// </summary>
        public virtual itemType itemType {
            get {
                XTypedElement x = XTypedServices.ToSubstitutedXTypedElement(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("itemType", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("atomicType", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("contextItemType", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("anyItemType", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("schemaAttributeTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("attributeTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("anyElementTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("schemaElementTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("elementTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("documentTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("piTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("kindTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("textTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("commentTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("namespaceTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("anyKindTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("anyFunctionTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("typedFunctionTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("parenthesizedItemType", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("anyMapTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("typedMapTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("anyArrayTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("typedArrayTest", "http://www.w3.org/2005/XQueryX"));
                return ((itemType)(x));
            }
            set {
                this.SetElement(itemTypeXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<parenthesizedItemTypeType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(itemTypeXName, typeof(itemType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (atomicType, sequenceType)
    /// </para>
    /// </summary>
    public partial class typedMapTestType : global::W3C.XQueryX.emptyItemTypeContent, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName atomicTypeXName = System.Xml.Linq.XName.Get("atomicType", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sequenceTypeXName = System.Xml.Linq.XName.Get("sequenceType", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("typedMapTest", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator typedMapTestType(XElement xe) { return XTypedServices.ToXTypedElement<typedMapTestType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static typedMapTestType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(atomicTypeXName), new NamedContentModelEntity(sequenceTypeXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (atomicType, sequenceType)
        /// </para>
        /// </summary>
        public typedMapTestType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (atomicType, sequenceType)
        /// </para>
        /// </summary>
        public virtual atomicType atomicType {
            get {
                XElement x = this.GetElement(atomicTypeXName);
                return ((atomicType)(x));
            }
            set {
                this.SetElement(atomicTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (atomicType, sequenceType)
        /// </para>
        /// </summary>
        public virtual sequenceType sequenceType {
            get {
                XElement x = this.GetElement(sequenceTypeXName);
                return ((sequenceType)(x));
            }
            set {
                this.SetElement(sequenceTypeXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<typedMapTestType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(atomicTypeXName, typeof(atomicType));
            localElementDictionary.Add(sequenceTypeXName, typeof(sequenceType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (sequenceType)
    /// </para>
    /// </summary>
    public partial class typedArrayTestType : global::W3C.XQueryX.emptyItemTypeContent, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sequenceTypeXName = System.Xml.Linq.XName.Get("sequenceType", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("typedArrayTest", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator typedArrayTestType(XElement xe) { return XTypedServices.ToXTypedElement<typedArrayTestType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static typedArrayTestType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(sequenceTypeXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (sequenceType)
        /// </para>
        /// </summary>
        public typedArrayTestType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (sequenceType)
        /// </para>
        /// </summary>
        public virtual sequenceType sequenceType {
            get {
                XElement x = this.GetElement(sequenceTypeXName);
                return ((sequenceType)(x));
            }
            set {
                this.SetElement(sequenceTypeXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<typedArrayTestType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(sequenceTypeXName, typeof(sequenceType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((NCName | expr | star))
    /// </para>
    /// </summary>
    public partial class lookupType : global::W3C.XQueryX.exprType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NCNameXName = System.Xml.Linq.XName.Get("NCName", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName exprXName = System.Xml.Linq.XName.Get("expr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName starXName = System.Xml.Linq.XName.Get("star", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("lookup", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator lookupType(XElement xe) { return XTypedServices.ToXTypedElement<lookupType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static lookupType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(NCNameXName), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("expr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("constantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("integerConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("decimalConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("doubleConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("varRef", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("contextItemExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("extensionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("simpleMapExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("functionCallExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("constructorFunctionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("sequenceExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("rangeSequenceExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("operatorExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arithmeticOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("addOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("subtractOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("multiplyOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("divOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("idivOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("modOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryMinusOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryPlusOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConcatenateOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("comparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("valueComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("eqOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("neOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("gtOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("geOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("ltOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("leOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("generalComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("equalOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("notEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("lessThanOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("lessThanOrEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("greaterThanOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("greaterThanOrEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("isOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orderComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeBeforeOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeAfterOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("logicalOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("andOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("setOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unionOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("intersectOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("exceptOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("flworExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("ifThenElseExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("quantifiedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("switchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("typeswitchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("tryCatchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("instanceOfExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("treatExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("castableExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("castExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arrowExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("validateExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("elementConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedElementConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedAttributeConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedDocumentConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedTextConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedCommentConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedNamespaceConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedPIConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unorderedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orderedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("namedFunctionRef", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("inlineFunctionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("dynamicFunctionInvocationExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("mapConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arrayConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryLookup", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("pathExpr", "http://www.w3.org/2005/XQueryX")), new NamedContentModelEntity(starXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((NCName | expr | star))
        /// </para>
        /// </summary>
        public lookupType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((NCName | expr | star))
        /// </para>
        /// </summary>
        public virtual NCName NCName {
            get {
                XElement x = this.GetElement(NCNameXName);
                return ((NCName)(x));
            }
            set {
                this.SetElement(NCNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: expr, constantExpr, integerConstantExpr, decimalConstantExpr, doubleConstantExpr, stringConstantExpr, varRef, contextItemExpr, extensionExpr, simpleMapExpr, functionCallExpr, constructorFunctionExpr, sequenceExpr, rangeSequenceExpr, operatorExpr, arithmeticOp, addOp, subtractOp, multiplyOp, divOp, idivOp, modOp, unaryMinusOp, unaryPlusOp, stringOp, stringConcatenateOp, comparisonOp, valueComparisonOp, eqOp, neOp, gtOp, geOp, ltOp, leOp, generalComparisonOp, equalOp, notEqualOp, lessThanOp, lessThanOrEqualOp, greaterThanOp, greaterThanOrEqualOp, nodeComparisonOp, isOp, orderComparisonOp, nodeBeforeOp, nodeAfterOp, logicalOp, andOp, orOp, setOp, unionOp, intersectOp, exceptOp, flworExpr, ifThenElseExpr, quantifiedExpr, switchExpr, typeswitchExpr, tryCatchExpr, instanceOfExpr, treatExpr, castableExpr, castExpr, arrowExpr, validateExpr, elementConstructor, computedElementConstructor, computedAttributeConstructor, computedDocumentConstructor, computedTextConstructor, computedCommentConstructor, computedNamespaceConstructor, computedPIConstructor, unorderedExpr, orderedExpr, namedFunctionRef, inlineFunctionExpr, dynamicFunctionInvocationExpr, mapConstructor, arrayConstructor, stringConstructor, unaryLookup, pathExpr
        /// </para>
        /// <para>
        /// Regular expression: ((NCName | expr | star))
        /// </para>
        /// </summary>
        public virtual expr expr {
            get {
                XTypedElement x = XTypedServices.ToSubstitutedXTypedElement(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("expr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("constantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("integerConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("decimalConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("doubleConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("varRef", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("contextItemExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("extensionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("simpleMapExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("functionCallExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("constructorFunctionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("sequenceExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("rangeSequenceExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("operatorExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arithmeticOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("addOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("subtractOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("multiplyOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("divOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("idivOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("modOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryMinusOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryPlusOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConcatenateOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("comparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("valueComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("eqOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("neOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("gtOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("geOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("ltOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("leOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("generalComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("equalOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("notEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("lessThanOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("lessThanOrEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("greaterThanOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("greaterThanOrEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("isOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orderComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeBeforeOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeAfterOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("logicalOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("andOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("setOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unionOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("intersectOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("exceptOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("flworExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("ifThenElseExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("quantifiedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("switchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("typeswitchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("tryCatchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("instanceOfExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("treatExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("castableExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("castExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arrowExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("validateExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("elementConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedElementConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedAttributeConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedDocumentConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedTextConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedCommentConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedNamespaceConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedPIConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unorderedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orderedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("namedFunctionRef", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("inlineFunctionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("dynamicFunctionInvocationExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("mapConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arrayConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryLookup", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("pathExpr", "http://www.w3.org/2005/XQueryX"));
                return ((expr)(x));
            }
            set {
                this.SetElement(exprXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((NCName | expr | star))
        /// </para>
        /// </summary>
        public virtual emptyContent star {
            get {
                XElement x = this.GetElement(starXName);
                return ((emptyContent)(x));
            }
            set {
                this.SetElement(starXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<lookupType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(NCNameXName, typeof(NCName));
            localElementDictionary.Add(exprXName, typeof(expr));
            localElementDictionary.Add(starXName, typeof(emptyContent));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public sealed class xpathAxisType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "child",
                        "attribute",
                        "self",
                        "parent",
                        "descendant-or-self",
                        "descendant",
                        "following",
                        "following-sibling",
                        "ancestor",
                        "ancestor-or-self",
                        "preceding",
                        "preceding-sibling"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private xpathAxisType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (((xpathAxis, (kindTest | nameTest | Wildcard), predicates?)|(filterExpr, (predicates? | (predicate | lookup)*))))
    /// </para>
    /// </summary>
    public partial class stepExprType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName xpathAxisXName = System.Xml.Linq.XName.Get("xpathAxis", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName kindTestXName = System.Xml.Linq.XName.Get("kindTest", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameTestXName = System.Xml.Linq.XName.Get("nameTest", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WildcardXName = System.Xml.Linq.XName.Get("Wildcard", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName predicatesXName = System.Xml.Linq.XName.Get("predicates", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<exprList> predicatesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName filterExprXName = System.Xml.Linq.XName.Get("filterExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName predicateXName = System.Xml.Linq.XName.Get("predicate", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<predicateLocalType> predicateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lookupXName = System.Xml.Linq.XName.Get("lookup", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<lookup> lookupField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("stepExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator stepExprType(XElement xe) { return XTypedServices.ToXTypedElement<stepExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static stepExprType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(xpathAxisXName), new ChoiceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("kindTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("schemaAttributeTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("attributeTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("anyElementTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("schemaElementTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("elementTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("documentTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("piTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("textTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("commentTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("namespaceTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("anyKindTest", "http://www.w3.org/2005/XQueryX")), new NamedContentModelEntity(nameTestXName), new NamedContentModelEntity(WildcardXName)), new NamedContentModelEntity(predicatesXName)), new SequenceContentModelEntity(new NamedContentModelEntity(filterExprXName), new ChoiceContentModelEntity(new NamedContentModelEntity(predicatesXName), new ChoiceContentModelEntity(new NamedContentModelEntity(predicateXName), new NamedContentModelEntity(lookupXName))))));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (((xpathAxis, (kindTest | nameTest | Wildcard), predicates?)|(filterExpr, (predicates? | (predicate | lookup)*))))
        /// </para>
        /// </summary>
        public stepExprType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (((xpathAxis, (kindTest | nameTest | Wildcard), predicates?)|(filterExpr, (predicates? | (predicate | lookup)*))))
        /// </para>
        /// </summary>
        public virtual xpathAxis xpathAxis {
            get {
                XElement x = this.GetElement(xpathAxisXName);
                return ((xpathAxis)(x));
            }
            set {
                this.SetElement(xpathAxisXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: kindTest, schemaAttributeTest, attributeTest, anyElementTest, schemaElementTest, elementTest, documentTest, piTest, textTest, commentTest, namespaceTest, anyKindTest
        /// </para>
        /// <para>
        /// Regular expression: (((xpathAxis, (kindTest | nameTest | Wildcard), predicates?)|(filterExpr, (predicates? | (predicate | lookup)*))))
        /// </para>
        /// </summary>
        public virtual kindTest kindTest {
            get {
                XTypedElement x = XTypedServices.ToSubstitutedXTypedElement(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("kindTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("schemaAttributeTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("attributeTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("anyElementTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("schemaElementTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("elementTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("documentTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("piTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("textTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("commentTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("namespaceTest", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("anyKindTest", "http://www.w3.org/2005/XQueryX"));
                return ((kindTest)(x));
            }
            set {
                this.SetElement(kindTestXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (((xpathAxis, (kindTest | nameTest | Wildcard), predicates?)|(filterExpr, (predicates? | (predicate | lookup)*))))
        /// </para>
        /// </summary>
        public virtual nameTest nameTest {
            get {
                XElement x = this.GetElement(nameTestXName);
                return ((nameTest)(x));
            }
            set {
                this.SetElement(nameTestXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (((xpathAxis, (kindTest | nameTest | Wildcard), predicates?)|(filterExpr, (predicates? | (predicate | lookup)*))))
        /// </para>
        /// </summary>
        public virtual Wildcard Wildcard {
            get {
                XElement x = this.GetElement(WildcardXName);
                return ((Wildcard)(x));
            }
            set {
                this.SetElement(WildcardXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (((xpathAxis, (kindTest | nameTest | Wildcard), predicates?)|(filterExpr, (predicates? | (predicate | lookup)*))))
        /// </para>
        /// </summary>
        public virtual IList<exprList> predicates {
            get {
                if ((this.predicatesField == null)) {
                    this.predicatesField = new XTypedList<exprList>(this, LinqToXsdTypeManager.Instance, predicatesXName);
                }
                return this.predicatesField;
            }
            set {
                if ((value == null)) {
                    this.predicatesField = null;
                }
                else {
                    if ((this.predicatesField == null)) {
                        this.predicatesField = XTypedList<exprList>.Initialize(this, LinqToXsdTypeManager.Instance, value, predicatesXName);
                    }
                    else {
                        XTypedServices.SetList<exprList>(this.predicatesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (((xpathAxis, (kindTest | nameTest | Wildcard), predicates?)|(filterExpr, (predicates? | (predicate | lookup)*))))
        /// </para>
        /// </summary>
        public virtual filterExprLocalType filterExpr {
            get {
                XElement x = this.GetElement(filterExprXName);
                return ((filterExprLocalType)(x));
            }
            set {
                this.SetElement(filterExprXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (((xpathAxis, (kindTest | nameTest | Wildcard), predicates?)|(filterExpr, (predicates? | (predicate | lookup)*))))
        /// </para>
        /// </summary>
        public virtual IList<W3C.XQueryX.stepExprType.predicateLocalType> predicate {
            get {
                if ((this.predicateField == null)) {
                    this.predicateField = new XTypedList<predicateLocalType>(this, LinqToXsdTypeManager.Instance, predicateXName);
                }
                return this.predicateField;
            }
            set {
                if ((value == null)) {
                    this.predicateField = null;
                }
                else {
                    if ((this.predicateField == null)) {
                        this.predicateField = XTypedList<predicateLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, predicateXName);
                    }
                    else {
                        XTypedServices.SetList<predicateLocalType>(this.predicateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (((xpathAxis, (kindTest | nameTest | Wildcard), predicates?)|(filterExpr, (predicates? | (predicate | lookup)*))))
        /// </para>
        /// </summary>
        public virtual IList<lookup> lookup {
            get {
                if ((this.lookupField == null)) {
                    this.lookupField = new XTypedList<lookup>(this, LinqToXsdTypeManager.Instance, lookupXName);
                }
                return this.lookupField;
            }
            set {
                if ((value == null)) {
                    this.lookupField = null;
                }
                else {
                    if ((this.lookupField == null)) {
                        this.lookupField = XTypedList<lookup>.Initialize(this, LinqToXsdTypeManager.Instance, value, lookupXName);
                    }
                    else {
                        XTypedServices.SetList<lookup>(this.lookupField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<stepExprType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(xpathAxisXName, typeof(xpathAxis));
            localElementDictionary.Add(kindTestXName, typeof(kindTest));
            localElementDictionary.Add(nameTestXName, typeof(nameTest));
            localElementDictionary.Add(WildcardXName, typeof(Wildcard));
            localElementDictionary.Add(predicatesXName, typeof(exprList));
            localElementDictionary.Add(filterExprXName, typeof(filterExprLocalType));
            localElementDictionary.Add(predicateXName, typeof(predicateLocalType));
            localElementDictionary.Add(lookupXName, typeof(lookup));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
        /// </para>
        /// </summary>
        public partial class filterExprLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName constantExprXName = System.Xml.Linq.XName.Get("constantExpr", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName varRefXName = System.Xml.Linq.XName.Get("varRef", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName contextItemExprXName = System.Xml.Linq.XName.Get("contextItemExpr", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName functionCallExprXName = System.Xml.Linq.XName.Get("functionCallExpr", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName sequenceExprXName = System.Xml.Linq.XName.Get("sequenceExpr", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName elementConstructorXName = System.Xml.Linq.XName.Get("elementConstructor", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName computedElementConstructorXName = System.Xml.Linq.XName.Get("computedElementConstructor", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName computedAttributeConstructorXName = System.Xml.Linq.XName.Get("computedAttributeConstructor", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName computedDocumentConstructorXName = System.Xml.Linq.XName.Get("computedDocumentConstructor", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName computedTextConstructorXName = System.Xml.Linq.XName.Get("computedTextConstructor", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName computedCommentConstructorXName = System.Xml.Linq.XName.Get("computedCommentConstructor", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName computedNamespaceConstructorXName = System.Xml.Linq.XName.Get("computedNamespaceConstructor", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName computedPIConstructorXName = System.Xml.Linq.XName.Get("computedPIConstructor", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName orderedExprXName = System.Xml.Linq.XName.Get("orderedExpr", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName unorderedExprXName = System.Xml.Linq.XName.Get("unorderedExpr", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName namedFunctionRefXName = System.Xml.Linq.XName.Get("namedFunctionRef", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName inlineFunctionExprXName = System.Xml.Linq.XName.Get("inlineFunctionExpr", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName dynamicFunctionInvocationExprXName = System.Xml.Linq.XName.Get("dynamicFunctionInvocationExpr", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName mapConstructorXName = System.Xml.Linq.XName.Get("mapConstructor", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName arrayConstructorXName = System.Xml.Linq.XName.Get("arrayConstructor", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName stringConstructorXName = System.Xml.Linq.XName.Get("stringConstructor", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName unaryLookupXName = System.Xml.Linq.XName.Get("unaryLookup", "http://www.w3.org/2005/XQueryX");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("filterExpr", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator filterExprLocalType(XElement xe) { return XTypedServices.ToXTypedElement<filterExprLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static filterExprLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("constantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("integerConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("decimalConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("doubleConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstantExpr", "http://www.w3.org/2005/XQueryX")), new NamedContentModelEntity(varRefXName), new NamedContentModelEntity(contextItemExprXName), new NamedContentModelEntity(functionCallExprXName), new NamedContentModelEntity(sequenceExprXName), new NamedContentModelEntity(elementConstructorXName), new NamedContentModelEntity(computedElementConstructorXName), new NamedContentModelEntity(computedAttributeConstructorXName), new NamedContentModelEntity(computedDocumentConstructorXName), new NamedContentModelEntity(computedTextConstructorXName), new NamedContentModelEntity(computedCommentConstructorXName), new NamedContentModelEntity(computedNamespaceConstructorXName), new NamedContentModelEntity(computedPIConstructorXName), new NamedContentModelEntity(orderedExprXName), new NamedContentModelEntity(unorderedExprXName), new NamedContentModelEntity(namedFunctionRefXName), new NamedContentModelEntity(inlineFunctionExprXName), new NamedContentModelEntity(dynamicFunctionInvocationExprXName), new NamedContentModelEntity(mapConstructorXName), new NamedContentModelEntity(arrayConstructorXName), new NamedContentModelEntity(stringConstructorXName), new NamedContentModelEntity(unaryLookupXName)));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public filterExprLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Substitution members: constantExpr, integerConstantExpr, decimalConstantExpr, doubleConstantExpr, stringConstantExpr
            /// </para>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public virtual constantExpr constantExpr {
                get {
                    XTypedElement x = XTypedServices.ToSubstitutedXTypedElement(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("constantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("integerConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("decimalConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("doubleConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstantExpr", "http://www.w3.org/2005/XQueryX"));
                    return ((constantExpr)(x));
                }
                set {
                    this.SetElement(constantExprXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public virtual varRef varRef {
                get {
                    XElement x = this.GetElement(varRefXName);
                    return ((varRef)(x));
                }
                set {
                    this.SetElement(varRefXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public virtual contextItemExpr contextItemExpr {
                get {
                    XElement x = this.GetElement(contextItemExprXName);
                    return ((contextItemExpr)(x));
                }
                set {
                    this.SetElement(contextItemExprXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public virtual functionCallExpr functionCallExpr {
                get {
                    XElement x = this.GetElement(functionCallExprXName);
                    return ((functionCallExpr)(x));
                }
                set {
                    this.SetElement(functionCallExprXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public virtual sequenceExpr sequenceExpr {
                get {
                    XElement x = this.GetElement(sequenceExprXName);
                    return ((sequenceExpr)(x));
                }
                set {
                    this.SetElement(sequenceExprXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public virtual elementConstructor elementConstructor {
                get {
                    XElement x = this.GetElement(elementConstructorXName);
                    return ((elementConstructor)(x));
                }
                set {
                    this.SetElement(elementConstructorXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public virtual computedElementConstructor computedElementConstructor {
                get {
                    XElement x = this.GetElement(computedElementConstructorXName);
                    return ((computedElementConstructor)(x));
                }
                set {
                    this.SetElement(computedElementConstructorXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public virtual computedAttributeConstructor computedAttributeConstructor {
                get {
                    XElement x = this.GetElement(computedAttributeConstructorXName);
                    return ((computedAttributeConstructor)(x));
                }
                set {
                    this.SetElement(computedAttributeConstructorXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public virtual computedDocumentConstructor computedDocumentConstructor {
                get {
                    XElement x = this.GetElement(computedDocumentConstructorXName);
                    return ((computedDocumentConstructor)(x));
                }
                set {
                    this.SetElement(computedDocumentConstructorXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public virtual computedTextConstructor computedTextConstructor {
                get {
                    XElement x = this.GetElement(computedTextConstructorXName);
                    return ((computedTextConstructor)(x));
                }
                set {
                    this.SetElement(computedTextConstructorXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public virtual computedCommentConstructor computedCommentConstructor {
                get {
                    XElement x = this.GetElement(computedCommentConstructorXName);
                    return ((computedCommentConstructor)(x));
                }
                set {
                    this.SetElement(computedCommentConstructorXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public virtual computedNamespaceConstructor computedNamespaceConstructor {
                get {
                    XElement x = this.GetElement(computedNamespaceConstructorXName);
                    return ((computedNamespaceConstructor)(x));
                }
                set {
                    this.SetElement(computedNamespaceConstructorXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public virtual computedPIConstructor computedPIConstructor {
                get {
                    XElement x = this.GetElement(computedPIConstructorXName);
                    return ((computedPIConstructor)(x));
                }
                set {
                    this.SetElement(computedPIConstructorXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public virtual orderedExpr orderedExpr {
                get {
                    XElement x = this.GetElement(orderedExprXName);
                    return ((orderedExpr)(x));
                }
                set {
                    this.SetElement(orderedExprXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public virtual unorderedExpr unorderedExpr {
                get {
                    XElement x = this.GetElement(unorderedExprXName);
                    return ((unorderedExpr)(x));
                }
                set {
                    this.SetElement(unorderedExprXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public virtual namedFunctionRef namedFunctionRef {
                get {
                    XElement x = this.GetElement(namedFunctionRefXName);
                    return ((namedFunctionRef)(x));
                }
                set {
                    this.SetElement(namedFunctionRefXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public virtual inlineFunctionExpr inlineFunctionExpr {
                get {
                    XElement x = this.GetElement(inlineFunctionExprXName);
                    return ((inlineFunctionExpr)(x));
                }
                set {
                    this.SetElement(inlineFunctionExprXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public virtual dynamicFunctionInvocationExpr dynamicFunctionInvocationExpr {
                get {
                    XElement x = this.GetElement(dynamicFunctionInvocationExprXName);
                    return ((dynamicFunctionInvocationExpr)(x));
                }
                set {
                    this.SetElement(dynamicFunctionInvocationExprXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public virtual mapConstructor mapConstructor {
                get {
                    XElement x = this.GetElement(mapConstructorXName);
                    return ((mapConstructor)(x));
                }
                set {
                    this.SetElement(mapConstructorXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public virtual arrayConstructor arrayConstructor {
                get {
                    XElement x = this.GetElement(arrayConstructorXName);
                    return ((arrayConstructor)(x));
                }
                set {
                    this.SetElement(arrayConstructorXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public virtual stringConstructor stringConstructor {
                get {
                    XElement x = this.GetElement(stringConstructorXName);
                    return ((stringConstructor)(x));
                }
                set {
                    this.SetElement(stringConstructorXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((constantExpr | varRef | contextItemExpr | functionCallExpr | sequenceExpr | elementConstructor | computedElementConstructor | computedAttributeConstructor | computedDocumentConstructor | computedTextConstructor | computedCommentConstructor | computedNamespaceConstructor | computedPIConstructor | orderedExpr | unorderedExpr | namedFunctionRef | inlineFunctionExpr | dynamicFunctionInvocationExpr | mapConstructor | arrayConstructor | stringConstructor | unaryLookup))
            /// </para>
            /// </summary>
            public virtual unaryLookup unaryLookup {
                get {
                    XElement x = this.GetElement(unaryLookupXName);
                    return ((unaryLookup)(x));
                }
                set {
                    this.SetElement(unaryLookupXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<filterExprLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(constantExprXName, typeof(constantExpr));
                localElementDictionary.Add(varRefXName, typeof(varRef));
                localElementDictionary.Add(contextItemExprXName, typeof(contextItemExpr));
                localElementDictionary.Add(functionCallExprXName, typeof(functionCallExpr));
                localElementDictionary.Add(sequenceExprXName, typeof(sequenceExpr));
                localElementDictionary.Add(elementConstructorXName, typeof(elementConstructor));
                localElementDictionary.Add(computedElementConstructorXName, typeof(computedElementConstructor));
                localElementDictionary.Add(computedAttributeConstructorXName, typeof(computedAttributeConstructor));
                localElementDictionary.Add(computedDocumentConstructorXName, typeof(computedDocumentConstructor));
                localElementDictionary.Add(computedTextConstructorXName, typeof(computedTextConstructor));
                localElementDictionary.Add(computedCommentConstructorXName, typeof(computedCommentConstructor));
                localElementDictionary.Add(computedNamespaceConstructorXName, typeof(computedNamespaceConstructor));
                localElementDictionary.Add(computedPIConstructorXName, typeof(computedPIConstructor));
                localElementDictionary.Add(orderedExprXName, typeof(orderedExpr));
                localElementDictionary.Add(unorderedExprXName, typeof(unorderedExpr));
                localElementDictionary.Add(namedFunctionRefXName, typeof(namedFunctionRef));
                localElementDictionary.Add(inlineFunctionExprXName, typeof(inlineFunctionExpr));
                localElementDictionary.Add(dynamicFunctionInvocationExprXName, typeof(dynamicFunctionInvocationExpr));
                localElementDictionary.Add(mapConstructorXName, typeof(mapConstructor));
                localElementDictionary.Add(arrayConstructorXName, typeof(arrayConstructor));
                localElementDictionary.Add(stringConstructorXName, typeof(stringConstructor));
                localElementDictionary.Add(unaryLookupXName, typeof(unaryLookup));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (expr)
        /// </para>
        /// </summary>
        public partial class predicateLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName exprXName = System.Xml.Linq.XName.Get("expr", "http://www.w3.org/2005/XQueryX");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("predicate", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator predicateLocalType(XElement xe) { return XTypedServices.ToXTypedElement<predicateLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static predicateLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("expr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("constantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("integerConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("decimalConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("doubleConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("varRef", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("contextItemExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("extensionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("simpleMapExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("functionCallExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("constructorFunctionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("sequenceExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("rangeSequenceExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("operatorExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arithmeticOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("addOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("subtractOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("multiplyOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("divOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("idivOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("modOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryMinusOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryPlusOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConcatenateOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("comparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("valueComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("eqOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("neOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("gtOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("geOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("ltOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("leOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("generalComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("equalOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("notEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("lessThanOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("lessThanOrEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("greaterThanOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("greaterThanOrEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("isOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orderComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeBeforeOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeAfterOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("logicalOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("andOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("setOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unionOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("intersectOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("exceptOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("flworExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("ifThenElseExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("quantifiedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("switchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("typeswitchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("tryCatchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("instanceOfExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("treatExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("castableExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("castExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arrowExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("validateExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("elementConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedElementConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedAttributeConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedDocumentConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedTextConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedCommentConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedNamespaceConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedPIConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unorderedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orderedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("namedFunctionRef", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("inlineFunctionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("dynamicFunctionInvocationExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("mapConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arrayConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryLookup", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("pathExpr", "http://www.w3.org/2005/XQueryX")));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (expr)
            /// </para>
            /// </summary>
            public predicateLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Substitution members: expr, constantExpr, integerConstantExpr, decimalConstantExpr, doubleConstantExpr, stringConstantExpr, varRef, contextItemExpr, extensionExpr, simpleMapExpr, functionCallExpr, constructorFunctionExpr, sequenceExpr, rangeSequenceExpr, operatorExpr, arithmeticOp, addOp, subtractOp, multiplyOp, divOp, idivOp, modOp, unaryMinusOp, unaryPlusOp, stringOp, stringConcatenateOp, comparisonOp, valueComparisonOp, eqOp, neOp, gtOp, geOp, ltOp, leOp, generalComparisonOp, equalOp, notEqualOp, lessThanOp, lessThanOrEqualOp, greaterThanOp, greaterThanOrEqualOp, nodeComparisonOp, isOp, orderComparisonOp, nodeBeforeOp, nodeAfterOp, logicalOp, andOp, orOp, setOp, unionOp, intersectOp, exceptOp, flworExpr, ifThenElseExpr, quantifiedExpr, switchExpr, typeswitchExpr, tryCatchExpr, instanceOfExpr, treatExpr, castableExpr, castExpr, arrowExpr, validateExpr, elementConstructor, computedElementConstructor, computedAttributeConstructor, computedDocumentConstructor, computedTextConstructor, computedCommentConstructor, computedNamespaceConstructor, computedPIConstructor, unorderedExpr, orderedExpr, namedFunctionRef, inlineFunctionExpr, dynamicFunctionInvocationExpr, mapConstructor, arrayConstructor, stringConstructor, unaryLookup, pathExpr
            /// </para>
            /// <para>
            /// Regular expression: (expr)
            /// </para>
            /// </summary>
            public virtual expr expr {
                get {
                    XTypedElement x = XTypedServices.ToSubstitutedXTypedElement(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("expr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("constantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("integerConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("decimalConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("doubleConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstantExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("varRef", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("contextItemExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("extensionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("simpleMapExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("functionCallExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("constructorFunctionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("sequenceExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("rangeSequenceExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("operatorExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arithmeticOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("addOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("subtractOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("multiplyOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("divOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("idivOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("modOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryMinusOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryPlusOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConcatenateOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("comparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("valueComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("eqOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("neOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("gtOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("geOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("ltOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("leOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("generalComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("equalOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("notEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("lessThanOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("lessThanOrEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("greaterThanOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("greaterThanOrEqualOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("isOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orderComparisonOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeBeforeOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("nodeAfterOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("logicalOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("andOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("setOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unionOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("intersectOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("exceptOp", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("flworExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("ifThenElseExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("quantifiedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("switchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("typeswitchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("tryCatchExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("instanceOfExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("treatExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("castableExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("castExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arrowExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("validateExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("elementConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedElementConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedAttributeConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedDocumentConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedTextConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedCommentConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedNamespaceConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("computedPIConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unorderedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orderedExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("namedFunctionRef", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("inlineFunctionExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("dynamicFunctionInvocationExpr", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("mapConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("arrayConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("stringConstructor", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("unaryLookup", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("pathExpr", "http://www.w3.org/2005/XQueryX"));
                    return ((expr)(x));
                }
                set {
                    this.SetElement(exprXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<predicateLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(exprXName, typeof(expr));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((rootExpr, stepExpr*)|stepExpr+)
    /// </para>
    /// </summary>
    public partial class pathExprType : global::W3C.XQueryX.exprType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rootExprXName = System.Xml.Linq.XName.Get("rootExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stepExprXName = System.Xml.Linq.XName.Get("stepExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<stepExpr> stepExprField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("pathExpr", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator pathExprType(XElement xe) { return XTypedServices.ToXTypedElement<pathExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static pathExprType() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(rootExprXName), new NamedContentModelEntity(stepExprXName)), new NamedContentModelEntity(stepExprXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((rootExpr, stepExpr*)|stepExpr+)
        /// </para>
        /// </summary>
        public pathExprType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((rootExpr, stepExpr*)|stepExpr+)
        /// </para>
        /// </summary>
        public virtual emptyContent rootExpr {
            get {
                XElement x = this.GetElement(rootExprXName);
                return ((emptyContent)(x));
            }
            set {
                this.SetElement(rootExprXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((rootExpr, stepExpr*)|stepExpr+)
        /// </para>
        /// </summary>
        public virtual IList<stepExpr> stepExpr {
            get {
                if ((this.stepExprField == null)) {
                    this.stepExprField = new XTypedList<stepExpr>(this, LinqToXsdTypeManager.Instance, stepExprXName);
                }
                return this.stepExprField;
            }
            set {
                if ((value == null)) {
                    this.stepExprField = null;
                }
                else {
                    if ((this.stepExprField == null)) {
                        this.stepExprField = XTypedList<stepExpr>.Initialize(this, LinqToXsdTypeManager.Instance, value, stepExprXName);
                    }
                    else {
                        XTypedServices.SetList<stepExpr>(this.stepExprField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<pathExprType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(rootExprXName, typeof(emptyContent));
            localElementDictionary.Add(stepExprXName, typeof(stepExpr));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (versionDecl?, (mainModule | libraryModule))
    /// </para>
    /// </summary>
    public partial class moduleType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName versionDeclXName = System.Xml.Linq.XName.Get("versionDecl", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName mainModuleXName = System.Xml.Linq.XName.Get("mainModule", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName libraryModuleXName = System.Xml.Linq.XName.Get("libraryModule", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("module", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator moduleType(XElement xe) { return XTypedServices.ToXTypedElement<moduleType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static moduleType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(versionDeclXName), new ChoiceContentModelEntity(new NamedContentModelEntity(mainModuleXName), new NamedContentModelEntity(libraryModuleXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (versionDecl?, (mainModule | libraryModule))
        /// </para>
        /// </summary>
        public moduleType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (versionDecl?, (mainModule | libraryModule))
        /// </para>
        /// </summary>
        public virtual versionDecl versionDecl {
            get {
                XElement x = this.GetElement(versionDeclXName);
                return ((versionDecl)(x));
            }
            set {
                this.SetElement(versionDeclXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (versionDecl?, (mainModule | libraryModule))
        /// </para>
        /// </summary>
        public virtual mainModule mainModule {
            get {
                XElement x = this.GetElement(mainModuleXName);
                return ((mainModule)(x));
            }
            set {
                this.SetElement(mainModuleXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (versionDecl?, (mainModule | libraryModule))
        /// </para>
        /// </summary>
        public virtual libraryModule libraryModule {
            get {
                XElement x = this.GetElement(libraryModuleXName);
                return ((libraryModule)(x));
            }
            set {
                this.SetElement(libraryModuleXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<moduleType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(versionDeclXName, typeof(versionDecl));
            localElementDictionary.Add(mainModuleXName, typeof(mainModule));
            localElementDictionary.Add(libraryModuleXName, typeof(libraryModule));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (prolog?, queryBody)
    /// </para>
    /// </summary>
    public partial class mainModuleType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName prologXName = System.Xml.Linq.XName.Get("prolog", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName queryBodyXName = System.Xml.Linq.XName.Get("queryBody", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("mainModule", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator mainModuleType(XElement xe) { return XTypedServices.ToXTypedElement<mainModuleType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static mainModuleType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(prologXName), new NamedContentModelEntity(queryBodyXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (prolog?, queryBody)
        /// </para>
        /// </summary>
        public mainModuleType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (prolog?, queryBody)
        /// </para>
        /// </summary>
        public virtual prolog prolog {
            get {
                XElement x = this.GetElement(prologXName);
                return ((prolog)(x));
            }
            set {
                this.SetElement(prologXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (prolog?, queryBody)
        /// </para>
        /// </summary>
        public virtual exprWrapper queryBody {
            get {
                XElement x = this.GetElement(queryBodyXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(queryBodyXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<mainModuleType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(prologXName, typeof(prolog));
            localElementDictionary.Add(queryBodyXName, typeof(exprWrapper));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (moduleDecl, prolog?)
    /// </para>
    /// </summary>
    public partial class libraryModuleType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName moduleDeclXName = System.Xml.Linq.XName.Get("moduleDecl", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName prologXName = System.Xml.Linq.XName.Get("prolog", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("libraryModule", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator libraryModuleType(XElement xe) { return XTypedServices.ToXTypedElement<libraryModuleType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static libraryModuleType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(moduleDeclXName), new NamedContentModelEntity(prologXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (moduleDecl, prolog?)
        /// </para>
        /// </summary>
        public libraryModuleType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (moduleDecl, prolog?)
        /// </para>
        /// </summary>
        public virtual moduleDecl moduleDecl {
            get {
                XElement x = this.GetElement(moduleDeclXName);
                return ((moduleDecl)(x));
            }
            set {
                this.SetElement(moduleDeclXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (moduleDecl, prolog?)
        /// </para>
        /// </summary>
        public virtual prolog prolog {
            get {
                XElement x = this.GetElement(prologXName);
                return ((prolog)(x));
            }
            set {
                this.SetElement(prologXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<libraryModuleType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(moduleDeclXName, typeof(moduleDecl));
            localElementDictionary.Add(prologXName, typeof(prolog));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((version, encoding?)|encoding)
    /// </para>
    /// </summary>
    public partial class versionDeclType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName versionXName = System.Xml.Linq.XName.Get("version", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName encodingXName = System.Xml.Linq.XName.Get("encoding", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> encodingField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("versionDecl", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator versionDeclType(XElement xe) { return XTypedServices.ToXTypedElement<versionDeclType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static versionDeclType() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new SequenceContentModelEntity(new NamedContentModelEntity(versionXName), new NamedContentModelEntity(encodingXName)), new NamedContentModelEntity(encodingXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((version, encoding?)|encoding)
        /// </para>
        /// </summary>
        public versionDeclType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((version, encoding?)|encoding)
        /// </para>
        /// </summary>
        public virtual string version {
            get {
                XElement x = this.GetElement(versionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(versionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((version, encoding?)|encoding)
        /// </para>
        /// </summary>
        public virtual IList<string> encoding {
            get {
                if ((this.encodingField == null)) {
                    this.encodingField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, encodingXName);
                }
                return this.encodingField;
            }
            set {
                if ((value == null)) {
                    this.encodingField = null;
                }
                else {
                    if ((this.encodingField == null)) {
                        this.encodingField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, encodingXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.encodingField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<versionDeclType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(versionXName, typeof(string));
            localElementDictionary.Add(encodingXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (prologPartOneItem*, prologPartTwoItem*)
    /// </para>
    /// </summary>
    public partial class prologType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName prologPartOneItemXName = System.Xml.Linq.XName.Get("prologPartOneItem", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<prologPartOneItem> prologPartOneItemField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName prologPartTwoItemXName = System.Xml.Linq.XName.Get("prologPartTwoItem", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedSubstitutedList<prologPartTwoItem> prologPartTwoItemField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("prolog", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator prologType(XElement xe) { return XTypedServices.ToXTypedElement<prologType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static prologType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("prologPartOneItem", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("boundarySpaceDecl", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("defaultCollationDecl", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("baseUriDecl", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("constructionDecl", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orderingModeDecl", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("emptyOrderingDecl", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("copyNamespacesDecl", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("defaultNamespaceDecl", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("namespaceDecl", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("decimalFormatDecl", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("schemaImport", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("moduleImport", "http://www.w3.org/2005/XQueryX")), new SubstitutedContentModelEntity(System.Xml.Linq.XName.Get("prologPartTwoItem", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("contextItemDecl", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("varDecl", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("optionDecl", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("functionDecl", "http://www.w3.org/2005/XQueryX")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (prologPartOneItem*, prologPartTwoItem*)
        /// </para>
        /// </summary>
        public prologType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Substitution members: prologPartOneItem, boundarySpaceDecl, defaultCollationDecl, baseUriDecl, constructionDecl, orderingModeDecl, emptyOrderingDecl, copyNamespacesDecl, defaultNamespaceDecl, namespaceDecl, decimalFormatDecl, schemaImport, moduleImport
        /// </para>
        /// <para>
        /// Regular expression: (prologPartOneItem*, prologPartTwoItem*)
        /// </para>
        /// </summary>
        public virtual IList<prologPartOneItem> prologPartOneItem {
            get {
                if ((this.prologPartOneItemField == null)) {
                    this.prologPartOneItemField = new XTypedSubstitutedList<prologPartOneItem>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("prologPartOneItem", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("boundarySpaceDecl", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("defaultCollationDecl", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("baseUriDecl", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("constructionDecl", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orderingModeDecl", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("emptyOrderingDecl", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("copyNamespacesDecl", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("defaultNamespaceDecl", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("namespaceDecl", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("decimalFormatDecl", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("schemaImport", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("moduleImport", "http://www.w3.org/2005/XQueryX"));
                }
                return this.prologPartOneItemField;
            }
            set {
                if ((value == null)) {
                    this.prologPartOneItemField = null;
                }
                else {
                    if ((this.prologPartOneItemField == null)) {
                        this.prologPartOneItemField = XTypedSubstitutedList<prologPartOneItem>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("prologPartOneItem", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("boundarySpaceDecl", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("defaultCollationDecl", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("baseUriDecl", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("constructionDecl", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("orderingModeDecl", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("emptyOrderingDecl", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("copyNamespacesDecl", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("defaultNamespaceDecl", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("namespaceDecl", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("decimalFormatDecl", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("schemaImport", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("moduleImport", "http://www.w3.org/2005/XQueryX"));
                    }
                    else {
                        XTypedServices.SetList<prologPartOneItem>(this.prologPartOneItemField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Substitution members: prologPartTwoItem, contextItemDecl, varDecl, optionDecl, functionDecl
        /// </para>
        /// <para>
        /// Regular expression: (prologPartOneItem*, prologPartTwoItem*)
        /// </para>
        /// </summary>
        public virtual IList<prologPartTwoItem> prologPartTwoItem {
            get {
                if ((this.prologPartTwoItemField == null)) {
                    this.prologPartTwoItemField = new XTypedSubstitutedList<prologPartTwoItem>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("prologPartTwoItem", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("contextItemDecl", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("varDecl", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("optionDecl", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("functionDecl", "http://www.w3.org/2005/XQueryX"));
                }
                return this.prologPartTwoItemField;
            }
            set {
                if ((value == null)) {
                    this.prologPartTwoItemField = null;
                }
                else {
                    if ((this.prologPartTwoItemField == null)) {
                        this.prologPartTwoItemField = XTypedSubstitutedList<prologPartTwoItem>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("prologPartTwoItem", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("contextItemDecl", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("varDecl", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("optionDecl", "http://www.w3.org/2005/XQueryX"), System.Xml.Linq.XName.Get("functionDecl", "http://www.w3.org/2005/XQueryX"));
                    }
                    else {
                        XTypedServices.SetList<prologPartTwoItem>(this.prologPartTwoItemField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<prologType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(prologPartOneItemXName, typeof(prologPartOneItem));
            localElementDictionary.Add(prologPartTwoItemXName, typeof(prologPartTwoItem));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public enum boundarySpaceDeclType {
        
        strip,
        
        preserve,
    }
    
    public sealed class boundarySpaceDeclTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "strip",
                        "preserve"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private boundarySpaceDeclTypeValidator() {
        }
    }
    
    public enum constructionDeclType {
        
        strip,
        
        preserve,
    }
    
    public sealed class constructionDeclTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "strip",
                        "preserve"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private constructionDeclTypeValidator() {
        }
    }
    
    public enum orderingModeDeclType {
        
        ordered,
        
        unordered,
    }
    
    public sealed class orderingModeDeclTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "ordered",
                        "unordered"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private orderingModeDeclTypeValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (preserveMode, inheritMode)
    /// </para>
    /// </summary>
    public partial class copyNamespacesDeclType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName preserveModeXName = System.Xml.Linq.XName.Get("preserveMode", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName inheritModeXName = System.Xml.Linq.XName.Get("inheritMode", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("copyNamespacesDecl", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator copyNamespacesDeclType(XElement xe) { return XTypedServices.ToXTypedElement<copyNamespacesDeclType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static copyNamespacesDeclType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(preserveModeXName), new NamedContentModelEntity(inheritModeXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (preserveMode, inheritMode)
        /// </para>
        /// </summary>
        public copyNamespacesDeclType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (preserveMode, inheritMode)
        /// </para>
        /// </summary>
        public virtual string preserveMode {
            get {
                XElement x = this.GetElement(preserveModeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetElementWithValidation(preserveModeXName, value, "preserveMode", preserveModeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (preserveMode, inheritMode)
        /// </para>
        /// </summary>
        public virtual string inheritMode {
            get {
                XElement x = this.GetElement(inheritModeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetElementWithValidation(inheritModeXName, value, "inheritMode", inheritModeLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<copyNamespacesDeclType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(preserveModeXName, typeof(string));
            localElementDictionary.Add(inheritModeXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class preserveModeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            "preserve",
                            "no-preserve"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
            
            private preserveModeLocalType() {
            }
        }
        
        private class inheritModeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            "inherit",
                            "no-inherit"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
            
            private inheritModeLocalType() {
            }
        }
    }
    
    public enum defaultNamespaceCategory {
        
        function,
        
        element,
    }
    
    public sealed class defaultNamespaceCategoryValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "function",
                        "element"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private defaultNamespaceCategoryValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (defaultNamespaceCategory, uri)
    /// </para>
    /// </summary>
    public partial class defaultNamespaceDeclType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName defaultNamespaceCategoryXName = System.Xml.Linq.XName.Get("defaultNamespaceCategory", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uriXName = System.Xml.Linq.XName.Get("uri", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("defaultNamespaceDecl", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator defaultNamespaceDeclType(XElement xe) { return XTypedServices.ToXTypedElement<defaultNamespaceDeclType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static defaultNamespaceDeclType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(defaultNamespaceCategoryXName), new NamedContentModelEntity(uriXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (defaultNamespaceCategory, uri)
        /// </para>
        /// </summary>
        public defaultNamespaceDeclType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (defaultNamespaceCategory, uri)
        /// </para>
        /// </summary>
        public virtual W3C.XQueryX.defaultNamespaceCategory defaultNamespaceCategory {
            get {
                XElement x = this.GetElement(defaultNamespaceCategoryXName);
                return ((W3C.XQueryX.defaultNamespaceCategory)(Enum.Parse(typeof(W3C.XQueryX.defaultNamespaceCategory), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype))));
            }
            set {
                this.SetElementWithValidation(defaultNamespaceCategoryXName, value.ToString(), "defaultNamespaceCategory", global::W3C.XQueryX.defaultNamespaceCategoryValidator.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (defaultNamespaceCategory, uri)
        /// </para>
        /// </summary>
        public virtual string uri {
            get {
                XElement x = this.GetElement(uriXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(uriXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<defaultNamespaceDeclType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(defaultNamespaceCategoryXName, typeof(string));
            localElementDictionary.Add(uriXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (prefix, uri)
    /// </para>
    /// </summary>
    public partial class namespaceDeclType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName prefixXName = System.Xml.Linq.XName.Get("prefix", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uriXName = System.Xml.Linq.XName.Get("uri", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("namespaceDeclType", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator namespaceDeclType(XElement xe) { return XTypedServices.ToXTypedElement<namespaceDeclType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static namespaceDeclType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(prefixXName), new NamedContentModelEntity(uriXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (prefix, uri)
        /// </para>
        /// </summary>
        public namespaceDeclType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (prefix, uri)
        /// </para>
        /// </summary>
        public virtual string prefix {
            get {
                XElement x = this.GetElement(prefixXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
            set {
                this.SetElement(prefixXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (prefix, uri)
        /// </para>
        /// </summary>
        public virtual string uri {
            get {
                XElement x = this.GetElement(uriXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(uriXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<namespaceDeclType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(prefixXName, typeof(string));
            localElementDictionary.Add(uriXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (decimalFormatName?, decimalFormatParam*)
    /// </para>
    /// </summary>
    public partial class decimalFormatDeclType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName decimalFormatNameXName = System.Xml.Linq.XName.Get("decimalFormatName", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName decimalFormatParamXName = System.Xml.Linq.XName.Get("decimalFormatParam", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<decimalFormatParamLocalType> decimalFormatParamField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("decimalFormatDeclType", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator decimalFormatDeclType(XElement xe) { return XTypedServices.ToXTypedElement<decimalFormatDeclType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static decimalFormatDeclType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(decimalFormatNameXName), new NamedContentModelEntity(decimalFormatParamXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (decimalFormatName?, decimalFormatParam*)
        /// </para>
        /// </summary>
        public decimalFormatDeclType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (decimalFormatName?, decimalFormatParam*)
        /// </para>
        /// </summary>
        public virtual EQName decimalFormatName {
            get {
                XElement x = this.GetElement(decimalFormatNameXName);
                return ((EQName)(x));
            }
            set {
                this.SetElement(decimalFormatNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (decimalFormatName?, decimalFormatParam*)
        /// </para>
        /// </summary>
        public virtual IList<W3C.XQueryX.decimalFormatDeclType.decimalFormatParamLocalType> decimalFormatParam {
            get {
                if ((this.decimalFormatParamField == null)) {
                    this.decimalFormatParamField = new XTypedList<decimalFormatParamLocalType>(this, LinqToXsdTypeManager.Instance, decimalFormatParamXName);
                }
                return this.decimalFormatParamField;
            }
            set {
                if ((value == null)) {
                    this.decimalFormatParamField = null;
                }
                else {
                    if ((this.decimalFormatParamField == null)) {
                        this.decimalFormatParamField = XTypedList<decimalFormatParamLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, decimalFormatParamXName);
                    }
                    else {
                        XTypedServices.SetList<decimalFormatParamLocalType>(this.decimalFormatParamField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<decimalFormatDeclType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(decimalFormatNameXName, typeof(EQName));
            localElementDictionary.Add(decimalFormatParamXName, typeof(decimalFormatParamLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (decimalFormatParamName, decimalFormatParamValue)
        /// </para>
        /// </summary>
        public partial class decimalFormatParamLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName decimalFormatParamNameXName = System.Xml.Linq.XName.Get("decimalFormatParamName", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName decimalFormatParamValueXName = System.Xml.Linq.XName.Get("decimalFormatParamValue", "http://www.w3.org/2005/XQueryX");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("decimalFormatParam", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator decimalFormatParamLocalType(XElement xe) { return XTypedServices.ToXTypedElement<decimalFormatParamLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static decimalFormatParamLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(decimalFormatParamNameXName), new NamedContentModelEntity(decimalFormatParamValueXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (decimalFormatParamName, decimalFormatParamValue)
            /// </para>
            /// </summary>
            public decimalFormatParamLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (decimalFormatParamName, decimalFormatParamValue)
            /// </para>
            /// </summary>
            public virtual string decimalFormatParamName {
                get {
                    XElement x = this.GetElement(decimalFormatParamNameXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
                }
                set {
                    this.SetElementWithValidation(decimalFormatParamNameXName, value, "decimalFormatParamName", decimalFormatParamNameLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (decimalFormatParamName, decimalFormatParamValue)
            /// </para>
            /// </summary>
            public virtual string decimalFormatParamValue {
                get {
                    XElement x = this.GetElement(decimalFormatParamValueXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElement(decimalFormatParamValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<decimalFormatParamLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(decimalFormatParamNameXName, typeof(string));
                localElementDictionary.Add(decimalFormatParamValueXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class decimalFormatParamNameLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                "decimal-separator",
                                "grouping-separator",
                                "infinity",
                                "minus-sign",
                                "NaN",
                                "percent",
                                "per-mille",
                                "zero-digit",
                                "digit",
                                "pattern-separator",
                                "exponent-separator"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
                
                private decimalFormatParamNameLocalType() {
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((namespacePrefix | defaultElementNamespace)?, targetNamespace, targetLocation*)
    /// </para>
    /// </summary>
    public partial class schemaImportType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName namespacePrefixXName = System.Xml.Linq.XName.Get("namespacePrefix", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName defaultElementNamespaceXName = System.Xml.Linq.XName.Get("defaultElementNamespace", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName targetNamespaceXName = System.Xml.Linq.XName.Get("targetNamespace", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName targetLocationXName = System.Xml.Linq.XName.Get("targetLocation", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> targetLocationField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("schemaImport", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator schemaImportType(XElement xe) { return XTypedServices.ToXTypedElement<schemaImportType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static schemaImportType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(namespacePrefixXName), new NamedContentModelEntity(defaultElementNamespaceXName)), new NamedContentModelEntity(targetNamespaceXName), new NamedContentModelEntity(targetLocationXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((namespacePrefix | defaultElementNamespace)?, targetNamespace, targetLocation*)
        /// </para>
        /// </summary>
        public schemaImportType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((namespacePrefix | defaultElementNamespace)?, targetNamespace, targetLocation*)
        /// </para>
        /// </summary>
        public virtual string namespacePrefix {
            get {
                XElement x = this.GetElement(namespacePrefixXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
            set {
                this.SetElement(namespacePrefixXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((namespacePrefix | defaultElementNamespace)?, targetNamespace, targetLocation*)
        /// </para>
        /// </summary>
        public virtual emptyContent defaultElementNamespace {
            get {
                XElement x = this.GetElement(defaultElementNamespaceXName);
                return ((emptyContent)(x));
            }
            set {
                this.SetElement(defaultElementNamespaceXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: ((namespacePrefix | defaultElementNamespace)?, targetNamespace, targetLocation*)
        /// </para>
        /// </summary>
        public virtual string targetNamespace {
            get {
                XElement x = this.GetElement(targetNamespaceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(targetNamespaceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((namespacePrefix | defaultElementNamespace)?, targetNamespace, targetLocation*)
        /// </para>
        /// </summary>
        public virtual IList<string> targetLocation {
            get {
                if ((this.targetLocationField == null)) {
                    this.targetLocationField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, targetLocationXName);
                }
                return this.targetLocationField;
            }
            set {
                if ((value == null)) {
                    this.targetLocationField = null;
                }
                else {
                    if ((this.targetLocationField == null)) {
                        this.targetLocationField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, targetLocationXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.targetLocationField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<schemaImportType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(namespacePrefixXName, typeof(string));
            localElementDictionary.Add(defaultElementNamespaceXName, typeof(emptyContent));
            localElementDictionary.Add(targetNamespaceXName, typeof(string));
            localElementDictionary.Add(targetLocationXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (namespacePrefix?, targetNamespace, targetLocation*)
    /// </para>
    /// </summary>
    public partial class moduleImportType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName namespacePrefixXName = System.Xml.Linq.XName.Get("namespacePrefix", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName targetNamespaceXName = System.Xml.Linq.XName.Get("targetNamespace", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName targetLocationXName = System.Xml.Linq.XName.Get("targetLocation", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> targetLocationField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("moduleImport", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator moduleImportType(XElement xe) { return XTypedServices.ToXTypedElement<moduleImportType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static moduleImportType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(namespacePrefixXName), new NamedContentModelEntity(targetNamespaceXName), new NamedContentModelEntity(targetLocationXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (namespacePrefix?, targetNamespace, targetLocation*)
        /// </para>
        /// </summary>
        public moduleImportType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (namespacePrefix?, targetNamespace, targetLocation*)
        /// </para>
        /// </summary>
        public virtual string namespacePrefix {
            get {
                XElement x = this.GetElement(namespacePrefixXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
            set {
                this.SetElement(namespacePrefixXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (namespacePrefix?, targetNamespace, targetLocation*)
        /// </para>
        /// </summary>
        public virtual string targetNamespace {
            get {
                XElement x = this.GetElement(targetNamespaceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(targetNamespaceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (namespacePrefix?, targetNamespace, targetLocation*)
        /// </para>
        /// </summary>
        public virtual IList<string> targetLocation {
            get {
                if ((this.targetLocationField == null)) {
                    this.targetLocationField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, targetLocationXName);
                }
                return this.targetLocationField;
            }
            set {
                if ((value == null)) {
                    this.targetLocationField = null;
                }
                else {
                    if ((this.targetLocationField == null)) {
                        this.targetLocationField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, targetLocationXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.targetLocationField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<moduleImportType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(namespacePrefixXName, typeof(string));
            localElementDictionary.Add(targetNamespaceXName, typeof(string));
            localElementDictionary.Add(targetLocationXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (contextItemType?, (varValue | external))
    /// </para>
    /// </summary>
    public partial class contextItemDeclType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName contextItemTypeXName = System.Xml.Linq.XName.Get("contextItemType", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName varValueXName = System.Xml.Linq.XName.Get("varValue", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName externalXName = System.Xml.Linq.XName.Get("external", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("contextItemDecl", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator contextItemDeclType(XElement xe) { return XTypedServices.ToXTypedElement<contextItemDeclType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static contextItemDeclType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(contextItemTypeXName), new ChoiceContentModelEntity(new NamedContentModelEntity(varValueXName), new NamedContentModelEntity(externalXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (contextItemType?, (varValue | external))
        /// </para>
        /// </summary>
        public contextItemDeclType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (contextItemType?, (varValue | external))
        /// </para>
        /// </summary>
        public virtual contextItemType contextItemType {
            get {
                XElement x = this.GetElement(contextItemTypeXName);
                return ((contextItemType)(x));
            }
            set {
                this.SetElement(contextItemTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (contextItemType?, (varValue | external))
        /// </para>
        /// </summary>
        public virtual exprWrapper varValue {
            get {
                XElement x = this.GetElement(varValueXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(varValueXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (contextItemType?, (varValue | external))
        /// </para>
        /// </summary>
        public virtual externalLocalType external {
            get {
                XElement x = this.GetElement(externalXName);
                return ((externalLocalType)(x));
            }
            set {
                this.SetElement(externalXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<contextItemDeclType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(contextItemTypeXName, typeof(contextItemType));
            localElementDictionary.Add(varValueXName, typeof(exprWrapper));
            localElementDictionary.Add(externalXName, typeof(externalLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (varValue?)
        /// </para>
        /// </summary>
        public partial class externalLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName varValueXName = System.Xml.Linq.XName.Get("varValue", "http://www.w3.org/2005/XQueryX");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("external", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator externalLocalType(XElement xe) { return XTypedServices.ToXTypedElement<externalLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static externalLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(varValueXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (varValue?)
            /// </para>
            /// </summary>
            public externalLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (varValue?)
            /// </para>
            /// </summary>
            public virtual exprWrapper varValue {
                get {
                    XElement x = this.GetElement(varValueXName);
                    return ((exprWrapper)(x));
                }
                set {
                    this.SetElement(varValueXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<externalLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(varValueXName, typeof(exprWrapper));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (annotationName, arguments?)
    /// </para>
    /// </summary>
    public partial class annotation : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName annotationNameXName = System.Xml.Linq.XName.Get("annotationName", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName argumentsXName = System.Xml.Linq.XName.Get("arguments", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator annotation(XElement xe) { return XTypedServices.ToXTypedElement<annotation>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static annotation() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(annotationNameXName), new NamedContentModelEntity(argumentsXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (annotationName, arguments?)
        /// </para>
        /// </summary>
        public annotation() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (annotationName, arguments?)
        /// </para>
        /// </summary>
        public virtual EQName annotationName {
            get {
                XElement x = this.GetElement(annotationNameXName);
                return ((EQName)(x));
            }
            set {
                this.SetElement(annotationNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (annotationName, arguments?)
        /// </para>
        /// </summary>
        public virtual literalList arguments {
            get {
                XElement x = this.GetElement(argumentsXName);
                return ((literalList)(x));
            }
            set {
                this.SetElement(argumentsXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<annotation>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(annotationNameXName, typeof(EQName));
            localElementDictionary.Add(argumentsXName, typeof(literalList));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (annotation*, varName, typeDeclaration?, (varValue | external))
    /// </para>
    /// </summary>
    public partial class varDeclType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName annotationXName = System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<annotation> annotationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName varNameXName = System.Xml.Linq.XName.Get("varName", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeDeclarationXName = System.Xml.Linq.XName.Get("typeDeclaration", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName varValueXName = System.Xml.Linq.XName.Get("varValue", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName externalXName = System.Xml.Linq.XName.Get("external", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("varDecl", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator varDeclType(XElement xe) { return XTypedServices.ToXTypedElement<varDeclType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static varDeclType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(annotationXName), new NamedContentModelEntity(varNameXName), new NamedContentModelEntity(typeDeclarationXName), new ChoiceContentModelEntity(new NamedContentModelEntity(varValueXName), new NamedContentModelEntity(externalXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (annotation*, varName, typeDeclaration?, (varValue | external))
        /// </para>
        /// </summary>
        public varDeclType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (annotation*, varName, typeDeclaration?, (varValue | external))
        /// </para>
        /// </summary>
        public virtual IList<annotation> annotation {
            get {
                if ((this.annotationField == null)) {
                    this.annotationField = new XTypedList<annotation>(this, LinqToXsdTypeManager.Instance, annotationXName);
                }
                return this.annotationField;
            }
            set {
                if ((value == null)) {
                    this.annotationField = null;
                }
                else {
                    if ((this.annotationField == null)) {
                        this.annotationField = XTypedList<annotation>.Initialize(this, LinqToXsdTypeManager.Instance, value, annotationXName);
                    }
                    else {
                        XTypedServices.SetList<annotation>(this.annotationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (annotation*, varName, typeDeclaration?, (varValue | external))
        /// </para>
        /// </summary>
        public virtual EQName varName {
            get {
                XElement x = this.GetElement(varNameXName);
                return ((EQName)(x));
            }
            set {
                this.SetElement(varNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (annotation*, varName, typeDeclaration?, (varValue | external))
        /// </para>
        /// </summary>
        public virtual typeDeclaration typeDeclaration {
            get {
                XElement x = this.GetElement(typeDeclarationXName);
                return ((typeDeclaration)(x));
            }
            set {
                this.SetElement(typeDeclarationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation*, varName, typeDeclaration?, (varValue | external))
        /// </para>
        /// </summary>
        public virtual exprWrapper varValue {
            get {
                XElement x = this.GetElement(varValueXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(varValueXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation*, varName, typeDeclaration?, (varValue | external))
        /// </para>
        /// </summary>
        public virtual externalLocalType external {
            get {
                XElement x = this.GetElement(externalXName);
                return ((externalLocalType)(x));
            }
            set {
                this.SetElement(externalXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<varDeclType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(annotationXName, typeof(annotation));
            localElementDictionary.Add(varNameXName, typeof(EQName));
            localElementDictionary.Add(typeDeclarationXName, typeof(typeDeclaration));
            localElementDictionary.Add(varValueXName, typeof(exprWrapper));
            localElementDictionary.Add(externalXName, typeof(externalLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (varValue?)
        /// </para>
        /// </summary>
        public partial class externalLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName varValueXName = System.Xml.Linq.XName.Get("varValue", "http://www.w3.org/2005/XQueryX");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("external", "http://www.w3.org/2005/XQueryX");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator externalLocalType(XElement xe) { return XTypedServices.ToXTypedElement<externalLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static externalLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(varValueXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (varValue?)
            /// </para>
            /// </summary>
            public externalLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (varValue?)
            /// </para>
            /// </summary>
            public virtual exprWrapper varValue {
                get {
                    XElement x = this.GetElement(varValueXName);
                    return ((exprWrapper)(x));
                }
                set {
                    this.SetElement(varValueXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<externalLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(varValueXName, typeof(exprWrapper));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (optionName, optionContents)
    /// </para>
    /// </summary>
    public partial class optionDeclType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName optionNameXName = System.Xml.Linq.XName.Get("optionName", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName optionContentsXName = System.Xml.Linq.XName.Get("optionContents", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("optionDecl", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator optionDeclType(XElement xe) { return XTypedServices.ToXTypedElement<optionDeclType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static optionDeclType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(optionNameXName), new NamedContentModelEntity(optionContentsXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (optionName, optionContents)
        /// </para>
        /// </summary>
        public optionDeclType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (optionName, optionContents)
        /// </para>
        /// </summary>
        public virtual EQName optionName {
            get {
                XElement x = this.GetElement(optionNameXName);
                return ((EQName)(x));
            }
            set {
                this.SetElement(optionNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (optionName, optionContents)
        /// </para>
        /// </summary>
        public virtual string optionContents {
            get {
                XElement x = this.GetElement(optionContentsXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(optionContentsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<optionDeclType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(optionNameXName, typeof(EQName));
            localElementDictionary.Add(optionContentsXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (annotation*, functionName, paramList, typeDeclaration?, (functionBody | externalDefinition))
    /// </para>
    /// </summary>
    public partial class functionDeclType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName annotationXName = System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<annotation> annotationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName functionNameXName = System.Xml.Linq.XName.Get("functionName", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName paramListXName = System.Xml.Linq.XName.Get("paramList", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeDeclarationXName = System.Xml.Linq.XName.Get("typeDeclaration", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName functionBodyXName = System.Xml.Linq.XName.Get("functionBody", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName externalDefinitionXName = System.Xml.Linq.XName.Get("externalDefinition", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("functionDecl", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator functionDeclType(XElement xe) { return XTypedServices.ToXTypedElement<functionDeclType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static functionDeclType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(annotationXName), new NamedContentModelEntity(functionNameXName), new NamedContentModelEntity(paramListXName), new NamedContentModelEntity(typeDeclarationXName), new ChoiceContentModelEntity(new NamedContentModelEntity(functionBodyXName), new NamedContentModelEntity(externalDefinitionXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (annotation*, functionName, paramList, typeDeclaration?, (functionBody | externalDefinition))
        /// </para>
        /// </summary>
        public functionDeclType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (annotation*, functionName, paramList, typeDeclaration?, (functionBody | externalDefinition))
        /// </para>
        /// </summary>
        public virtual IList<annotation> annotation {
            get {
                if ((this.annotationField == null)) {
                    this.annotationField = new XTypedList<annotation>(this, LinqToXsdTypeManager.Instance, annotationXName);
                }
                return this.annotationField;
            }
            set {
                if ((value == null)) {
                    this.annotationField = null;
                }
                else {
                    if ((this.annotationField == null)) {
                        this.annotationField = XTypedList<annotation>.Initialize(this, LinqToXsdTypeManager.Instance, value, annotationXName);
                    }
                    else {
                        XTypedServices.SetList<annotation>(this.annotationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (annotation*, functionName, paramList, typeDeclaration?, (functionBody | externalDefinition))
        /// </para>
        /// </summary>
        public virtual EQName functionName {
            get {
                XElement x = this.GetElement(functionNameXName);
                return ((EQName)(x));
            }
            set {
                this.SetElement(functionNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (annotation*, functionName, paramList, typeDeclaration?, (functionBody | externalDefinition))
        /// </para>
        /// </summary>
        public virtual paramList paramList {
            get {
                XElement x = this.GetElement(paramListXName);
                return ((paramList)(x));
            }
            set {
                this.SetElement(paramListXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (annotation*, functionName, paramList, typeDeclaration?, (functionBody | externalDefinition))
        /// </para>
        /// </summary>
        public virtual typeDeclaration typeDeclaration {
            get {
                XElement x = this.GetElement(typeDeclarationXName);
                return ((typeDeclaration)(x));
            }
            set {
                this.SetElement(typeDeclarationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation*, functionName, paramList, typeDeclaration?, (functionBody | externalDefinition))
        /// </para>
        /// </summary>
        public virtual exprWrapper functionBody {
            get {
                XElement x = this.GetElement(functionBodyXName);
                return ((exprWrapper)(x));
            }
            set {
                this.SetElement(functionBodyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation*, functionName, paramList, typeDeclaration?, (functionBody | externalDefinition))
        /// </para>
        /// </summary>
        public virtual emptyContent externalDefinition {
            get {
                XElement x = this.GetElement(externalDefinitionXName);
                return ((emptyContent)(x));
            }
            set {
                this.SetElement(externalDefinitionXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<functionDeclType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(annotationXName, typeof(annotation));
            localElementDictionary.Add(functionNameXName, typeof(EQName));
            localElementDictionary.Add(paramListXName, typeof(paramList));
            localElementDictionary.Add(typeDeclarationXName, typeof(typeDeclaration));
            localElementDictionary.Add(functionBodyXName, typeof(exprWrapper));
            localElementDictionary.Add(externalDefinitionXName, typeof(emptyContent));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (varName, typeDeclaration?)
    /// </para>
    /// </summary>
    public partial class paramType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName varNameXName = System.Xml.Linq.XName.Get("varName", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeDeclarationXName = System.Xml.Linq.XName.Get("typeDeclaration", "http://www.w3.org/2005/XQueryX");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("param", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator paramType(XElement xe) { return XTypedServices.ToXTypedElement<paramType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static paramType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(varNameXName), new NamedContentModelEntity(typeDeclarationXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (varName, typeDeclaration?)
        /// </para>
        /// </summary>
        public paramType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (varName, typeDeclaration?)
        /// </para>
        /// </summary>
        public virtual EQName varName {
            get {
                XElement x = this.GetElement(varNameXName);
                return ((EQName)(x));
            }
            set {
                this.SetElement(varNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (varName, typeDeclaration?)
        /// </para>
        /// </summary>
        public virtual typeDeclaration typeDeclaration {
            get {
                XElement x = this.GetElement(typeDeclarationXName);
                return ((typeDeclaration)(x));
            }
            set {
                this.SetElement(typeDeclarationXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<paramType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(varNameXName, typeof(EQName));
            localElementDictionary.Add(typeDeclarationXName, typeof(typeDeclaration));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (param*)
    /// </para>
    /// </summary>
    public partial class paramListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName paramXName = System.Xml.Linq.XName.Get("param", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<param> paramField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("paramList", "http://www.w3.org/2005/XQueryX");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator paramListType(XElement xe) { return XTypedServices.ToXTypedElement<paramListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static paramListType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(paramXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (param*)
        /// </para>
        /// </summary>
        public paramListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (param*)
        /// </para>
        /// </summary>
        public virtual IList<param> param {
            get {
                if ((this.paramField == null)) {
                    this.paramField = new XTypedList<param>(this, LinqToXsdTypeManager.Instance, paramXName);
                }
                return this.paramField;
            }
            set {
                if ((value == null)) {
                    this.paramField = null;
                }
                else {
                    if ((this.paramField == null)) {
                        this.paramField = XTypedList<param>.Initialize(this, LinqToXsdTypeManager.Instance, value, paramXName);
                    }
                    else {
                        XTypedServices.SetList<param>(this.paramField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<paramListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(paramXName, typeof(param));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class NCName : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("NCName", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator NCName(XElement xe) { return XTypedServices.ToXTypedElement<NCName>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public NCName() {
        }
        
        public NCName(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static NCName Load(string xmlFile) {
            return XTypedServices.Load<NCName>(xmlFile);
        }
        
        public static NCName Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<NCName>(xmlFile);
        }
        
        public static NCName Parse(string xml) {
            return XTypedServices.Parse<NCName>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NCName>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public abstract partial class expr : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private exprType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("expr", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator expr(XElement xe) {  return (expr)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        protected expr(bool setNull) {
        }
        
        public expr() {
            SetInnerType(new exprType());
        }
        
        public expr(exprType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                if ((this.ContentField != null)) {
                    this.ContentField.Untyped = value;
                }
            }
        }
        
        public virtual exprType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static expr Load(string xmlFile) {
            return ((expr)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static expr Load(System.IO.TextReader xmlFile) {
            return ((expr)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static expr Parse(string xml) {
            return ((expr)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        private void SetInnerType(exprType ContentField) {
            this.ContentField = ((exprType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        protected virtual void SetSubstitutionMember(exprType ContentField) {
            this.ContentField = ContentField;
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public abstract partial class constantExpr : global::W3C.XQueryX.expr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private constantExprType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("constantExpr", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator constantExpr(XElement xe) {  return (constantExpr)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        protected constantExpr(bool setNull) : 
                base(true) {
        }
        
        public constantExpr() : 
                base(true) {
            SetInnerType(new constantExprType());
        }
        
        public constantExpr(constantExprType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                if ((this.ContentField != null)) {
                    this.ContentField.Untyped = value;
                }
            }
        }
        
        public new virtual constantExprType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (value)
        /// </para>
        /// </summary>
        public virtual XTypedElement value {
            get {
                return this.ContentField.value;
            }
            set {
                this.ContentField.value = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static constantExpr Load(string xmlFile) {
            return ((constantExpr)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static constantExpr Load(System.IO.TextReader xmlFile) {
            return ((constantExpr)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public new static constantExpr Parse(string xml) {
            return ((constantExpr)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        private void SetInnerType(constantExprType ContentField) {
            this.ContentField = ((constantExprType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        protected virtual void SetSubstitutionMember(constantExprType ContentField) {
            this.ContentField = ContentField;
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class integerConstantExpr : global::W3C.XQueryX.constantExpr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private integerConstantExprType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("integerConstantExpr", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator integerConstantExpr(XElement xe) { return XTypedServices.ToXTypedElement<integerConstantExpr, integerConstantExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public integerConstantExpr() : 
                base(true) {
            SetInnerType(new integerConstantExprType());
        }
        
        public integerConstantExpr(integerConstantExprType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual integerConstantExprType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static integerConstantExpr Load(string xmlFile) {
            return XTypedServices.Load<integerConstantExpr, integerConstantExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static integerConstantExpr Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<integerConstantExpr, integerConstantExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static integerConstantExpr Parse(string xml) {
            return XTypedServices.Parse<integerConstantExpr, integerConstantExprType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new integerConstantExpr(((integerConstantExprType)(this.Content.Clone())));
        }
        
        private void SetInnerType(integerConstantExprType ContentField) {
            this.ContentField = ((integerConstantExprType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class decimalConstantExpr : global::W3C.XQueryX.constantExpr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private decimalConstantExprType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("decimalConstantExpr", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator decimalConstantExpr(XElement xe) { return XTypedServices.ToXTypedElement<decimalConstantExpr, decimalConstantExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public decimalConstantExpr() : 
                base(true) {
            SetInnerType(new decimalConstantExprType());
        }
        
        public decimalConstantExpr(decimalConstantExprType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual decimalConstantExprType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static decimalConstantExpr Load(string xmlFile) {
            return XTypedServices.Load<decimalConstantExpr, decimalConstantExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static decimalConstantExpr Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<decimalConstantExpr, decimalConstantExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static decimalConstantExpr Parse(string xml) {
            return XTypedServices.Parse<decimalConstantExpr, decimalConstantExprType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new decimalConstantExpr(((decimalConstantExprType)(this.Content.Clone())));
        }
        
        private void SetInnerType(decimalConstantExprType ContentField) {
            this.ContentField = ((decimalConstantExprType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class doubleConstantExpr : global::W3C.XQueryX.constantExpr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private doubleConstantExprType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("doubleConstantExpr", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator doubleConstantExpr(XElement xe) { return XTypedServices.ToXTypedElement<doubleConstantExpr, doubleConstantExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public doubleConstantExpr() : 
                base(true) {
            SetInnerType(new doubleConstantExprType());
        }
        
        public doubleConstantExpr(doubleConstantExprType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual doubleConstantExprType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static doubleConstantExpr Load(string xmlFile) {
            return XTypedServices.Load<doubleConstantExpr, doubleConstantExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static doubleConstantExpr Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<doubleConstantExpr, doubleConstantExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static doubleConstantExpr Parse(string xml) {
            return XTypedServices.Parse<doubleConstantExpr, doubleConstantExprType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new doubleConstantExpr(((doubleConstantExprType)(this.Content.Clone())));
        }
        
        private void SetInnerType(doubleConstantExprType ContentField) {
            this.ContentField = ((doubleConstantExprType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class stringConstantExpr : global::W3C.XQueryX.constantExpr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private stringConstantExprType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("stringConstantExpr", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator stringConstantExpr(XElement xe) { return XTypedServices.ToXTypedElement<stringConstantExpr, stringConstantExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public stringConstantExpr() : 
                base(true) {
            SetInnerType(new stringConstantExprType());
        }
        
        public stringConstantExpr(stringConstantExprType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual stringConstantExprType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static stringConstantExpr Load(string xmlFile) {
            return XTypedServices.Load<stringConstantExpr, stringConstantExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static stringConstantExpr Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<stringConstantExpr, stringConstantExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static stringConstantExpr Parse(string xml) {
            return XTypedServices.Parse<stringConstantExpr, stringConstantExprType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new stringConstantExpr(((stringConstantExprType)(this.Content.Clone())));
        }
        
        private void SetInnerType(stringConstantExprType ContentField) {
            this.ContentField = ((stringConstantExprType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class varRef : global::W3C.XQueryX.expr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private varRefType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("varRef", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator varRef(XElement xe) { return XTypedServices.ToXTypedElement<varRef, varRefType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public varRef() : 
                base(true) {
            SetInnerType(new varRefType());
        }
        
        public varRef(varRefType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual varRefType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (name)
        /// </para>
        /// </summary>
        public virtual EQName name {
            get {
                return this.ContentField.name;
            }
            set {
                this.ContentField.name = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static varRef Load(string xmlFile) {
            return XTypedServices.Load<varRef, varRefType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static varRef Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<varRef, varRefType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static varRef Parse(string xml) {
            return XTypedServices.Parse<varRef, varRefType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new varRef(((varRefType)(this.Content.Clone())));
        }
        
        private void SetInnerType(varRefType ContentField) {
            this.ContentField = ((varRefType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class contextItemExpr : global::W3C.XQueryX.expr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private contextItemExprType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("contextItemExpr", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator contextItemExpr(XElement xe) { return XTypedServices.ToXTypedElement<contextItemExpr, contextItemExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public contextItemExpr() : 
                base(true) {
            SetInnerType(new contextItemExprType());
        }
        
        public contextItemExpr(contextItemExprType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual contextItemExprType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static contextItemExpr Load(string xmlFile) {
            return XTypedServices.Load<contextItemExpr, contextItemExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static contextItemExpr Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<contextItemExpr, contextItemExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static contextItemExpr Parse(string xml) {
            return XTypedServices.Parse<contextItemExpr, contextItemExprType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new contextItemExpr(((contextItemExprType)(this.Content.Clone())));
        }
        
        private void SetInnerType(contextItemExprType ContentField) {
            this.ContentField = ((contextItemExprType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class pragma : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private pragmaType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("pragma", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator pragma(XElement xe) { return XTypedServices.ToXTypedElement<pragma, pragmaType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public pragma() {
            SetInnerType(new pragmaType());
        }
        
        public pragma(pragmaType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual pragmaType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (pragmaName, pragmaContents)
        /// </para>
        /// </summary>
        public virtual EQName pragmaName {
            get {
                return this.ContentField.pragmaName;
            }
            set {
                this.ContentField.pragmaName = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (pragmaName, pragmaContents)
        /// </para>
        /// </summary>
        public virtual string pragmaContents {
            get {
                return this.ContentField.pragmaContents;
            }
            set {
                this.ContentField.pragmaContents = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static pragma Load(string xmlFile) {
            return XTypedServices.Load<pragma, pragmaType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static pragma Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<pragma, pragmaType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static pragma Parse(string xml) {
            return XTypedServices.Parse<pragma, pragmaType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new pragma(((pragmaType)(this.Content.Clone())));
        }
        
        private void SetInnerType(pragmaType ContentField) {
            this.ContentField = ((pragmaType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class extensionExpr : global::W3C.XQueryX.expr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private extensionExprType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("extensionExpr", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator extensionExpr(XElement xe) { return XTypedServices.ToXTypedElement<extensionExpr, extensionExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public extensionExpr() : 
                base(true) {
            SetInnerType(new extensionExprType());
        }
        
        public extensionExpr(extensionExprType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual extensionExprType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (pragma+, argExpr?)
        /// </para>
        /// </summary>
        public virtual IList<pragma> pragma {
            get {
                return this.ContentField.pragma;
            }
            set {
                this.ContentField.pragma = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (pragma+, argExpr?)
        /// </para>
        /// </summary>
        public virtual exprWrapper argExpr {
            get {
                return this.ContentField.argExpr;
            }
            set {
                this.ContentField.argExpr = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static extensionExpr Load(string xmlFile) {
            return XTypedServices.Load<extensionExpr, extensionExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static extensionExpr Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<extensionExpr, extensionExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static extensionExpr Parse(string xml) {
            return XTypedServices.Parse<extensionExpr, extensionExprType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new extensionExpr(((extensionExprType)(this.Content.Clone())));
        }
        
        private void SetInnerType(extensionExprType ContentField) {
            this.ContentField = ((extensionExprType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class simpleMapExpr : global::W3C.XQueryX.expr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private simpleMapExprType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("simpleMapExpr", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator simpleMapExpr(XElement xe) { return XTypedServices.ToXTypedElement<simpleMapExpr, simpleMapExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public simpleMapExpr() : 
                base(true) {
            SetInnerType(new simpleMapExprType());
        }
        
        public simpleMapExpr(simpleMapExprType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual simpleMapExprType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (pathExpr)+
        /// </para>
        /// </summary>
        public virtual IList<pathExpr> pathExpr {
            get {
                return this.ContentField.pathExpr;
            }
            set {
                this.ContentField.pathExpr = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static simpleMapExpr Load(string xmlFile) {
            return XTypedServices.Load<simpleMapExpr, simpleMapExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static simpleMapExpr Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<simpleMapExpr, simpleMapExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static simpleMapExpr Parse(string xml) {
            return XTypedServices.Parse<simpleMapExpr, simpleMapExprType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new simpleMapExpr(((simpleMapExprType)(this.Content.Clone())));
        }
        
        private void SetInnerType(simpleMapExprType ContentField) {
            this.ContentField = ((simpleMapExprType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class functionCallExpr : global::W3C.XQueryX.expr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private functionCallExprType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("functionCallExpr", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator functionCallExpr(XElement xe) { return XTypedServices.ToXTypedElement<functionCallExpr, functionCallExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public functionCallExpr() : 
                base(true) {
            SetInnerType(new functionCallExprType());
        }
        
        public functionCallExpr(functionCallExprType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual functionCallExprType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (functionName, arguments?)
        /// </para>
        /// </summary>
        public virtual EQName functionName {
            get {
                return this.ContentField.functionName;
            }
            set {
                this.ContentField.functionName = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (functionName, arguments?)
        /// </para>
        /// </summary>
        public virtual exprOrPlaceholderList arguments {
            get {
                return this.ContentField.arguments;
            }
            set {
                this.ContentField.arguments = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static functionCallExpr Load(string xmlFile) {
            return XTypedServices.Load<functionCallExpr, functionCallExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static functionCallExpr Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<functionCallExpr, functionCallExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static functionCallExpr Parse(string xml) {
            return XTypedServices.Parse<functionCallExpr, functionCallExprType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new functionCallExpr(((functionCallExprType)(this.Content.Clone())));
        }
        
        private void SetInnerType(functionCallExprType ContentField) {
            this.ContentField = ((functionCallExprType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class constructorFunctionExpr : global::W3C.XQueryX.expr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private constructorFunctionExprType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("constructorFunctionExpr", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator constructorFunctionExpr(XElement xe) { return XTypedServices.ToXTypedElement<constructorFunctionExpr, constructorFunctionExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public constructorFunctionExpr() : 
                base(true) {
            SetInnerType(new constructorFunctionExprType());
        }
        
        public constructorFunctionExpr(constructorFunctionExprType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual constructorFunctionExprType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (typeName, argExpr)
        /// </para>
        /// </summary>
        public virtual EQName typeName {
            get {
                return this.ContentField.typeName;
            }
            set {
                this.ContentField.typeName = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (typeName, argExpr)
        /// </para>
        /// </summary>
        public virtual exprWrapper argExpr {
            get {
                return this.ContentField.argExpr;
            }
            set {
                this.ContentField.argExpr = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static constructorFunctionExpr Load(string xmlFile) {
            return XTypedServices.Load<constructorFunctionExpr, constructorFunctionExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static constructorFunctionExpr Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<constructorFunctionExpr, constructorFunctionExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static constructorFunctionExpr Parse(string xml) {
            return XTypedServices.Parse<constructorFunctionExpr, constructorFunctionExprType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new constructorFunctionExpr(((constructorFunctionExprType)(this.Content.Clone())));
        }
        
        private void SetInnerType(constructorFunctionExprType ContentField) {
            this.ContentField = ((constructorFunctionExprType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class sequenceExpr : global::W3C.XQueryX.expr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private sequenceExprType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("sequenceExpr", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator sequenceExpr(XElement xe) { return XTypedServices.ToXTypedElement<sequenceExpr, sequenceExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public sequenceExpr() : 
                base(true) {
            SetInnerType(new sequenceExprType());
        }
        
        public sequenceExpr(sequenceExprType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual sequenceExprType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Substitution members: expr, constantExpr, integerConstantExpr, decimalConstantExpr, doubleConstantExpr, stringConstantExpr, varRef, contextItemExpr, extensionExpr, simpleMapExpr, functionCallExpr, constructorFunctionExpr, sequenceExpr, rangeSequenceExpr, operatorExpr, arithmeticOp, addOp, subtractOp, multiplyOp, divOp, idivOp, modOp, unaryMinusOp, unaryPlusOp, stringOp, stringConcatenateOp, comparisonOp, valueComparisonOp, eqOp, neOp, gtOp, geOp, ltOp, leOp, generalComparisonOp, equalOp, notEqualOp, lessThanOp, lessThanOrEqualOp, greaterThanOp, greaterThanOrEqualOp, nodeComparisonOp, isOp, orderComparisonOp, nodeBeforeOp, nodeAfterOp, logicalOp, andOp, orOp, setOp, unionOp, intersectOp, exceptOp, flworExpr, ifThenElseExpr, quantifiedExpr, switchExpr, typeswitchExpr, tryCatchExpr, instanceOfExpr, treatExpr, castableExpr, castExpr, arrowExpr, validateExpr, elementConstructor, computedElementConstructor, computedAttributeConstructor, computedDocumentConstructor, computedTextConstructor, computedCommentConstructor, computedNamespaceConstructor, computedPIConstructor, unorderedExpr, orderedExpr, namedFunctionRef, inlineFunctionExpr, dynamicFunctionInvocationExpr, mapConstructor, arrayConstructor, stringConstructor, unaryLookup, pathExpr
        /// </para>
        /// <para>
        /// Regular expression: (expr*)
        /// </para>
        /// </summary>
        public virtual IList<expr> expr {
            get {
                return this.ContentField.expr;
            }
            set {
                this.ContentField.expr = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static sequenceExpr Load(string xmlFile) {
            return XTypedServices.Load<sequenceExpr, sequenceExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static sequenceExpr Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<sequenceExpr, sequenceExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static sequenceExpr Parse(string xml) {
            return XTypedServices.Parse<sequenceExpr, sequenceExprType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new sequenceExpr(((sequenceExprType)(this.Content.Clone())));
        }
        
        private void SetInnerType(sequenceExprType ContentField) {
            this.ContentField = ((sequenceExprType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class rangeSequenceExpr : global::W3C.XQueryX.expr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private rangeSequenceExprType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("rangeSequenceExpr", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator rangeSequenceExpr(XElement xe) { return XTypedServices.ToXTypedElement<rangeSequenceExpr, rangeSequenceExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public rangeSequenceExpr() : 
                base(true) {
            SetInnerType(new rangeSequenceExprType());
        }
        
        public rangeSequenceExpr(rangeSequenceExprType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual rangeSequenceExprType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (startExpr, endExpr)
        /// </para>
        /// </summary>
        public virtual exprWrapper startExpr {
            get {
                return this.ContentField.startExpr;
            }
            set {
                this.ContentField.startExpr = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (startExpr, endExpr)
        /// </para>
        /// </summary>
        public virtual exprWrapper endExpr {
            get {
                return this.ContentField.endExpr;
            }
            set {
                this.ContentField.endExpr = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static rangeSequenceExpr Load(string xmlFile) {
            return XTypedServices.Load<rangeSequenceExpr, rangeSequenceExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static rangeSequenceExpr Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<rangeSequenceExpr, rangeSequenceExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static rangeSequenceExpr Parse(string xml) {
            return XTypedServices.Parse<rangeSequenceExpr, rangeSequenceExprType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new rangeSequenceExpr(((rangeSequenceExprType)(this.Content.Clone())));
        }
        
        private void SetInnerType(rangeSequenceExprType ContentField) {
            this.ContentField = ((rangeSequenceExprType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public abstract partial class operatorExpr : global::W3C.XQueryX.expr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private operatorExprType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("operatorExpr", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator operatorExpr(XElement xe) {  return (operatorExpr)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        protected operatorExpr(bool setNull) : 
                base(true) {
        }
        
        public operatorExpr() : 
                base(true) {
            SetInnerType(new operatorExprType());
        }
        
        public operatorExpr(operatorExprType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                if ((this.ContentField != null)) {
                    this.ContentField.Untyped = value;
                }
            }
        }
        
        public new virtual operatorExprType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static operatorExpr Load(string xmlFile) {
            return ((operatorExpr)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static operatorExpr Load(System.IO.TextReader xmlFile) {
            return ((operatorExpr)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public new static operatorExpr Parse(string xml) {
            return ((operatorExpr)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        private void SetInnerType(operatorExprType ContentField) {
            this.ContentField = ((operatorExprType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        protected virtual void SetSubstitutionMember(operatorExprType ContentField) {
            this.ContentField = ContentField;
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public abstract partial class arithmeticOp : global::W3C.XQueryX.operatorExpr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private operatorExprType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("arithmeticOp", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator arithmeticOp(XElement xe) {  return (arithmeticOp)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        protected arithmeticOp(bool setNull) : 
                base(true) {
        }
        
        public arithmeticOp() : 
                base(true) {
            SetInnerType(new operatorExprType());
        }
        
        public arithmeticOp(operatorExprType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                if ((this.ContentField != null)) {
                    this.ContentField.Untyped = value;
                }
            }
        }
        
        public new virtual operatorExprType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static arithmeticOp Load(string xmlFile) {
            return ((arithmeticOp)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static arithmeticOp Load(System.IO.TextReader xmlFile) {
            return ((arithmeticOp)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public new static arithmeticOp Parse(string xml) {
            return ((arithmeticOp)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        private void SetInnerType(operatorExprType ContentField) {
            this.ContentField = ((operatorExprType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        protected virtual void SetSubstitutionMember(operatorExprType ContentField) {
            this.ContentField = ContentField;
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class addOp : global::W3C.XQueryX.arithmeticOp, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private binaryOperatorExpr ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("addOp", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator addOp(XElement xe) { return XTypedServices.ToXTypedElement<addOp, binaryOperatorExpr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public addOp() : 
                base(true) {
            SetInnerType(new binaryOperatorExpr());
        }
        
        public addOp(binaryOperatorExpr content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual binaryOperatorExpr Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (firstOperand, secondOperand)
        /// </para>
        /// </summary>
        public virtual exprWrapper firstOperand {
            get {
                return this.ContentField.firstOperand;
            }
            set {
                this.ContentField.firstOperand = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (firstOperand, secondOperand)
        /// </para>
        /// </summary>
        public virtual exprWrapper secondOperand {
            get {
                return this.ContentField.secondOperand;
            }
            set {
                this.ContentField.secondOperand = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static addOp Load(string xmlFile) {
            return XTypedServices.Load<addOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static addOp Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<addOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static addOp Parse(string xml) {
            return XTypedServices.Parse<addOp, binaryOperatorExpr>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new addOp(((binaryOperatorExpr)(this.Content.Clone())));
        }
        
        private void SetInnerType(binaryOperatorExpr ContentField) {
            this.ContentField = ((binaryOperatorExpr)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class subtractOp : global::W3C.XQueryX.arithmeticOp, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private binaryOperatorExpr ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("subtractOp", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator subtractOp(XElement xe) { return XTypedServices.ToXTypedElement<subtractOp, binaryOperatorExpr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public subtractOp() : 
                base(true) {
            SetInnerType(new binaryOperatorExpr());
        }
        
        public subtractOp(binaryOperatorExpr content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual binaryOperatorExpr Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (firstOperand, secondOperand)
        /// </para>
        /// </summary>
        public virtual exprWrapper firstOperand {
            get {
                return this.ContentField.firstOperand;
            }
            set {
                this.ContentField.firstOperand = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (firstOperand, secondOperand)
        /// </para>
        /// </summary>
        public virtual exprWrapper secondOperand {
            get {
                return this.ContentField.secondOperand;
            }
            set {
                this.ContentField.secondOperand = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static subtractOp Load(string xmlFile) {
            return XTypedServices.Load<subtractOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static subtractOp Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<subtractOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static subtractOp Parse(string xml) {
            return XTypedServices.Parse<subtractOp, binaryOperatorExpr>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new subtractOp(((binaryOperatorExpr)(this.Content.Clone())));
        }
        
        private void SetInnerType(binaryOperatorExpr ContentField) {
            this.ContentField = ((binaryOperatorExpr)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class multiplyOp : global::W3C.XQueryX.arithmeticOp, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private binaryOperatorExpr ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("multiplyOp", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator multiplyOp(XElement xe) { return XTypedServices.ToXTypedElement<multiplyOp, binaryOperatorExpr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public multiplyOp() : 
                base(true) {
            SetInnerType(new binaryOperatorExpr());
        }
        
        public multiplyOp(binaryOperatorExpr content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual binaryOperatorExpr Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (firstOperand, secondOperand)
        /// </para>
        /// </summary>
        public virtual exprWrapper firstOperand {
            get {
                return this.ContentField.firstOperand;
            }
            set {
                this.ContentField.firstOperand = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (firstOperand, secondOperand)
        /// </para>
        /// </summary>
        public virtual exprWrapper secondOperand {
            get {
                return this.ContentField.secondOperand;
            }
            set {
                this.ContentField.secondOperand = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static multiplyOp Load(string xmlFile) {
            return XTypedServices.Load<multiplyOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static multiplyOp Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<multiplyOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static multiplyOp Parse(string xml) {
            return XTypedServices.Parse<multiplyOp, binaryOperatorExpr>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new multiplyOp(((binaryOperatorExpr)(this.Content.Clone())));
        }
        
        private void SetInnerType(binaryOperatorExpr ContentField) {
            this.ContentField = ((binaryOperatorExpr)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class divOp : global::W3C.XQueryX.arithmeticOp, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private binaryOperatorExpr ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("divOp", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator divOp(XElement xe) { return XTypedServices.ToXTypedElement<divOp, binaryOperatorExpr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public divOp() : 
                base(true) {
            SetInnerType(new binaryOperatorExpr());
        }
        
        public divOp(binaryOperatorExpr content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual binaryOperatorExpr Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (firstOperand, secondOperand)
        /// </para>
        /// </summary>
        public virtual exprWrapper firstOperand {
            get {
                return this.ContentField.firstOperand;
            }
            set {
                this.ContentField.firstOperand = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (firstOperand, secondOperand)
        /// </para>
        /// </summary>
        public virtual exprWrapper secondOperand {
            get {
                return this.ContentField.secondOperand;
            }
            set {
                this.ContentField.secondOperand = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static divOp Load(string xmlFile) {
            return XTypedServices.Load<divOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static divOp Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<divOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static divOp Parse(string xml) {
            return XTypedServices.Parse<divOp, binaryOperatorExpr>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new divOp(((binaryOperatorExpr)(this.Content.Clone())));
        }
        
        private void SetInnerType(binaryOperatorExpr ContentField) {
            this.ContentField = ((binaryOperatorExpr)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class idivOp : global::W3C.XQueryX.arithmeticOp, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private binaryOperatorExpr ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("idivOp", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator idivOp(XElement xe) { return XTypedServices.ToXTypedElement<idivOp, binaryOperatorExpr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public idivOp() : 
                base(true) {
            SetInnerType(new binaryOperatorExpr());
        }
        
        public idivOp(binaryOperatorExpr content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual binaryOperatorExpr Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (firstOperand, secondOperand)
        /// </para>
        /// </summary>
        public virtual exprWrapper firstOperand {
            get {
                return this.ContentField.firstOperand;
            }
            set {
                this.ContentField.firstOperand = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (firstOperand, secondOperand)
        /// </para>
        /// </summary>
        public virtual exprWrapper secondOperand {
            get {
                return this.ContentField.secondOperand;
            }
            set {
                this.ContentField.secondOperand = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static idivOp Load(string xmlFile) {
            return XTypedServices.Load<idivOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static idivOp Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<idivOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static idivOp Parse(string xml) {
            return XTypedServices.Parse<idivOp, binaryOperatorExpr>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new idivOp(((binaryOperatorExpr)(this.Content.Clone())));
        }
        
        private void SetInnerType(binaryOperatorExpr ContentField) {
            this.ContentField = ((binaryOperatorExpr)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class modOp : global::W3C.XQueryX.arithmeticOp, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private binaryOperatorExpr ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("modOp", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator modOp(XElement xe) { return XTypedServices.ToXTypedElement<modOp, binaryOperatorExpr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public modOp() : 
                base(true) {
            SetInnerType(new binaryOperatorExpr());
        }
        
        public modOp(binaryOperatorExpr content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual binaryOperatorExpr Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (firstOperand, secondOperand)
        /// </para>
        /// </summary>
        public virtual exprWrapper firstOperand {
            get {
                return this.ContentField.firstOperand;
            }
            set {
                this.ContentField.firstOperand = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (firstOperand, secondOperand)
        /// </para>
        /// </summary>
        public virtual exprWrapper secondOperand {
            get {
                return this.ContentField.secondOperand;
            }
            set {
                this.ContentField.secondOperand = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static modOp Load(string xmlFile) {
            return XTypedServices.Load<modOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static modOp Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<modOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static modOp Parse(string xml) {
            return XTypedServices.Parse<modOp, binaryOperatorExpr>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new modOp(((binaryOperatorExpr)(this.Content.Clone())));
        }
        
        private void SetInnerType(binaryOperatorExpr ContentField) {
            this.ContentField = ((binaryOperatorExpr)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class unaryMinusOp : global::W3C.XQueryX.arithmeticOp, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private unaryOperatorExpr ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("unaryMinusOp", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator unaryMinusOp(XElement xe) { return XTypedServices.ToXTypedElement<unaryMinusOp, unaryOperatorExpr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public unaryMinusOp() : 
                base(true) {
            SetInnerType(new unaryOperatorExpr());
        }
        
        public unaryMinusOp(unaryOperatorExpr content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual unaryOperatorExpr Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (operand)
        /// </para>
        /// </summary>
        public virtual exprWrapper operand {
            get {
                return this.ContentField.operand;
            }
            set {
                this.ContentField.operand = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static unaryMinusOp Load(string xmlFile) {
            return XTypedServices.Load<unaryMinusOp, unaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static unaryMinusOp Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<unaryMinusOp, unaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static unaryMinusOp Parse(string xml) {
            return XTypedServices.Parse<unaryMinusOp, unaryOperatorExpr>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new unaryMinusOp(((unaryOperatorExpr)(this.Content.Clone())));
        }
        
        private void SetInnerType(unaryOperatorExpr ContentField) {
            this.ContentField = ((unaryOperatorExpr)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class unaryPlusOp : global::W3C.XQueryX.arithmeticOp, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private unaryOperatorExpr ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("unaryPlusOp", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator unaryPlusOp(XElement xe) { return XTypedServices.ToXTypedElement<unaryPlusOp, unaryOperatorExpr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public unaryPlusOp() : 
                base(true) {
            SetInnerType(new unaryOperatorExpr());
        }
        
        public unaryPlusOp(unaryOperatorExpr content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual unaryOperatorExpr Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (operand)
        /// </para>
        /// </summary>
        public virtual exprWrapper operand {
            get {
                return this.ContentField.operand;
            }
            set {
                this.ContentField.operand = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static unaryPlusOp Load(string xmlFile) {
            return XTypedServices.Load<unaryPlusOp, unaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static unaryPlusOp Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<unaryPlusOp, unaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static unaryPlusOp Parse(string xml) {
            return XTypedServices.Parse<unaryPlusOp, unaryOperatorExpr>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new unaryPlusOp(((unaryOperatorExpr)(this.Content.Clone())));
        }
        
        private void SetInnerType(unaryOperatorExpr ContentField) {
            this.ContentField = ((unaryOperatorExpr)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public abstract partial class stringOp : global::W3C.XQueryX.operatorExpr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private operatorExprType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("stringOp", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator stringOp(XElement xe) {  return (stringOp)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        protected stringOp(bool setNull) : 
                base(true) {
        }
        
        public stringOp() : 
                base(true) {
            SetInnerType(new operatorExprType());
        }
        
        public stringOp(operatorExprType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                if ((this.ContentField != null)) {
                    this.ContentField.Untyped = value;
                }
            }
        }
        
        public new virtual operatorExprType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static stringOp Load(string xmlFile) {
            return ((stringOp)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static stringOp Load(System.IO.TextReader xmlFile) {
            return ((stringOp)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public new static stringOp Parse(string xml) {
            return ((stringOp)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        private void SetInnerType(operatorExprType ContentField) {
            this.ContentField = ((operatorExprType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        protected virtual void SetSubstitutionMember(operatorExprType ContentField) {
            this.ContentField = ContentField;
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class stringConcatenateOp : global::W3C.XQueryX.stringOp, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private binaryOperatorExpr ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("stringConcatenateOp", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator stringConcatenateOp(XElement xe) { return XTypedServices.ToXTypedElement<stringConcatenateOp, binaryOperatorExpr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public stringConcatenateOp() : 
                base(true) {
            SetInnerType(new binaryOperatorExpr());
        }
        
        public stringConcatenateOp(binaryOperatorExpr content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual binaryOperatorExpr Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (firstOperand, secondOperand)
        /// </para>
        /// </summary>
        public virtual exprWrapper firstOperand {
            get {
                return this.ContentField.firstOperand;
            }
            set {
                this.ContentField.firstOperand = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (firstOperand, secondOperand)
        /// </para>
        /// </summary>
        public virtual exprWrapper secondOperand {
            get {
                return this.ContentField.secondOperand;
            }
            set {
                this.ContentField.secondOperand = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static stringConcatenateOp Load(string xmlFile) {
            return XTypedServices.Load<stringConcatenateOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static stringConcatenateOp Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<stringConcatenateOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static stringConcatenateOp Parse(string xml) {
            return XTypedServices.Parse<stringConcatenateOp, binaryOperatorExpr>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new stringConcatenateOp(((binaryOperatorExpr)(this.Content.Clone())));
        }
        
        private void SetInnerType(binaryOperatorExpr ContentField) {
            this.ContentField = ((binaryOperatorExpr)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public abstract partial class comparisonOp : global::W3C.XQueryX.operatorExpr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private binaryOperatorExpr ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("comparisonOp", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator comparisonOp(XElement xe) {  return (comparisonOp)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public comparisonOp() : 
                base(true) {
            SetInnerType(new binaryOperatorExpr());
        }
        
        public comparisonOp(binaryOperatorExpr content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual binaryOperatorExpr Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (firstOperand, secondOperand)
        /// </para>
        /// </summary>
        public virtual exprWrapper firstOperand {
            get {
                return this.ContentField.firstOperand;
            }
            set {
                this.ContentField.firstOperand = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (firstOperand, secondOperand)
        /// </para>
        /// </summary>
        public virtual exprWrapper secondOperand {
            get {
                return this.ContentField.secondOperand;
            }
            set {
                this.ContentField.secondOperand = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static comparisonOp Load(string xmlFile) {
            return ((comparisonOp)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static comparisonOp Load(System.IO.TextReader xmlFile) {
            return ((comparisonOp)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public new static comparisonOp Parse(string xml) {
            return ((comparisonOp)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        private void SetInnerType(binaryOperatorExpr ContentField) {
            this.ContentField = ((binaryOperatorExpr)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public abstract partial class valueComparisonOp : global::W3C.XQueryX.operatorExpr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private binaryOperatorExpr ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("valueComparisonOp", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator valueComparisonOp(XElement xe) {  return (valueComparisonOp)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        protected valueComparisonOp(bool setNull) : 
                base(true) {
        }
        
        public valueComparisonOp() : 
                base(true) {
            SetInnerType(new binaryOperatorExpr());
        }
        
        public valueComparisonOp(binaryOperatorExpr content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                if ((this.ContentField != null)) {
                    this.ContentField.Untyped = value;
                }
            }
        }
        
        public new virtual binaryOperatorExpr Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (firstOperand, secondOperand)
        /// </para>
        /// </summary>
        public virtual exprWrapper firstOperand {
            get {
                return this.ContentField.firstOperand;
            }
            set {
                this.ContentField.firstOperand = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (firstOperand, secondOperand)
        /// </para>
        /// </summary>
        public virtual exprWrapper secondOperand {
            get {
                return this.ContentField.secondOperand;
            }
            set {
                this.ContentField.secondOperand = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static valueComparisonOp Load(string xmlFile) {
            return ((valueComparisonOp)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static valueComparisonOp Load(System.IO.TextReader xmlFile) {
            return ((valueComparisonOp)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public new static valueComparisonOp Parse(string xml) {
            return ((valueComparisonOp)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        private void SetInnerType(binaryOperatorExpr ContentField) {
            this.ContentField = ((binaryOperatorExpr)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        protected virtual void SetSubstitutionMember(binaryOperatorExpr ContentField) {
            this.ContentField = ContentField;
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class eqOp : global::W3C.XQueryX.valueComparisonOp, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private binaryOperatorExpr ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("eqOp", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator eqOp(XElement xe) { return XTypedServices.ToXTypedElement<eqOp, binaryOperatorExpr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public eqOp() : 
                base(true) {
            SetInnerType(new binaryOperatorExpr());
        }
        
        public eqOp(binaryOperatorExpr content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual binaryOperatorExpr Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static eqOp Load(string xmlFile) {
            return XTypedServices.Load<eqOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static eqOp Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<eqOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static eqOp Parse(string xml) {
            return XTypedServices.Parse<eqOp, binaryOperatorExpr>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new eqOp(((binaryOperatorExpr)(this.Content.Clone())));
        }
        
        private void SetInnerType(binaryOperatorExpr ContentField) {
            this.ContentField = ((binaryOperatorExpr)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class neOp : global::W3C.XQueryX.valueComparisonOp, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private binaryOperatorExpr ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("neOp", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator neOp(XElement xe) { return XTypedServices.ToXTypedElement<neOp, binaryOperatorExpr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public neOp() : 
                base(true) {
            SetInnerType(new binaryOperatorExpr());
        }
        
        public neOp(binaryOperatorExpr content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual binaryOperatorExpr Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static neOp Load(string xmlFile) {
            return XTypedServices.Load<neOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static neOp Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<neOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static neOp Parse(string xml) {
            return XTypedServices.Parse<neOp, binaryOperatorExpr>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new neOp(((binaryOperatorExpr)(this.Content.Clone())));
        }
        
        private void SetInnerType(binaryOperatorExpr ContentField) {
            this.ContentField = ((binaryOperatorExpr)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class gtOp : global::W3C.XQueryX.valueComparisonOp, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private binaryOperatorExpr ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("gtOp", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator gtOp(XElement xe) { return XTypedServices.ToXTypedElement<gtOp, binaryOperatorExpr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public gtOp() : 
                base(true) {
            SetInnerType(new binaryOperatorExpr());
        }
        
        public gtOp(binaryOperatorExpr content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual binaryOperatorExpr Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static gtOp Load(string xmlFile) {
            return XTypedServices.Load<gtOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static gtOp Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<gtOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static gtOp Parse(string xml) {
            return XTypedServices.Parse<gtOp, binaryOperatorExpr>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new gtOp(((binaryOperatorExpr)(this.Content.Clone())));
        }
        
        private void SetInnerType(binaryOperatorExpr ContentField) {
            this.ContentField = ((binaryOperatorExpr)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class geOp : global::W3C.XQueryX.valueComparisonOp, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private binaryOperatorExpr ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("geOp", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator geOp(XElement xe) { return XTypedServices.ToXTypedElement<geOp, binaryOperatorExpr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public geOp() : 
                base(true) {
            SetInnerType(new binaryOperatorExpr());
        }
        
        public geOp(binaryOperatorExpr content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual binaryOperatorExpr Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static geOp Load(string xmlFile) {
            return XTypedServices.Load<geOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static geOp Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<geOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static geOp Parse(string xml) {
            return XTypedServices.Parse<geOp, binaryOperatorExpr>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new geOp(((binaryOperatorExpr)(this.Content.Clone())));
        }
        
        private void SetInnerType(binaryOperatorExpr ContentField) {
            this.ContentField = ((binaryOperatorExpr)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ltOp : global::W3C.XQueryX.valueComparisonOp, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private binaryOperatorExpr ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ltOp", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator ltOp(XElement xe) { return XTypedServices.ToXTypedElement<ltOp, binaryOperatorExpr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ltOp() : 
                base(true) {
            SetInnerType(new binaryOperatorExpr());
        }
        
        public ltOp(binaryOperatorExpr content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual binaryOperatorExpr Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static ltOp Load(string xmlFile) {
            return XTypedServices.Load<ltOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ltOp Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ltOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static ltOp Parse(string xml) {
            return XTypedServices.Parse<ltOp, binaryOperatorExpr>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new ltOp(((binaryOperatorExpr)(this.Content.Clone())));
        }
        
        private void SetInnerType(binaryOperatorExpr ContentField) {
            this.ContentField = ((binaryOperatorExpr)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class leOp : global::W3C.XQueryX.valueComparisonOp, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private binaryOperatorExpr ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("leOp", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator leOp(XElement xe) { return XTypedServices.ToXTypedElement<leOp, binaryOperatorExpr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public leOp() : 
                base(true) {
            SetInnerType(new binaryOperatorExpr());
        }
        
        public leOp(binaryOperatorExpr content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual binaryOperatorExpr Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static leOp Load(string xmlFile) {
            return XTypedServices.Load<leOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static leOp Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<leOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static leOp Parse(string xml) {
            return XTypedServices.Parse<leOp, binaryOperatorExpr>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new leOp(((binaryOperatorExpr)(this.Content.Clone())));
        }
        
        private void SetInnerType(binaryOperatorExpr ContentField) {
            this.ContentField = ((binaryOperatorExpr)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public abstract partial class generalComparisonOp : global::W3C.XQueryX.operatorExpr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private binaryOperatorExpr ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("generalComparisonOp", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator generalComparisonOp(XElement xe) {  return (generalComparisonOp)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        protected generalComparisonOp(bool setNull) : 
                base(true) {
        }
        
        public generalComparisonOp() : 
                base(true) {
            SetInnerType(new binaryOperatorExpr());
        }
        
        public generalComparisonOp(binaryOperatorExpr content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                if ((this.ContentField != null)) {
                    this.ContentField.Untyped = value;
                }
            }
        }
        
        public new virtual binaryOperatorExpr Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (firstOperand, secondOperand)
        /// </para>
        /// </summary>
        public virtual exprWrapper firstOperand {
            get {
                return this.ContentField.firstOperand;
            }
            set {
                this.ContentField.firstOperand = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (firstOperand, secondOperand)
        /// </para>
        /// </summary>
        public virtual exprWrapper secondOperand {
            get {
                return this.ContentField.secondOperand;
            }
            set {
                this.ContentField.secondOperand = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static generalComparisonOp Load(string xmlFile) {
            return ((generalComparisonOp)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static generalComparisonOp Load(System.IO.TextReader xmlFile) {
            return ((generalComparisonOp)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public new static generalComparisonOp Parse(string xml) {
            return ((generalComparisonOp)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        private void SetInnerType(binaryOperatorExpr ContentField) {
            this.ContentField = ((binaryOperatorExpr)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        protected virtual void SetSubstitutionMember(binaryOperatorExpr ContentField) {
            this.ContentField = ContentField;
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class equalOp : global::W3C.XQueryX.generalComparisonOp, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private binaryOperatorExpr ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("equalOp", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator equalOp(XElement xe) { return XTypedServices.ToXTypedElement<equalOp, binaryOperatorExpr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public equalOp() : 
                base(true) {
            SetInnerType(new binaryOperatorExpr());
        }
        
        public equalOp(binaryOperatorExpr content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual binaryOperatorExpr Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static equalOp Load(string xmlFile) {
            return XTypedServices.Load<equalOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static equalOp Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<equalOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static equalOp Parse(string xml) {
            return XTypedServices.Parse<equalOp, binaryOperatorExpr>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new equalOp(((binaryOperatorExpr)(this.Content.Clone())));
        }
        
        private void SetInnerType(binaryOperatorExpr ContentField) {
            this.ContentField = ((binaryOperatorExpr)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class notEqualOp : global::W3C.XQueryX.generalComparisonOp, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private binaryOperatorExpr ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("notEqualOp", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator notEqualOp(XElement xe) { return XTypedServices.ToXTypedElement<notEqualOp, binaryOperatorExpr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public notEqualOp() : 
                base(true) {
            SetInnerType(new binaryOperatorExpr());
        }
        
        public notEqualOp(binaryOperatorExpr content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual binaryOperatorExpr Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static notEqualOp Load(string xmlFile) {
            return XTypedServices.Load<notEqualOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static notEqualOp Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<notEqualOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static notEqualOp Parse(string xml) {
            return XTypedServices.Parse<notEqualOp, binaryOperatorExpr>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new notEqualOp(((binaryOperatorExpr)(this.Content.Clone())));
        }
        
        private void SetInnerType(binaryOperatorExpr ContentField) {
            this.ContentField = ((binaryOperatorExpr)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class lessThanOp : global::W3C.XQueryX.generalComparisonOp, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private binaryOperatorExpr ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("lessThanOp", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator lessThanOp(XElement xe) { return XTypedServices.ToXTypedElement<lessThanOp, binaryOperatorExpr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public lessThanOp() : 
                base(true) {
            SetInnerType(new binaryOperatorExpr());
        }
        
        public lessThanOp(binaryOperatorExpr content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual binaryOperatorExpr Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static lessThanOp Load(string xmlFile) {
            return XTypedServices.Load<lessThanOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static lessThanOp Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<lessThanOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static lessThanOp Parse(string xml) {
            return XTypedServices.Parse<lessThanOp, binaryOperatorExpr>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new lessThanOp(((binaryOperatorExpr)(this.Content.Clone())));
        }
        
        private void SetInnerType(binaryOperatorExpr ContentField) {
            this.ContentField = ((binaryOperatorExpr)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class lessThanOrEqualOp : global::W3C.XQueryX.generalComparisonOp, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private binaryOperatorExpr ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("lessThanOrEqualOp", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator lessThanOrEqualOp(XElement xe) { return XTypedServices.ToXTypedElement<lessThanOrEqualOp, binaryOperatorExpr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public lessThanOrEqualOp() : 
                base(true) {
            SetInnerType(new binaryOperatorExpr());
        }
        
        public lessThanOrEqualOp(binaryOperatorExpr content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual binaryOperatorExpr Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static lessThanOrEqualOp Load(string xmlFile) {
            return XTypedServices.Load<lessThanOrEqualOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static lessThanOrEqualOp Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<lessThanOrEqualOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static lessThanOrEqualOp Parse(string xml) {
            return XTypedServices.Parse<lessThanOrEqualOp, binaryOperatorExpr>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new lessThanOrEqualOp(((binaryOperatorExpr)(this.Content.Clone())));
        }
        
        private void SetInnerType(binaryOperatorExpr ContentField) {
            this.ContentField = ((binaryOperatorExpr)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class greaterThanOp : global::W3C.XQueryX.generalComparisonOp, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private binaryOperatorExpr ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("greaterThanOp", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator greaterThanOp(XElement xe) { return XTypedServices.ToXTypedElement<greaterThanOp, binaryOperatorExpr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public greaterThanOp() : 
                base(true) {
            SetInnerType(new binaryOperatorExpr());
        }
        
        public greaterThanOp(binaryOperatorExpr content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual binaryOperatorExpr Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static greaterThanOp Load(string xmlFile) {
            return XTypedServices.Load<greaterThanOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static greaterThanOp Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<greaterThanOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static greaterThanOp Parse(string xml) {
            return XTypedServices.Parse<greaterThanOp, binaryOperatorExpr>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new greaterThanOp(((binaryOperatorExpr)(this.Content.Clone())));
        }
        
        private void SetInnerType(binaryOperatorExpr ContentField) {
            this.ContentField = ((binaryOperatorExpr)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class greaterThanOrEqualOp : global::W3C.XQueryX.generalComparisonOp, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private binaryOperatorExpr ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("greaterThanOrEqualOp", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator greaterThanOrEqualOp(XElement xe) { return XTypedServices.ToXTypedElement<greaterThanOrEqualOp, binaryOperatorExpr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public greaterThanOrEqualOp() : 
                base(true) {
            SetInnerType(new binaryOperatorExpr());
        }
        
        public greaterThanOrEqualOp(binaryOperatorExpr content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual binaryOperatorExpr Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static greaterThanOrEqualOp Load(string xmlFile) {
            return XTypedServices.Load<greaterThanOrEqualOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static greaterThanOrEqualOp Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<greaterThanOrEqualOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static greaterThanOrEqualOp Parse(string xml) {
            return XTypedServices.Parse<greaterThanOrEqualOp, binaryOperatorExpr>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new greaterThanOrEqualOp(((binaryOperatorExpr)(this.Content.Clone())));
        }
        
        private void SetInnerType(binaryOperatorExpr ContentField) {
            this.ContentField = ((binaryOperatorExpr)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public abstract partial class nodeComparisonOp : global::W3C.XQueryX.operatorExpr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private binaryOperatorExpr ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("nodeComparisonOp", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator nodeComparisonOp(XElement xe) {  return (nodeComparisonOp)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        protected nodeComparisonOp(bool setNull) : 
                base(true) {
        }
        
        public nodeComparisonOp() : 
                base(true) {
            SetInnerType(new binaryOperatorExpr());
        }
        
        public nodeComparisonOp(binaryOperatorExpr content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                if ((this.ContentField != null)) {
                    this.ContentField.Untyped = value;
                }
            }
        }
        
        public new virtual binaryOperatorExpr Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (firstOperand, secondOperand)
        /// </para>
        /// </summary>
        public virtual exprWrapper firstOperand {
            get {
                return this.ContentField.firstOperand;
            }
            set {
                this.ContentField.firstOperand = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (firstOperand, secondOperand)
        /// </para>
        /// </summary>
        public virtual exprWrapper secondOperand {
            get {
                return this.ContentField.secondOperand;
            }
            set {
                this.ContentField.secondOperand = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static nodeComparisonOp Load(string xmlFile) {
            return ((nodeComparisonOp)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static nodeComparisonOp Load(System.IO.TextReader xmlFile) {
            return ((nodeComparisonOp)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public new static nodeComparisonOp Parse(string xml) {
            return ((nodeComparisonOp)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        private void SetInnerType(binaryOperatorExpr ContentField) {
            this.ContentField = ((binaryOperatorExpr)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        protected virtual void SetSubstitutionMember(binaryOperatorExpr ContentField) {
            this.ContentField = ContentField;
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class isOp : global::W3C.XQueryX.nodeComparisonOp, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private binaryOperatorExpr ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("isOp", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator isOp(XElement xe) { return XTypedServices.ToXTypedElement<isOp, binaryOperatorExpr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public isOp() : 
                base(true) {
            SetInnerType(new binaryOperatorExpr());
        }
        
        public isOp(binaryOperatorExpr content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual binaryOperatorExpr Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static isOp Load(string xmlFile) {
            return XTypedServices.Load<isOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static isOp Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<isOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static isOp Parse(string xml) {
            return XTypedServices.Parse<isOp, binaryOperatorExpr>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new isOp(((binaryOperatorExpr)(this.Content.Clone())));
        }
        
        private void SetInnerType(binaryOperatorExpr ContentField) {
            this.ContentField = ((binaryOperatorExpr)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public abstract partial class orderComparisonOp : global::W3C.XQueryX.operatorExpr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private binaryOperatorExpr ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("orderComparisonOp", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator orderComparisonOp(XElement xe) {  return (orderComparisonOp)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        protected orderComparisonOp(bool setNull) : 
                base(true) {
        }
        
        public orderComparisonOp() : 
                base(true) {
            SetInnerType(new binaryOperatorExpr());
        }
        
        public orderComparisonOp(binaryOperatorExpr content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                if ((this.ContentField != null)) {
                    this.ContentField.Untyped = value;
                }
            }
        }
        
        public new virtual binaryOperatorExpr Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (firstOperand, secondOperand)
        /// </para>
        /// </summary>
        public virtual exprWrapper firstOperand {
            get {
                return this.ContentField.firstOperand;
            }
            set {
                this.ContentField.firstOperand = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (firstOperand, secondOperand)
        /// </para>
        /// </summary>
        public virtual exprWrapper secondOperand {
            get {
                return this.ContentField.secondOperand;
            }
            set {
                this.ContentField.secondOperand = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static orderComparisonOp Load(string xmlFile) {
            return ((orderComparisonOp)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static orderComparisonOp Load(System.IO.TextReader xmlFile) {
            return ((orderComparisonOp)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public new static orderComparisonOp Parse(string xml) {
            return ((orderComparisonOp)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        private void SetInnerType(binaryOperatorExpr ContentField) {
            this.ContentField = ((binaryOperatorExpr)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        protected virtual void SetSubstitutionMember(binaryOperatorExpr ContentField) {
            this.ContentField = ContentField;
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class nodeBeforeOp : global::W3C.XQueryX.orderComparisonOp, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private binaryOperatorExpr ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("nodeBeforeOp", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator nodeBeforeOp(XElement xe) { return XTypedServices.ToXTypedElement<nodeBeforeOp, binaryOperatorExpr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public nodeBeforeOp() : 
                base(true) {
            SetInnerType(new binaryOperatorExpr());
        }
        
        public nodeBeforeOp(binaryOperatorExpr content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual binaryOperatorExpr Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static nodeBeforeOp Load(string xmlFile) {
            return XTypedServices.Load<nodeBeforeOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static nodeBeforeOp Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<nodeBeforeOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static nodeBeforeOp Parse(string xml) {
            return XTypedServices.Parse<nodeBeforeOp, binaryOperatorExpr>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new nodeBeforeOp(((binaryOperatorExpr)(this.Content.Clone())));
        }
        
        private void SetInnerType(binaryOperatorExpr ContentField) {
            this.ContentField = ((binaryOperatorExpr)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class nodeAfterOp : global::W3C.XQueryX.orderComparisonOp, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private binaryOperatorExpr ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("nodeAfterOp", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator nodeAfterOp(XElement xe) { return XTypedServices.ToXTypedElement<nodeAfterOp, binaryOperatorExpr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public nodeAfterOp() : 
                base(true) {
            SetInnerType(new binaryOperatorExpr());
        }
        
        public nodeAfterOp(binaryOperatorExpr content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual binaryOperatorExpr Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static nodeAfterOp Load(string xmlFile) {
            return XTypedServices.Load<nodeAfterOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static nodeAfterOp Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<nodeAfterOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static nodeAfterOp Parse(string xml) {
            return XTypedServices.Parse<nodeAfterOp, binaryOperatorExpr>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new nodeAfterOp(((binaryOperatorExpr)(this.Content.Clone())));
        }
        
        private void SetInnerType(binaryOperatorExpr ContentField) {
            this.ContentField = ((binaryOperatorExpr)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public abstract partial class logicalOp : global::W3C.XQueryX.operatorExpr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private binaryOperatorExpr ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("logicalOp", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator logicalOp(XElement xe) {  return (logicalOp)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        protected logicalOp(bool setNull) : 
                base(true) {
        }
        
        public logicalOp() : 
                base(true) {
            SetInnerType(new binaryOperatorExpr());
        }
        
        public logicalOp(binaryOperatorExpr content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                if ((this.ContentField != null)) {
                    this.ContentField.Untyped = value;
                }
            }
        }
        
        public new virtual binaryOperatorExpr Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (firstOperand, secondOperand)
        /// </para>
        /// </summary>
        public virtual exprWrapper firstOperand {
            get {
                return this.ContentField.firstOperand;
            }
            set {
                this.ContentField.firstOperand = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (firstOperand, secondOperand)
        /// </para>
        /// </summary>
        public virtual exprWrapper secondOperand {
            get {
                return this.ContentField.secondOperand;
            }
            set {
                this.ContentField.secondOperand = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static logicalOp Load(string xmlFile) {
            return ((logicalOp)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static logicalOp Load(System.IO.TextReader xmlFile) {
            return ((logicalOp)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public new static logicalOp Parse(string xml) {
            return ((logicalOp)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        private void SetInnerType(binaryOperatorExpr ContentField) {
            this.ContentField = ((binaryOperatorExpr)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        protected virtual void SetSubstitutionMember(binaryOperatorExpr ContentField) {
            this.ContentField = ContentField;
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class andOp : global::W3C.XQueryX.logicalOp, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private binaryOperatorExpr ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("andOp", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator andOp(XElement xe) { return XTypedServices.ToXTypedElement<andOp, binaryOperatorExpr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public andOp() : 
                base(true) {
            SetInnerType(new binaryOperatorExpr());
        }
        
        public andOp(binaryOperatorExpr content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual binaryOperatorExpr Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static andOp Load(string xmlFile) {
            return XTypedServices.Load<andOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static andOp Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<andOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static andOp Parse(string xml) {
            return XTypedServices.Parse<andOp, binaryOperatorExpr>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new andOp(((binaryOperatorExpr)(this.Content.Clone())));
        }
        
        private void SetInnerType(binaryOperatorExpr ContentField) {
            this.ContentField = ((binaryOperatorExpr)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class orOp : global::W3C.XQueryX.logicalOp, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private binaryOperatorExpr ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("orOp", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator orOp(XElement xe) { return XTypedServices.ToXTypedElement<orOp, binaryOperatorExpr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public orOp() : 
                base(true) {
            SetInnerType(new binaryOperatorExpr());
        }
        
        public orOp(binaryOperatorExpr content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual binaryOperatorExpr Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static orOp Load(string xmlFile) {
            return XTypedServices.Load<orOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static orOp Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<orOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static orOp Parse(string xml) {
            return XTypedServices.Parse<orOp, binaryOperatorExpr>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new orOp(((binaryOperatorExpr)(this.Content.Clone())));
        }
        
        private void SetInnerType(binaryOperatorExpr ContentField) {
            this.ContentField = ((binaryOperatorExpr)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public abstract partial class setOp : global::W3C.XQueryX.operatorExpr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private binaryOperatorExpr ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("setOp", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator setOp(XElement xe) {  return (setOp)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        protected setOp(bool setNull) : 
                base(true) {
        }
        
        public setOp() : 
                base(true) {
            SetInnerType(new binaryOperatorExpr());
        }
        
        public setOp(binaryOperatorExpr content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                if ((this.ContentField != null)) {
                    this.ContentField.Untyped = value;
                }
            }
        }
        
        public new virtual binaryOperatorExpr Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (firstOperand, secondOperand)
        /// </para>
        /// </summary>
        public virtual exprWrapper firstOperand {
            get {
                return this.ContentField.firstOperand;
            }
            set {
                this.ContentField.firstOperand = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (firstOperand, secondOperand)
        /// </para>
        /// </summary>
        public virtual exprWrapper secondOperand {
            get {
                return this.ContentField.secondOperand;
            }
            set {
                this.ContentField.secondOperand = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static setOp Load(string xmlFile) {
            return ((setOp)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public static setOp Load(System.IO.TextReader xmlFile) {
            return ((setOp)(XTypedServices.ToXTypedElement(XElement.Load(xmlFile), LinqToXsdTypeManager.Instance)));
        }
        
        public new static setOp Parse(string xml) {
            return ((setOp)(XTypedServices.ToXTypedElement(XElement.Parse(xml), LinqToXsdTypeManager.Instance)));
        }
        
        private void SetInnerType(binaryOperatorExpr ContentField) {
            this.ContentField = ((binaryOperatorExpr)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        protected virtual void SetSubstitutionMember(binaryOperatorExpr ContentField) {
            this.ContentField = ContentField;
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class unionOp : global::W3C.XQueryX.setOp, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private binaryOperatorExpr ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("unionOp", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator unionOp(XElement xe) { return XTypedServices.ToXTypedElement<unionOp, binaryOperatorExpr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public unionOp() : 
                base(true) {
            SetInnerType(new binaryOperatorExpr());
        }
        
        public unionOp(binaryOperatorExpr content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual binaryOperatorExpr Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static unionOp Load(string xmlFile) {
            return XTypedServices.Load<unionOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static unionOp Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<unionOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static unionOp Parse(string xml) {
            return XTypedServices.Parse<unionOp, binaryOperatorExpr>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new unionOp(((binaryOperatorExpr)(this.Content.Clone())));
        }
        
        private void SetInnerType(binaryOperatorExpr ContentField) {
            this.ContentField = ((binaryOperatorExpr)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class intersectOp : global::W3C.XQueryX.setOp, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private binaryOperatorExpr ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("intersectOp", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator intersectOp(XElement xe) { return XTypedServices.ToXTypedElement<intersectOp, binaryOperatorExpr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public intersectOp() : 
                base(true) {
            SetInnerType(new binaryOperatorExpr());
        }
        
        public intersectOp(binaryOperatorExpr content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual binaryOperatorExpr Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static intersectOp Load(string xmlFile) {
            return XTypedServices.Load<intersectOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static intersectOp Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<intersectOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static intersectOp Parse(string xml) {
            return XTypedServices.Parse<intersectOp, binaryOperatorExpr>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new intersectOp(((binaryOperatorExpr)(this.Content.Clone())));
        }
        
        private void SetInnerType(binaryOperatorExpr ContentField) {
            this.ContentField = ((binaryOperatorExpr)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class exceptOp : global::W3C.XQueryX.setOp, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private binaryOperatorExpr ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("exceptOp", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator exceptOp(XElement xe) { return XTypedServices.ToXTypedElement<exceptOp, binaryOperatorExpr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public exceptOp() : 
                base(true) {
            SetInnerType(new binaryOperatorExpr());
        }
        
        public exceptOp(binaryOperatorExpr content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual binaryOperatorExpr Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static exceptOp Load(string xmlFile) {
            return XTypedServices.Load<exceptOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static exceptOp Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<exceptOp, binaryOperatorExpr>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static exceptOp Parse(string xml) {
            return XTypedServices.Parse<exceptOp, binaryOperatorExpr>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new exceptOp(((binaryOperatorExpr)(this.Content.Clone())));
        }
        
        private void SetInnerType(binaryOperatorExpr ContentField) {
            this.ContentField = ((binaryOperatorExpr)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class atomicType : global::W3C.XQueryX.itemType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private EQName ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("atomicType", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator atomicType(XElement xe) { return XTypedServices.ToXTypedElement<atomicType, EQName>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public atomicType() {
            SetInnerType(new EQName());
        }
        
        public atomicType(EQName content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual EQName Content {
            get {
                return ContentField;
            }
        }
        
        public virtual string TypedValue {
            get {
                return this.ContentField.TypedValue;
            }
            set {
                this.ContentField.TypedValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string prefix {
            get {
                return this.ContentField.prefix;
            }
            set {
                this.ContentField.prefix = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string URI {
            get {
                return this.ContentField.URI;
            }
            set {
                this.ContentField.URI = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static atomicType Load(string xmlFile) {
            return XTypedServices.Load<atomicType, EQName>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static atomicType Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<atomicType, EQName>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static atomicType Parse(string xml) {
            return XTypedServices.Parse<atomicType, EQName>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new atomicType(((EQName)(this.Content.Clone())));
        }
        
        private void SetInnerType(EQName ContentField) {
            this.ContentField = ((EQName)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class singleType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private singleTypeType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("singleType", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator singleType(XElement xe) { return XTypedServices.ToXTypedElement<singleType, singleTypeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public singleType() {
            SetInnerType(new singleTypeType());
        }
        
        public singleType(singleTypeType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual singleTypeType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (atomicType, optional?)
        /// </para>
        /// </summary>
        public virtual atomicType atomicType {
            get {
                return this.ContentField.atomicType;
            }
            set {
                this.ContentField.atomicType = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (atomicType, optional?)
        /// </para>
        /// </summary>
        public virtual emptyContent optional {
            get {
                return this.ContentField.optional;
            }
            set {
                this.ContentField.optional = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static singleType Load(string xmlFile) {
            return XTypedServices.Load<singleType, singleTypeType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static singleType Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<singleType, singleTypeType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static singleType Parse(string xml) {
            return XTypedServices.Parse<singleType, singleTypeType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new singleType(((singleTypeType)(this.Content.Clone())));
        }
        
        private void SetInnerType(singleTypeType ContentField) {
            this.ContentField = ((singleTypeType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class contextItemType : global::W3C.XQueryX.itemType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private contextItemTypeType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("contextItemType", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator contextItemType(XElement xe) { return XTypedServices.ToXTypedElement<contextItemType, contextItemTypeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public contextItemType() {
            SetInnerType(new contextItemTypeType());
        }
        
        public contextItemType(contextItemTypeType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual contextItemTypeType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Substitution members: itemType, atomicType, contextItemType, anyItemType, schemaAttributeTest, attributeTest, anyElementTest, schemaElementTest, elementTest, documentTest, piTest, kindTest, textTest, commentTest, namespaceTest, anyKindTest, anyFunctionTest, typedFunctionTest, parenthesizedItemType, anyMapTest, typedMapTest, anyArrayTest, typedArrayTest
        /// </para>
        /// <para>
        /// Regular expression: (itemType)
        /// </para>
        /// </summary>
        public virtual itemType itemType {
            get {
                return this.ContentField.itemType;
            }
            set {
                this.ContentField.itemType = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static contextItemType Load(string xmlFile) {
            return XTypedServices.Load<contextItemType, contextItemTypeType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static contextItemType Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<contextItemType, contextItemTypeType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static contextItemType Parse(string xml) {
            return XTypedServices.Parse<contextItemType, contextItemTypeType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new contextItemType(((contextItemTypeType)(this.Content.Clone())));
        }
        
        private void SetInnerType(contextItemTypeType ContentField) {
            this.ContentField = ((contextItemTypeType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class anyItemType : global::W3C.XQueryX.itemType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private emptyItemTypeContent ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("anyItemType", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator anyItemType(XElement xe) { return XTypedServices.ToXTypedElement<anyItemType, emptyItemTypeContent>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public anyItemType() {
            SetInnerType(new emptyItemTypeContent());
        }
        
        public anyItemType(emptyItemTypeContent content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual emptyItemTypeContent Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static anyItemType Load(string xmlFile) {
            return XTypedServices.Load<anyItemType, emptyItemTypeContent>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static anyItemType Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<anyItemType, emptyItemTypeContent>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static anyItemType Parse(string xml) {
            return XTypedServices.Parse<anyItemType, emptyItemTypeContent>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new anyItemType(((emptyItemTypeContent)(this.Content.Clone())));
        }
        
        private void SetInnerType(emptyItemTypeContent ContentField) {
            this.ContentField = ((emptyItemTypeContent)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class sequenceType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private sequenceTypeType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("sequenceType", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator sequenceType(XElement xe) { return XTypedServices.ToXTypedElement<sequenceType, sequenceTypeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public sequenceType() {
            SetInnerType(new sequenceTypeType());
        }
        
        public sequenceType(sequenceTypeType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual sequenceTypeType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (voidSequenceType | (itemType, occurrenceIndicator?))
        /// </para>
        /// </summary>
        public virtual emptyContent voidSequenceType {
            get {
                return this.ContentField.voidSequenceType;
            }
            set {
                this.ContentField.voidSequenceType = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: itemType, atomicType, contextItemType, anyItemType, schemaAttributeTest, attributeTest, anyElementTest, schemaElementTest, elementTest, documentTest, piTest, kindTest, textTest, commentTest, namespaceTest, anyKindTest, anyFunctionTest, typedFunctionTest, parenthesizedItemType, anyMapTest, typedMapTest, anyArrayTest, typedArrayTest
        /// </para>
        /// <para>
        /// Regular expression: (voidSequenceType | (itemType, occurrenceIndicator?))
        /// </para>
        /// </summary>
        public virtual itemType itemType {
            get {
                return this.ContentField.itemType;
            }
            set {
                this.ContentField.itemType = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (voidSequenceType | (itemType, occurrenceIndicator?))
        /// </para>
        /// </summary>
        public virtual string occurrenceIndicator {
            get {
                return this.ContentField.occurrenceIndicator;
            }
            set {
                this.ContentField.occurrenceIndicator = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static sequenceType Load(string xmlFile) {
            return XTypedServices.Load<sequenceType, sequenceTypeType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static sequenceType Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<sequenceType, sequenceTypeType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static sequenceType Parse(string xml) {
            return XTypedServices.Parse<sequenceType, sequenceTypeType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new sequenceType(((sequenceTypeType)(this.Content.Clone())));
        }
        
        private void SetInnerType(sequenceTypeType ContentField) {
            this.ContentField = ((sequenceTypeType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class typeDeclaration : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private sequenceTypeType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("typeDeclaration", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator typeDeclaration(XElement xe) { return XTypedServices.ToXTypedElement<typeDeclaration, sequenceTypeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public typeDeclaration() {
            SetInnerType(new sequenceTypeType());
        }
        
        public typeDeclaration(sequenceTypeType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual sequenceTypeType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (voidSequenceType | (itemType, occurrenceIndicator?))
        /// </para>
        /// </summary>
        public virtual emptyContent voidSequenceType {
            get {
                return this.ContentField.voidSequenceType;
            }
            set {
                this.ContentField.voidSequenceType = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: itemType, atomicType, contextItemType, anyItemType, schemaAttributeTest, attributeTest, anyElementTest, schemaElementTest, elementTest, documentTest, piTest, kindTest, textTest, commentTest, namespaceTest, anyKindTest, anyFunctionTest, typedFunctionTest, parenthesizedItemType, anyMapTest, typedMapTest, anyArrayTest, typedArrayTest
        /// </para>
        /// <para>
        /// Regular expression: (voidSequenceType | (itemType, occurrenceIndicator?))
        /// </para>
        /// </summary>
        public virtual itemType itemType {
            get {
                return this.ContentField.itemType;
            }
            set {
                this.ContentField.itemType = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (voidSequenceType | (itemType, occurrenceIndicator?))
        /// </para>
        /// </summary>
        public virtual string occurrenceIndicator {
            get {
                return this.ContentField.occurrenceIndicator;
            }
            set {
                this.ContentField.occurrenceIndicator = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static typeDeclaration Load(string xmlFile) {
            return XTypedServices.Load<typeDeclaration, sequenceTypeType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static typeDeclaration Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<typeDeclaration, sequenceTypeType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static typeDeclaration Parse(string xml) {
            return XTypedServices.Parse<typeDeclaration, sequenceTypeType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new typeDeclaration(((sequenceTypeType)(this.Content.Clone())));
        }
        
        private void SetInnerType(sequenceTypeType ContentField) {
            this.ContentField = ((sequenceTypeType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class sequenceTypeUnion : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private sequenceTypeUnionType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("sequenceTypeUnion", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator sequenceTypeUnion(XElement xe) { return XTypedServices.ToXTypedElement<sequenceTypeUnion, sequenceTypeUnionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public sequenceTypeUnion() {
            SetInnerType(new sequenceTypeUnionType());
        }
        
        public sequenceTypeUnion(sequenceTypeUnionType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual sequenceTypeUnionType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (sequenceType)+
        /// </para>
        /// </summary>
        public virtual IList<sequenceType> sequenceType {
            get {
                return this.ContentField.sequenceType;
            }
            set {
                this.ContentField.sequenceType = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static sequenceTypeUnion Load(string xmlFile) {
            return XTypedServices.Load<sequenceTypeUnion, sequenceTypeUnionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static sequenceTypeUnion Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<sequenceTypeUnion, sequenceTypeUnionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static sequenceTypeUnion Parse(string xml) {
            return XTypedServices.Parse<sequenceTypeUnion, sequenceTypeUnionType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new sequenceTypeUnion(((sequenceTypeUnionType)(this.Content.Clone())));
        }
        
        private void SetInnerType(sequenceTypeUnionType ContentField) {
            this.ContentField = ((sequenceTypeUnionType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class typedVariableBinding : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private typedVariableBindingType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("typedVariableBinding", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator typedVariableBinding(XElement xe) { return XTypedServices.ToXTypedElement<typedVariableBinding, typedVariableBindingType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public typedVariableBinding() {
            SetInnerType(new typedVariableBindingType());
        }
        
        public typedVariableBinding(typedVariableBindingType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual typedVariableBindingType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (varName, typeDeclaration?)
        /// </para>
        /// </summary>
        public virtual EQName varName {
            get {
                return this.ContentField.varName;
            }
            set {
                this.ContentField.varName = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (varName, typeDeclaration?)
        /// </para>
        /// </summary>
        public virtual typeDeclaration typeDeclaration {
            get {
                return this.ContentField.typeDeclaration;
            }
            set {
                this.ContentField.typeDeclaration = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static typedVariableBinding Load(string xmlFile) {
            return XTypedServices.Load<typedVariableBinding, typedVariableBindingType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static typedVariableBinding Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<typedVariableBinding, typedVariableBindingType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static typedVariableBinding Parse(string xml) {
            return XTypedServices.Parse<typedVariableBinding, typedVariableBindingType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new typedVariableBinding(((typedVariableBindingType)(this.Content.Clone())));
        }
        
        private void SetInnerType(typedVariableBindingType ContentField) {
            this.ContentField = ((typedVariableBindingType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class positionalVariableBinding : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private EQName ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("positionalVariableBinding", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator positionalVariableBinding(XElement xe) { return XTypedServices.ToXTypedElement<positionalVariableBinding, EQName>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public positionalVariableBinding() {
            SetInnerType(new EQName());
        }
        
        public positionalVariableBinding(EQName content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual EQName Content {
            get {
                return ContentField;
            }
        }
        
        public virtual string TypedValue {
            get {
                return this.ContentField.TypedValue;
            }
            set {
                this.ContentField.TypedValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string prefix {
            get {
                return this.ContentField.prefix;
            }
            set {
                this.ContentField.prefix = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string URI {
            get {
                return this.ContentField.URI;
            }
            set {
                this.ContentField.URI = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static positionalVariableBinding Load(string xmlFile) {
            return XTypedServices.Load<positionalVariableBinding, EQName>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static positionalVariableBinding Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<positionalVariableBinding, EQName>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static positionalVariableBinding Parse(string xml) {
            return XTypedServices.Parse<positionalVariableBinding, EQName>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new positionalVariableBinding(((EQName)(this.Content.Clone())));
        }
        
        private void SetInnerType(EQName ContentField) {
            this.ContentField = ((EQName)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class variableBinding : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private EQName ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("variableBinding", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator variableBinding(XElement xe) { return XTypedServices.ToXTypedElement<variableBinding, EQName>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public variableBinding() {
            SetInnerType(new EQName());
        }
        
        public variableBinding(EQName content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual EQName Content {
            get {
                return ContentField;
            }
        }
        
        public virtual string TypedValue {
            get {
                return this.ContentField.TypedValue;
            }
            set {
                this.ContentField.TypedValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string prefix {
            get {
                return this.ContentField.prefix;
            }
            set {
                this.ContentField.prefix = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string URI {
            get {
                return this.ContentField.URI;
            }
            set {
                this.ContentField.URI = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static variableBinding Load(string xmlFile) {
            return XTypedServices.Load<variableBinding, EQName>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static variableBinding Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<variableBinding, EQName>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static variableBinding Parse(string xml) {
            return XTypedServices.Parse<variableBinding, EQName>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new variableBinding(((EQName)(this.Content.Clone())));
        }
        
        private void SetInnerType(EQName ContentField) {
            this.ContentField = ((EQName)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class forClauseItem : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private forClauseItemType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("forClauseItem", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator forClauseItem(XElement xe) { return XTypedServices.ToXTypedElement<forClauseItem, forClauseItemType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public forClauseItem() {
            SetInnerType(new forClauseItemType());
        }
        
        public forClauseItem(forClauseItemType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual forClauseItemType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (typedVariableBinding, allowingEmpty?, positionalVariableBinding?, forLetClauseItemExtensions*, forExpr)
        /// </para>
        /// </summary>
        public virtual typedVariableBinding typedVariableBinding {
            get {
                return this.ContentField.typedVariableBinding;
            }
            set {
                this.ContentField.typedVariableBinding = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (typedVariableBinding, allowingEmpty?, positionalVariableBinding?, forLetClauseItemExtensions*, forExpr)
        /// </para>
        /// </summary>
        public virtual emptyContent allowingEmpty {
            get {
                return this.ContentField.allowingEmpty;
            }
            set {
                this.ContentField.allowingEmpty = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (typedVariableBinding, allowingEmpty?, positionalVariableBinding?, forLetClauseItemExtensions*, forExpr)
        /// </para>
        /// </summary>
        public virtual positionalVariableBinding positionalVariableBinding {
            get {
                return this.ContentField.positionalVariableBinding;
            }
            set {
                this.ContentField.positionalVariableBinding = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (typedVariableBinding, allowingEmpty?, positionalVariableBinding?, forLetClauseItemExtensions*, forExpr)
        /// </para>
        /// </summary>
        public virtual IList<forLetClauseItemExtensions> forLetClauseItemExtensions {
            get {
                return this.ContentField.forLetClauseItemExtensions;
            }
            set {
                this.ContentField.forLetClauseItemExtensions = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (typedVariableBinding, allowingEmpty?, positionalVariableBinding?, forLetClauseItemExtensions*, forExpr)
        /// </para>
        /// </summary>
        public virtual exprWrapper forExpr {
            get {
                return this.ContentField.forExpr;
            }
            set {
                this.ContentField.forExpr = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static forClauseItem Load(string xmlFile) {
            return XTypedServices.Load<forClauseItem, forClauseItemType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static forClauseItem Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<forClauseItem, forClauseItemType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static forClauseItem Parse(string xml) {
            return XTypedServices.Parse<forClauseItem, forClauseItemType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new forClauseItem(((forClauseItemType)(this.Content.Clone())));
        }
        
        private void SetInnerType(forClauseItemType ContentField) {
            this.ContentField = ((forClauseItemType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class forClause : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private forClauseType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("forClause", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator forClause(XElement xe) { return XTypedServices.ToXTypedElement<forClause, forClauseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public forClause() {
            SetInnerType(new forClauseType());
        }
        
        public forClause(forClauseType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual forClauseType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (forClauseItem+)
        /// </para>
        /// </summary>
        public virtual IList<forClauseItem> forClauseItem {
            get {
                return this.ContentField.forClauseItem;
            }
            set {
                this.ContentField.forClauseItem = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static forClause Load(string xmlFile) {
            return XTypedServices.Load<forClause, forClauseType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static forClause Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<forClause, forClauseType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static forClause Parse(string xml) {
            return XTypedServices.Parse<forClause, forClauseType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new forClause(((forClauseType)(this.Content.Clone())));
        }
        
        private void SetInnerType(forClauseType ContentField) {
            this.ContentField = ((forClauseType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class letClauseItem : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private letClauseItemType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("letClauseItem", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator letClauseItem(XElement xe) { return XTypedServices.ToXTypedElement<letClauseItem, letClauseItemType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public letClauseItem() {
            SetInnerType(new letClauseItemType());
        }
        
        public letClauseItem(letClauseItemType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual letClauseItemType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (((typedVariableBinding, forLetClauseItemExtensions*)|forLetClauseItemExtensions*), letExpr)
        /// </para>
        /// </summary>
        public virtual typedVariableBinding typedVariableBinding {
            get {
                return this.ContentField.typedVariableBinding;
            }
            set {
                this.ContentField.typedVariableBinding = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (((typedVariableBinding, forLetClauseItemExtensions*)|forLetClauseItemExtensions*), letExpr)
        /// </para>
        /// </summary>
        public virtual IList<forLetClauseItemExtensions> forLetClauseItemExtensions {
            get {
                return this.ContentField.forLetClauseItemExtensions;
            }
            set {
                this.ContentField.forLetClauseItemExtensions = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (((typedVariableBinding, forLetClauseItemExtensions*)|forLetClauseItemExtensions*), letExpr)
        /// </para>
        /// </summary>
        public virtual exprWrapper letExpr {
            get {
                return this.ContentField.letExpr;
            }
            set {
                this.ContentField.letExpr = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static letClauseItem Load(string xmlFile) {
            return XTypedServices.Load<letClauseItem, letClauseItemType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static letClauseItem Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<letClauseItem, letClauseItemType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static letClauseItem Parse(string xml) {
            return XTypedServices.Parse<letClauseItem, letClauseItemType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new letClauseItem(((letClauseItemType)(this.Content.Clone())));
        }
        
        private void SetInnerType(letClauseItemType ContentField) {
            this.ContentField = ((letClauseItemType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class letClause : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private letClauseType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("letClause", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator letClause(XElement xe) { return XTypedServices.ToXTypedElement<letClause, letClauseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public letClause() {
            SetInnerType(new letClauseType());
        }
        
        public letClause(letClauseType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual letClauseType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (letClauseItem+)
        /// </para>
        /// </summary>
        public virtual IList<letClauseItem> letClauseItem {
            get {
                return this.ContentField.letClauseItem;
            }
            set {
                this.ContentField.letClauseItem = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static letClause Load(string xmlFile) {
            return XTypedServices.Load<letClause, letClauseType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static letClause Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<letClause, letClauseType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static letClause Parse(string xml) {
            return XTypedServices.Parse<letClause, letClauseType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new letClause(((letClauseType)(this.Content.Clone())));
        }
        
        private void SetInnerType(letClauseType ContentField) {
            this.ContentField = ((letClauseType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class windowClause : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private windowClauseType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("windowClause", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator windowClause(XElement xe) { return XTypedServices.ToXTypedElement<windowClause, windowClauseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public windowClause() {
            SetInnerType(new windowClauseType());
        }
        
        public windowClause(windowClauseType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual windowClauseType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (tumblingWindowClause | slidingWindowClause)
        /// </para>
        /// </summary>
        public virtual tumblingWindowClause tumblingWindowClause {
            get {
                return this.ContentField.tumblingWindowClause;
            }
            set {
                this.ContentField.tumblingWindowClause = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (tumblingWindowClause | slidingWindowClause)
        /// </para>
        /// </summary>
        public virtual slidingWindowClause slidingWindowClause {
            get {
                return this.ContentField.slidingWindowClause;
            }
            set {
                this.ContentField.slidingWindowClause = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static windowClause Load(string xmlFile) {
            return XTypedServices.Load<windowClause, windowClauseType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static windowClause Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<windowClause, windowClauseType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static windowClause Parse(string xml) {
            return XTypedServices.Parse<windowClause, windowClauseType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new windowClause(((windowClauseType)(this.Content.Clone())));
        }
        
        private void SetInnerType(windowClauseType ContentField) {
            this.ContentField = ((windowClauseType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class tumblingWindowClause : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private tumblingWindowClauseType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("tumblingWindowClause", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator tumblingWindowClause(XElement xe) { return XTypedServices.ToXTypedElement<tumblingWindowClause, tumblingWindowClauseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public tumblingWindowClause() {
            SetInnerType(new tumblingWindowClauseType());
        }
        
        public tumblingWindowClause(tumblingWindowClauseType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual tumblingWindowClauseType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (typedVariableBinding, bindingSequence, windowStartCondition, windowEndCondition?)
        /// </para>
        /// </summary>
        public virtual typedVariableBinding typedVariableBinding {
            get {
                return this.ContentField.typedVariableBinding;
            }
            set {
                this.ContentField.typedVariableBinding = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (typedVariableBinding, bindingSequence, windowStartCondition, windowEndCondition?)
        /// </para>
        /// </summary>
        public virtual exprWrapper bindingSequence {
            get {
                return this.ContentField.bindingSequence;
            }
            set {
                this.ContentField.bindingSequence = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (typedVariableBinding, bindingSequence, windowStartCondition, windowEndCondition?)
        /// </para>
        /// </summary>
        public virtual windowStartCondition windowStartCondition {
            get {
                return this.ContentField.windowStartCondition;
            }
            set {
                this.ContentField.windowStartCondition = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (typedVariableBinding, bindingSequence, windowStartCondition, windowEndCondition?)
        /// </para>
        /// </summary>
        public virtual windowEndCondition windowEndCondition {
            get {
                return this.ContentField.windowEndCondition;
            }
            set {
                this.ContentField.windowEndCondition = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static tumblingWindowClause Load(string xmlFile) {
            return XTypedServices.Load<tumblingWindowClause, tumblingWindowClauseType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static tumblingWindowClause Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<tumblingWindowClause, tumblingWindowClauseType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static tumblingWindowClause Parse(string xml) {
            return XTypedServices.Parse<tumblingWindowClause, tumblingWindowClauseType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new tumblingWindowClause(((tumblingWindowClauseType)(this.Content.Clone())));
        }
        
        private void SetInnerType(tumblingWindowClauseType ContentField) {
            this.ContentField = ((tumblingWindowClauseType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class slidingWindowClause : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private slidingWindowClauseType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("slidingWindowClause", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator slidingWindowClause(XElement xe) { return XTypedServices.ToXTypedElement<slidingWindowClause, slidingWindowClauseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public slidingWindowClause() {
            SetInnerType(new slidingWindowClauseType());
        }
        
        public slidingWindowClause(slidingWindowClauseType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual slidingWindowClauseType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (typedVariableBinding, bindingSequence, windowStartCondition, windowEndCondition)
        /// </para>
        /// </summary>
        public virtual typedVariableBinding typedVariableBinding {
            get {
                return this.ContentField.typedVariableBinding;
            }
            set {
                this.ContentField.typedVariableBinding = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (typedVariableBinding, bindingSequence, windowStartCondition, windowEndCondition)
        /// </para>
        /// </summary>
        public virtual exprWrapper bindingSequence {
            get {
                return this.ContentField.bindingSequence;
            }
            set {
                this.ContentField.bindingSequence = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (typedVariableBinding, bindingSequence, windowStartCondition, windowEndCondition)
        /// </para>
        /// </summary>
        public virtual windowStartCondition windowStartCondition {
            get {
                return this.ContentField.windowStartCondition;
            }
            set {
                this.ContentField.windowStartCondition = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (typedVariableBinding, bindingSequence, windowStartCondition, windowEndCondition)
        /// </para>
        /// </summary>
        public virtual windowEndCondition windowEndCondition {
            get {
                return this.ContentField.windowEndCondition;
            }
            set {
                this.ContentField.windowEndCondition = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static slidingWindowClause Load(string xmlFile) {
            return XTypedServices.Load<slidingWindowClause, slidingWindowClauseType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static slidingWindowClause Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<slidingWindowClause, slidingWindowClauseType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static slidingWindowClause Parse(string xml) {
            return XTypedServices.Parse<slidingWindowClause, slidingWindowClauseType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new slidingWindowClause(((slidingWindowClauseType)(this.Content.Clone())));
        }
        
        private void SetInnerType(slidingWindowClauseType ContentField) {
            this.ContentField = ((slidingWindowClauseType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class windowStartCondition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private windowStartConditionType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("windowStartCondition", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator windowStartCondition(XElement xe) { return XTypedServices.ToXTypedElement<windowStartCondition, windowStartConditionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public windowStartCondition() {
            SetInnerType(new windowStartConditionType());
        }
        
        public windowStartCondition(windowStartConditionType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual windowStartConditionType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (windowVars?, winStartExpr)
        /// </para>
        /// </summary>
        public virtual windowVars windowVars {
            get {
                return this.ContentField.windowVars;
            }
            set {
                this.ContentField.windowVars = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (windowVars?, winStartExpr)
        /// </para>
        /// </summary>
        public virtual exprWrapper winStartExpr {
            get {
                return this.ContentField.winStartExpr;
            }
            set {
                this.ContentField.winStartExpr = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static windowStartCondition Load(string xmlFile) {
            return XTypedServices.Load<windowStartCondition, windowStartConditionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static windowStartCondition Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<windowStartCondition, windowStartConditionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static windowStartCondition Parse(string xml) {
            return XTypedServices.Parse<windowStartCondition, windowStartConditionType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new windowStartCondition(((windowStartConditionType)(this.Content.Clone())));
        }
        
        private void SetInnerType(windowStartConditionType ContentField) {
            this.ContentField = ((windowStartConditionType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class windowEndCondition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private windowEndConditionType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("windowEndCondition", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator windowEndCondition(XElement xe) { return XTypedServices.ToXTypedElement<windowEndCondition, windowEndConditionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public windowEndCondition() {
            SetInnerType(new windowEndConditionType());
        }
        
        public windowEndCondition(windowEndConditionType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual windowEndConditionType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (windowVars?, winEndExpr)
        /// </para>
        /// </summary>
        public virtual windowVars windowVars {
            get {
                return this.ContentField.windowVars;
            }
            set {
                this.ContentField.windowVars = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (windowVars?, winEndExpr)
        /// </para>
        /// </summary>
        public virtual exprWrapper winEndExpr {
            get {
                return this.ContentField.winEndExpr;
            }
            set {
                this.ContentField.winEndExpr = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool onlyEnd {
            get {
                return this.ContentField.onlyEnd;
            }
            set {
                this.ContentField.onlyEnd = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static windowEndCondition Load(string xmlFile) {
            return XTypedServices.Load<windowEndCondition, windowEndConditionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static windowEndCondition Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<windowEndCondition, windowEndConditionType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static windowEndCondition Parse(string xml) {
            return XTypedServices.Parse<windowEndCondition, windowEndConditionType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new windowEndCondition(((windowEndConditionType)(this.Content.Clone())));
        }
        
        private void SetInnerType(windowEndConditionType ContentField) {
            this.ContentField = ((windowEndConditionType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class windowVars : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private windowVarsType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("windowVars", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator windowVars(XElement xe) { return XTypedServices.ToXTypedElement<windowVars, windowVarsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public windowVars() {
            SetInnerType(new windowVarsType());
        }
        
        public windowVars(windowVarsType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual windowVarsType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (currentItem?, positionalVariableBinding?, previousItem?, nextItem?)
        /// </para>
        /// </summary>
        public virtual EQName currentItem {
            get {
                return this.ContentField.currentItem;
            }
            set {
                this.ContentField.currentItem = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (currentItem?, positionalVariableBinding?, previousItem?, nextItem?)
        /// </para>
        /// </summary>
        public virtual positionalVariableBinding positionalVariableBinding {
            get {
                return this.ContentField.positionalVariableBinding;
            }
            set {
                this.ContentField.positionalVariableBinding = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (currentItem?, positionalVariableBinding?, previousItem?, nextItem?)
        /// </para>
        /// </summary>
        public virtual EQName previousItem {
            get {
                return this.ContentField.previousItem;
            }
            set {
                this.ContentField.previousItem = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (currentItem?, positionalVariableBinding?, previousItem?, nextItem?)
        /// </para>
        /// </summary>
        public virtual EQName nextItem {
            get {
                return this.ContentField.nextItem;
            }
            set {
                this.ContentField.nextItem = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static windowVars Load(string xmlFile) {
            return XTypedServices.Load<windowVars, windowVarsType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static windowVars Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<windowVars, windowVarsType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static windowVars Parse(string xml) {
            return XTypedServices.Parse<windowVars, windowVarsType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new windowVars(((windowVarsType)(this.Content.Clone())));
        }
        
        private void SetInnerType(windowVarsType ContentField) {
            this.ContentField = ((windowVarsType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class countClause : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private countClauseType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("countClause", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator countClause(XElement xe) { return XTypedServices.ToXTypedElement<countClause, countClauseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public countClause() {
            SetInnerType(new countClauseType());
        }
        
        public countClause(countClauseType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual countClauseType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (varRef)
        /// </para>
        /// </summary>
        public virtual varRef varRef {
            get {
                return this.ContentField.varRef;
            }
            set {
                this.ContentField.varRef = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static countClause Load(string xmlFile) {
            return XTypedServices.Load<countClause, countClauseType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static countClause Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<countClause, countClauseType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static countClause Parse(string xml) {
            return XTypedServices.Parse<countClause, countClauseType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new countClause(((countClauseType)(this.Content.Clone())));
        }
        
        private void SetInnerType(countClauseType ContentField) {
            this.ContentField = ((countClauseType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class whereClause : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private exprWrapper ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("whereClause", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator whereClause(XElement xe) { return XTypedServices.ToXTypedElement<whereClause, exprWrapper>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public whereClause() {
            SetInnerType(new exprWrapper());
        }
        
        public whereClause(exprWrapper content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual exprWrapper Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Substitution members: expr, constantExpr, integerConstantExpr, decimalConstantExpr, doubleConstantExpr, stringConstantExpr, varRef, contextItemExpr, extensionExpr, simpleMapExpr, functionCallExpr, constructorFunctionExpr, sequenceExpr, rangeSequenceExpr, operatorExpr, arithmeticOp, addOp, subtractOp, multiplyOp, divOp, idivOp, modOp, unaryMinusOp, unaryPlusOp, stringOp, stringConcatenateOp, comparisonOp, valueComparisonOp, eqOp, neOp, gtOp, geOp, ltOp, leOp, generalComparisonOp, equalOp, notEqualOp, lessThanOp, lessThanOrEqualOp, greaterThanOp, greaterThanOrEqualOp, nodeComparisonOp, isOp, orderComparisonOp, nodeBeforeOp, nodeAfterOp, logicalOp, andOp, orOp, setOp, unionOp, intersectOp, exceptOp, flworExpr, ifThenElseExpr, quantifiedExpr, switchExpr, typeswitchExpr, tryCatchExpr, instanceOfExpr, treatExpr, castableExpr, castExpr, arrowExpr, validateExpr, elementConstructor, computedElementConstructor, computedAttributeConstructor, computedDocumentConstructor, computedTextConstructor, computedCommentConstructor, computedNamespaceConstructor, computedPIConstructor, unorderedExpr, orderedExpr, namedFunctionRef, inlineFunctionExpr, dynamicFunctionInvocationExpr, mapConstructor, arrayConstructor, stringConstructor, unaryLookup, pathExpr
        /// </para>
        /// <para>
        /// Regular expression: (expr)
        /// </para>
        /// </summary>
        public virtual expr expr {
            get {
                return this.ContentField.expr;
            }
            set {
                this.ContentField.expr = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static whereClause Load(string xmlFile) {
            return XTypedServices.Load<whereClause, exprWrapper>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static whereClause Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<whereClause, exprWrapper>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static whereClause Parse(string xml) {
            return XTypedServices.Parse<whereClause, exprWrapper>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new whereClause(((exprWrapper)(this.Content.Clone())));
        }
        
        private void SetInnerType(exprWrapper ContentField) {
            this.ContentField = ((exprWrapper)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class groupByClause : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private groupByClauseType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("groupByClause", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator groupByClause(XElement xe) { return XTypedServices.ToXTypedElement<groupByClause, groupByClauseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public groupByClause() {
            SetInnerType(new groupByClauseType());
        }
        
        public groupByClause(groupByClauseType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual groupByClauseType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (groupingSpec)+
        /// </para>
        /// </summary>
        public virtual IList<groupingSpec> groupingSpec {
            get {
                return this.ContentField.groupingSpec;
            }
            set {
                this.ContentField.groupingSpec = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static groupByClause Load(string xmlFile) {
            return XTypedServices.Load<groupByClause, groupByClauseType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static groupByClause Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<groupByClause, groupByClauseType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static groupByClause Parse(string xml) {
            return XTypedServices.Parse<groupByClause, groupByClauseType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new groupByClause(((groupByClauseType)(this.Content.Clone())));
        }
        
        private void SetInnerType(groupByClauseType ContentField) {
            this.ContentField = ((groupByClauseType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class groupingSpec : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private groupingSpecType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("groupingSpec", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator groupingSpec(XElement xe) { return XTypedServices.ToXTypedElement<groupingSpec, groupingSpecType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public groupingSpec() {
            SetInnerType(new groupingSpecType());
        }
        
        public groupingSpec(groupingSpecType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual groupingSpecType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (varName, groupVarInitialize?, collation?)
        /// </para>
        /// </summary>
        public virtual EQName varName {
            get {
                return this.ContentField.varName;
            }
            set {
                this.ContentField.varName = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (varName, groupVarInitialize?, collation?)
        /// </para>
        /// </summary>
        public virtual W3C.XQueryX.groupingSpecType.groupVarInitializeLocalType groupVarInitialize {
            get {
                return this.ContentField.groupVarInitialize;
            }
            set {
                this.ContentField.groupVarInitialize = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (varName, groupVarInitialize?, collation?)
        /// </para>
        /// </summary>
        public virtual string collation {
            get {
                return this.ContentField.collation;
            }
            set {
                this.ContentField.collation = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static groupingSpec Load(string xmlFile) {
            return XTypedServices.Load<groupingSpec, groupingSpecType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static groupingSpec Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<groupingSpec, groupingSpecType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static groupingSpec Parse(string xml) {
            return XTypedServices.Parse<groupingSpec, groupingSpecType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new groupingSpec(((groupingSpecType)(this.Content.Clone())));
        }
        
        private void SetInnerType(groupingSpecType ContentField) {
            this.ContentField = ((groupingSpecType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class orderModifier : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private orderModifierType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("orderModifier", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator orderModifier(XElement xe) { return XTypedServices.ToXTypedElement<orderModifier, orderModifierType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public orderModifier() {
            SetInnerType(new orderModifierType());
        }
        
        public orderModifier(orderModifierType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual orderModifierType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (orderingKind?, emptyOrderingMode?, collation?)
        /// </para>
        /// </summary>
        public virtual W3C.XQueryX.orderingKind? orderingKind {
            get {
                return this.ContentField.orderingKind;
            }
            set {
                this.ContentField.orderingKind = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (orderingKind?, emptyOrderingMode?, collation?)
        /// </para>
        /// </summary>
        public virtual string emptyOrderingMode {
            get {
                return this.ContentField.emptyOrderingMode;
            }
            set {
                this.ContentField.emptyOrderingMode = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (orderingKind?, emptyOrderingMode?, collation?)
        /// </para>
        /// </summary>
        public virtual string collation {
            get {
                return this.ContentField.collation;
            }
            set {
                this.ContentField.collation = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static orderModifier Load(string xmlFile) {
            return XTypedServices.Load<orderModifier, orderModifierType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static orderModifier Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<orderModifier, orderModifierType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static orderModifier Parse(string xml) {
            return XTypedServices.Parse<orderModifier, orderModifierType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new orderModifier(((orderModifierType)(this.Content.Clone())));
        }
        
        private void SetInnerType(orderModifierType ContentField) {
            this.ContentField = ((orderModifierType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class orderBySpec : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private orderBySpecType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("orderBySpec", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator orderBySpec(XElement xe) { return XTypedServices.ToXTypedElement<orderBySpec, orderBySpecType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public orderBySpec() {
            SetInnerType(new orderBySpecType());
        }
        
        public orderBySpec(orderBySpecType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual orderBySpecType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (orderByExpr, orderModifier?)
        /// </para>
        /// </summary>
        public virtual exprWrapper orderByExpr {
            get {
                return this.ContentField.orderByExpr;
            }
            set {
                this.ContentField.orderByExpr = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (orderByExpr, orderModifier?)
        /// </para>
        /// </summary>
        public virtual orderModifier orderModifier {
            get {
                return this.ContentField.orderModifier;
            }
            set {
                this.ContentField.orderModifier = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static orderBySpec Load(string xmlFile) {
            return XTypedServices.Load<orderBySpec, orderBySpecType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static orderBySpec Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<orderBySpec, orderBySpecType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static orderBySpec Parse(string xml) {
            return XTypedServices.Parse<orderBySpec, orderBySpecType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new orderBySpec(((orderBySpecType)(this.Content.Clone())));
        }
        
        private void SetInnerType(orderBySpecType ContentField) {
            this.ContentField = ((orderBySpecType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class orderByClause : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private orderByClauseType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("orderByClause", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator orderByClause(XElement xe) { return XTypedServices.ToXTypedElement<orderByClause, orderByClauseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public orderByClause() {
            SetInnerType(new orderByClauseType());
        }
        
        public orderByClause(orderByClauseType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual orderByClauseType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (stable?, orderBySpec+)
        /// </para>
        /// </summary>
        public virtual emptyContent stable {
            get {
                return this.ContentField.stable;
            }
            set {
                this.ContentField.stable = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (stable?, orderBySpec+)
        /// </para>
        /// </summary>
        public virtual IList<orderBySpec> orderBySpec {
            get {
                return this.ContentField.orderBySpec;
            }
            set {
                this.ContentField.orderBySpec = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static orderByClause Load(string xmlFile) {
            return XTypedServices.Load<orderByClause, orderByClauseType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static orderByClause Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<orderByClause, orderByClauseType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static orderByClause Parse(string xml) {
            return XTypedServices.Parse<orderByClause, orderByClauseType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new orderByClause(((orderByClauseType)(this.Content.Clone())));
        }
        
        private void SetInnerType(orderByClauseType ContentField) {
            this.ContentField = ((orderByClauseType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class returnClause : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private exprWrapper ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("returnClause", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator returnClause(XElement xe) { return XTypedServices.ToXTypedElement<returnClause, exprWrapper>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public returnClause() {
            SetInnerType(new exprWrapper());
        }
        
        public returnClause(exprWrapper content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual exprWrapper Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Substitution members: expr, constantExpr, integerConstantExpr, decimalConstantExpr, doubleConstantExpr, stringConstantExpr, varRef, contextItemExpr, extensionExpr, simpleMapExpr, functionCallExpr, constructorFunctionExpr, sequenceExpr, rangeSequenceExpr, operatorExpr, arithmeticOp, addOp, subtractOp, multiplyOp, divOp, idivOp, modOp, unaryMinusOp, unaryPlusOp, stringOp, stringConcatenateOp, comparisonOp, valueComparisonOp, eqOp, neOp, gtOp, geOp, ltOp, leOp, generalComparisonOp, equalOp, notEqualOp, lessThanOp, lessThanOrEqualOp, greaterThanOp, greaterThanOrEqualOp, nodeComparisonOp, isOp, orderComparisonOp, nodeBeforeOp, nodeAfterOp, logicalOp, andOp, orOp, setOp, unionOp, intersectOp, exceptOp, flworExpr, ifThenElseExpr, quantifiedExpr, switchExpr, typeswitchExpr, tryCatchExpr, instanceOfExpr, treatExpr, castableExpr, castExpr, arrowExpr, validateExpr, elementConstructor, computedElementConstructor, computedAttributeConstructor, computedDocumentConstructor, computedTextConstructor, computedCommentConstructor, computedNamespaceConstructor, computedPIConstructor, unorderedExpr, orderedExpr, namedFunctionRef, inlineFunctionExpr, dynamicFunctionInvocationExpr, mapConstructor, arrayConstructor, stringConstructor, unaryLookup, pathExpr
        /// </para>
        /// <para>
        /// Regular expression: (expr)
        /// </para>
        /// </summary>
        public virtual expr expr {
            get {
                return this.ContentField.expr;
            }
            set {
                this.ContentField.expr = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static returnClause Load(string xmlFile) {
            return XTypedServices.Load<returnClause, exprWrapper>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static returnClause Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<returnClause, exprWrapper>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static returnClause Parse(string xml) {
            return XTypedServices.Parse<returnClause, exprWrapper>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new returnClause(((exprWrapper)(this.Content.Clone())));
        }
        
        private void SetInnerType(exprWrapper ContentField) {
            this.ContentField = ((exprWrapper)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class flworExpr : global::W3C.XQueryX.expr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private flworExprType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("flworExpr", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator flworExpr(XElement xe) { return XTypedServices.ToXTypedElement<flworExpr, flworExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public flworExpr() : 
                base(true) {
            SetInnerType(new flworExprType());
        }
        
        public flworExpr(flworExprType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual flworExprType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((forClause | letClause | windowClause), (forClause | letClause | windowClause | countClause | whereClause | groupByClause | orderByClause)*, returnClause)
        /// </para>
        /// </summary>
        public virtual IList<forClause> forClause {
            get {
                return this.ContentField.forClause;
            }
            set {
                this.ContentField.forClause = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((forClause | letClause | windowClause), (forClause | letClause | windowClause | countClause | whereClause | groupByClause | orderByClause)*, returnClause)
        /// </para>
        /// </summary>
        public virtual IList<letClause> letClause {
            get {
                return this.ContentField.letClause;
            }
            set {
                this.ContentField.letClause = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((forClause | letClause | windowClause), (forClause | letClause | windowClause | countClause | whereClause | groupByClause | orderByClause)*, returnClause)
        /// </para>
        /// </summary>
        public virtual IList<windowClause> windowClause {
            get {
                return this.ContentField.windowClause;
            }
            set {
                this.ContentField.windowClause = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((forClause | letClause | windowClause), (forClause | letClause | windowClause | countClause | whereClause | groupByClause | orderByClause)*, returnClause)
        /// </para>
        /// </summary>
        public virtual IList<countClause> countClause {
            get {
                return this.ContentField.countClause;
            }
            set {
                this.ContentField.countClause = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((forClause | letClause | windowClause), (forClause | letClause | windowClause | countClause | whereClause | groupByClause | orderByClause)*, returnClause)
        /// </para>
        /// </summary>
        public virtual IList<whereClause> whereClause {
            get {
                return this.ContentField.whereClause;
            }
            set {
                this.ContentField.whereClause = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((forClause | letClause | windowClause), (forClause | letClause | windowClause | countClause | whereClause | groupByClause | orderByClause)*, returnClause)
        /// </para>
        /// </summary>
        public virtual IList<groupByClause> groupByClause {
            get {
                return this.ContentField.groupByClause;
            }
            set {
                this.ContentField.groupByClause = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((forClause | letClause | windowClause), (forClause | letClause | windowClause | countClause | whereClause | groupByClause | orderByClause)*, returnClause)
        /// </para>
        /// </summary>
        public virtual IList<orderByClause> orderByClause {
            get {
                return this.ContentField.orderByClause;
            }
            set {
                this.ContentField.orderByClause = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: ((forClause | letClause | windowClause), (forClause | letClause | windowClause | countClause | whereClause | groupByClause | orderByClause)*, returnClause)
        /// </para>
        /// </summary>
        public virtual returnClause returnClause {
            get {
                return this.ContentField.returnClause;
            }
            set {
                this.ContentField.returnClause = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static flworExpr Load(string xmlFile) {
            return XTypedServices.Load<flworExpr, flworExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static flworExpr Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<flworExpr, flworExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static flworExpr Parse(string xml) {
            return XTypedServices.Parse<flworExpr, flworExprType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new flworExpr(((flworExprType)(this.Content.Clone())));
        }
        
        private void SetInnerType(flworExprType ContentField) {
            this.ContentField = ((flworExprType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ifThenElseExpr : global::W3C.XQueryX.expr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ifThenElseExprType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ifThenElseExpr", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator ifThenElseExpr(XElement xe) { return XTypedServices.ToXTypedElement<ifThenElseExpr, ifThenElseExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ifThenElseExpr() : 
                base(true) {
            SetInnerType(new ifThenElseExprType());
        }
        
        public ifThenElseExpr(ifThenElseExprType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual ifThenElseExprType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ifClause, thenClause, elseClause)
        /// </para>
        /// </summary>
        public virtual exprWrapper ifClause {
            get {
                return this.ContentField.ifClause;
            }
            set {
                this.ContentField.ifClause = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ifClause, thenClause, elseClause)
        /// </para>
        /// </summary>
        public virtual exprWrapper thenClause {
            get {
                return this.ContentField.thenClause;
            }
            set {
                this.ContentField.thenClause = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ifClause, thenClause, elseClause)
        /// </para>
        /// </summary>
        public virtual exprWrapper elseClause {
            get {
                return this.ContentField.elseClause;
            }
            set {
                this.ContentField.elseClause = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static ifThenElseExpr Load(string xmlFile) {
            return XTypedServices.Load<ifThenElseExpr, ifThenElseExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static ifThenElseExpr Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ifThenElseExpr, ifThenElseExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static ifThenElseExpr Parse(string xml) {
            return XTypedServices.Parse<ifThenElseExpr, ifThenElseExprType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new ifThenElseExpr(((ifThenElseExprType)(this.Content.Clone())));
        }
        
        private void SetInnerType(ifThenElseExprType ContentField) {
            this.ContentField = ((ifThenElseExprType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class quantifiedExprInClause : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private quantifiedExprInClauseType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("quantifiedExprInClause", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator quantifiedExprInClause(XElement xe) { return XTypedServices.ToXTypedElement<quantifiedExprInClause, quantifiedExprInClauseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public quantifiedExprInClause() {
            SetInnerType(new quantifiedExprInClauseType());
        }
        
        public quantifiedExprInClause(quantifiedExprInClauseType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual quantifiedExprInClauseType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (typedVariableBinding, sourceExpr)
        /// </para>
        /// </summary>
        public virtual typedVariableBinding typedVariableBinding {
            get {
                return this.ContentField.typedVariableBinding;
            }
            set {
                this.ContentField.typedVariableBinding = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (typedVariableBinding, sourceExpr)
        /// </para>
        /// </summary>
        public virtual exprWrapper sourceExpr {
            get {
                return this.ContentField.sourceExpr;
            }
            set {
                this.ContentField.sourceExpr = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static quantifiedExprInClause Load(string xmlFile) {
            return XTypedServices.Load<quantifiedExprInClause, quantifiedExprInClauseType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static quantifiedExprInClause Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<quantifiedExprInClause, quantifiedExprInClauseType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static quantifiedExprInClause Parse(string xml) {
            return XTypedServices.Parse<quantifiedExprInClause, quantifiedExprInClauseType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new quantifiedExprInClause(((quantifiedExprInClauseType)(this.Content.Clone())));
        }
        
        private void SetInnerType(quantifiedExprInClauseType ContentField) {
            this.ContentField = ((quantifiedExprInClauseType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class quantifiedExpr : global::W3C.XQueryX.expr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private quantifiedExprType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("quantifiedExpr", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator quantifiedExpr(XElement xe) { return XTypedServices.ToXTypedElement<quantifiedExpr, quantifiedExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public quantifiedExpr() : 
                base(true) {
            SetInnerType(new quantifiedExprType());
        }
        
        public quantifiedExpr(quantifiedExprType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual quantifiedExprType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (quantifier, quantifiedExprInClause+, predicateExpr)
        /// </para>
        /// </summary>
        public virtual W3C.XQueryX.quantifier quantifier {
            get {
                return this.ContentField.quantifier;
            }
            set {
                this.ContentField.quantifier = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (quantifier, quantifiedExprInClause+, predicateExpr)
        /// </para>
        /// </summary>
        public virtual IList<quantifiedExprInClause> quantifiedExprInClause {
            get {
                return this.ContentField.quantifiedExprInClause;
            }
            set {
                this.ContentField.quantifiedExprInClause = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (quantifier, quantifiedExprInClause+, predicateExpr)
        /// </para>
        /// </summary>
        public virtual exprWrapper predicateExpr {
            get {
                return this.ContentField.predicateExpr;
            }
            set {
                this.ContentField.predicateExpr = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static quantifiedExpr Load(string xmlFile) {
            return XTypedServices.Load<quantifiedExpr, quantifiedExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static quantifiedExpr Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<quantifiedExpr, quantifiedExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static quantifiedExpr Parse(string xml) {
            return XTypedServices.Parse<quantifiedExpr, quantifiedExprType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new quantifiedExpr(((quantifiedExprType)(this.Content.Clone())));
        }
        
        private void SetInnerType(quantifiedExprType ContentField) {
            this.ContentField = ((quantifiedExprType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class switchExprCaseClause : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private switchExprCaseClauseType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("switchExprCaseClause", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator switchExprCaseClause(XElement xe) { return XTypedServices.ToXTypedElement<switchExprCaseClause, switchExprCaseClauseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public switchExprCaseClause() {
            SetInnerType(new switchExprCaseClauseType());
        }
        
        public switchExprCaseClause(switchExprCaseClauseType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual switchExprCaseClauseType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (switchCaseExpr+, resultExpr)
        /// </para>
        /// </summary>
        public virtual IList<exprWrapper> switchCaseExpr {
            get {
                return this.ContentField.switchCaseExpr;
            }
            set {
                this.ContentField.switchCaseExpr = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (switchCaseExpr+, resultExpr)
        /// </para>
        /// </summary>
        public virtual exprWrapper resultExpr {
            get {
                return this.ContentField.resultExpr;
            }
            set {
                this.ContentField.resultExpr = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static switchExprCaseClause Load(string xmlFile) {
            return XTypedServices.Load<switchExprCaseClause, switchExprCaseClauseType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static switchExprCaseClause Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<switchExprCaseClause, switchExprCaseClauseType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static switchExprCaseClause Parse(string xml) {
            return XTypedServices.Parse<switchExprCaseClause, switchExprCaseClauseType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new switchExprCaseClause(((switchExprCaseClauseType)(this.Content.Clone())));
        }
        
        private void SetInnerType(switchExprCaseClauseType ContentField) {
            this.ContentField = ((switchExprCaseClauseType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class switchExprDefaultClause : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private switchExprDefaultClauseType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("switchExprDefaultClause", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator switchExprDefaultClause(XElement xe) { return XTypedServices.ToXTypedElement<switchExprDefaultClause, switchExprDefaultClauseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public switchExprDefaultClause() {
            SetInnerType(new switchExprDefaultClauseType());
        }
        
        public switchExprDefaultClause(switchExprDefaultClauseType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual switchExprDefaultClauseType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (resultExpr)
        /// </para>
        /// </summary>
        public virtual exprWrapper resultExpr {
            get {
                return this.ContentField.resultExpr;
            }
            set {
                this.ContentField.resultExpr = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static switchExprDefaultClause Load(string xmlFile) {
            return XTypedServices.Load<switchExprDefaultClause, switchExprDefaultClauseType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static switchExprDefaultClause Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<switchExprDefaultClause, switchExprDefaultClauseType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static switchExprDefaultClause Parse(string xml) {
            return XTypedServices.Parse<switchExprDefaultClause, switchExprDefaultClauseType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new switchExprDefaultClause(((switchExprDefaultClauseType)(this.Content.Clone())));
        }
        
        private void SetInnerType(switchExprDefaultClauseType ContentField) {
            this.ContentField = ((switchExprDefaultClauseType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class switchExpr : global::W3C.XQueryX.expr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private switchExprType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("switchExpr", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator switchExpr(XElement xe) { return XTypedServices.ToXTypedElement<switchExpr, switchExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public switchExpr() : 
                base(true) {
            SetInnerType(new switchExprType());
        }
        
        public switchExpr(switchExprType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual switchExprType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (argExpr, switchExprCaseClause+, switchExprDefaultClause)
        /// </para>
        /// </summary>
        public virtual exprWrapper argExpr {
            get {
                return this.ContentField.argExpr;
            }
            set {
                this.ContentField.argExpr = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (argExpr, switchExprCaseClause+, switchExprDefaultClause)
        /// </para>
        /// </summary>
        public virtual IList<switchExprCaseClause> switchExprCaseClause {
            get {
                return this.ContentField.switchExprCaseClause;
            }
            set {
                this.ContentField.switchExprCaseClause = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (argExpr, switchExprCaseClause+, switchExprDefaultClause)
        /// </para>
        /// </summary>
        public virtual switchExprDefaultClause switchExprDefaultClause {
            get {
                return this.ContentField.switchExprDefaultClause;
            }
            set {
                this.ContentField.switchExprDefaultClause = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static switchExpr Load(string xmlFile) {
            return XTypedServices.Load<switchExpr, switchExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static switchExpr Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<switchExpr, switchExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static switchExpr Parse(string xml) {
            return XTypedServices.Parse<switchExpr, switchExprType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new switchExpr(((switchExprType)(this.Content.Clone())));
        }
        
        private void SetInnerType(switchExprType ContentField) {
            this.ContentField = ((switchExprType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class typeswitchExprCaseClause : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private typeswitchExprCaseClauseType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("typeswitchExprCaseClause", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator typeswitchExprCaseClause(XElement xe) { return XTypedServices.ToXTypedElement<typeswitchExprCaseClause, typeswitchExprCaseClauseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public typeswitchExprCaseClause() {
            SetInnerType(new typeswitchExprCaseClauseType());
        }
        
        public typeswitchExprCaseClause(typeswitchExprCaseClauseType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual typeswitchExprCaseClauseType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (variableBinding?, (sequenceType | sequenceTypeUnion), resultExpr)
        /// </para>
        /// </summary>
        public virtual variableBinding variableBinding {
            get {
                return this.ContentField.variableBinding;
            }
            set {
                this.ContentField.variableBinding = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (variableBinding?, (sequenceType | sequenceTypeUnion), resultExpr)
        /// </para>
        /// </summary>
        public virtual sequenceType sequenceType {
            get {
                return this.ContentField.sequenceType;
            }
            set {
                this.ContentField.sequenceType = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (variableBinding?, (sequenceType | sequenceTypeUnion), resultExpr)
        /// </para>
        /// </summary>
        public virtual sequenceTypeUnion sequenceTypeUnion {
            get {
                return this.ContentField.sequenceTypeUnion;
            }
            set {
                this.ContentField.sequenceTypeUnion = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (variableBinding?, (sequenceType | sequenceTypeUnion), resultExpr)
        /// </para>
        /// </summary>
        public virtual exprWrapper resultExpr {
            get {
                return this.ContentField.resultExpr;
            }
            set {
                this.ContentField.resultExpr = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static typeswitchExprCaseClause Load(string xmlFile) {
            return XTypedServices.Load<typeswitchExprCaseClause, typeswitchExprCaseClauseType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static typeswitchExprCaseClause Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<typeswitchExprCaseClause, typeswitchExprCaseClauseType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static typeswitchExprCaseClause Parse(string xml) {
            return XTypedServices.Parse<typeswitchExprCaseClause, typeswitchExprCaseClauseType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new typeswitchExprCaseClause(((typeswitchExprCaseClauseType)(this.Content.Clone())));
        }
        
        private void SetInnerType(typeswitchExprCaseClauseType ContentField) {
            this.ContentField = ((typeswitchExprCaseClauseType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class typeswitchExprDefaultClause : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private typeswitchExprDefaultClauseType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("typeswitchExprDefaultClause", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator typeswitchExprDefaultClause(XElement xe) { return XTypedServices.ToXTypedElement<typeswitchExprDefaultClause, typeswitchExprDefaultClauseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public typeswitchExprDefaultClause() {
            SetInnerType(new typeswitchExprDefaultClauseType());
        }
        
        public typeswitchExprDefaultClause(typeswitchExprDefaultClauseType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual typeswitchExprDefaultClauseType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (variableBinding?, resultExpr)
        /// </para>
        /// </summary>
        public virtual variableBinding variableBinding {
            get {
                return this.ContentField.variableBinding;
            }
            set {
                this.ContentField.variableBinding = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (variableBinding?, resultExpr)
        /// </para>
        /// </summary>
        public virtual exprWrapper resultExpr {
            get {
                return this.ContentField.resultExpr;
            }
            set {
                this.ContentField.resultExpr = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static typeswitchExprDefaultClause Load(string xmlFile) {
            return XTypedServices.Load<typeswitchExprDefaultClause, typeswitchExprDefaultClauseType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static typeswitchExprDefaultClause Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<typeswitchExprDefaultClause, typeswitchExprDefaultClauseType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static typeswitchExprDefaultClause Parse(string xml) {
            return XTypedServices.Parse<typeswitchExprDefaultClause, typeswitchExprDefaultClauseType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new typeswitchExprDefaultClause(((typeswitchExprDefaultClauseType)(this.Content.Clone())));
        }
        
        private void SetInnerType(typeswitchExprDefaultClauseType ContentField) {
            this.ContentField = ((typeswitchExprDefaultClauseType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class typeswitchExpr : global::W3C.XQueryX.expr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private typeswitchExprType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("typeswitchExpr", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator typeswitchExpr(XElement xe) { return XTypedServices.ToXTypedElement<typeswitchExpr, typeswitchExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public typeswitchExpr() : 
                base(true) {
            SetInnerType(new typeswitchExprType());
        }
        
        public typeswitchExpr(typeswitchExprType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual typeswitchExprType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (argExpr, typeswitchExprCaseClause+, typeswitchExprDefaultClause)
        /// </para>
        /// </summary>
        public virtual exprWrapper argExpr {
            get {
                return this.ContentField.argExpr;
            }
            set {
                this.ContentField.argExpr = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (argExpr, typeswitchExprCaseClause+, typeswitchExprDefaultClause)
        /// </para>
        /// </summary>
        public virtual IList<typeswitchExprCaseClause> typeswitchExprCaseClause {
            get {
                return this.ContentField.typeswitchExprCaseClause;
            }
            set {
                this.ContentField.typeswitchExprCaseClause = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (argExpr, typeswitchExprCaseClause+, typeswitchExprDefaultClause)
        /// </para>
        /// </summary>
        public virtual typeswitchExprDefaultClause typeswitchExprDefaultClause {
            get {
                return this.ContentField.typeswitchExprDefaultClause;
            }
            set {
                this.ContentField.typeswitchExprDefaultClause = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static typeswitchExpr Load(string xmlFile) {
            return XTypedServices.Load<typeswitchExpr, typeswitchExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static typeswitchExpr Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<typeswitchExpr, typeswitchExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static typeswitchExpr Parse(string xml) {
            return XTypedServices.Parse<typeswitchExpr, typeswitchExprType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new typeswitchExpr(((typeswitchExprType)(this.Content.Clone())));
        }
        
        private void SetInnerType(typeswitchExprType ContentField) {
            this.ContentField = ((typeswitchExprType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class tryCatchExpr : global::W3C.XQueryX.expr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private tryCatchExprType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("tryCatchExpr", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator tryCatchExpr(XElement xe) { return XTypedServices.ToXTypedElement<tryCatchExpr, tryCatchExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public tryCatchExpr() : 
                base(true) {
            SetInnerType(new tryCatchExprType());
        }
        
        public tryCatchExpr(tryCatchExprType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual tryCatchExprType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (tryClause, catchClause*)
        /// </para>
        /// </summary>
        public virtual exprWrapper tryClause {
            get {
                return this.ContentField.tryClause;
            }
            set {
                this.ContentField.tryClause = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (tryClause, catchClause*)
        /// </para>
        /// </summary>
        public virtual IList<catchClause> catchClause {
            get {
                return this.ContentField.catchClause;
            }
            set {
                this.ContentField.catchClause = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static tryCatchExpr Load(string xmlFile) {
            return XTypedServices.Load<tryCatchExpr, tryCatchExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static tryCatchExpr Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<tryCatchExpr, tryCatchExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static tryCatchExpr Parse(string xml) {
            return XTypedServices.Parse<tryCatchExpr, tryCatchExprType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new tryCatchExpr(((tryCatchExprType)(this.Content.Clone())));
        }
        
        private void SetInnerType(tryCatchExprType ContentField) {
            this.ContentField = ((tryCatchExprType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class catchClause : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private catchClauseType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("catchClause", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator catchClause(XElement xe) { return XTypedServices.ToXTypedElement<catchClause, catchClauseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public catchClause() {
            SetInnerType(new catchClauseType());
        }
        
        public catchClause(catchClauseType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual catchClauseType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (catchErrorList, catchExpr?)
        /// </para>
        /// </summary>
        public virtual catchErrorList catchErrorList {
            get {
                return this.ContentField.catchErrorList;
            }
            set {
                this.ContentField.catchErrorList = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (catchErrorList, catchExpr?)
        /// </para>
        /// </summary>
        public virtual exprWrapper catchExpr {
            get {
                return this.ContentField.catchExpr;
            }
            set {
                this.ContentField.catchExpr = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static catchClause Load(string xmlFile) {
            return XTypedServices.Load<catchClause, catchClauseType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static catchClause Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<catchClause, catchClauseType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static catchClause Parse(string xml) {
            return XTypedServices.Parse<catchClause, catchClauseType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new catchClause(((catchClauseType)(this.Content.Clone())));
        }
        
        private void SetInnerType(catchClauseType ContentField) {
            this.ContentField = ((catchClauseType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class catchErrorList : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private catchErrorListType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("catchErrorList", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator catchErrorList(XElement xe) { return XTypedServices.ToXTypedElement<catchErrorList, catchErrorListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public catchErrorList() {
            SetInnerType(new catchErrorListType());
        }
        
        public catchErrorList(catchErrorListType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual catchErrorListType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((nameTest | Wildcard))+
        /// </para>
        /// </summary>
        public virtual IList<nameTest> nameTest {
            get {
                return this.ContentField.nameTest;
            }
            set {
                this.ContentField.nameTest = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((nameTest | Wildcard))+
        /// </para>
        /// </summary>
        public virtual IList<Wildcard> Wildcard {
            get {
                return this.ContentField.Wildcard;
            }
            set {
                this.ContentField.Wildcard = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static catchErrorList Load(string xmlFile) {
            return XTypedServices.Load<catchErrorList, catchErrorListType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static catchErrorList Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<catchErrorList, catchErrorListType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static catchErrorList Parse(string xml) {
            return XTypedServices.Parse<catchErrorList, catchErrorListType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new catchErrorList(((catchErrorListType)(this.Content.Clone())));
        }
        
        private void SetInnerType(catchErrorListType ContentField) {
            this.ContentField = ((catchErrorListType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class instanceOfExpr : global::W3C.XQueryX.expr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private instanceOfExprType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("instanceOfExpr", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator instanceOfExpr(XElement xe) { return XTypedServices.ToXTypedElement<instanceOfExpr, instanceOfExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public instanceOfExpr() : 
                base(true) {
            SetInnerType(new instanceOfExprType());
        }
        
        public instanceOfExpr(instanceOfExprType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual instanceOfExprType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (argExpr, sequenceType)
        /// </para>
        /// </summary>
        public virtual exprWrapper argExpr {
            get {
                return this.ContentField.argExpr;
            }
            set {
                this.ContentField.argExpr = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (argExpr, sequenceType)
        /// </para>
        /// </summary>
        public virtual sequenceType sequenceType {
            get {
                return this.ContentField.sequenceType;
            }
            set {
                this.ContentField.sequenceType = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static instanceOfExpr Load(string xmlFile) {
            return XTypedServices.Load<instanceOfExpr, instanceOfExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static instanceOfExpr Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<instanceOfExpr, instanceOfExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static instanceOfExpr Parse(string xml) {
            return XTypedServices.Parse<instanceOfExpr, instanceOfExprType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new instanceOfExpr(((instanceOfExprType)(this.Content.Clone())));
        }
        
        private void SetInnerType(instanceOfExprType ContentField) {
            this.ContentField = ((instanceOfExprType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class treatExpr : global::W3C.XQueryX.expr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private treatExprType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("treatExpr", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator treatExpr(XElement xe) { return XTypedServices.ToXTypedElement<treatExpr, treatExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public treatExpr() : 
                base(true) {
            SetInnerType(new treatExprType());
        }
        
        public treatExpr(treatExprType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual treatExprType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (argExpr, sequenceType)
        /// </para>
        /// </summary>
        public virtual exprWrapper argExpr {
            get {
                return this.ContentField.argExpr;
            }
            set {
                this.ContentField.argExpr = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (argExpr, sequenceType)
        /// </para>
        /// </summary>
        public virtual sequenceType sequenceType {
            get {
                return this.ContentField.sequenceType;
            }
            set {
                this.ContentField.sequenceType = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static treatExpr Load(string xmlFile) {
            return XTypedServices.Load<treatExpr, treatExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static treatExpr Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<treatExpr, treatExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static treatExpr Parse(string xml) {
            return XTypedServices.Parse<treatExpr, treatExprType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new treatExpr(((treatExprType)(this.Content.Clone())));
        }
        
        private void SetInnerType(treatExprType ContentField) {
            this.ContentField = ((treatExprType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class castableExpr : global::W3C.XQueryX.expr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private castableExprType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("castableExpr", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator castableExpr(XElement xe) { return XTypedServices.ToXTypedElement<castableExpr, castableExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public castableExpr() : 
                base(true) {
            SetInnerType(new castableExprType());
        }
        
        public castableExpr(castableExprType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual castableExprType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (argExpr, singleType)
        /// </para>
        /// </summary>
        public virtual exprWrapper argExpr {
            get {
                return this.ContentField.argExpr;
            }
            set {
                this.ContentField.argExpr = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (argExpr, singleType)
        /// </para>
        /// </summary>
        public virtual singleType singleType {
            get {
                return this.ContentField.singleType;
            }
            set {
                this.ContentField.singleType = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static castableExpr Load(string xmlFile) {
            return XTypedServices.Load<castableExpr, castableExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static castableExpr Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<castableExpr, castableExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static castableExpr Parse(string xml) {
            return XTypedServices.Parse<castableExpr, castableExprType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new castableExpr(((castableExprType)(this.Content.Clone())));
        }
        
        private void SetInnerType(castableExprType ContentField) {
            this.ContentField = ((castableExprType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class castExpr : global::W3C.XQueryX.expr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private castExprType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("castExpr", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator castExpr(XElement xe) { return XTypedServices.ToXTypedElement<castExpr, castExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public castExpr() : 
                base(true) {
            SetInnerType(new castExprType());
        }
        
        public castExpr(castExprType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual castExprType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (argExpr, singleType)
        /// </para>
        /// </summary>
        public virtual exprWrapper argExpr {
            get {
                return this.ContentField.argExpr;
            }
            set {
                this.ContentField.argExpr = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (argExpr, singleType)
        /// </para>
        /// </summary>
        public virtual singleType singleType {
            get {
                return this.ContentField.singleType;
            }
            set {
                this.ContentField.singleType = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static castExpr Load(string xmlFile) {
            return XTypedServices.Load<castExpr, castExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static castExpr Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<castExpr, castExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static castExpr Parse(string xml) {
            return XTypedServices.Parse<castExpr, castExprType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new castExpr(((castExprType)(this.Content.Clone())));
        }
        
        private void SetInnerType(castExprType ContentField) {
            this.ContentField = ((castExprType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class arrowExpr : global::W3C.XQueryX.expr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private arrowExprType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("arrowExpr", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator arrowExpr(XElement xe) { return XTypedServices.ToXTypedElement<arrowExpr, arrowExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public arrowExpr() : 
                base(true) {
            SetInnerType(new arrowExprType());
        }
        
        public arrowExpr(arrowExprType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual arrowExprType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (argExpr, ((EQName | expr), arguments?)+)
        /// </para>
        /// </summary>
        public virtual exprWrapper argExpr {
            get {
                return this.ContentField.argExpr;
            }
            set {
                this.ContentField.argExpr = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (argExpr, ((EQName | expr), arguments?)+)
        /// </para>
        /// </summary>
        public virtual IList<EQName> EQName {
            get {
                return this.ContentField.EQName;
            }
            set {
                this.ContentField.EQName = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: expr, constantExpr, integerConstantExpr, decimalConstantExpr, doubleConstantExpr, stringConstantExpr, varRef, contextItemExpr, extensionExpr, simpleMapExpr, functionCallExpr, constructorFunctionExpr, sequenceExpr, rangeSequenceExpr, operatorExpr, arithmeticOp, addOp, subtractOp, multiplyOp, divOp, idivOp, modOp, unaryMinusOp, unaryPlusOp, stringOp, stringConcatenateOp, comparisonOp, valueComparisonOp, eqOp, neOp, gtOp, geOp, ltOp, leOp, generalComparisonOp, equalOp, notEqualOp, lessThanOp, lessThanOrEqualOp, greaterThanOp, greaterThanOrEqualOp, nodeComparisonOp, isOp, orderComparisonOp, nodeBeforeOp, nodeAfterOp, logicalOp, andOp, orOp, setOp, unionOp, intersectOp, exceptOp, flworExpr, ifThenElseExpr, quantifiedExpr, switchExpr, typeswitchExpr, tryCatchExpr, instanceOfExpr, treatExpr, castableExpr, castExpr, arrowExpr, validateExpr, elementConstructor, computedElementConstructor, computedAttributeConstructor, computedDocumentConstructor, computedTextConstructor, computedCommentConstructor, computedNamespaceConstructor, computedPIConstructor, unorderedExpr, orderedExpr, namedFunctionRef, inlineFunctionExpr, dynamicFunctionInvocationExpr, mapConstructor, arrayConstructor, stringConstructor, unaryLookup, pathExpr
        /// </para>
        /// <para>
        /// Regular expression: (argExpr, ((EQName | expr), arguments?)+)
        /// </para>
        /// </summary>
        public virtual IList<expr> expr {
            get {
                return this.ContentField.expr;
            }
            set {
                this.ContentField.expr = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (argExpr, ((EQName | expr), arguments?)+)
        /// </para>
        /// </summary>
        public virtual IList<exprOrPlaceholderList> arguments {
            get {
                return this.ContentField.arguments;
            }
            set {
                this.ContentField.arguments = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static arrowExpr Load(string xmlFile) {
            return XTypedServices.Load<arrowExpr, arrowExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static arrowExpr Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<arrowExpr, arrowExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static arrowExpr Parse(string xml) {
            return XTypedServices.Parse<arrowExpr, arrowExprType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new arrowExpr(((arrowExprType)(this.Content.Clone())));
        }
        
        private void SetInnerType(arrowExprType ContentField) {
            this.ContentField = ((arrowExprType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class validateExpr : global::W3C.XQueryX.expr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private validateExprType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("validateExpr", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator validateExpr(XElement xe) { return XTypedServices.ToXTypedElement<validateExpr, validateExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public validateExpr() : 
                base(true) {
            SetInnerType(new validateExprType());
        }
        
        public validateExpr(validateExprType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual validateExprType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((validationMode? | typeName?), argExpr)
        /// </para>
        /// </summary>
        public virtual W3C.XQueryX.validationMode? validationMode {
            get {
                return this.ContentField.validationMode;
            }
            set {
                this.ContentField.validationMode = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((validationMode? | typeName?), argExpr)
        /// </para>
        /// </summary>
        public virtual EQName typeName {
            get {
                return this.ContentField.typeName;
            }
            set {
                this.ContentField.typeName = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: ((validationMode? | typeName?), argExpr)
        /// </para>
        /// </summary>
        public virtual exprWrapper argExpr {
            get {
                return this.ContentField.argExpr;
            }
            set {
                this.ContentField.argExpr = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static validateExpr Load(string xmlFile) {
            return XTypedServices.Load<validateExpr, validateExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static validateExpr Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<validateExpr, validateExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static validateExpr Parse(string xml) {
            return XTypedServices.Parse<validateExpr, validateExprType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new validateExpr(((validateExprType)(this.Content.Clone())));
        }
        
        private void SetInnerType(validateExprType ContentField) {
            this.ContentField = ((validateExprType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class attributeList : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private attributeListType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("attributeList", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator attributeList(XElement xe) { return XTypedServices.ToXTypedElement<attributeList, attributeListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public attributeList() {
            SetInnerType(new attributeListType());
        }
        
        public attributeList(attributeListType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual attributeListType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((attributeConstructor | namespaceDeclaration)+)
        /// </para>
        /// </summary>
        public virtual IList<attributeConstructor> attributeConstructor {
            get {
                return this.ContentField.attributeConstructor;
            }
            set {
                this.ContentField.attributeConstructor = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((attributeConstructor | namespaceDeclaration)+)
        /// </para>
        /// </summary>
        public virtual IList<namespaceDeclaration> namespaceDeclaration {
            get {
                return this.ContentField.namespaceDeclaration;
            }
            set {
                this.ContentField.namespaceDeclaration = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static attributeList Load(string xmlFile) {
            return XTypedServices.Load<attributeList, attributeListType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static attributeList Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<attributeList, attributeListType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static attributeList Parse(string xml) {
            return XTypedServices.Parse<attributeList, attributeListType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new attributeList(((attributeListType)(this.Content.Clone())));
        }
        
        private void SetInnerType(attributeListType ContentField) {
            this.ContentField = ((attributeListType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class elementContent : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private exprList ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("elementContent", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator elementContent(XElement xe) { return XTypedServices.ToXTypedElement<elementContent, exprList>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public elementContent() {
            SetInnerType(new exprList());
        }
        
        public elementContent(exprList content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual exprList Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Substitution members: expr, constantExpr, integerConstantExpr, decimalConstantExpr, doubleConstantExpr, stringConstantExpr, varRef, contextItemExpr, extensionExpr, simpleMapExpr, functionCallExpr, constructorFunctionExpr, sequenceExpr, rangeSequenceExpr, operatorExpr, arithmeticOp, addOp, subtractOp, multiplyOp, divOp, idivOp, modOp, unaryMinusOp, unaryPlusOp, stringOp, stringConcatenateOp, comparisonOp, valueComparisonOp, eqOp, neOp, gtOp, geOp, ltOp, leOp, generalComparisonOp, equalOp, notEqualOp, lessThanOp, lessThanOrEqualOp, greaterThanOp, greaterThanOrEqualOp, nodeComparisonOp, isOp, orderComparisonOp, nodeBeforeOp, nodeAfterOp, logicalOp, andOp, orOp, setOp, unionOp, intersectOp, exceptOp, flworExpr, ifThenElseExpr, quantifiedExpr, switchExpr, typeswitchExpr, tryCatchExpr, instanceOfExpr, treatExpr, castableExpr, castExpr, arrowExpr, validateExpr, elementConstructor, computedElementConstructor, computedAttributeConstructor, computedDocumentConstructor, computedTextConstructor, computedCommentConstructor, computedNamespaceConstructor, computedPIConstructor, unorderedExpr, orderedExpr, namedFunctionRef, inlineFunctionExpr, dynamicFunctionInvocationExpr, mapConstructor, arrayConstructor, stringConstructor, unaryLookup, pathExpr
        /// </para>
        /// <para>
        /// Regular expression: (expr*)
        /// </para>
        /// </summary>
        public virtual IList<expr> expr {
            get {
                return this.ContentField.expr;
            }
            set {
                this.ContentField.expr = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static elementContent Load(string xmlFile) {
            return XTypedServices.Load<elementContent, exprList>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static elementContent Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<elementContent, exprList>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static elementContent Parse(string xml) {
            return XTypedServices.Parse<elementContent, exprList>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new elementContent(((exprList)(this.Content.Clone())));
        }
        
        private void SetInnerType(exprList ContentField) {
            this.ContentField = ((exprList)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class elementConstructor : global::W3C.XQueryX.expr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private elementConstructorType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("elementConstructor", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator elementConstructor(XElement xe) { return XTypedServices.ToXTypedElement<elementConstructor, elementConstructorType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public elementConstructor() : 
                base(true) {
            SetInnerType(new elementConstructorType());
        }
        
        public elementConstructor(elementConstructorType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual elementConstructorType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (tagName, attributeList?, elementContent?)
        /// </para>
        /// </summary>
        public virtual QName tagName {
            get {
                return this.ContentField.tagName;
            }
            set {
                this.ContentField.tagName = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (tagName, attributeList?, elementContent?)
        /// </para>
        /// </summary>
        public virtual attributeList attributeList {
            get {
                return this.ContentField.attributeList;
            }
            set {
                this.ContentField.attributeList = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (tagName, attributeList?, elementContent?)
        /// </para>
        /// </summary>
        public virtual elementContent elementContent {
            get {
                return this.ContentField.elementContent;
            }
            set {
                this.ContentField.elementContent = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static elementConstructor Load(string xmlFile) {
            return XTypedServices.Load<elementConstructor, elementConstructorType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static elementConstructor Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<elementConstructor, elementConstructorType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static elementConstructor Parse(string xml) {
            return XTypedServices.Parse<elementConstructor, elementConstructorType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new elementConstructor(((elementConstructorType)(this.Content.Clone())));
        }
        
        private void SetInnerType(elementConstructorType ContentField) {
            this.ContentField = ((elementConstructorType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class computedElementConstructor : global::W3C.XQueryX.expr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private computedElementConstructorType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("computedElementConstructor", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator computedElementConstructor(XElement xe) { return XTypedServices.ToXTypedElement<computedElementConstructor, computedElementConstructorType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public computedElementConstructor() : 
                base(true) {
            SetInnerType(new computedElementConstructorType());
        }
        
        public computedElementConstructor(computedElementConstructorType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual computedElementConstructorType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((tagName | tagNameExpr), contentExpr?)
        /// </para>
        /// </summary>
        public virtual EQName tagName {
            get {
                return this.ContentField.tagName;
            }
            set {
                this.ContentField.tagName = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((tagName | tagNameExpr), contentExpr?)
        /// </para>
        /// </summary>
        public virtual exprWrapper tagNameExpr {
            get {
                return this.ContentField.tagNameExpr;
            }
            set {
                this.ContentField.tagNameExpr = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((tagName | tagNameExpr), contentExpr?)
        /// </para>
        /// </summary>
        public virtual exprWrapper contentExpr {
            get {
                return this.ContentField.contentExpr;
            }
            set {
                this.ContentField.contentExpr = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static computedElementConstructor Load(string xmlFile) {
            return XTypedServices.Load<computedElementConstructor, computedElementConstructorType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static computedElementConstructor Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<computedElementConstructor, computedElementConstructorType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static computedElementConstructor Parse(string xml) {
            return XTypedServices.Parse<computedElementConstructor, computedElementConstructorType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new computedElementConstructor(((computedElementConstructorType)(this.Content.Clone())));
        }
        
        private void SetInnerType(computedElementConstructorType ContentField) {
            this.ContentField = ((computedElementConstructorType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class computedAttributeConstructor : global::W3C.XQueryX.expr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private computedAttributeConstructorType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("computedAttributeConstructor", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator computedAttributeConstructor(XElement xe) { return XTypedServices.ToXTypedElement<computedAttributeConstructor, computedAttributeConstructorType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public computedAttributeConstructor() : 
                base(true) {
            SetInnerType(new computedAttributeConstructorType());
        }
        
        public computedAttributeConstructor(computedAttributeConstructorType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual computedAttributeConstructorType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((tagName | tagNameExpr), valueExpr?)
        /// </para>
        /// </summary>
        public virtual EQName tagName {
            get {
                return this.ContentField.tagName;
            }
            set {
                this.ContentField.tagName = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((tagName | tagNameExpr), valueExpr?)
        /// </para>
        /// </summary>
        public virtual exprWrapper tagNameExpr {
            get {
                return this.ContentField.tagNameExpr;
            }
            set {
                this.ContentField.tagNameExpr = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((tagName | tagNameExpr), valueExpr?)
        /// </para>
        /// </summary>
        public virtual exprWrapper valueExpr {
            get {
                return this.ContentField.valueExpr;
            }
            set {
                this.ContentField.valueExpr = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static computedAttributeConstructor Load(string xmlFile) {
            return XTypedServices.Load<computedAttributeConstructor, computedAttributeConstructorType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static computedAttributeConstructor Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<computedAttributeConstructor, computedAttributeConstructorType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static computedAttributeConstructor Parse(string xml) {
            return XTypedServices.Parse<computedAttributeConstructor, computedAttributeConstructorType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new computedAttributeConstructor(((computedAttributeConstructorType)(this.Content.Clone())));
        }
        
        private void SetInnerType(computedAttributeConstructorType ContentField) {
            this.ContentField = ((computedAttributeConstructorType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class computedDocumentConstructor : global::W3C.XQueryX.expr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private computedDocumentConstructorType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("computedDocumentConstructor", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator computedDocumentConstructor(XElement xe) { return XTypedServices.ToXTypedElement<computedDocumentConstructor, computedDocumentConstructorType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public computedDocumentConstructor() : 
                base(true) {
            SetInnerType(new computedDocumentConstructorType());
        }
        
        public computedDocumentConstructor(computedDocumentConstructorType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual computedDocumentConstructorType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (argExpr?)
        /// </para>
        /// </summary>
        public virtual exprWrapper argExpr {
            get {
                return this.ContentField.argExpr;
            }
            set {
                this.ContentField.argExpr = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static computedDocumentConstructor Load(string xmlFile) {
            return XTypedServices.Load<computedDocumentConstructor, computedDocumentConstructorType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static computedDocumentConstructor Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<computedDocumentConstructor, computedDocumentConstructorType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static computedDocumentConstructor Parse(string xml) {
            return XTypedServices.Parse<computedDocumentConstructor, computedDocumentConstructorType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new computedDocumentConstructor(((computedDocumentConstructorType)(this.Content.Clone())));
        }
        
        private void SetInnerType(computedDocumentConstructorType ContentField) {
            this.ContentField = ((computedDocumentConstructorType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class computedTextConstructor : global::W3C.XQueryX.expr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private computedTextConstructorType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("computedTextConstructor", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator computedTextConstructor(XElement xe) { return XTypedServices.ToXTypedElement<computedTextConstructor, computedTextConstructorType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public computedTextConstructor() : 
                base(true) {
            SetInnerType(new computedTextConstructorType());
        }
        
        public computedTextConstructor(computedTextConstructorType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual computedTextConstructorType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (argExpr?)
        /// </para>
        /// </summary>
        public virtual exprWrapper argExpr {
            get {
                return this.ContentField.argExpr;
            }
            set {
                this.ContentField.argExpr = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static computedTextConstructor Load(string xmlFile) {
            return XTypedServices.Load<computedTextConstructor, computedTextConstructorType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static computedTextConstructor Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<computedTextConstructor, computedTextConstructorType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static computedTextConstructor Parse(string xml) {
            return XTypedServices.Parse<computedTextConstructor, computedTextConstructorType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new computedTextConstructor(((computedTextConstructorType)(this.Content.Clone())));
        }
        
        private void SetInnerType(computedTextConstructorType ContentField) {
            this.ContentField = ((computedTextConstructorType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class computedCommentConstructor : global::W3C.XQueryX.expr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private computedCommentConstructorType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("computedCommentConstructor", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator computedCommentConstructor(XElement xe) { return XTypedServices.ToXTypedElement<computedCommentConstructor, computedCommentConstructorType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public computedCommentConstructor() : 
                base(true) {
            SetInnerType(new computedCommentConstructorType());
        }
        
        public computedCommentConstructor(computedCommentConstructorType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual computedCommentConstructorType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (argExpr?)
        /// </para>
        /// </summary>
        public virtual exprWrapper argExpr {
            get {
                return this.ContentField.argExpr;
            }
            set {
                this.ContentField.argExpr = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static computedCommentConstructor Load(string xmlFile) {
            return XTypedServices.Load<computedCommentConstructor, computedCommentConstructorType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static computedCommentConstructor Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<computedCommentConstructor, computedCommentConstructorType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static computedCommentConstructor Parse(string xml) {
            return XTypedServices.Parse<computedCommentConstructor, computedCommentConstructorType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new computedCommentConstructor(((computedCommentConstructorType)(this.Content.Clone())));
        }
        
        private void SetInnerType(computedCommentConstructorType ContentField) {
            this.ContentField = ((computedCommentConstructorType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class computedNamespaceConstructor : global::W3C.XQueryX.expr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private computedNamespaceConstructorType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("computedNamespaceConstructor", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator computedNamespaceConstructor(XElement xe) { return XTypedServices.ToXTypedElement<computedNamespaceConstructor, computedNamespaceConstructorType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public computedNamespaceConstructor() : 
                base(true) {
            SetInnerType(new computedNamespaceConstructorType());
        }
        
        public computedNamespaceConstructor(computedNamespaceConstructorType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual computedNamespaceConstructorType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((prefix | prefixExpr), URIExpr?)
        /// </para>
        /// </summary>
        public virtual string prefix {
            get {
                return this.ContentField.prefix;
            }
            set {
                this.ContentField.prefix = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((prefix | prefixExpr), URIExpr?)
        /// </para>
        /// </summary>
        public virtual exprWrapper prefixExpr {
            get {
                return this.ContentField.prefixExpr;
            }
            set {
                this.ContentField.prefixExpr = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((prefix | prefixExpr), URIExpr?)
        /// </para>
        /// </summary>
        public virtual exprWrapper URIExpr {
            get {
                return this.ContentField.URIExpr;
            }
            set {
                this.ContentField.URIExpr = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static computedNamespaceConstructor Load(string xmlFile) {
            return XTypedServices.Load<computedNamespaceConstructor, computedNamespaceConstructorType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static computedNamespaceConstructor Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<computedNamespaceConstructor, computedNamespaceConstructorType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static computedNamespaceConstructor Parse(string xml) {
            return XTypedServices.Parse<computedNamespaceConstructor, computedNamespaceConstructorType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new computedNamespaceConstructor(((computedNamespaceConstructorType)(this.Content.Clone())));
        }
        
        private void SetInnerType(computedNamespaceConstructorType ContentField) {
            this.ContentField = ((computedNamespaceConstructorType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class computedPIConstructor : global::W3C.XQueryX.expr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private computedPIConstructorType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("computedPIConstructor", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator computedPIConstructor(XElement xe) { return XTypedServices.ToXTypedElement<computedPIConstructor, computedPIConstructorType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public computedPIConstructor() : 
                base(true) {
            SetInnerType(new computedPIConstructorType());
        }
        
        public computedPIConstructor(computedPIConstructorType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual computedPIConstructorType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((piTarget | piTargetExpr), piValueExpr?)
        /// </para>
        /// </summary>
        public virtual string piTarget {
            get {
                return this.ContentField.piTarget;
            }
            set {
                this.ContentField.piTarget = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((piTarget | piTargetExpr), piValueExpr?)
        /// </para>
        /// </summary>
        public virtual exprWrapper piTargetExpr {
            get {
                return this.ContentField.piTargetExpr;
            }
            set {
                this.ContentField.piTargetExpr = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((piTarget | piTargetExpr), piValueExpr?)
        /// </para>
        /// </summary>
        public virtual exprWrapper piValueExpr {
            get {
                return this.ContentField.piValueExpr;
            }
            set {
                this.ContentField.piValueExpr = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static computedPIConstructor Load(string xmlFile) {
            return XTypedServices.Load<computedPIConstructor, computedPIConstructorType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static computedPIConstructor Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<computedPIConstructor, computedPIConstructorType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static computedPIConstructor Parse(string xml) {
            return XTypedServices.Parse<computedPIConstructor, computedPIConstructorType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new computedPIConstructor(((computedPIConstructorType)(this.Content.Clone())));
        }
        
        private void SetInnerType(computedPIConstructorType ContentField) {
            this.ContentField = ((computedPIConstructorType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class unorderedExpr : global::W3C.XQueryX.expr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private unorderedExprType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("unorderedExpr", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator unorderedExpr(XElement xe) { return XTypedServices.ToXTypedElement<unorderedExpr, unorderedExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public unorderedExpr() : 
                base(true) {
            SetInnerType(new unorderedExprType());
        }
        
        public unorderedExpr(unorderedExprType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual unorderedExprType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (argExpr?)
        /// </para>
        /// </summary>
        public virtual exprWrapper argExpr {
            get {
                return this.ContentField.argExpr;
            }
            set {
                this.ContentField.argExpr = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static unorderedExpr Load(string xmlFile) {
            return XTypedServices.Load<unorderedExpr, unorderedExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static unorderedExpr Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<unorderedExpr, unorderedExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static unorderedExpr Parse(string xml) {
            return XTypedServices.Parse<unorderedExpr, unorderedExprType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new unorderedExpr(((unorderedExprType)(this.Content.Clone())));
        }
        
        private void SetInnerType(unorderedExprType ContentField) {
            this.ContentField = ((unorderedExprType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class orderedExpr : global::W3C.XQueryX.expr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private orderedExprType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("orderedExpr", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator orderedExpr(XElement xe) { return XTypedServices.ToXTypedElement<orderedExpr, orderedExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public orderedExpr() : 
                base(true) {
            SetInnerType(new orderedExprType());
        }
        
        public orderedExpr(orderedExprType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual orderedExprType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (argExpr?)
        /// </para>
        /// </summary>
        public virtual exprWrapper argExpr {
            get {
                return this.ContentField.argExpr;
            }
            set {
                this.ContentField.argExpr = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static orderedExpr Load(string xmlFile) {
            return XTypedServices.Load<orderedExpr, orderedExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static orderedExpr Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<orderedExpr, orderedExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static orderedExpr Parse(string xml) {
            return XTypedServices.Parse<orderedExpr, orderedExprType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new orderedExpr(((orderedExprType)(this.Content.Clone())));
        }
        
        private void SetInnerType(orderedExprType ContentField) {
            this.ContentField = ((orderedExprType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class namedFunctionRef : global::W3C.XQueryX.expr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private namedFunctionRefType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("namedFunctionRef", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator namedFunctionRef(XElement xe) { return XTypedServices.ToXTypedElement<namedFunctionRef, namedFunctionRefType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public namedFunctionRef() : 
                base(true) {
            SetInnerType(new namedFunctionRefType());
        }
        
        public namedFunctionRef(namedFunctionRefType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual namedFunctionRefType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (functionName, integerConstantExpr)
        /// </para>
        /// </summary>
        public virtual EQName functionName {
            get {
                return this.ContentField.functionName;
            }
            set {
                this.ContentField.functionName = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (functionName, integerConstantExpr)
        /// </para>
        /// </summary>
        public virtual integerConstantExprType integerConstantExpr {
            get {
                return this.ContentField.integerConstantExpr;
            }
            set {
                this.ContentField.integerConstantExpr = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static namedFunctionRef Load(string xmlFile) {
            return XTypedServices.Load<namedFunctionRef, namedFunctionRefType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static namedFunctionRef Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<namedFunctionRef, namedFunctionRefType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static namedFunctionRef Parse(string xml) {
            return XTypedServices.Parse<namedFunctionRef, namedFunctionRefType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new namedFunctionRef(((namedFunctionRefType)(this.Content.Clone())));
        }
        
        private void SetInnerType(namedFunctionRefType ContentField) {
            this.ContentField = ((namedFunctionRefType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class inlineFunctionExpr : global::W3C.XQueryX.expr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private inlineFunctionExprType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("inlineFunctionExpr", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator inlineFunctionExpr(XElement xe) { return XTypedServices.ToXTypedElement<inlineFunctionExpr, inlineFunctionExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public inlineFunctionExpr() : 
                base(true) {
            SetInnerType(new inlineFunctionExprType());
        }
        
        public inlineFunctionExpr(inlineFunctionExprType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual inlineFunctionExprType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (annotation*, paramList, typeDeclaration?, functionBody)
        /// </para>
        /// </summary>
        public virtual IList<annotation> annotation {
            get {
                return this.ContentField.annotation;
            }
            set {
                this.ContentField.annotation = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (annotation*, paramList, typeDeclaration?, functionBody)
        /// </para>
        /// </summary>
        public virtual paramList paramList {
            get {
                return this.ContentField.paramList;
            }
            set {
                this.ContentField.paramList = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (annotation*, paramList, typeDeclaration?, functionBody)
        /// </para>
        /// </summary>
        public virtual typeDeclaration typeDeclaration {
            get {
                return this.ContentField.typeDeclaration;
            }
            set {
                this.ContentField.typeDeclaration = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (annotation*, paramList, typeDeclaration?, functionBody)
        /// </para>
        /// </summary>
        public virtual exprWrapper functionBody {
            get {
                return this.ContentField.functionBody;
            }
            set {
                this.ContentField.functionBody = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static inlineFunctionExpr Load(string xmlFile) {
            return XTypedServices.Load<inlineFunctionExpr, inlineFunctionExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static inlineFunctionExpr Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<inlineFunctionExpr, inlineFunctionExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static inlineFunctionExpr Parse(string xml) {
            return XTypedServices.Parse<inlineFunctionExpr, inlineFunctionExprType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new inlineFunctionExpr(((inlineFunctionExprType)(this.Content.Clone())));
        }
        
        private void SetInnerType(inlineFunctionExprType ContentField) {
            this.ContentField = ((inlineFunctionExprType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class dynamicFunctionInvocationExpr : global::W3C.XQueryX.expr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private dynamicFunctionInvocationExprType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("dynamicFunctionInvocationExpr", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator dynamicFunctionInvocationExpr(XElement xe) { return XTypedServices.ToXTypedElement<dynamicFunctionInvocationExpr, dynamicFunctionInvocationExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public dynamicFunctionInvocationExpr() : 
                base(true) {
            SetInnerType(new dynamicFunctionInvocationExprType());
        }
        
        public dynamicFunctionInvocationExpr(dynamicFunctionInvocationExprType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual dynamicFunctionInvocationExprType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (functionItem, predicates?, arguments?)
        /// </para>
        /// </summary>
        public virtual W3C.XQueryX.dynamicFunctionInvocationExprType.functionItemLocalType functionItem {
            get {
                return this.ContentField.functionItem;
            }
            set {
                this.ContentField.functionItem = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (functionItem, predicates?, arguments?)
        /// </para>
        /// </summary>
        public virtual exprList predicates {
            get {
                return this.ContentField.predicates;
            }
            set {
                this.ContentField.predicates = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (functionItem, predicates?, arguments?)
        /// </para>
        /// </summary>
        public virtual exprOrPlaceholderList arguments {
            get {
                return this.ContentField.arguments;
            }
            set {
                this.ContentField.arguments = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static dynamicFunctionInvocationExpr Load(string xmlFile) {
            return XTypedServices.Load<dynamicFunctionInvocationExpr, dynamicFunctionInvocationExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static dynamicFunctionInvocationExpr Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<dynamicFunctionInvocationExpr, dynamicFunctionInvocationExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static dynamicFunctionInvocationExpr Parse(string xml) {
            return XTypedServices.Parse<dynamicFunctionInvocationExpr, dynamicFunctionInvocationExprType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new dynamicFunctionInvocationExpr(((dynamicFunctionInvocationExprType)(this.Content.Clone())));
        }
        
        private void SetInnerType(dynamicFunctionInvocationExprType ContentField) {
            this.ContentField = ((dynamicFunctionInvocationExprType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class mapConstructor : global::W3C.XQueryX.expr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private mapConstructorType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("mapConstructor", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator mapConstructor(XElement xe) { return XTypedServices.ToXTypedElement<mapConstructor, mapConstructorType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public mapConstructor() : 
                base(true) {
            SetInnerType(new mapConstructorType());
        }
        
        public mapConstructor(mapConstructorType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual mapConstructorType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (mapConstructorEntry*)
        /// </para>
        /// </summary>
        public virtual IList<mapConstructorEntry> mapConstructorEntry {
            get {
                return this.ContentField.mapConstructorEntry;
            }
            set {
                this.ContentField.mapConstructorEntry = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static mapConstructor Load(string xmlFile) {
            return XTypedServices.Load<mapConstructor, mapConstructorType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static mapConstructor Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<mapConstructor, mapConstructorType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static mapConstructor Parse(string xml) {
            return XTypedServices.Parse<mapConstructor, mapConstructorType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new mapConstructor(((mapConstructorType)(this.Content.Clone())));
        }
        
        private void SetInnerType(mapConstructorType ContentField) {
            this.ContentField = ((mapConstructorType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class mapConstructorEntry : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private mapConstructorEntryType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("mapConstructorEntry", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator mapConstructorEntry(XElement xe) { return XTypedServices.ToXTypedElement<mapConstructorEntry, mapConstructorEntryType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public mapConstructorEntry() {
            SetInnerType(new mapConstructorEntryType());
        }
        
        public mapConstructorEntry(mapConstructorEntryType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual mapConstructorEntryType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (mapKeyExpr, mapValueExpr)
        /// </para>
        /// </summary>
        public virtual exprWrapper mapKeyExpr {
            get {
                return this.ContentField.mapKeyExpr;
            }
            set {
                this.ContentField.mapKeyExpr = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (mapKeyExpr, mapValueExpr)
        /// </para>
        /// </summary>
        public virtual exprWrapper mapValueExpr {
            get {
                return this.ContentField.mapValueExpr;
            }
            set {
                this.ContentField.mapValueExpr = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static mapConstructorEntry Load(string xmlFile) {
            return XTypedServices.Load<mapConstructorEntry, mapConstructorEntryType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static mapConstructorEntry Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<mapConstructorEntry, mapConstructorEntryType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static mapConstructorEntry Parse(string xml) {
            return XTypedServices.Parse<mapConstructorEntry, mapConstructorEntryType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new mapConstructorEntry(((mapConstructorEntryType)(this.Content.Clone())));
        }
        
        private void SetInnerType(mapConstructorEntryType ContentField) {
            this.ContentField = ((mapConstructorEntryType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class arrayConstructor : global::W3C.XQueryX.expr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private arrayConstructorType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("arrayConstructor", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator arrayConstructor(XElement xe) { return XTypedServices.ToXTypedElement<arrayConstructor, arrayConstructorType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public arrayConstructor() : 
                base(true) {
            SetInnerType(new arrayConstructorType());
        }
        
        public arrayConstructor(arrayConstructorType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual arrayConstructorType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (squareArray | curlyArray)
        /// </para>
        /// </summary>
        public virtual squareArray squareArray {
            get {
                return this.ContentField.squareArray;
            }
            set {
                this.ContentField.squareArray = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (squareArray | curlyArray)
        /// </para>
        /// </summary>
        public virtual curlyArray curlyArray {
            get {
                return this.ContentField.curlyArray;
            }
            set {
                this.ContentField.curlyArray = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static arrayConstructor Load(string xmlFile) {
            return XTypedServices.Load<arrayConstructor, arrayConstructorType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static arrayConstructor Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<arrayConstructor, arrayConstructorType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static arrayConstructor Parse(string xml) {
            return XTypedServices.Parse<arrayConstructor, arrayConstructorType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new arrayConstructor(((arrayConstructorType)(this.Content.Clone())));
        }
        
        private void SetInnerType(arrayConstructorType ContentField) {
            this.ContentField = ((arrayConstructorType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class squareArray : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private squareArrayType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("squareArray", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator squareArray(XElement xe) { return XTypedServices.ToXTypedElement<squareArray, squareArrayType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public squareArray() {
            SetInnerType(new squareArrayType());
        }
        
        public squareArray(squareArrayType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual squareArrayType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (arrayElem)*
        /// </para>
        /// </summary>
        public virtual IList<exprWrapper> arrayElem {
            get {
                return this.ContentField.arrayElem;
            }
            set {
                this.ContentField.arrayElem = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static squareArray Load(string xmlFile) {
            return XTypedServices.Load<squareArray, squareArrayType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static squareArray Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<squareArray, squareArrayType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static squareArray Parse(string xml) {
            return XTypedServices.Parse<squareArray, squareArrayType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new squareArray(((squareArrayType)(this.Content.Clone())));
        }
        
        private void SetInnerType(squareArrayType ContentField) {
            this.ContentField = ((squareArrayType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class curlyArray : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private curlyArrayType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("curlyArray", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator curlyArray(XElement xe) { return XTypedServices.ToXTypedElement<curlyArray, curlyArrayType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public curlyArray() {
            SetInnerType(new curlyArrayType());
        }
        
        public curlyArray(curlyArrayType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual curlyArrayType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (arrayElem)?
        /// </para>
        /// </summary>
        public virtual exprWrapper arrayElem {
            get {
                return this.ContentField.arrayElem;
            }
            set {
                this.ContentField.arrayElem = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static curlyArray Load(string xmlFile) {
            return XTypedServices.Load<curlyArray, curlyArrayType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static curlyArray Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<curlyArray, curlyArrayType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static curlyArray Parse(string xml) {
            return XTypedServices.Parse<curlyArray, curlyArrayType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new curlyArray(((curlyArrayType)(this.Content.Clone())));
        }
        
        private void SetInnerType(curlyArrayType ContentField) {
            this.ContentField = ((curlyArrayType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class stringConstructor : global::W3C.XQueryX.expr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private stringConstructorType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("stringConstructor", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator stringConstructor(XElement xe) { return XTypedServices.ToXTypedElement<stringConstructor, stringConstructorType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public stringConstructor() : 
                base(true) {
            SetInnerType(new stringConstructorType());
        }
        
        public stringConstructor(stringConstructorType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual stringConstructorType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((stringConstructorChars | stringConstructorInterpolation)*)
        /// </para>
        /// </summary>
        public virtual IList<string> stringConstructorChars {
            get {
                return this.ContentField.stringConstructorChars;
            }
            set {
                this.ContentField.stringConstructorChars = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((stringConstructorChars | stringConstructorInterpolation)*)
        /// </para>
        /// </summary>
        public virtual IList<exprWrapperOptional> stringConstructorInterpolation {
            get {
                return this.ContentField.stringConstructorInterpolation;
            }
            set {
                this.ContentField.stringConstructorInterpolation = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static stringConstructor Load(string xmlFile) {
            return XTypedServices.Load<stringConstructor, stringConstructorType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static stringConstructor Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<stringConstructor, stringConstructorType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static stringConstructor Parse(string xml) {
            return XTypedServices.Parse<stringConstructor, stringConstructorType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new stringConstructor(((stringConstructorType)(this.Content.Clone())));
        }
        
        private void SetInnerType(stringConstructorType ContentField) {
            this.ContentField = ((stringConstructorType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Wildcard : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private WildcardType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Wildcard", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator Wildcard(XElement xe) { return XTypedServices.ToXTypedElement<Wildcard, WildcardType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Wildcard() {
            SetInnerType(new WildcardType());
        }
        
        public Wildcard(WildcardType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual WildcardType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((star, NCName)|(NCName, star)|(uri, star))?
        /// </para>
        /// </summary>
        public virtual IList<emptyContent> star {
            get {
                return this.ContentField.star;
            }
            set {
                this.ContentField.star = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((star, NCName)|(NCName, star)|(uri, star))?
        /// </para>
        /// </summary>
        public virtual IList<NCName> NCName {
            get {
                return this.ContentField.NCName;
            }
            set {
                this.ContentField.NCName = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((star, NCName)|(NCName, star)|(uri, star))?
        /// </para>
        /// </summary>
        public virtual string uri {
            get {
                return this.ContentField.uri;
            }
            set {
                this.ContentField.uri = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Wildcard Load(string xmlFile) {
            return XTypedServices.Load<Wildcard, WildcardType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Wildcard Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Wildcard, WildcardType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Wildcard Parse(string xml) {
            return XTypedServices.Parse<Wildcard, WildcardType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Wildcard(((WildcardType)(this.Content.Clone())));
        }
        
        private void SetInnerType(WildcardType ContentField) {
            this.ContentField = ((WildcardType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class schemaAttributeTest : global::W3C.XQueryX.kindTest, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private EQName ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("schemaAttributeTest", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator schemaAttributeTest(XElement xe) { return XTypedServices.ToXTypedElement<schemaAttributeTest, EQName>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public schemaAttributeTest() {
            SetInnerType(new EQName());
        }
        
        public schemaAttributeTest(EQName content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual EQName Content {
            get {
                return ContentField;
            }
        }
        
        public virtual string TypedValue {
            get {
                return this.ContentField.TypedValue;
            }
            set {
                this.ContentField.TypedValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string prefix {
            get {
                return this.ContentField.prefix;
            }
            set {
                this.ContentField.prefix = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string URI {
            get {
                return this.ContentField.URI;
            }
            set {
                this.ContentField.URI = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static schemaAttributeTest Load(string xmlFile) {
            return XTypedServices.Load<schemaAttributeTest, EQName>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static schemaAttributeTest Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<schemaAttributeTest, EQName>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static schemaAttributeTest Parse(string xml) {
            return XTypedServices.Parse<schemaAttributeTest, EQName>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new schemaAttributeTest(((EQName)(this.Content.Clone())));
        }
        
        private void SetInnerType(EQName ContentField) {
            this.ContentField = ((EQName)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class attributeTest : global::W3C.XQueryX.kindTest, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private attributeTestType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("attributeTest", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator attributeTest(XElement xe) { return XTypedServices.ToXTypedElement<attributeTest, attributeTestType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public attributeTest() {
            SetInnerType(new attributeTestType());
        }
        
        public attributeTest(attributeTestType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual attributeTestType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (attributeName, typeName?)?
        /// </para>
        /// </summary>
        public virtual simpleWildcard attributeName {
            get {
                return this.ContentField.attributeName;
            }
            set {
                this.ContentField.attributeName = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (attributeName, typeName?)?
        /// </para>
        /// </summary>
        public virtual EQName typeName {
            get {
                return this.ContentField.typeName;
            }
            set {
                this.ContentField.typeName = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static attributeTest Load(string xmlFile) {
            return XTypedServices.Load<attributeTest, attributeTestType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static attributeTest Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<attributeTest, attributeTestType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static attributeTest Parse(string xml) {
            return XTypedServices.Parse<attributeTest, attributeTestType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new attributeTest(((attributeTestType)(this.Content.Clone())));
        }
        
        private void SetInnerType(attributeTestType ContentField) {
            this.ContentField = ((attributeTestType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class schemaElementTest : global::W3C.XQueryX.anyElementTest, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private EQName ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("schemaElementTest", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator schemaElementTest(XElement xe) { return XTypedServices.ToXTypedElement<schemaElementTest, EQName>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public schemaElementTest() {
            SetInnerType(new EQName());
        }
        
        public schemaElementTest(EQName content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual EQName Content {
            get {
                return ContentField;
            }
        }
        
        public virtual string TypedValue {
            get {
                return this.ContentField.TypedValue;
            }
            set {
                this.ContentField.TypedValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string prefix {
            get {
                return this.ContentField.prefix;
            }
            set {
                this.ContentField.prefix = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string URI {
            get {
                return this.ContentField.URI;
            }
            set {
                this.ContentField.URI = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static schemaElementTest Load(string xmlFile) {
            return XTypedServices.Load<schemaElementTest, EQName>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static schemaElementTest Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<schemaElementTest, EQName>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static schemaElementTest Parse(string xml) {
            return XTypedServices.Parse<schemaElementTest, EQName>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new schemaElementTest(((EQName)(this.Content.Clone())));
        }
        
        private void SetInnerType(EQName ContentField) {
            this.ContentField = ((EQName)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class elementTest : global::W3C.XQueryX.anyElementTest, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private elementTestType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("elementTest", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator elementTest(XElement xe) { return XTypedServices.ToXTypedElement<elementTest, elementTestType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public elementTest() {
            SetInnerType(new elementTestType());
        }
        
        public elementTest(elementTestType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual elementTestType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (elementName, (typeName, nillable?)?)?
        /// </para>
        /// </summary>
        public virtual simpleWildcard elementName {
            get {
                return this.ContentField.elementName;
            }
            set {
                this.ContentField.elementName = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (elementName, (typeName, nillable?)?)?
        /// </para>
        /// </summary>
        public virtual EQName typeName {
            get {
                return this.ContentField.typeName;
            }
            set {
                this.ContentField.typeName = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (elementName, (typeName, nillable?)?)?
        /// </para>
        /// </summary>
        public virtual emptyContent nillable {
            get {
                return this.ContentField.nillable;
            }
            set {
                this.ContentField.nillable = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static elementTest Load(string xmlFile) {
            return XTypedServices.Load<elementTest, elementTestType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static elementTest Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<elementTest, elementTestType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static elementTest Parse(string xml) {
            return XTypedServices.Parse<elementTest, elementTestType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new elementTest(((elementTestType)(this.Content.Clone())));
        }
        
        private void SetInnerType(elementTestType ContentField) {
            this.ContentField = ((elementTestType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class documentTest : global::W3C.XQueryX.kindTest, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private documentTestType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("documentTest", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator documentTest(XElement xe) { return XTypedServices.ToXTypedElement<documentTest, documentTestType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public documentTest() {
            SetInnerType(new documentTestType());
        }
        
        public documentTest(documentTestType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual documentTestType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Substitution members: anyElementTest, schemaElementTest, elementTest
        /// </para>
        /// <para>
        /// Regular expression: (anyElementTest?)
        /// </para>
        /// </summary>
        public virtual anyElementTest anyElementTest {
            get {
                return this.ContentField.anyElementTest;
            }
            set {
                this.ContentField.anyElementTest = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static documentTest Load(string xmlFile) {
            return XTypedServices.Load<documentTest, documentTestType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static documentTest Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<documentTest, documentTestType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static documentTest Parse(string xml) {
            return XTypedServices.Parse<documentTest, documentTestType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new documentTest(((documentTestType)(this.Content.Clone())));
        }
        
        private void SetInnerType(documentTestType ContentField) {
            this.ContentField = ((documentTestType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class piTest : global::W3C.XQueryX.kindTest, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private piTestType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("piTest", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator piTest(XElement xe) { return XTypedServices.ToXTypedElement<piTest, piTestType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public piTest() {
            SetInnerType(new piTestType());
        }
        
        public piTest(piTestType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual piTestType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (piTarget?)
        /// </para>
        /// </summary>
        public virtual string piTarget {
            get {
                return this.ContentField.piTarget;
            }
            set {
                this.ContentField.piTarget = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static piTest Load(string xmlFile) {
            return XTypedServices.Load<piTest, piTestType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static piTest Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<piTest, piTestType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static piTest Parse(string xml) {
            return XTypedServices.Parse<piTest, piTestType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new piTest(((piTestType)(this.Content.Clone())));
        }
        
        private void SetInnerType(piTestType ContentField) {
            this.ContentField = ((piTestType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class nameTest : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private EQName ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("nameTest", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator nameTest(XElement xe) { return XTypedServices.ToXTypedElement<nameTest, EQName>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public nameTest() {
            SetInnerType(new EQName());
        }
        
        public nameTest(EQName content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual EQName Content {
            get {
                return ContentField;
            }
        }
        
        public virtual string TypedValue {
            get {
                return this.ContentField.TypedValue;
            }
            set {
                this.ContentField.TypedValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string prefix {
            get {
                return this.ContentField.prefix;
            }
            set {
                this.ContentField.prefix = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string URI {
            get {
                return this.ContentField.URI;
            }
            set {
                this.ContentField.URI = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static nameTest Load(string xmlFile) {
            return XTypedServices.Load<nameTest, EQName>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static nameTest Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<nameTest, EQName>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static nameTest Parse(string xml) {
            return XTypedServices.Parse<nameTest, EQName>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new nameTest(((EQName)(this.Content.Clone())));
        }
        
        private void SetInnerType(EQName ContentField) {
            this.ContentField = ((EQName)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class textTest : global::W3C.XQueryX.kindTest, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private emptyItemTypeContent ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("textTest", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator textTest(XElement xe) { return XTypedServices.ToXTypedElement<textTest, emptyItemTypeContent>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public textTest() {
            SetInnerType(new emptyItemTypeContent());
        }
        
        public textTest(emptyItemTypeContent content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual emptyItemTypeContent Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static textTest Load(string xmlFile) {
            return XTypedServices.Load<textTest, emptyItemTypeContent>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static textTest Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<textTest, emptyItemTypeContent>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static textTest Parse(string xml) {
            return XTypedServices.Parse<textTest, emptyItemTypeContent>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new textTest(((emptyItemTypeContent)(this.Content.Clone())));
        }
        
        private void SetInnerType(emptyItemTypeContent ContentField) {
            this.ContentField = ((emptyItemTypeContent)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class commentTest : global::W3C.XQueryX.kindTest, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private emptyItemTypeContent ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("commentTest", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator commentTest(XElement xe) { return XTypedServices.ToXTypedElement<commentTest, emptyItemTypeContent>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public commentTest() {
            SetInnerType(new emptyItemTypeContent());
        }
        
        public commentTest(emptyItemTypeContent content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual emptyItemTypeContent Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static commentTest Load(string xmlFile) {
            return XTypedServices.Load<commentTest, emptyItemTypeContent>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static commentTest Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<commentTest, emptyItemTypeContent>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static commentTest Parse(string xml) {
            return XTypedServices.Parse<commentTest, emptyItemTypeContent>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new commentTest(((emptyItemTypeContent)(this.Content.Clone())));
        }
        
        private void SetInnerType(emptyItemTypeContent ContentField) {
            this.ContentField = ((emptyItemTypeContent)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class namespaceTest : global::W3C.XQueryX.kindTest, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private emptyItemTypeContent ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("namespaceTest", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator namespaceTest(XElement xe) { return XTypedServices.ToXTypedElement<namespaceTest, emptyItemTypeContent>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public namespaceTest() {
            SetInnerType(new emptyItemTypeContent());
        }
        
        public namespaceTest(emptyItemTypeContent content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual emptyItemTypeContent Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static namespaceTest Load(string xmlFile) {
            return XTypedServices.Load<namespaceTest, emptyItemTypeContent>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static namespaceTest Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<namespaceTest, emptyItemTypeContent>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static namespaceTest Parse(string xml) {
            return XTypedServices.Parse<namespaceTest, emptyItemTypeContent>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new namespaceTest(((emptyItemTypeContent)(this.Content.Clone())));
        }
        
        private void SetInnerType(emptyItemTypeContent ContentField) {
            this.ContentField = ((emptyItemTypeContent)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class anyKindTest : global::W3C.XQueryX.kindTest, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private emptyItemTypeContent ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("anyKindTest", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator anyKindTest(XElement xe) { return XTypedServices.ToXTypedElement<anyKindTest, emptyItemTypeContent>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public anyKindTest() {
            SetInnerType(new emptyItemTypeContent());
        }
        
        public anyKindTest(emptyItemTypeContent content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual emptyItemTypeContent Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static anyKindTest Load(string xmlFile) {
            return XTypedServices.Load<anyKindTest, emptyItemTypeContent>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static anyKindTest Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<anyKindTest, emptyItemTypeContent>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static anyKindTest Parse(string xml) {
            return XTypedServices.Parse<anyKindTest, emptyItemTypeContent>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new anyKindTest(((emptyItemTypeContent)(this.Content.Clone())));
        }
        
        private void SetInnerType(emptyItemTypeContent ContentField) {
            this.ContentField = ((emptyItemTypeContent)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class anyFunctionTest : global::W3C.XQueryX.itemType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private anyFunctionTestType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("anyFunctionTest", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator anyFunctionTest(XElement xe) { return XTypedServices.ToXTypedElement<anyFunctionTest, anyFunctionTestType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public anyFunctionTest() {
            SetInnerType(new anyFunctionTestType());
        }
        
        public anyFunctionTest(anyFunctionTestType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual anyFunctionTestType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (annotation*)
        /// </para>
        /// </summary>
        public virtual IList<annotation> annotation {
            get {
                return this.ContentField.annotation;
            }
            set {
                this.ContentField.annotation = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static anyFunctionTest Load(string xmlFile) {
            return XTypedServices.Load<anyFunctionTest, anyFunctionTestType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static anyFunctionTest Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<anyFunctionTest, anyFunctionTestType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static anyFunctionTest Parse(string xml) {
            return XTypedServices.Parse<anyFunctionTest, anyFunctionTestType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new anyFunctionTest(((anyFunctionTestType)(this.Content.Clone())));
        }
        
        private void SetInnerType(anyFunctionTestType ContentField) {
            this.ContentField = ((anyFunctionTestType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class typedFunctionTest : global::W3C.XQueryX.itemType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private typedFunctionTestType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("typedFunctionTest", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator typedFunctionTest(XElement xe) { return XTypedServices.ToXTypedElement<typedFunctionTest, typedFunctionTestType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public typedFunctionTest() {
            SetInnerType(new typedFunctionTestType());
        }
        
        public typedFunctionTest(typedFunctionTestType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual typedFunctionTestType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (annotation*, paramTypeList?, sequenceType)
        /// </para>
        /// </summary>
        public virtual IList<annotation> annotation {
            get {
                return this.ContentField.annotation;
            }
            set {
                this.ContentField.annotation = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (annotation*, paramTypeList?, sequenceType)
        /// </para>
        /// </summary>
        public virtual paramTypeList paramTypeList {
            get {
                return this.ContentField.paramTypeList;
            }
            set {
                this.ContentField.paramTypeList = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (annotation*, paramTypeList?, sequenceType)
        /// </para>
        /// </summary>
        public virtual sequenceType sequenceType {
            get {
                return this.ContentField.sequenceType;
            }
            set {
                this.ContentField.sequenceType = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static typedFunctionTest Load(string xmlFile) {
            return XTypedServices.Load<typedFunctionTest, typedFunctionTestType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static typedFunctionTest Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<typedFunctionTest, typedFunctionTestType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static typedFunctionTest Parse(string xml) {
            return XTypedServices.Parse<typedFunctionTest, typedFunctionTestType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new typedFunctionTest(((typedFunctionTestType)(this.Content.Clone())));
        }
        
        private void SetInnerType(typedFunctionTestType ContentField) {
            this.ContentField = ((typedFunctionTestType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class paramTypeList : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private paramTypeListType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("paramTypeList", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator paramTypeList(XElement xe) { return XTypedServices.ToXTypedElement<paramTypeList, paramTypeListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public paramTypeList() {
            SetInnerType(new paramTypeListType());
        }
        
        public paramTypeList(paramTypeListType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual paramTypeListType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (sequenceType*)
        /// </para>
        /// </summary>
        public virtual IList<sequenceType> sequenceType {
            get {
                return this.ContentField.sequenceType;
            }
            set {
                this.ContentField.sequenceType = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static paramTypeList Load(string xmlFile) {
            return XTypedServices.Load<paramTypeList, paramTypeListType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static paramTypeList Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<paramTypeList, paramTypeListType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static paramTypeList Parse(string xml) {
            return XTypedServices.Parse<paramTypeList, paramTypeListType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new paramTypeList(((paramTypeListType)(this.Content.Clone())));
        }
        
        private void SetInnerType(paramTypeListType ContentField) {
            this.ContentField = ((paramTypeListType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class parenthesizedItemType : global::W3C.XQueryX.itemType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private parenthesizedItemTypeType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("parenthesizedItemType", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator parenthesizedItemType(XElement xe) { return XTypedServices.ToXTypedElement<parenthesizedItemType, parenthesizedItemTypeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public parenthesizedItemType() {
            SetInnerType(new parenthesizedItemTypeType());
        }
        
        public parenthesizedItemType(parenthesizedItemTypeType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual parenthesizedItemTypeType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Substitution members: itemType, atomicType, contextItemType, anyItemType, schemaAttributeTest, attributeTest, anyElementTest, schemaElementTest, elementTest, documentTest, piTest, kindTest, textTest, commentTest, namespaceTest, anyKindTest, anyFunctionTest, typedFunctionTest, parenthesizedItemType, anyMapTest, typedMapTest, anyArrayTest, typedArrayTest
        /// </para>
        /// <para>
        /// Regular expression: (itemType)
        /// </para>
        /// </summary>
        public virtual itemType itemType {
            get {
                return this.ContentField.itemType;
            }
            set {
                this.ContentField.itemType = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static parenthesizedItemType Load(string xmlFile) {
            return XTypedServices.Load<parenthesizedItemType, parenthesizedItemTypeType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static parenthesizedItemType Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<parenthesizedItemType, parenthesizedItemTypeType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static parenthesizedItemType Parse(string xml) {
            return XTypedServices.Parse<parenthesizedItemType, parenthesizedItemTypeType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new parenthesizedItemType(((parenthesizedItemTypeType)(this.Content.Clone())));
        }
        
        private void SetInnerType(parenthesizedItemTypeType ContentField) {
            this.ContentField = ((parenthesizedItemTypeType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class anyMapTest : global::W3C.XQueryX.itemType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private emptyItemTypeContent ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("anyMapTest", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator anyMapTest(XElement xe) { return XTypedServices.ToXTypedElement<anyMapTest, emptyItemTypeContent>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public anyMapTest() {
            SetInnerType(new emptyItemTypeContent());
        }
        
        public anyMapTest(emptyItemTypeContent content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual emptyItemTypeContent Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static anyMapTest Load(string xmlFile) {
            return XTypedServices.Load<anyMapTest, emptyItemTypeContent>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static anyMapTest Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<anyMapTest, emptyItemTypeContent>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static anyMapTest Parse(string xml) {
            return XTypedServices.Parse<anyMapTest, emptyItemTypeContent>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new anyMapTest(((emptyItemTypeContent)(this.Content.Clone())));
        }
        
        private void SetInnerType(emptyItemTypeContent ContentField) {
            this.ContentField = ((emptyItemTypeContent)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class typedMapTest : global::W3C.XQueryX.itemType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private typedMapTestType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("typedMapTest", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator typedMapTest(XElement xe) { return XTypedServices.ToXTypedElement<typedMapTest, typedMapTestType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public typedMapTest() {
            SetInnerType(new typedMapTestType());
        }
        
        public typedMapTest(typedMapTestType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual typedMapTestType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (atomicType, sequenceType)
        /// </para>
        /// </summary>
        public virtual atomicType atomicType {
            get {
                return this.ContentField.atomicType;
            }
            set {
                this.ContentField.atomicType = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (atomicType, sequenceType)
        /// </para>
        /// </summary>
        public virtual sequenceType sequenceType {
            get {
                return this.ContentField.sequenceType;
            }
            set {
                this.ContentField.sequenceType = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static typedMapTest Load(string xmlFile) {
            return XTypedServices.Load<typedMapTest, typedMapTestType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static typedMapTest Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<typedMapTest, typedMapTestType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static typedMapTest Parse(string xml) {
            return XTypedServices.Parse<typedMapTest, typedMapTestType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new typedMapTest(((typedMapTestType)(this.Content.Clone())));
        }
        
        private void SetInnerType(typedMapTestType ContentField) {
            this.ContentField = ((typedMapTestType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class anyArrayTest : global::W3C.XQueryX.itemType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private emptyItemTypeContent ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("anyArrayTest", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator anyArrayTest(XElement xe) { return XTypedServices.ToXTypedElement<anyArrayTest, emptyItemTypeContent>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public anyArrayTest() {
            SetInnerType(new emptyItemTypeContent());
        }
        
        public anyArrayTest(emptyItemTypeContent content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual emptyItemTypeContent Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static anyArrayTest Load(string xmlFile) {
            return XTypedServices.Load<anyArrayTest, emptyItemTypeContent>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static anyArrayTest Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<anyArrayTest, emptyItemTypeContent>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static anyArrayTest Parse(string xml) {
            return XTypedServices.Parse<anyArrayTest, emptyItemTypeContent>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new anyArrayTest(((emptyItemTypeContent)(this.Content.Clone())));
        }
        
        private void SetInnerType(emptyItemTypeContent ContentField) {
            this.ContentField = ((emptyItemTypeContent)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class typedArrayTest : global::W3C.XQueryX.itemType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private typedArrayTestType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("typedArrayTest", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator typedArrayTest(XElement xe) { return XTypedServices.ToXTypedElement<typedArrayTest, typedArrayTestType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public typedArrayTest() {
            SetInnerType(new typedArrayTestType());
        }
        
        public typedArrayTest(typedArrayTestType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual typedArrayTestType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (sequenceType)
        /// </para>
        /// </summary>
        public virtual sequenceType sequenceType {
            get {
                return this.ContentField.sequenceType;
            }
            set {
                this.ContentField.sequenceType = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static typedArrayTest Load(string xmlFile) {
            return XTypedServices.Load<typedArrayTest, typedArrayTestType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static typedArrayTest Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<typedArrayTest, typedArrayTestType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static typedArrayTest Parse(string xml) {
            return XTypedServices.Parse<typedArrayTest, typedArrayTestType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new typedArrayTest(((typedArrayTestType)(this.Content.Clone())));
        }
        
        private void SetInnerType(typedArrayTestType ContentField) {
            this.ContentField = ((typedArrayTestType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class lookup : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private lookupType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("lookup", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator lookup(XElement xe) { return XTypedServices.ToXTypedElement<lookup, lookupType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public lookup() {
            SetInnerType(new lookupType());
        }
        
        public lookup(lookupType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual lookupType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((NCName | expr | star))
        /// </para>
        /// </summary>
        public virtual NCName NCName {
            get {
                return this.ContentField.NCName;
            }
            set {
                this.ContentField.NCName = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: expr, constantExpr, integerConstantExpr, decimalConstantExpr, doubleConstantExpr, stringConstantExpr, varRef, contextItemExpr, extensionExpr, simpleMapExpr, functionCallExpr, constructorFunctionExpr, sequenceExpr, rangeSequenceExpr, operatorExpr, arithmeticOp, addOp, subtractOp, multiplyOp, divOp, idivOp, modOp, unaryMinusOp, unaryPlusOp, stringOp, stringConcatenateOp, comparisonOp, valueComparisonOp, eqOp, neOp, gtOp, geOp, ltOp, leOp, generalComparisonOp, equalOp, notEqualOp, lessThanOp, lessThanOrEqualOp, greaterThanOp, greaterThanOrEqualOp, nodeComparisonOp, isOp, orderComparisonOp, nodeBeforeOp, nodeAfterOp, logicalOp, andOp, orOp, setOp, unionOp, intersectOp, exceptOp, flworExpr, ifThenElseExpr, quantifiedExpr, switchExpr, typeswitchExpr, tryCatchExpr, instanceOfExpr, treatExpr, castableExpr, castExpr, arrowExpr, validateExpr, elementConstructor, computedElementConstructor, computedAttributeConstructor, computedDocumentConstructor, computedTextConstructor, computedCommentConstructor, computedNamespaceConstructor, computedPIConstructor, unorderedExpr, orderedExpr, namedFunctionRef, inlineFunctionExpr, dynamicFunctionInvocationExpr, mapConstructor, arrayConstructor, stringConstructor, unaryLookup, pathExpr
        /// </para>
        /// <para>
        /// Regular expression: ((NCName | expr | star))
        /// </para>
        /// </summary>
        public virtual expr expr {
            get {
                return this.ContentField.expr;
            }
            set {
                this.ContentField.expr = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((NCName | expr | star))
        /// </para>
        /// </summary>
        public virtual emptyContent star {
            get {
                return this.ContentField.star;
            }
            set {
                this.ContentField.star = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static lookup Load(string xmlFile) {
            return XTypedServices.Load<lookup, lookupType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static lookup Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<lookup, lookupType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static lookup Parse(string xml) {
            return XTypedServices.Parse<lookup, lookupType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new lookup(((lookupType)(this.Content.Clone())));
        }
        
        private void SetInnerType(lookupType ContentField) {
            this.ContentField = ((lookupType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class unaryLookup : global::W3C.XQueryX.expr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private lookupType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("unaryLookup", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator unaryLookup(XElement xe) { return XTypedServices.ToXTypedElement<unaryLookup, lookupType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public unaryLookup() : 
                base(true) {
            SetInnerType(new lookupType());
        }
        
        public unaryLookup(lookupType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual lookupType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((NCName | expr | star))
        /// </para>
        /// </summary>
        public virtual NCName NCName {
            get {
                return this.ContentField.NCName;
            }
            set {
                this.ContentField.NCName = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: expr, constantExpr, integerConstantExpr, decimalConstantExpr, doubleConstantExpr, stringConstantExpr, varRef, contextItemExpr, extensionExpr, simpleMapExpr, functionCallExpr, constructorFunctionExpr, sequenceExpr, rangeSequenceExpr, operatorExpr, arithmeticOp, addOp, subtractOp, multiplyOp, divOp, idivOp, modOp, unaryMinusOp, unaryPlusOp, stringOp, stringConcatenateOp, comparisonOp, valueComparisonOp, eqOp, neOp, gtOp, geOp, ltOp, leOp, generalComparisonOp, equalOp, notEqualOp, lessThanOp, lessThanOrEqualOp, greaterThanOp, greaterThanOrEqualOp, nodeComparisonOp, isOp, orderComparisonOp, nodeBeforeOp, nodeAfterOp, logicalOp, andOp, orOp, setOp, unionOp, intersectOp, exceptOp, flworExpr, ifThenElseExpr, quantifiedExpr, switchExpr, typeswitchExpr, tryCatchExpr, instanceOfExpr, treatExpr, castableExpr, castExpr, arrowExpr, validateExpr, elementConstructor, computedElementConstructor, computedAttributeConstructor, computedDocumentConstructor, computedTextConstructor, computedCommentConstructor, computedNamespaceConstructor, computedPIConstructor, unorderedExpr, orderedExpr, namedFunctionRef, inlineFunctionExpr, dynamicFunctionInvocationExpr, mapConstructor, arrayConstructor, stringConstructor, unaryLookup, pathExpr
        /// </para>
        /// <para>
        /// Regular expression: ((NCName | expr | star))
        /// </para>
        /// </summary>
        public virtual expr expr {
            get {
                return this.ContentField.expr;
            }
            set {
                this.ContentField.expr = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((NCName | expr | star))
        /// </para>
        /// </summary>
        public virtual emptyContent star {
            get {
                return this.ContentField.star;
            }
            set {
                this.ContentField.star = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static unaryLookup Load(string xmlFile) {
            return XTypedServices.Load<unaryLookup, lookupType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static unaryLookup Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<unaryLookup, lookupType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static unaryLookup Parse(string xml) {
            return XTypedServices.Parse<unaryLookup, lookupType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new unaryLookup(((lookupType)(this.Content.Clone())));
        }
        
        private void SetInnerType(lookupType ContentField) {
            this.ContentField = ((lookupType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class xpathAxis : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("xpathAxis", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator xpathAxis(XElement xe) { return XTypedServices.ToXTypedElement<xpathAxis>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public xpathAxis() {
        }
        
        public xpathAxis(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::W3C.XQueryX.xpathAxisType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static xpathAxis Load(string xmlFile) {
            return XTypedServices.Load<xpathAxis>(xmlFile);
        }
        
        public static xpathAxis Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<xpathAxis>(xmlFile);
        }
        
        public static xpathAxis Parse(string xml) {
            return XTypedServices.Parse<xpathAxis>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<xpathAxis>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class stepExpr : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private stepExprType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("stepExpr", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator stepExpr(XElement xe) { return XTypedServices.ToXTypedElement<stepExpr, stepExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public stepExpr() {
            SetInnerType(new stepExprType());
        }
        
        public stepExpr(stepExprType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual stepExprType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (((xpathAxis, (kindTest | nameTest | Wildcard), predicates?)|(filterExpr, (predicates? | (predicate | lookup)*))))
        /// </para>
        /// </summary>
        public virtual xpathAxis xpathAxis {
            get {
                return this.ContentField.xpathAxis;
            }
            set {
                this.ContentField.xpathAxis = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Substitution members: kindTest, schemaAttributeTest, attributeTest, anyElementTest, schemaElementTest, elementTest, documentTest, piTest, textTest, commentTest, namespaceTest, anyKindTest
        /// </para>
        /// <para>
        /// Regular expression: (((xpathAxis, (kindTest | nameTest | Wildcard), predicates?)|(filterExpr, (predicates? | (predicate | lookup)*))))
        /// </para>
        /// </summary>
        public virtual kindTest kindTest {
            get {
                return this.ContentField.kindTest;
            }
            set {
                this.ContentField.kindTest = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (((xpathAxis, (kindTest | nameTest | Wildcard), predicates?)|(filterExpr, (predicates? | (predicate | lookup)*))))
        /// </para>
        /// </summary>
        public virtual nameTest nameTest {
            get {
                return this.ContentField.nameTest;
            }
            set {
                this.ContentField.nameTest = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (((xpathAxis, (kindTest | nameTest | Wildcard), predicates?)|(filterExpr, (predicates? | (predicate | lookup)*))))
        /// </para>
        /// </summary>
        public virtual Wildcard Wildcard {
            get {
                return this.ContentField.Wildcard;
            }
            set {
                this.ContentField.Wildcard = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (((xpathAxis, (kindTest | nameTest | Wildcard), predicates?)|(filterExpr, (predicates? | (predicate | lookup)*))))
        /// </para>
        /// </summary>
        public virtual IList<exprList> predicates {
            get {
                return this.ContentField.predicates;
            }
            set {
                this.ContentField.predicates = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (((xpathAxis, (kindTest | nameTest | Wildcard), predicates?)|(filterExpr, (predicates? | (predicate | lookup)*))))
        /// </para>
        /// </summary>
        public virtual W3C.XQueryX.stepExprType.filterExprLocalType filterExpr {
            get {
                return this.ContentField.filterExpr;
            }
            set {
                this.ContentField.filterExpr = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (((xpathAxis, (kindTest | nameTest | Wildcard), predicates?)|(filterExpr, (predicates? | (predicate | lookup)*))))
        /// </para>
        /// </summary>
        public virtual IList<W3C.XQueryX.stepExprType.predicateLocalType> predicate {
            get {
                return this.ContentField.predicate;
            }
            set {
                this.ContentField.predicate = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (((xpathAxis, (kindTest | nameTest | Wildcard), predicates?)|(filterExpr, (predicates? | (predicate | lookup)*))))
        /// </para>
        /// </summary>
        public virtual IList<lookup> lookup {
            get {
                return this.ContentField.lookup;
            }
            set {
                this.ContentField.lookup = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static stepExpr Load(string xmlFile) {
            return XTypedServices.Load<stepExpr, stepExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static stepExpr Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<stepExpr, stepExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static stepExpr Parse(string xml) {
            return XTypedServices.Parse<stepExpr, stepExprType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new stepExpr(((stepExprType)(this.Content.Clone())));
        }
        
        private void SetInnerType(stepExprType ContentField) {
            this.ContentField = ((stepExprType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class pathExpr : global::W3C.XQueryX.expr, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private pathExprType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("pathExpr", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator pathExpr(XElement xe) { return XTypedServices.ToXTypedElement<pathExpr, pathExprType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public pathExpr() : 
                base(true) {
            SetInnerType(new pathExprType());
        }
        
        public pathExpr(pathExprType content) : 
                base(true) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public new virtual pathExprType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((rootExpr, stepExpr*)|stepExpr+)
        /// </para>
        /// </summary>
        public virtual emptyContent rootExpr {
            get {
                return this.ContentField.rootExpr;
            }
            set {
                this.ContentField.rootExpr = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((rootExpr, stepExpr*)|stepExpr+)
        /// </para>
        /// </summary>
        public virtual IList<stepExpr> stepExpr {
            get {
                return this.ContentField.stepExpr;
            }
            set {
                this.ContentField.stepExpr = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static pathExpr Load(string xmlFile) {
            return XTypedServices.Load<pathExpr, pathExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static pathExpr Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<pathExpr, pathExprType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static pathExpr Parse(string xml) {
            return XTypedServices.Parse<pathExpr, pathExprType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new pathExpr(((pathExprType)(this.Content.Clone())));
        }
        
        private void SetInnerType(pathExprType ContentField) {
            this.ContentField = ((pathExprType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
            base.SetSubstitutionMember(ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class module : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private moduleType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("module", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator module(XElement xe) { return XTypedServices.ToXTypedElement<module, moduleType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public module() {
            SetInnerType(new moduleType());
        }
        
        public module(moduleType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual moduleType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (versionDecl?, (mainModule | libraryModule))
        /// </para>
        /// </summary>
        public virtual versionDecl versionDecl {
            get {
                return this.ContentField.versionDecl;
            }
            set {
                this.ContentField.versionDecl = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (versionDecl?, (mainModule | libraryModule))
        /// </para>
        /// </summary>
        public virtual mainModule mainModule {
            get {
                return this.ContentField.mainModule;
            }
            set {
                this.ContentField.mainModule = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (versionDecl?, (mainModule | libraryModule))
        /// </para>
        /// </summary>
        public virtual libraryModule libraryModule {
            get {
                return this.ContentField.libraryModule;
            }
            set {
                this.ContentField.libraryModule = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static module Load(string xmlFile) {
            return XTypedServices.Load<module, moduleType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static module Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<module, moduleType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static module Parse(string xml) {
            return XTypedServices.Parse<module, moduleType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new module(((moduleType)(this.Content.Clone())));
        }
        
        private void SetInnerType(moduleType ContentField) {
            this.ContentField = ((moduleType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class mainModule : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private mainModuleType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("mainModule", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator mainModule(XElement xe) { return XTypedServices.ToXTypedElement<mainModule, mainModuleType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public mainModule() {
            SetInnerType(new mainModuleType());
        }
        
        public mainModule(mainModuleType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual mainModuleType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (prolog?, queryBody)
        /// </para>
        /// </summary>
        public virtual prolog prolog {
            get {
                return this.ContentField.prolog;
            }
            set {
                this.ContentField.prolog = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (prolog?, queryBody)
        /// </para>
        /// </summary>
        public virtual exprWrapper queryBody {
            get {
                return this.ContentField.queryBody;
            }
            set {
                this.ContentField.queryBody = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static mainModule Load(string xmlFile) {
            return XTypedServices.Load<mainModule, mainModuleType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static mainModule Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<mainModule, mainModuleType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static mainModule Parse(string xml) {
            return XTypedServices.Parse<mainModule, mainModuleType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new mainModule(((mainModuleType)(this.Content.Clone())));
        }
        
        private void SetInnerType(mainModuleType ContentField) {
            this.ContentField = ((mainModuleType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class libraryModule : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private libraryModuleType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("libraryModule", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator libraryModule(XElement xe) { return XTypedServices.ToXTypedElement<libraryModule, libraryModuleType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public libraryModule() {
            SetInnerType(new libraryModuleType());
        }
        
        public libraryModule(libraryModuleType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual libraryModuleType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (moduleDecl, prolog?)
        /// </para>
        /// </summary>
        public virtual moduleDecl moduleDecl {
            get {
                return this.ContentField.moduleDecl;
            }
            set {
                this.ContentField.moduleDecl = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (moduleDecl, prolog?)
        /// </para>
        /// </summary>
        public virtual prolog prolog {
            get {
                return this.ContentField.prolog;
            }
            set {
                this.ContentField.prolog = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static libraryModule Load(string xmlFile) {
            return XTypedServices.Load<libraryModule, libraryModuleType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static libraryModule Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<libraryModule, libraryModuleType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static libraryModule Parse(string xml) {
            return XTypedServices.Parse<libraryModule, libraryModuleType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new libraryModule(((libraryModuleType)(this.Content.Clone())));
        }
        
        private void SetInnerType(libraryModuleType ContentField) {
            this.ContentField = ((libraryModuleType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class versionDecl : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private versionDeclType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("versionDecl", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator versionDecl(XElement xe) { return XTypedServices.ToXTypedElement<versionDecl, versionDeclType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public versionDecl() {
            SetInnerType(new versionDeclType());
        }
        
        public versionDecl(versionDeclType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual versionDeclType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((version, encoding?)|encoding)
        /// </para>
        /// </summary>
        public virtual string version {
            get {
                return this.ContentField.version;
            }
            set {
                this.ContentField.version = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((version, encoding?)|encoding)
        /// </para>
        /// </summary>
        public virtual IList<string> encoding {
            get {
                return this.ContentField.encoding;
            }
            set {
                this.ContentField.encoding = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static versionDecl Load(string xmlFile) {
            return XTypedServices.Load<versionDecl, versionDeclType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static versionDecl Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<versionDecl, versionDeclType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static versionDecl Parse(string xml) {
            return XTypedServices.Parse<versionDecl, versionDeclType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new versionDecl(((versionDeclType)(this.Content.Clone())));
        }
        
        private void SetInnerType(versionDeclType ContentField) {
            this.ContentField = ((versionDeclType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class prolog : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private prologType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("prolog", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator prolog(XElement xe) { return XTypedServices.ToXTypedElement<prolog, prologType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public prolog() {
            SetInnerType(new prologType());
        }
        
        public prolog(prologType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual prologType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Substitution members: prologPartOneItem, boundarySpaceDecl, defaultCollationDecl, baseUriDecl, constructionDecl, orderingModeDecl, emptyOrderingDecl, copyNamespacesDecl, defaultNamespaceDecl, namespaceDecl, decimalFormatDecl, schemaImport, moduleImport
        /// </para>
        /// <para>
        /// Regular expression: (prologPartOneItem*, prologPartTwoItem*)
        /// </para>
        /// </summary>
        public virtual IList<prologPartOneItem> prologPartOneItem {
            get {
                return this.ContentField.prologPartOneItem;
            }
            set {
                this.ContentField.prologPartOneItem = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Substitution members: prologPartTwoItem, contextItemDecl, varDecl, optionDecl, functionDecl
        /// </para>
        /// <para>
        /// Regular expression: (prologPartOneItem*, prologPartTwoItem*)
        /// </para>
        /// </summary>
        public virtual IList<prologPartTwoItem> prologPartTwoItem {
            get {
                return this.ContentField.prologPartTwoItem;
            }
            set {
                this.ContentField.prologPartTwoItem = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static prolog Load(string xmlFile) {
            return XTypedServices.Load<prolog, prologType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static prolog Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<prolog, prologType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static prolog Parse(string xml) {
            return XTypedServices.Parse<prolog, prologType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new prolog(((prologType)(this.Content.Clone())));
        }
        
        private void SetInnerType(prologType ContentField) {
            this.ContentField = ((prologType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class boundarySpaceDecl : global::W3C.XQueryX.prologPartOneItem, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("boundarySpaceDecl", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator boundarySpaceDecl(XElement xe) { return XTypedServices.ToXTypedElement<boundarySpaceDecl>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public boundarySpaceDecl() {
        }
        
        public boundarySpaceDecl(string content) {
            this.TypedValue = ((W3C.XQueryX.boundarySpaceDeclType)(Enum.Parse(typeof(W3C.XQueryX.boundarySpaceDeclType), content)));
        }
        
        public virtual W3C.XQueryX.boundarySpaceDeclType TypedValue {
            get {
                XElement x = this.Untyped;
                return ((W3C.XQueryX.boundarySpaceDeclType)(Enum.Parse(typeof(W3C.XQueryX.boundarySpaceDeclType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::W3C.XQueryX.boundarySpaceDeclTypeValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static boundarySpaceDecl Load(string xmlFile) {
            return XTypedServices.Load<boundarySpaceDecl>(xmlFile);
        }
        
        public static boundarySpaceDecl Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<boundarySpaceDecl>(xmlFile);
        }
        
        public new static boundarySpaceDecl Parse(string xml) {
            return XTypedServices.Parse<boundarySpaceDecl>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<boundarySpaceDecl>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class defaultCollationDecl : global::W3C.XQueryX.prologPartOneItem, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("defaultCollationDecl", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator defaultCollationDecl(XElement xe) { return XTypedServices.ToXTypedElement<defaultCollationDecl>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public defaultCollationDecl() {
        }
        
        public defaultCollationDecl(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static defaultCollationDecl Load(string xmlFile) {
            return XTypedServices.Load<defaultCollationDecl>(xmlFile);
        }
        
        public static defaultCollationDecl Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<defaultCollationDecl>(xmlFile);
        }
        
        public new static defaultCollationDecl Parse(string xml) {
            return XTypedServices.Parse<defaultCollationDecl>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<defaultCollationDecl>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class baseUriDecl : global::W3C.XQueryX.prologPartOneItem, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("baseUriDecl", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator baseUriDecl(XElement xe) { return XTypedServices.ToXTypedElement<baseUriDecl>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public baseUriDecl() {
        }
        
        public baseUriDecl(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static baseUriDecl Load(string xmlFile) {
            return XTypedServices.Load<baseUriDecl>(xmlFile);
        }
        
        public static baseUriDecl Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<baseUriDecl>(xmlFile);
        }
        
        public new static baseUriDecl Parse(string xml) {
            return XTypedServices.Parse<baseUriDecl>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<baseUriDecl>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class constructionDecl : global::W3C.XQueryX.prologPartOneItem, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("constructionDecl", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator constructionDecl(XElement xe) { return XTypedServices.ToXTypedElement<constructionDecl>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public constructionDecl() {
        }
        
        public constructionDecl(string content) {
            this.TypedValue = ((W3C.XQueryX.constructionDeclType)(Enum.Parse(typeof(W3C.XQueryX.constructionDeclType), content)));
        }
        
        public virtual W3C.XQueryX.constructionDeclType TypedValue {
            get {
                XElement x = this.Untyped;
                return ((W3C.XQueryX.constructionDeclType)(Enum.Parse(typeof(W3C.XQueryX.constructionDeclType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::W3C.XQueryX.constructionDeclTypeValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static constructionDecl Load(string xmlFile) {
            return XTypedServices.Load<constructionDecl>(xmlFile);
        }
        
        public static constructionDecl Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<constructionDecl>(xmlFile);
        }
        
        public new static constructionDecl Parse(string xml) {
            return XTypedServices.Parse<constructionDecl>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<constructionDecl>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class orderingModeDecl : global::W3C.XQueryX.prologPartOneItem, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("orderingModeDecl", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator orderingModeDecl(XElement xe) { return XTypedServices.ToXTypedElement<orderingModeDecl>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public orderingModeDecl() {
        }
        
        public orderingModeDecl(string content) {
            this.TypedValue = ((W3C.XQueryX.orderingModeDeclType)(Enum.Parse(typeof(W3C.XQueryX.orderingModeDeclType), content)));
        }
        
        public virtual W3C.XQueryX.orderingModeDeclType TypedValue {
            get {
                XElement x = this.Untyped;
                return ((W3C.XQueryX.orderingModeDeclType)(Enum.Parse(typeof(W3C.XQueryX.orderingModeDeclType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::W3C.XQueryX.orderingModeDeclTypeValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static orderingModeDecl Load(string xmlFile) {
            return XTypedServices.Load<orderingModeDecl>(xmlFile);
        }
        
        public static orderingModeDecl Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<orderingModeDecl>(xmlFile);
        }
        
        public new static orderingModeDecl Parse(string xml) {
            return XTypedServices.Parse<orderingModeDecl>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<orderingModeDecl>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class emptyOrderingDecl : global::W3C.XQueryX.prologPartOneItem, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("emptyOrderingDecl", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator emptyOrderingDecl(XElement xe) { return XTypedServices.ToXTypedElement<emptyOrderingDecl>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public emptyOrderingDecl() {
        }
        
        public emptyOrderingDecl(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::W3C.XQueryX.emptyOrderingMode.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static emptyOrderingDecl Load(string xmlFile) {
            return XTypedServices.Load<emptyOrderingDecl>(xmlFile);
        }
        
        public static emptyOrderingDecl Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<emptyOrderingDecl>(xmlFile);
        }
        
        public new static emptyOrderingDecl Parse(string xml) {
            return XTypedServices.Parse<emptyOrderingDecl>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<emptyOrderingDecl>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class copyNamespacesDecl : global::W3C.XQueryX.prologPartOneItem, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private copyNamespacesDeclType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("copyNamespacesDecl", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator copyNamespacesDecl(XElement xe) { return XTypedServices.ToXTypedElement<copyNamespacesDecl, copyNamespacesDeclType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public copyNamespacesDecl() {
            SetInnerType(new copyNamespacesDeclType());
        }
        
        public copyNamespacesDecl(copyNamespacesDeclType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual copyNamespacesDeclType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (preserveMode, inheritMode)
        /// </para>
        /// </summary>
        public virtual string preserveMode {
            get {
                return this.ContentField.preserveMode;
            }
            set {
                this.ContentField.preserveMode = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (preserveMode, inheritMode)
        /// </para>
        /// </summary>
        public virtual string inheritMode {
            get {
                return this.ContentField.inheritMode;
            }
            set {
                this.ContentField.inheritMode = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static copyNamespacesDecl Load(string xmlFile) {
            return XTypedServices.Load<copyNamespacesDecl, copyNamespacesDeclType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static copyNamespacesDecl Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<copyNamespacesDecl, copyNamespacesDeclType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static copyNamespacesDecl Parse(string xml) {
            return XTypedServices.Parse<copyNamespacesDecl, copyNamespacesDeclType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new copyNamespacesDecl(((copyNamespacesDeclType)(this.Content.Clone())));
        }
        
        private void SetInnerType(copyNamespacesDeclType ContentField) {
            this.ContentField = ((copyNamespacesDeclType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class defaultNamespaceDecl : global::W3C.XQueryX.prologPartOneItem, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private defaultNamespaceDeclType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("defaultNamespaceDecl", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator defaultNamespaceDecl(XElement xe) { return XTypedServices.ToXTypedElement<defaultNamespaceDecl, defaultNamespaceDeclType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public defaultNamespaceDecl() {
            SetInnerType(new defaultNamespaceDeclType());
        }
        
        public defaultNamespaceDecl(defaultNamespaceDeclType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual defaultNamespaceDeclType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (defaultNamespaceCategory, uri)
        /// </para>
        /// </summary>
        public virtual W3C.XQueryX.defaultNamespaceCategory defaultNamespaceCategory {
            get {
                return this.ContentField.defaultNamespaceCategory;
            }
            set {
                this.ContentField.defaultNamespaceCategory = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (defaultNamespaceCategory, uri)
        /// </para>
        /// </summary>
        public virtual string uri {
            get {
                return this.ContentField.uri;
            }
            set {
                this.ContentField.uri = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static defaultNamespaceDecl Load(string xmlFile) {
            return XTypedServices.Load<defaultNamespaceDecl, defaultNamespaceDeclType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static defaultNamespaceDecl Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<defaultNamespaceDecl, defaultNamespaceDeclType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static defaultNamespaceDecl Parse(string xml) {
            return XTypedServices.Parse<defaultNamespaceDecl, defaultNamespaceDeclType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new defaultNamespaceDecl(((defaultNamespaceDeclType)(this.Content.Clone())));
        }
        
        private void SetInnerType(defaultNamespaceDeclType ContentField) {
            this.ContentField = ((defaultNamespaceDeclType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class namespaceDecl : global::W3C.XQueryX.prologPartOneItem, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private namespaceDeclType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("namespaceDecl", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator namespaceDecl(XElement xe) { return XTypedServices.ToXTypedElement<namespaceDecl, namespaceDeclType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public namespaceDecl() {
            SetInnerType(new namespaceDeclType());
        }
        
        public namespaceDecl(namespaceDeclType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual namespaceDeclType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (prefix, uri)
        /// </para>
        /// </summary>
        public virtual string prefix {
            get {
                return this.ContentField.prefix;
            }
            set {
                this.ContentField.prefix = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (prefix, uri)
        /// </para>
        /// </summary>
        public virtual string uri {
            get {
                return this.ContentField.uri;
            }
            set {
                this.ContentField.uri = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static namespaceDecl Load(string xmlFile) {
            return XTypedServices.Load<namespaceDecl, namespaceDeclType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static namespaceDecl Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<namespaceDecl, namespaceDeclType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static namespaceDecl Parse(string xml) {
            return XTypedServices.Parse<namespaceDecl, namespaceDeclType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new namespaceDecl(((namespaceDeclType)(this.Content.Clone())));
        }
        
        private void SetInnerType(namespaceDeclType ContentField) {
            this.ContentField = ((namespaceDeclType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class moduleDecl : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private namespaceDeclType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("moduleDecl", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator moduleDecl(XElement xe) { return XTypedServices.ToXTypedElement<moduleDecl, namespaceDeclType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public moduleDecl() {
            SetInnerType(new namespaceDeclType());
        }
        
        public moduleDecl(namespaceDeclType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual namespaceDeclType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (prefix, uri)
        /// </para>
        /// </summary>
        public virtual string prefix {
            get {
                return this.ContentField.prefix;
            }
            set {
                this.ContentField.prefix = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (prefix, uri)
        /// </para>
        /// </summary>
        public virtual string uri {
            get {
                return this.ContentField.uri;
            }
            set {
                this.ContentField.uri = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static moduleDecl Load(string xmlFile) {
            return XTypedServices.Load<moduleDecl, namespaceDeclType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static moduleDecl Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<moduleDecl, namespaceDeclType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static moduleDecl Parse(string xml) {
            return XTypedServices.Parse<moduleDecl, namespaceDeclType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new moduleDecl(((namespaceDeclType)(this.Content.Clone())));
        }
        
        private void SetInnerType(namespaceDeclType ContentField) {
            this.ContentField = ((namespaceDeclType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class decimalFormatDecl : global::W3C.XQueryX.prologPartOneItem, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private decimalFormatDeclType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("decimalFormatDecl", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator decimalFormatDecl(XElement xe) { return XTypedServices.ToXTypedElement<decimalFormatDecl, decimalFormatDeclType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public decimalFormatDecl() {
            SetInnerType(new decimalFormatDeclType());
        }
        
        public decimalFormatDecl(decimalFormatDeclType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual decimalFormatDeclType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (decimalFormatName?, decimalFormatParam*)
        /// </para>
        /// </summary>
        public virtual EQName decimalFormatName {
            get {
                return this.ContentField.decimalFormatName;
            }
            set {
                this.ContentField.decimalFormatName = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (decimalFormatName?, decimalFormatParam*)
        /// </para>
        /// </summary>
        public virtual IList<W3C.XQueryX.decimalFormatDeclType.decimalFormatParamLocalType> decimalFormatParam {
            get {
                return this.ContentField.decimalFormatParam;
            }
            set {
                this.ContentField.decimalFormatParam = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static decimalFormatDecl Load(string xmlFile) {
            return XTypedServices.Load<decimalFormatDecl, decimalFormatDeclType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static decimalFormatDecl Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<decimalFormatDecl, decimalFormatDeclType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static decimalFormatDecl Parse(string xml) {
            return XTypedServices.Parse<decimalFormatDecl, decimalFormatDeclType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new decimalFormatDecl(((decimalFormatDeclType)(this.Content.Clone())));
        }
        
        private void SetInnerType(decimalFormatDeclType ContentField) {
            this.ContentField = ((decimalFormatDeclType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class schemaImport : global::W3C.XQueryX.prologPartOneItem, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private schemaImportType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("schemaImport", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator schemaImport(XElement xe) { return XTypedServices.ToXTypedElement<schemaImport, schemaImportType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public schemaImport() {
            SetInnerType(new schemaImportType());
        }
        
        public schemaImport(schemaImportType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual schemaImportType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((namespacePrefix | defaultElementNamespace)?, targetNamespace, targetLocation*)
        /// </para>
        /// </summary>
        public virtual string namespacePrefix {
            get {
                return this.ContentField.namespacePrefix;
            }
            set {
                this.ContentField.namespacePrefix = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((namespacePrefix | defaultElementNamespace)?, targetNamespace, targetLocation*)
        /// </para>
        /// </summary>
        public virtual emptyContent defaultElementNamespace {
            get {
                return this.ContentField.defaultElementNamespace;
            }
            set {
                this.ContentField.defaultElementNamespace = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: ((namespacePrefix | defaultElementNamespace)?, targetNamespace, targetLocation*)
        /// </para>
        /// </summary>
        public virtual string targetNamespace {
            get {
                return this.ContentField.targetNamespace;
            }
            set {
                this.ContentField.targetNamespace = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((namespacePrefix | defaultElementNamespace)?, targetNamespace, targetLocation*)
        /// </para>
        /// </summary>
        public virtual IList<string> targetLocation {
            get {
                return this.ContentField.targetLocation;
            }
            set {
                this.ContentField.targetLocation = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static schemaImport Load(string xmlFile) {
            return XTypedServices.Load<schemaImport, schemaImportType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static schemaImport Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<schemaImport, schemaImportType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static schemaImport Parse(string xml) {
            return XTypedServices.Parse<schemaImport, schemaImportType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new schemaImport(((schemaImportType)(this.Content.Clone())));
        }
        
        private void SetInnerType(schemaImportType ContentField) {
            this.ContentField = ((schemaImportType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class moduleImport : global::W3C.XQueryX.prologPartOneItem, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private moduleImportType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("moduleImport", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator moduleImport(XElement xe) { return XTypedServices.ToXTypedElement<moduleImport, moduleImportType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public moduleImport() {
            SetInnerType(new moduleImportType());
        }
        
        public moduleImport(moduleImportType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual moduleImportType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (namespacePrefix?, targetNamespace, targetLocation*)
        /// </para>
        /// </summary>
        public virtual string namespacePrefix {
            get {
                return this.ContentField.namespacePrefix;
            }
            set {
                this.ContentField.namespacePrefix = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (namespacePrefix?, targetNamespace, targetLocation*)
        /// </para>
        /// </summary>
        public virtual string targetNamespace {
            get {
                return this.ContentField.targetNamespace;
            }
            set {
                this.ContentField.targetNamespace = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (namespacePrefix?, targetNamespace, targetLocation*)
        /// </para>
        /// </summary>
        public virtual IList<string> targetLocation {
            get {
                return this.ContentField.targetLocation;
            }
            set {
                this.ContentField.targetLocation = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static moduleImport Load(string xmlFile) {
            return XTypedServices.Load<moduleImport, moduleImportType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static moduleImport Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<moduleImport, moduleImportType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static moduleImport Parse(string xml) {
            return XTypedServices.Parse<moduleImport, moduleImportType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new moduleImport(((moduleImportType)(this.Content.Clone())));
        }
        
        private void SetInnerType(moduleImportType ContentField) {
            this.ContentField = ((moduleImportType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class contextItemDecl : global::W3C.XQueryX.prologPartTwoItem, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private contextItemDeclType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("contextItemDecl", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator contextItemDecl(XElement xe) { return XTypedServices.ToXTypedElement<contextItemDecl, contextItemDeclType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public contextItemDecl() {
            SetInnerType(new contextItemDeclType());
        }
        
        public contextItemDecl(contextItemDeclType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual contextItemDeclType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (contextItemType?, (varValue | external))
        /// </para>
        /// </summary>
        public virtual contextItemType contextItemType {
            get {
                return this.ContentField.contextItemType;
            }
            set {
                this.ContentField.contextItemType = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (contextItemType?, (varValue | external))
        /// </para>
        /// </summary>
        public virtual exprWrapper varValue {
            get {
                return this.ContentField.varValue;
            }
            set {
                this.ContentField.varValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (contextItemType?, (varValue | external))
        /// </para>
        /// </summary>
        public virtual W3C.XQueryX.contextItemDeclType.externalLocalType external {
            get {
                return this.ContentField.external;
            }
            set {
                this.ContentField.external = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static contextItemDecl Load(string xmlFile) {
            return XTypedServices.Load<contextItemDecl, contextItemDeclType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static contextItemDecl Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<contextItemDecl, contextItemDeclType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static contextItemDecl Parse(string xml) {
            return XTypedServices.Parse<contextItemDecl, contextItemDeclType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new contextItemDecl(((contextItemDeclType)(this.Content.Clone())));
        }
        
        private void SetInnerType(contextItemDeclType ContentField) {
            this.ContentField = ((contextItemDeclType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class varDecl : global::W3C.XQueryX.prologPartTwoItem, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private varDeclType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("varDecl", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator varDecl(XElement xe) { return XTypedServices.ToXTypedElement<varDecl, varDeclType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public varDecl() {
            SetInnerType(new varDeclType());
        }
        
        public varDecl(varDeclType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual varDeclType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (annotation*, varName, typeDeclaration?, (varValue | external))
        /// </para>
        /// </summary>
        public virtual IList<annotation> annotation {
            get {
                return this.ContentField.annotation;
            }
            set {
                this.ContentField.annotation = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (annotation*, varName, typeDeclaration?, (varValue | external))
        /// </para>
        /// </summary>
        public virtual EQName varName {
            get {
                return this.ContentField.varName;
            }
            set {
                this.ContentField.varName = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (annotation*, varName, typeDeclaration?, (varValue | external))
        /// </para>
        /// </summary>
        public virtual typeDeclaration typeDeclaration {
            get {
                return this.ContentField.typeDeclaration;
            }
            set {
                this.ContentField.typeDeclaration = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation*, varName, typeDeclaration?, (varValue | external))
        /// </para>
        /// </summary>
        public virtual exprWrapper varValue {
            get {
                return this.ContentField.varValue;
            }
            set {
                this.ContentField.varValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation*, varName, typeDeclaration?, (varValue | external))
        /// </para>
        /// </summary>
        public virtual W3C.XQueryX.varDeclType.externalLocalType external {
            get {
                return this.ContentField.external;
            }
            set {
                this.ContentField.external = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static varDecl Load(string xmlFile) {
            return XTypedServices.Load<varDecl, varDeclType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static varDecl Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<varDecl, varDeclType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static varDecl Parse(string xml) {
            return XTypedServices.Parse<varDecl, varDeclType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new varDecl(((varDeclType)(this.Content.Clone())));
        }
        
        private void SetInnerType(varDeclType ContentField) {
            this.ContentField = ((varDeclType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class optionDecl : global::W3C.XQueryX.prologPartTwoItem, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private optionDeclType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("optionDecl", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator optionDecl(XElement xe) { return XTypedServices.ToXTypedElement<optionDecl, optionDeclType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public optionDecl() {
            SetInnerType(new optionDeclType());
        }
        
        public optionDecl(optionDeclType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual optionDeclType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (optionName, optionContents)
        /// </para>
        /// </summary>
        public virtual EQName optionName {
            get {
                return this.ContentField.optionName;
            }
            set {
                this.ContentField.optionName = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (optionName, optionContents)
        /// </para>
        /// </summary>
        public virtual string optionContents {
            get {
                return this.ContentField.optionContents;
            }
            set {
                this.ContentField.optionContents = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static optionDecl Load(string xmlFile) {
            return XTypedServices.Load<optionDecl, optionDeclType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static optionDecl Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<optionDecl, optionDeclType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static optionDecl Parse(string xml) {
            return XTypedServices.Parse<optionDecl, optionDeclType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new optionDecl(((optionDeclType)(this.Content.Clone())));
        }
        
        private void SetInnerType(optionDeclType ContentField) {
            this.ContentField = ((optionDeclType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class functionDecl : global::W3C.XQueryX.prologPartTwoItem, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private functionDeclType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("functionDecl", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator functionDecl(XElement xe) { return XTypedServices.ToXTypedElement<functionDecl, functionDeclType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public functionDecl() {
            SetInnerType(new functionDeclType());
        }
        
        public functionDecl(functionDeclType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual functionDeclType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (annotation*, functionName, paramList, typeDeclaration?, (functionBody | externalDefinition))
        /// </para>
        /// </summary>
        public virtual IList<annotation> annotation {
            get {
                return this.ContentField.annotation;
            }
            set {
                this.ContentField.annotation = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (annotation*, functionName, paramList, typeDeclaration?, (functionBody | externalDefinition))
        /// </para>
        /// </summary>
        public virtual EQName functionName {
            get {
                return this.ContentField.functionName;
            }
            set {
                this.ContentField.functionName = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (annotation*, functionName, paramList, typeDeclaration?, (functionBody | externalDefinition))
        /// </para>
        /// </summary>
        public virtual paramList paramList {
            get {
                return this.ContentField.paramList;
            }
            set {
                this.ContentField.paramList = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (annotation*, functionName, paramList, typeDeclaration?, (functionBody | externalDefinition))
        /// </para>
        /// </summary>
        public virtual typeDeclaration typeDeclaration {
            get {
                return this.ContentField.typeDeclaration;
            }
            set {
                this.ContentField.typeDeclaration = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation*, functionName, paramList, typeDeclaration?, (functionBody | externalDefinition))
        /// </para>
        /// </summary>
        public virtual exprWrapper functionBody {
            get {
                return this.ContentField.functionBody;
            }
            set {
                this.ContentField.functionBody = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation*, functionName, paramList, typeDeclaration?, (functionBody | externalDefinition))
        /// </para>
        /// </summary>
        public virtual emptyContent externalDefinition {
            get {
                return this.ContentField.externalDefinition;
            }
            set {
                this.ContentField.externalDefinition = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public new static functionDecl Load(string xmlFile) {
            return XTypedServices.Load<functionDecl, functionDeclType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static functionDecl Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<functionDecl, functionDeclType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public new static functionDecl Parse(string xml) {
            return XTypedServices.Parse<functionDecl, functionDeclType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new functionDecl(((functionDeclType)(this.Content.Clone())));
        }
        
        private void SetInnerType(functionDeclType ContentField) {
            this.ContentField = ((functionDeclType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class param : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private paramType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("param", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator param(XElement xe) { return XTypedServices.ToXTypedElement<param, paramType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public param() {
            SetInnerType(new paramType());
        }
        
        public param(paramType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual paramType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (varName, typeDeclaration?)
        /// </para>
        /// </summary>
        public virtual EQName varName {
            get {
                return this.ContentField.varName;
            }
            set {
                this.ContentField.varName = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (varName, typeDeclaration?)
        /// </para>
        /// </summary>
        public virtual typeDeclaration typeDeclaration {
            get {
                return this.ContentField.typeDeclaration;
            }
            set {
                this.ContentField.typeDeclaration = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static param Load(string xmlFile) {
            return XTypedServices.Load<param, paramType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static param Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<param, paramType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static param Parse(string xml) {
            return XTypedServices.Parse<param, paramType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new param(((paramType)(this.Content.Clone())));
        }
        
        private void SetInnerType(paramType ContentField) {
            this.ContentField = ((paramType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class paramList : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private paramListType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("paramList", "http://www.w3.org/2005/XQueryX");
        
		public static explicit operator paramList(XElement xe) { return XTypedServices.ToXTypedElement<paramList, paramListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public paramList() {
            SetInnerType(new paramListType());
        }
        
        public paramList(paramListType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual paramListType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (param*)
        /// </para>
        /// </summary>
        public virtual IList<param> param {
            get {
                return this.ContentField.param;
            }
            set {
                this.ContentField.param = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static paramList Load(string xmlFile) {
            return XTypedServices.Load<paramList, paramListType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static paramList Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<paramList, paramListType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static paramList Parse(string xml) {
            return XTypedServices.Parse<paramList, paramListType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new paramList(((paramListType)(this.Content.Clone())));
        }
        
        private void SetInnerType(paramListType ContentField) {
            this.ContentField = ((paramListType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> typeDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> elementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static Dictionary<System.Type, System.Type> wrapperDictionary = new Dictionary<System.Type, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
            BuildWrapperDictionary();
        }
        
        private LinqToXsdTypeManager() {
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return wrapperDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(System.Xml.Linq.XName.Get("emptyContent", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.emptyContent));
            typeDictionary.Add(System.Xml.Linq.XName.Get("QName", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.QName));
            typeDictionary.Add(System.Xml.Linq.XName.Get("EQName", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.EQName));
            typeDictionary.Add(System.Xml.Linq.XName.Get("expr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.exprType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("exprList", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.exprList));
            typeDictionary.Add(System.Xml.Linq.XName.Get("exprOrPlaceholderList", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.exprOrPlaceholderList));
            typeDictionary.Add(System.Xml.Linq.XName.Get("exprWrapperOptional", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.exprWrapperOptional));
            typeDictionary.Add(System.Xml.Linq.XName.Get("exprWrapper", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.exprWrapper));
            typeDictionary.Add(System.Xml.Linq.XName.Get("literalList", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.literalList));
            typeDictionary.Add(System.Xml.Linq.XName.Get("constantExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.constantExprType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("integerConstantExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.integerConstantExprType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("decimalConstantExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.decimalConstantExprType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("doubleConstantExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.doubleConstantExprType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("stringConstantExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.stringConstantExprType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("varRef", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.varRefType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("contextItemExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.contextItemExprType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("pragma", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.pragmaType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("extensionExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.extensionExprType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("simpleMapExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.simpleMapExprType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("functionCallExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.functionCallExprType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("constructorFunctionExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.constructorFunctionExprType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("sequenceExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.sequenceExprType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("rangeSequenceExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.rangeSequenceExprType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("operatorExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.operatorExprType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("unaryOperatorExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.unaryOperatorExpr));
            typeDictionary.Add(System.Xml.Linq.XName.Get("binaryOperatorExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.binaryOperatorExpr));
            typeDictionary.Add(System.Xml.Linq.XName.Get("singleType", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.singleTypeType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("contextItemType", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.contextItemTypeType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("emptyItemTypeContent", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.emptyItemTypeContent));
            typeDictionary.Add(System.Xml.Linq.XName.Get("sequenceType", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.sequenceTypeType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("sequenceTypeUnion", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.sequenceTypeUnionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("typedVariableBinding", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.typedVariableBindingType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("forClauseItem", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.forClauseItemType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("forClause", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.forClauseType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("letClauseItem", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.letClauseItemType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("letClause", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.letClauseType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("windowClause", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.windowClauseType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("tumblingWindowClause", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.tumblingWindowClauseType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("slidingWindowClause", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.slidingWindowClauseType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("windowStartCondition", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.windowStartConditionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("windowEndCondition", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.windowEndConditionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("windowVars", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.windowVarsType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("countClause", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.countClauseType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("groupByClause", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.groupByClauseType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("groupingSpec", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.groupingSpecType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("orderModifier", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.orderModifierType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("orderBySpec", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.orderBySpecType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("orderByClause", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.orderByClauseType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("flworExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.flworExprType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ifThenElseExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.ifThenElseExprType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("quantifiedExprInClause", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.quantifiedExprInClauseType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("quantifiedExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.quantifiedExprType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("switchExprCaseClause", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.switchExprCaseClauseType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("switchExprDefaultClause", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.switchExprDefaultClauseType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("switchExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.switchExprType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("typeswitchExprCaseClause", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.typeswitchExprCaseClauseType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("typeswitchExprDefaultClause", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.typeswitchExprDefaultClauseType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("typeswitchExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.typeswitchExprType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("tryCatchExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.tryCatchExprType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("catchClause", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.catchClauseType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("catchErrorList", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.catchErrorListType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("instanceOfExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.instanceOfExprType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("treatExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.treatExprType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("castableExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.castableExprType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("castExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.castExprType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("arrowExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.arrowExprType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("validateExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.validateExprType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("attributeConstructor", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.attributeConstructor));
            typeDictionary.Add(System.Xml.Linq.XName.Get("namespaceDeclaration", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.namespaceDeclaration));
            typeDictionary.Add(System.Xml.Linq.XName.Get("attributeList", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.attributeListType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("elementConstructor", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.elementConstructorType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("computedElementConstructor", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.computedElementConstructorType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("computedAttributeConstructor", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.computedAttributeConstructorType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("computedDocumentConstructor", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.computedDocumentConstructorType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("computedTextConstructor", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.computedTextConstructorType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("computedCommentConstructor", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.computedCommentConstructorType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("computedNamespaceConstructor", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.computedNamespaceConstructorType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("computedPIConstructor", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.computedPIConstructorType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("unorderedExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.unorderedExprType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("orderedExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.orderedExprType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("namedFunctionRef", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.namedFunctionRefType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("inlineFunctionExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.inlineFunctionExprType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("dynamicFunctionInvocationExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.dynamicFunctionInvocationExprType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("mapConstructor", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.mapConstructorType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("mapConstructorEntry", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.mapConstructorEntryType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("arrayConstructor", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.arrayConstructorType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("squareArray", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.squareArrayType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("curlyArray", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.curlyArrayType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("stringConstructor", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.stringConstructorType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("simpleWildcard", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.simpleWildcard));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Wildcard", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.WildcardType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("attributeTest", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.attributeTestType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("elementTest", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.elementTestType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("documentTest", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.documentTestType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("piTest", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.piTestType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("anyFunctionTest", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.anyFunctionTestType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("typedFunctionTest", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.typedFunctionTestType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("paramTypeList", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.paramTypeListType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("parenthesizedItemType", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.parenthesizedItemTypeType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("typedMapTest", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.typedMapTestType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("typedArrayTest", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.typedArrayTestType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("lookup", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.lookupType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("stepExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.stepExprType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("pathExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.pathExprType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("module", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.moduleType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("mainModule", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.mainModuleType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("libraryModule", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.libraryModuleType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("versionDecl", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.versionDeclType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("prolog", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.prologType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("copyNamespacesDecl", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.copyNamespacesDeclType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("defaultNamespaceDecl", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.defaultNamespaceDeclType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("namespaceDeclType", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.namespaceDeclType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("decimalFormatDeclType", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.decimalFormatDeclType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("schemaImport", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.schemaImportType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("moduleImport", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.moduleImportType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("contextItemDecl", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.contextItemDeclType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.annotation));
            typeDictionary.Add(System.Xml.Linq.XName.Get("varDecl", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.varDeclType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("optionDecl", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.optionDeclType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("functionDecl", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.functionDeclType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("param", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.paramType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("paramList", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.paramListType));
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(System.Xml.Linq.XName.Get("itemType", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.itemType));
            elementDictionary.Add(System.Xml.Linq.XName.Get("forLetClauseItemExtensions", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.forLetClauseItemExtensions));
            elementDictionary.Add(System.Xml.Linq.XName.Get("anyElementTest", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.anyElementTest));
            elementDictionary.Add(System.Xml.Linq.XName.Get("kindTest", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.kindTest));
            elementDictionary.Add(System.Xml.Linq.XName.Get("prologPartOneItem", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.prologPartOneItem));
            elementDictionary.Add(System.Xml.Linq.XName.Get("prologPartTwoItem", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.prologPartTwoItem));
            elementDictionary.Add(System.Xml.Linq.XName.Get("NCName", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.NCName));
            elementDictionary.Add(System.Xml.Linq.XName.Get("expr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.expr));
            elementDictionary.Add(System.Xml.Linq.XName.Get("constantExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.constantExpr));
            elementDictionary.Add(System.Xml.Linq.XName.Get("integerConstantExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.integerConstantExpr));
            elementDictionary.Add(System.Xml.Linq.XName.Get("decimalConstantExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.decimalConstantExpr));
            elementDictionary.Add(System.Xml.Linq.XName.Get("doubleConstantExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.doubleConstantExpr));
            elementDictionary.Add(System.Xml.Linq.XName.Get("stringConstantExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.stringConstantExpr));
            elementDictionary.Add(System.Xml.Linq.XName.Get("varRef", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.varRef));
            elementDictionary.Add(System.Xml.Linq.XName.Get("contextItemExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.contextItemExpr));
            elementDictionary.Add(System.Xml.Linq.XName.Get("pragma", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.pragma));
            elementDictionary.Add(System.Xml.Linq.XName.Get("extensionExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.extensionExpr));
            elementDictionary.Add(System.Xml.Linq.XName.Get("simpleMapExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.simpleMapExpr));
            elementDictionary.Add(System.Xml.Linq.XName.Get("functionCallExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.functionCallExpr));
            elementDictionary.Add(System.Xml.Linq.XName.Get("constructorFunctionExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.constructorFunctionExpr));
            elementDictionary.Add(System.Xml.Linq.XName.Get("sequenceExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.sequenceExpr));
            elementDictionary.Add(System.Xml.Linq.XName.Get("rangeSequenceExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.rangeSequenceExpr));
            elementDictionary.Add(System.Xml.Linq.XName.Get("operatorExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.operatorExpr));
            elementDictionary.Add(System.Xml.Linq.XName.Get("arithmeticOp", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.arithmeticOp));
            elementDictionary.Add(System.Xml.Linq.XName.Get("addOp", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.addOp));
            elementDictionary.Add(System.Xml.Linq.XName.Get("subtractOp", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.subtractOp));
            elementDictionary.Add(System.Xml.Linq.XName.Get("multiplyOp", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.multiplyOp));
            elementDictionary.Add(System.Xml.Linq.XName.Get("divOp", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.divOp));
            elementDictionary.Add(System.Xml.Linq.XName.Get("idivOp", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.idivOp));
            elementDictionary.Add(System.Xml.Linq.XName.Get("modOp", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.modOp));
            elementDictionary.Add(System.Xml.Linq.XName.Get("unaryMinusOp", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.unaryMinusOp));
            elementDictionary.Add(System.Xml.Linq.XName.Get("unaryPlusOp", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.unaryPlusOp));
            elementDictionary.Add(System.Xml.Linq.XName.Get("stringOp", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.stringOp));
            elementDictionary.Add(System.Xml.Linq.XName.Get("stringConcatenateOp", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.stringConcatenateOp));
            elementDictionary.Add(System.Xml.Linq.XName.Get("comparisonOp", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.comparisonOp));
            elementDictionary.Add(System.Xml.Linq.XName.Get("valueComparisonOp", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.valueComparisonOp));
            elementDictionary.Add(System.Xml.Linq.XName.Get("eqOp", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.eqOp));
            elementDictionary.Add(System.Xml.Linq.XName.Get("neOp", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.neOp));
            elementDictionary.Add(System.Xml.Linq.XName.Get("gtOp", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.gtOp));
            elementDictionary.Add(System.Xml.Linq.XName.Get("geOp", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.geOp));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ltOp", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.ltOp));
            elementDictionary.Add(System.Xml.Linq.XName.Get("leOp", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.leOp));
            elementDictionary.Add(System.Xml.Linq.XName.Get("generalComparisonOp", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.generalComparisonOp));
            elementDictionary.Add(System.Xml.Linq.XName.Get("equalOp", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.equalOp));
            elementDictionary.Add(System.Xml.Linq.XName.Get("notEqualOp", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.notEqualOp));
            elementDictionary.Add(System.Xml.Linq.XName.Get("lessThanOp", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.lessThanOp));
            elementDictionary.Add(System.Xml.Linq.XName.Get("lessThanOrEqualOp", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.lessThanOrEqualOp));
            elementDictionary.Add(System.Xml.Linq.XName.Get("greaterThanOp", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.greaterThanOp));
            elementDictionary.Add(System.Xml.Linq.XName.Get("greaterThanOrEqualOp", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.greaterThanOrEqualOp));
            elementDictionary.Add(System.Xml.Linq.XName.Get("nodeComparisonOp", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.nodeComparisonOp));
            elementDictionary.Add(System.Xml.Linq.XName.Get("isOp", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.isOp));
            elementDictionary.Add(System.Xml.Linq.XName.Get("orderComparisonOp", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.orderComparisonOp));
            elementDictionary.Add(System.Xml.Linq.XName.Get("nodeBeforeOp", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.nodeBeforeOp));
            elementDictionary.Add(System.Xml.Linq.XName.Get("nodeAfterOp", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.nodeAfterOp));
            elementDictionary.Add(System.Xml.Linq.XName.Get("logicalOp", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.logicalOp));
            elementDictionary.Add(System.Xml.Linq.XName.Get("andOp", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.andOp));
            elementDictionary.Add(System.Xml.Linq.XName.Get("orOp", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.orOp));
            elementDictionary.Add(System.Xml.Linq.XName.Get("setOp", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.setOp));
            elementDictionary.Add(System.Xml.Linq.XName.Get("unionOp", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.unionOp));
            elementDictionary.Add(System.Xml.Linq.XName.Get("intersectOp", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.intersectOp));
            elementDictionary.Add(System.Xml.Linq.XName.Get("exceptOp", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.exceptOp));
            elementDictionary.Add(System.Xml.Linq.XName.Get("atomicType", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.atomicType));
            elementDictionary.Add(System.Xml.Linq.XName.Get("singleType", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.singleType));
            elementDictionary.Add(System.Xml.Linq.XName.Get("contextItemType", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.contextItemType));
            elementDictionary.Add(System.Xml.Linq.XName.Get("anyItemType", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.anyItemType));
            elementDictionary.Add(System.Xml.Linq.XName.Get("sequenceType", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.sequenceType));
            elementDictionary.Add(System.Xml.Linq.XName.Get("typeDeclaration", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.typeDeclaration));
            elementDictionary.Add(System.Xml.Linq.XName.Get("sequenceTypeUnion", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.sequenceTypeUnion));
            elementDictionary.Add(System.Xml.Linq.XName.Get("typedVariableBinding", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.typedVariableBinding));
            elementDictionary.Add(System.Xml.Linq.XName.Get("positionalVariableBinding", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.positionalVariableBinding));
            elementDictionary.Add(System.Xml.Linq.XName.Get("variableBinding", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.variableBinding));
            elementDictionary.Add(System.Xml.Linq.XName.Get("forClauseItem", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.forClauseItem));
            elementDictionary.Add(System.Xml.Linq.XName.Get("forClause", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.forClause));
            elementDictionary.Add(System.Xml.Linq.XName.Get("letClauseItem", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.letClauseItem));
            elementDictionary.Add(System.Xml.Linq.XName.Get("letClause", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.letClause));
            elementDictionary.Add(System.Xml.Linq.XName.Get("windowClause", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.windowClause));
            elementDictionary.Add(System.Xml.Linq.XName.Get("tumblingWindowClause", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.tumblingWindowClause));
            elementDictionary.Add(System.Xml.Linq.XName.Get("slidingWindowClause", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.slidingWindowClause));
            elementDictionary.Add(System.Xml.Linq.XName.Get("windowStartCondition", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.windowStartCondition));
            elementDictionary.Add(System.Xml.Linq.XName.Get("windowEndCondition", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.windowEndCondition));
            elementDictionary.Add(System.Xml.Linq.XName.Get("windowVars", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.windowVars));
            elementDictionary.Add(System.Xml.Linq.XName.Get("countClause", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.countClause));
            elementDictionary.Add(System.Xml.Linq.XName.Get("whereClause", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.whereClause));
            elementDictionary.Add(System.Xml.Linq.XName.Get("groupByClause", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.groupByClause));
            elementDictionary.Add(System.Xml.Linq.XName.Get("groupingSpec", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.groupingSpec));
            elementDictionary.Add(System.Xml.Linq.XName.Get("orderModifier", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.orderModifier));
            elementDictionary.Add(System.Xml.Linq.XName.Get("orderBySpec", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.orderBySpec));
            elementDictionary.Add(System.Xml.Linq.XName.Get("orderByClause", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.orderByClause));
            elementDictionary.Add(System.Xml.Linq.XName.Get("returnClause", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.returnClause));
            elementDictionary.Add(System.Xml.Linq.XName.Get("flworExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.flworExpr));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ifThenElseExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.ifThenElseExpr));
            elementDictionary.Add(System.Xml.Linq.XName.Get("quantifiedExprInClause", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.quantifiedExprInClause));
            elementDictionary.Add(System.Xml.Linq.XName.Get("quantifiedExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.quantifiedExpr));
            elementDictionary.Add(System.Xml.Linq.XName.Get("switchExprCaseClause", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.switchExprCaseClause));
            elementDictionary.Add(System.Xml.Linq.XName.Get("switchExprDefaultClause", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.switchExprDefaultClause));
            elementDictionary.Add(System.Xml.Linq.XName.Get("switchExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.switchExpr));
            elementDictionary.Add(System.Xml.Linq.XName.Get("typeswitchExprCaseClause", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.typeswitchExprCaseClause));
            elementDictionary.Add(System.Xml.Linq.XName.Get("typeswitchExprDefaultClause", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.typeswitchExprDefaultClause));
            elementDictionary.Add(System.Xml.Linq.XName.Get("typeswitchExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.typeswitchExpr));
            elementDictionary.Add(System.Xml.Linq.XName.Get("tryCatchExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.tryCatchExpr));
            elementDictionary.Add(System.Xml.Linq.XName.Get("catchClause", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.catchClause));
            elementDictionary.Add(System.Xml.Linq.XName.Get("catchErrorList", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.catchErrorList));
            elementDictionary.Add(System.Xml.Linq.XName.Get("instanceOfExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.instanceOfExpr));
            elementDictionary.Add(System.Xml.Linq.XName.Get("treatExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.treatExpr));
            elementDictionary.Add(System.Xml.Linq.XName.Get("castableExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.castableExpr));
            elementDictionary.Add(System.Xml.Linq.XName.Get("castExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.castExpr));
            elementDictionary.Add(System.Xml.Linq.XName.Get("arrowExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.arrowExpr));
            elementDictionary.Add(System.Xml.Linq.XName.Get("validateExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.validateExpr));
            elementDictionary.Add(System.Xml.Linq.XName.Get("attributeList", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.attributeList));
            elementDictionary.Add(System.Xml.Linq.XName.Get("elementContent", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.elementContent));
            elementDictionary.Add(System.Xml.Linq.XName.Get("elementConstructor", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.elementConstructor));
            elementDictionary.Add(System.Xml.Linq.XName.Get("computedElementConstructor", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.computedElementConstructor));
            elementDictionary.Add(System.Xml.Linq.XName.Get("computedAttributeConstructor", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.computedAttributeConstructor));
            elementDictionary.Add(System.Xml.Linq.XName.Get("computedDocumentConstructor", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.computedDocumentConstructor));
            elementDictionary.Add(System.Xml.Linq.XName.Get("computedTextConstructor", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.computedTextConstructor));
            elementDictionary.Add(System.Xml.Linq.XName.Get("computedCommentConstructor", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.computedCommentConstructor));
            elementDictionary.Add(System.Xml.Linq.XName.Get("computedNamespaceConstructor", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.computedNamespaceConstructor));
            elementDictionary.Add(System.Xml.Linq.XName.Get("computedPIConstructor", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.computedPIConstructor));
            elementDictionary.Add(System.Xml.Linq.XName.Get("unorderedExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.unorderedExpr));
            elementDictionary.Add(System.Xml.Linq.XName.Get("orderedExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.orderedExpr));
            elementDictionary.Add(System.Xml.Linq.XName.Get("namedFunctionRef", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.namedFunctionRef));
            elementDictionary.Add(System.Xml.Linq.XName.Get("inlineFunctionExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.inlineFunctionExpr));
            elementDictionary.Add(System.Xml.Linq.XName.Get("dynamicFunctionInvocationExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.dynamicFunctionInvocationExpr));
            elementDictionary.Add(System.Xml.Linq.XName.Get("mapConstructor", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.mapConstructor));
            elementDictionary.Add(System.Xml.Linq.XName.Get("mapConstructorEntry", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.mapConstructorEntry));
            elementDictionary.Add(System.Xml.Linq.XName.Get("arrayConstructor", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.arrayConstructor));
            elementDictionary.Add(System.Xml.Linq.XName.Get("squareArray", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.squareArray));
            elementDictionary.Add(System.Xml.Linq.XName.Get("curlyArray", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.curlyArray));
            elementDictionary.Add(System.Xml.Linq.XName.Get("stringConstructor", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.stringConstructor));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Wildcard", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.Wildcard));
            elementDictionary.Add(System.Xml.Linq.XName.Get("schemaAttributeTest", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.schemaAttributeTest));
            elementDictionary.Add(System.Xml.Linq.XName.Get("attributeTest", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.attributeTest));
            elementDictionary.Add(System.Xml.Linq.XName.Get("schemaElementTest", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.schemaElementTest));
            elementDictionary.Add(System.Xml.Linq.XName.Get("elementTest", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.elementTest));
            elementDictionary.Add(System.Xml.Linq.XName.Get("documentTest", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.documentTest));
            elementDictionary.Add(System.Xml.Linq.XName.Get("piTest", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.piTest));
            elementDictionary.Add(System.Xml.Linq.XName.Get("nameTest", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.nameTest));
            elementDictionary.Add(System.Xml.Linq.XName.Get("textTest", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.textTest));
            elementDictionary.Add(System.Xml.Linq.XName.Get("commentTest", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.commentTest));
            elementDictionary.Add(System.Xml.Linq.XName.Get("namespaceTest", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.namespaceTest));
            elementDictionary.Add(System.Xml.Linq.XName.Get("anyKindTest", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.anyKindTest));
            elementDictionary.Add(System.Xml.Linq.XName.Get("anyFunctionTest", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.anyFunctionTest));
            elementDictionary.Add(System.Xml.Linq.XName.Get("typedFunctionTest", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.typedFunctionTest));
            elementDictionary.Add(System.Xml.Linq.XName.Get("paramTypeList", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.paramTypeList));
            elementDictionary.Add(System.Xml.Linq.XName.Get("parenthesizedItemType", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.parenthesizedItemType));
            elementDictionary.Add(System.Xml.Linq.XName.Get("anyMapTest", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.anyMapTest));
            elementDictionary.Add(System.Xml.Linq.XName.Get("typedMapTest", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.typedMapTest));
            elementDictionary.Add(System.Xml.Linq.XName.Get("anyArrayTest", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.anyArrayTest));
            elementDictionary.Add(System.Xml.Linq.XName.Get("typedArrayTest", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.typedArrayTest));
            elementDictionary.Add(System.Xml.Linq.XName.Get("lookup", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.lookup));
            elementDictionary.Add(System.Xml.Linq.XName.Get("unaryLookup", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.unaryLookup));
            elementDictionary.Add(System.Xml.Linq.XName.Get("xpathAxis", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.xpathAxis));
            elementDictionary.Add(System.Xml.Linq.XName.Get("stepExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.stepExpr));
            elementDictionary.Add(System.Xml.Linq.XName.Get("pathExpr", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.pathExpr));
            elementDictionary.Add(System.Xml.Linq.XName.Get("module", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.module));
            elementDictionary.Add(System.Xml.Linq.XName.Get("mainModule", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.mainModule));
            elementDictionary.Add(System.Xml.Linq.XName.Get("libraryModule", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.libraryModule));
            elementDictionary.Add(System.Xml.Linq.XName.Get("versionDecl", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.versionDecl));
            elementDictionary.Add(System.Xml.Linq.XName.Get("prolog", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.prolog));
            elementDictionary.Add(System.Xml.Linq.XName.Get("boundarySpaceDecl", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.boundarySpaceDecl));
            elementDictionary.Add(System.Xml.Linq.XName.Get("defaultCollationDecl", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.defaultCollationDecl));
            elementDictionary.Add(System.Xml.Linq.XName.Get("baseUriDecl", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.baseUriDecl));
            elementDictionary.Add(System.Xml.Linq.XName.Get("constructionDecl", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.constructionDecl));
            elementDictionary.Add(System.Xml.Linq.XName.Get("orderingModeDecl", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.orderingModeDecl));
            elementDictionary.Add(System.Xml.Linq.XName.Get("emptyOrderingDecl", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.emptyOrderingDecl));
            elementDictionary.Add(System.Xml.Linq.XName.Get("copyNamespacesDecl", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.copyNamespacesDecl));
            elementDictionary.Add(System.Xml.Linq.XName.Get("defaultNamespaceDecl", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.defaultNamespaceDecl));
            elementDictionary.Add(System.Xml.Linq.XName.Get("namespaceDecl", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.namespaceDecl));
            elementDictionary.Add(System.Xml.Linq.XName.Get("moduleDecl", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.moduleDecl));
            elementDictionary.Add(System.Xml.Linq.XName.Get("decimalFormatDecl", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.decimalFormatDecl));
            elementDictionary.Add(System.Xml.Linq.XName.Get("schemaImport", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.schemaImport));
            elementDictionary.Add(System.Xml.Linq.XName.Get("moduleImport", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.moduleImport));
            elementDictionary.Add(System.Xml.Linq.XName.Get("contextItemDecl", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.contextItemDecl));
            elementDictionary.Add(System.Xml.Linq.XName.Get("varDecl", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.varDecl));
            elementDictionary.Add(System.Xml.Linq.XName.Get("optionDecl", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.optionDecl));
            elementDictionary.Add(System.Xml.Linq.XName.Get("functionDecl", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.functionDecl));
            elementDictionary.Add(System.Xml.Linq.XName.Get("param", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.param));
            elementDictionary.Add(System.Xml.Linq.XName.Get("paramList", "http://www.w3.org/2005/XQueryX"), typeof(global::W3C.XQueryX.paramList));
        }
        
        private static void BuildWrapperDictionary() {
            wrapperDictionary.Add(typeof(W3C.XQueryX.expr), typeof(global::W3C.XQueryX.exprType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.constantExpr), typeof(global::W3C.XQueryX.constantExprType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.integerConstantExpr), typeof(global::W3C.XQueryX.integerConstantExprType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.decimalConstantExpr), typeof(global::W3C.XQueryX.decimalConstantExprType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.doubleConstantExpr), typeof(global::W3C.XQueryX.doubleConstantExprType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.stringConstantExpr), typeof(global::W3C.XQueryX.stringConstantExprType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.varRef), typeof(global::W3C.XQueryX.varRefType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.contextItemExpr), typeof(global::W3C.XQueryX.contextItemExprType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.pragma), typeof(global::W3C.XQueryX.pragmaType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.extensionExpr), typeof(global::W3C.XQueryX.extensionExprType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.simpleMapExpr), typeof(global::W3C.XQueryX.simpleMapExprType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.functionCallExpr), typeof(global::W3C.XQueryX.functionCallExprType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.constructorFunctionExpr), typeof(global::W3C.XQueryX.constructorFunctionExprType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.sequenceExpr), typeof(global::W3C.XQueryX.sequenceExprType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.rangeSequenceExpr), typeof(global::W3C.XQueryX.rangeSequenceExprType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.operatorExpr), typeof(global::W3C.XQueryX.operatorExprType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.arithmeticOp), typeof(global::W3C.XQueryX.operatorExprType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.addOp), typeof(global::W3C.XQueryX.binaryOperatorExpr));
            wrapperDictionary.Add(typeof(W3C.XQueryX.subtractOp), typeof(global::W3C.XQueryX.binaryOperatorExpr));
            wrapperDictionary.Add(typeof(W3C.XQueryX.multiplyOp), typeof(global::W3C.XQueryX.binaryOperatorExpr));
            wrapperDictionary.Add(typeof(W3C.XQueryX.divOp), typeof(global::W3C.XQueryX.binaryOperatorExpr));
            wrapperDictionary.Add(typeof(W3C.XQueryX.idivOp), typeof(global::W3C.XQueryX.binaryOperatorExpr));
            wrapperDictionary.Add(typeof(W3C.XQueryX.modOp), typeof(global::W3C.XQueryX.binaryOperatorExpr));
            wrapperDictionary.Add(typeof(W3C.XQueryX.unaryMinusOp), typeof(global::W3C.XQueryX.unaryOperatorExpr));
            wrapperDictionary.Add(typeof(W3C.XQueryX.unaryPlusOp), typeof(global::W3C.XQueryX.unaryOperatorExpr));
            wrapperDictionary.Add(typeof(W3C.XQueryX.stringOp), typeof(global::W3C.XQueryX.operatorExprType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.stringConcatenateOp), typeof(global::W3C.XQueryX.binaryOperatorExpr));
            wrapperDictionary.Add(typeof(W3C.XQueryX.comparisonOp), typeof(global::W3C.XQueryX.binaryOperatorExpr));
            wrapperDictionary.Add(typeof(W3C.XQueryX.valueComparisonOp), typeof(global::W3C.XQueryX.binaryOperatorExpr));
            wrapperDictionary.Add(typeof(W3C.XQueryX.eqOp), typeof(global::W3C.XQueryX.binaryOperatorExpr));
            wrapperDictionary.Add(typeof(W3C.XQueryX.neOp), typeof(global::W3C.XQueryX.binaryOperatorExpr));
            wrapperDictionary.Add(typeof(W3C.XQueryX.gtOp), typeof(global::W3C.XQueryX.binaryOperatorExpr));
            wrapperDictionary.Add(typeof(W3C.XQueryX.geOp), typeof(global::W3C.XQueryX.binaryOperatorExpr));
            wrapperDictionary.Add(typeof(W3C.XQueryX.ltOp), typeof(global::W3C.XQueryX.binaryOperatorExpr));
            wrapperDictionary.Add(typeof(W3C.XQueryX.leOp), typeof(global::W3C.XQueryX.binaryOperatorExpr));
            wrapperDictionary.Add(typeof(W3C.XQueryX.generalComparisonOp), typeof(global::W3C.XQueryX.binaryOperatorExpr));
            wrapperDictionary.Add(typeof(W3C.XQueryX.equalOp), typeof(global::W3C.XQueryX.binaryOperatorExpr));
            wrapperDictionary.Add(typeof(W3C.XQueryX.notEqualOp), typeof(global::W3C.XQueryX.binaryOperatorExpr));
            wrapperDictionary.Add(typeof(W3C.XQueryX.lessThanOp), typeof(global::W3C.XQueryX.binaryOperatorExpr));
            wrapperDictionary.Add(typeof(W3C.XQueryX.lessThanOrEqualOp), typeof(global::W3C.XQueryX.binaryOperatorExpr));
            wrapperDictionary.Add(typeof(W3C.XQueryX.greaterThanOp), typeof(global::W3C.XQueryX.binaryOperatorExpr));
            wrapperDictionary.Add(typeof(W3C.XQueryX.greaterThanOrEqualOp), typeof(global::W3C.XQueryX.binaryOperatorExpr));
            wrapperDictionary.Add(typeof(W3C.XQueryX.nodeComparisonOp), typeof(global::W3C.XQueryX.binaryOperatorExpr));
            wrapperDictionary.Add(typeof(W3C.XQueryX.isOp), typeof(global::W3C.XQueryX.binaryOperatorExpr));
            wrapperDictionary.Add(typeof(W3C.XQueryX.orderComparisonOp), typeof(global::W3C.XQueryX.binaryOperatorExpr));
            wrapperDictionary.Add(typeof(W3C.XQueryX.nodeBeforeOp), typeof(global::W3C.XQueryX.binaryOperatorExpr));
            wrapperDictionary.Add(typeof(W3C.XQueryX.nodeAfterOp), typeof(global::W3C.XQueryX.binaryOperatorExpr));
            wrapperDictionary.Add(typeof(W3C.XQueryX.logicalOp), typeof(global::W3C.XQueryX.binaryOperatorExpr));
            wrapperDictionary.Add(typeof(W3C.XQueryX.andOp), typeof(global::W3C.XQueryX.binaryOperatorExpr));
            wrapperDictionary.Add(typeof(W3C.XQueryX.orOp), typeof(global::W3C.XQueryX.binaryOperatorExpr));
            wrapperDictionary.Add(typeof(W3C.XQueryX.setOp), typeof(global::W3C.XQueryX.binaryOperatorExpr));
            wrapperDictionary.Add(typeof(W3C.XQueryX.unionOp), typeof(global::W3C.XQueryX.binaryOperatorExpr));
            wrapperDictionary.Add(typeof(W3C.XQueryX.intersectOp), typeof(global::W3C.XQueryX.binaryOperatorExpr));
            wrapperDictionary.Add(typeof(W3C.XQueryX.exceptOp), typeof(global::W3C.XQueryX.binaryOperatorExpr));
            wrapperDictionary.Add(typeof(W3C.XQueryX.atomicType), typeof(global::W3C.XQueryX.EQName));
            wrapperDictionary.Add(typeof(W3C.XQueryX.singleType), typeof(global::W3C.XQueryX.singleTypeType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.contextItemType), typeof(global::W3C.XQueryX.contextItemTypeType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.anyItemType), typeof(global::W3C.XQueryX.emptyItemTypeContent));
            wrapperDictionary.Add(typeof(W3C.XQueryX.sequenceType), typeof(global::W3C.XQueryX.sequenceTypeType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.typeDeclaration), typeof(global::W3C.XQueryX.sequenceTypeType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.sequenceTypeUnion), typeof(global::W3C.XQueryX.sequenceTypeUnionType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.typedVariableBinding), typeof(global::W3C.XQueryX.typedVariableBindingType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.positionalVariableBinding), typeof(global::W3C.XQueryX.EQName));
            wrapperDictionary.Add(typeof(W3C.XQueryX.variableBinding), typeof(global::W3C.XQueryX.EQName));
            wrapperDictionary.Add(typeof(W3C.XQueryX.forClauseItem), typeof(global::W3C.XQueryX.forClauseItemType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.forClause), typeof(global::W3C.XQueryX.forClauseType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.letClauseItem), typeof(global::W3C.XQueryX.letClauseItemType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.letClause), typeof(global::W3C.XQueryX.letClauseType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.windowClause), typeof(global::W3C.XQueryX.windowClauseType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.tumblingWindowClause), typeof(global::W3C.XQueryX.tumblingWindowClauseType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.slidingWindowClause), typeof(global::W3C.XQueryX.slidingWindowClauseType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.windowStartCondition), typeof(global::W3C.XQueryX.windowStartConditionType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.windowEndCondition), typeof(global::W3C.XQueryX.windowEndConditionType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.windowVars), typeof(global::W3C.XQueryX.windowVarsType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.countClause), typeof(global::W3C.XQueryX.countClauseType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.whereClause), typeof(global::W3C.XQueryX.exprWrapper));
            wrapperDictionary.Add(typeof(W3C.XQueryX.groupByClause), typeof(global::W3C.XQueryX.groupByClauseType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.groupingSpec), typeof(global::W3C.XQueryX.groupingSpecType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.orderModifier), typeof(global::W3C.XQueryX.orderModifierType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.orderBySpec), typeof(global::W3C.XQueryX.orderBySpecType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.orderByClause), typeof(global::W3C.XQueryX.orderByClauseType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.returnClause), typeof(global::W3C.XQueryX.exprWrapper));
            wrapperDictionary.Add(typeof(W3C.XQueryX.flworExpr), typeof(global::W3C.XQueryX.flworExprType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.ifThenElseExpr), typeof(global::W3C.XQueryX.ifThenElseExprType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.quantifiedExprInClause), typeof(global::W3C.XQueryX.quantifiedExprInClauseType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.quantifiedExpr), typeof(global::W3C.XQueryX.quantifiedExprType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.switchExprCaseClause), typeof(global::W3C.XQueryX.switchExprCaseClauseType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.switchExprDefaultClause), typeof(global::W3C.XQueryX.switchExprDefaultClauseType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.switchExpr), typeof(global::W3C.XQueryX.switchExprType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.typeswitchExprCaseClause), typeof(global::W3C.XQueryX.typeswitchExprCaseClauseType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.typeswitchExprDefaultClause), typeof(global::W3C.XQueryX.typeswitchExprDefaultClauseType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.typeswitchExpr), typeof(global::W3C.XQueryX.typeswitchExprType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.tryCatchExpr), typeof(global::W3C.XQueryX.tryCatchExprType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.catchClause), typeof(global::W3C.XQueryX.catchClauseType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.catchErrorList), typeof(global::W3C.XQueryX.catchErrorListType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.instanceOfExpr), typeof(global::W3C.XQueryX.instanceOfExprType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.treatExpr), typeof(global::W3C.XQueryX.treatExprType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.castableExpr), typeof(global::W3C.XQueryX.castableExprType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.castExpr), typeof(global::W3C.XQueryX.castExprType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.arrowExpr), typeof(global::W3C.XQueryX.arrowExprType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.validateExpr), typeof(global::W3C.XQueryX.validateExprType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.attributeList), typeof(global::W3C.XQueryX.attributeListType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.elementContent), typeof(global::W3C.XQueryX.exprList));
            wrapperDictionary.Add(typeof(W3C.XQueryX.elementConstructor), typeof(global::W3C.XQueryX.elementConstructorType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.computedElementConstructor), typeof(global::W3C.XQueryX.computedElementConstructorType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.computedAttributeConstructor), typeof(global::W3C.XQueryX.computedAttributeConstructorType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.computedDocumentConstructor), typeof(global::W3C.XQueryX.computedDocumentConstructorType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.computedTextConstructor), typeof(global::W3C.XQueryX.computedTextConstructorType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.computedCommentConstructor), typeof(global::W3C.XQueryX.computedCommentConstructorType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.computedNamespaceConstructor), typeof(global::W3C.XQueryX.computedNamespaceConstructorType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.computedPIConstructor), typeof(global::W3C.XQueryX.computedPIConstructorType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.unorderedExpr), typeof(global::W3C.XQueryX.unorderedExprType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.orderedExpr), typeof(global::W3C.XQueryX.orderedExprType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.namedFunctionRef), typeof(global::W3C.XQueryX.namedFunctionRefType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.inlineFunctionExpr), typeof(global::W3C.XQueryX.inlineFunctionExprType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.dynamicFunctionInvocationExpr), typeof(global::W3C.XQueryX.dynamicFunctionInvocationExprType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.mapConstructor), typeof(global::W3C.XQueryX.mapConstructorType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.mapConstructorEntry), typeof(global::W3C.XQueryX.mapConstructorEntryType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.arrayConstructor), typeof(global::W3C.XQueryX.arrayConstructorType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.squareArray), typeof(global::W3C.XQueryX.squareArrayType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.curlyArray), typeof(global::W3C.XQueryX.curlyArrayType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.stringConstructor), typeof(global::W3C.XQueryX.stringConstructorType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.Wildcard), typeof(global::W3C.XQueryX.WildcardType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.schemaAttributeTest), typeof(global::W3C.XQueryX.EQName));
            wrapperDictionary.Add(typeof(W3C.XQueryX.attributeTest), typeof(global::W3C.XQueryX.attributeTestType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.schemaElementTest), typeof(global::W3C.XQueryX.EQName));
            wrapperDictionary.Add(typeof(W3C.XQueryX.elementTest), typeof(global::W3C.XQueryX.elementTestType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.documentTest), typeof(global::W3C.XQueryX.documentTestType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.piTest), typeof(global::W3C.XQueryX.piTestType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.nameTest), typeof(global::W3C.XQueryX.EQName));
            wrapperDictionary.Add(typeof(W3C.XQueryX.textTest), typeof(global::W3C.XQueryX.emptyItemTypeContent));
            wrapperDictionary.Add(typeof(W3C.XQueryX.commentTest), typeof(global::W3C.XQueryX.emptyItemTypeContent));
            wrapperDictionary.Add(typeof(W3C.XQueryX.namespaceTest), typeof(global::W3C.XQueryX.emptyItemTypeContent));
            wrapperDictionary.Add(typeof(W3C.XQueryX.anyKindTest), typeof(global::W3C.XQueryX.emptyItemTypeContent));
            wrapperDictionary.Add(typeof(W3C.XQueryX.anyFunctionTest), typeof(global::W3C.XQueryX.anyFunctionTestType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.typedFunctionTest), typeof(global::W3C.XQueryX.typedFunctionTestType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.paramTypeList), typeof(global::W3C.XQueryX.paramTypeListType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.parenthesizedItemType), typeof(global::W3C.XQueryX.parenthesizedItemTypeType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.anyMapTest), typeof(global::W3C.XQueryX.emptyItemTypeContent));
            wrapperDictionary.Add(typeof(W3C.XQueryX.typedMapTest), typeof(global::W3C.XQueryX.typedMapTestType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.anyArrayTest), typeof(global::W3C.XQueryX.emptyItemTypeContent));
            wrapperDictionary.Add(typeof(W3C.XQueryX.typedArrayTest), typeof(global::W3C.XQueryX.typedArrayTestType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.lookup), typeof(global::W3C.XQueryX.lookupType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.unaryLookup), typeof(global::W3C.XQueryX.lookupType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.stepExpr), typeof(global::W3C.XQueryX.stepExprType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.pathExpr), typeof(global::W3C.XQueryX.pathExprType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.module), typeof(global::W3C.XQueryX.moduleType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.mainModule), typeof(global::W3C.XQueryX.mainModuleType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.libraryModule), typeof(global::W3C.XQueryX.libraryModuleType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.versionDecl), typeof(global::W3C.XQueryX.versionDeclType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.prolog), typeof(global::W3C.XQueryX.prologType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.copyNamespacesDecl), typeof(global::W3C.XQueryX.copyNamespacesDeclType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.defaultNamespaceDecl), typeof(global::W3C.XQueryX.defaultNamespaceDeclType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.namespaceDecl), typeof(global::W3C.XQueryX.namespaceDeclType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.moduleDecl), typeof(global::W3C.XQueryX.namespaceDeclType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.decimalFormatDecl), typeof(global::W3C.XQueryX.decimalFormatDeclType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.schemaImport), typeof(global::W3C.XQueryX.schemaImportType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.moduleImport), typeof(global::W3C.XQueryX.moduleImportType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.contextItemDecl), typeof(global::W3C.XQueryX.contextItemDeclType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.varDecl), typeof(global::W3C.XQueryX.varDeclType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.optionDecl), typeof(global::W3C.XQueryX.optionDeclType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.functionDecl), typeof(global::W3C.XQueryX.functionDeclType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.param), typeof(global::W3C.XQueryX.paramType));
            wrapperDictionary.Add(typeof(W3C.XQueryX.paramList), typeof(global::W3C.XQueryX.paramListType));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[System.Xml.Linq.XName.Get("itemType", "http://www.w3.org/2005/XQueryX")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public itemType itemType {  get {return rootObject as itemType; } }

		public forLetClauseItemExtensions forLetClauseItemExtensions {  get {return rootObject as forLetClauseItemExtensions; } }

		public anyElementTest anyElementTest {  get {return rootObject as anyElementTest; } }

		public kindTest kindTest {  get {return rootObject as kindTest; } }

		public prologPartOneItem prologPartOneItem {  get {return rootObject as prologPartOneItem; } }

		public prologPartTwoItem prologPartTwoItem {  get {return rootObject as prologPartTwoItem; } }

		public NCName NCName {  get {return rootObject as NCName; } }

		public expr expr {  get {return rootObject as expr; } }

		public constantExpr constantExpr {  get {return rootObject as constantExpr; } }

		public integerConstantExpr integerConstantExpr {  get {return rootObject as integerConstantExpr; } }

		public decimalConstantExpr decimalConstantExpr {  get {return rootObject as decimalConstantExpr; } }

		public doubleConstantExpr doubleConstantExpr {  get {return rootObject as doubleConstantExpr; } }

		public stringConstantExpr stringConstantExpr {  get {return rootObject as stringConstantExpr; } }

		public varRef varRef {  get {return rootObject as varRef; } }

		public contextItemExpr contextItemExpr {  get {return rootObject as contextItemExpr; } }

		public pragma pragma {  get {return rootObject as pragma; } }

		public extensionExpr extensionExpr {  get {return rootObject as extensionExpr; } }

		public simpleMapExpr simpleMapExpr {  get {return rootObject as simpleMapExpr; } }

		public functionCallExpr functionCallExpr {  get {return rootObject as functionCallExpr; } }

		public constructorFunctionExpr constructorFunctionExpr {  get {return rootObject as constructorFunctionExpr; } }

		public sequenceExpr sequenceExpr {  get {return rootObject as sequenceExpr; } }

		public rangeSequenceExpr rangeSequenceExpr {  get {return rootObject as rangeSequenceExpr; } }

		public operatorExpr operatorExpr {  get {return rootObject as operatorExpr; } }

		public arithmeticOp arithmeticOp {  get {return rootObject as arithmeticOp; } }

		public addOp addOp {  get {return rootObject as addOp; } }

		public subtractOp subtractOp {  get {return rootObject as subtractOp; } }

		public multiplyOp multiplyOp {  get {return rootObject as multiplyOp; } }

		public divOp divOp {  get {return rootObject as divOp; } }

		public idivOp idivOp {  get {return rootObject as idivOp; } }

		public modOp modOp {  get {return rootObject as modOp; } }

		public unaryMinusOp unaryMinusOp {  get {return rootObject as unaryMinusOp; } }

		public unaryPlusOp unaryPlusOp {  get {return rootObject as unaryPlusOp; } }

		public stringOp stringOp {  get {return rootObject as stringOp; } }

		public stringConcatenateOp stringConcatenateOp {  get {return rootObject as stringConcatenateOp; } }

		public comparisonOp comparisonOp {  get {return rootObject as comparisonOp; } }

		public valueComparisonOp valueComparisonOp {  get {return rootObject as valueComparisonOp; } }

		public eqOp eqOp {  get {return rootObject as eqOp; } }

		public neOp neOp {  get {return rootObject as neOp; } }

		public gtOp gtOp {  get {return rootObject as gtOp; } }

		public geOp geOp {  get {return rootObject as geOp; } }

		public ltOp ltOp {  get {return rootObject as ltOp; } }

		public leOp leOp {  get {return rootObject as leOp; } }

		public generalComparisonOp generalComparisonOp {  get {return rootObject as generalComparisonOp; } }

		public equalOp equalOp {  get {return rootObject as equalOp; } }

		public notEqualOp notEqualOp {  get {return rootObject as notEqualOp; } }

		public lessThanOp lessThanOp {  get {return rootObject as lessThanOp; } }

		public lessThanOrEqualOp lessThanOrEqualOp {  get {return rootObject as lessThanOrEqualOp; } }

		public greaterThanOp greaterThanOp {  get {return rootObject as greaterThanOp; } }

		public greaterThanOrEqualOp greaterThanOrEqualOp {  get {return rootObject as greaterThanOrEqualOp; } }

		public nodeComparisonOp nodeComparisonOp {  get {return rootObject as nodeComparisonOp; } }

		public isOp isOp {  get {return rootObject as isOp; } }

		public orderComparisonOp orderComparisonOp {  get {return rootObject as orderComparisonOp; } }

		public nodeBeforeOp nodeBeforeOp {  get {return rootObject as nodeBeforeOp; } }

		public nodeAfterOp nodeAfterOp {  get {return rootObject as nodeAfterOp; } }

		public logicalOp logicalOp {  get {return rootObject as logicalOp; } }

		public andOp andOp {  get {return rootObject as andOp; } }

		public orOp orOp {  get {return rootObject as orOp; } }

		public setOp setOp {  get {return rootObject as setOp; } }

		public unionOp unionOp {  get {return rootObject as unionOp; } }

		public intersectOp intersectOp {  get {return rootObject as intersectOp; } }

		public exceptOp exceptOp {  get {return rootObject as exceptOp; } }

		public atomicType atomicType {  get {return rootObject as atomicType; } }

		public singleType singleType {  get {return rootObject as singleType; } }

		public contextItemType contextItemType {  get {return rootObject as contextItemType; } }

		public anyItemType anyItemType {  get {return rootObject as anyItemType; } }

		public sequenceType sequenceType {  get {return rootObject as sequenceType; } }

		public typeDeclaration typeDeclaration {  get {return rootObject as typeDeclaration; } }

		public sequenceTypeUnion sequenceTypeUnion {  get {return rootObject as sequenceTypeUnion; } }

		public typedVariableBinding typedVariableBinding {  get {return rootObject as typedVariableBinding; } }

		public positionalVariableBinding positionalVariableBinding {  get {return rootObject as positionalVariableBinding; } }

		public variableBinding variableBinding {  get {return rootObject as variableBinding; } }

		public forClauseItem forClauseItem {  get {return rootObject as forClauseItem; } }

		public forClause forClause {  get {return rootObject as forClause; } }

		public letClauseItem letClauseItem {  get {return rootObject as letClauseItem; } }

		public letClause letClause {  get {return rootObject as letClause; } }

		public windowClause windowClause {  get {return rootObject as windowClause; } }

		public tumblingWindowClause tumblingWindowClause {  get {return rootObject as tumblingWindowClause; } }

		public slidingWindowClause slidingWindowClause {  get {return rootObject as slidingWindowClause; } }

		public windowStartCondition windowStartCondition {  get {return rootObject as windowStartCondition; } }

		public windowEndCondition windowEndCondition {  get {return rootObject as windowEndCondition; } }

		public windowVars windowVars {  get {return rootObject as windowVars; } }

		public countClause countClause {  get {return rootObject as countClause; } }

		public whereClause whereClause {  get {return rootObject as whereClause; } }

		public groupByClause groupByClause {  get {return rootObject as groupByClause; } }

		public groupingSpec groupingSpec {  get {return rootObject as groupingSpec; } }

		public orderModifier orderModifier {  get {return rootObject as orderModifier; } }

		public orderBySpec orderBySpec {  get {return rootObject as orderBySpec; } }

		public orderByClause orderByClause {  get {return rootObject as orderByClause; } }

		public returnClause returnClause {  get {return rootObject as returnClause; } }

		public flworExpr flworExpr {  get {return rootObject as flworExpr; } }

		public ifThenElseExpr ifThenElseExpr {  get {return rootObject as ifThenElseExpr; } }

		public quantifiedExprInClause quantifiedExprInClause {  get {return rootObject as quantifiedExprInClause; } }

		public quantifiedExpr quantifiedExpr {  get {return rootObject as quantifiedExpr; } }

		public switchExprCaseClause switchExprCaseClause {  get {return rootObject as switchExprCaseClause; } }

		public switchExprDefaultClause switchExprDefaultClause {  get {return rootObject as switchExprDefaultClause; } }

		public switchExpr switchExpr {  get {return rootObject as switchExpr; } }

		public typeswitchExprCaseClause typeswitchExprCaseClause {  get {return rootObject as typeswitchExprCaseClause; } }

		public typeswitchExprDefaultClause typeswitchExprDefaultClause {  get {return rootObject as typeswitchExprDefaultClause; } }

		public typeswitchExpr typeswitchExpr {  get {return rootObject as typeswitchExpr; } }

		public tryCatchExpr tryCatchExpr {  get {return rootObject as tryCatchExpr; } }

		public catchClause catchClause {  get {return rootObject as catchClause; } }

		public catchErrorList catchErrorList {  get {return rootObject as catchErrorList; } }

		public instanceOfExpr instanceOfExpr {  get {return rootObject as instanceOfExpr; } }

		public treatExpr treatExpr {  get {return rootObject as treatExpr; } }

		public castableExpr castableExpr {  get {return rootObject as castableExpr; } }

		public castExpr castExpr {  get {return rootObject as castExpr; } }

		public arrowExpr arrowExpr {  get {return rootObject as arrowExpr; } }

		public validateExpr validateExpr {  get {return rootObject as validateExpr; } }

		public attributeList attributeList {  get {return rootObject as attributeList; } }

		public elementContent elementContent {  get {return rootObject as elementContent; } }

		public elementConstructor elementConstructor {  get {return rootObject as elementConstructor; } }

		public computedElementConstructor computedElementConstructor {  get {return rootObject as computedElementConstructor; } }

		public computedAttributeConstructor computedAttributeConstructor {  get {return rootObject as computedAttributeConstructor; } }

		public computedDocumentConstructor computedDocumentConstructor {  get {return rootObject as computedDocumentConstructor; } }

		public computedTextConstructor computedTextConstructor {  get {return rootObject as computedTextConstructor; } }

		public computedCommentConstructor computedCommentConstructor {  get {return rootObject as computedCommentConstructor; } }

		public computedNamespaceConstructor computedNamespaceConstructor {  get {return rootObject as computedNamespaceConstructor; } }

		public computedPIConstructor computedPIConstructor {  get {return rootObject as computedPIConstructor; } }

		public unorderedExpr unorderedExpr {  get {return rootObject as unorderedExpr; } }

		public orderedExpr orderedExpr {  get {return rootObject as orderedExpr; } }

		public namedFunctionRef namedFunctionRef {  get {return rootObject as namedFunctionRef; } }

		public inlineFunctionExpr inlineFunctionExpr {  get {return rootObject as inlineFunctionExpr; } }

		public dynamicFunctionInvocationExpr dynamicFunctionInvocationExpr {  get {return rootObject as dynamicFunctionInvocationExpr; } }

		public mapConstructor mapConstructor {  get {return rootObject as mapConstructor; } }

		public mapConstructorEntry mapConstructorEntry {  get {return rootObject as mapConstructorEntry; } }

		public arrayConstructor arrayConstructor {  get {return rootObject as arrayConstructor; } }

		public squareArray squareArray {  get {return rootObject as squareArray; } }

		public curlyArray curlyArray {  get {return rootObject as curlyArray; } }

		public stringConstructor stringConstructor {  get {return rootObject as stringConstructor; } }

		public Wildcard Wildcard {  get {return rootObject as Wildcard; } }

		public schemaAttributeTest schemaAttributeTest {  get {return rootObject as schemaAttributeTest; } }

		public attributeTest attributeTest {  get {return rootObject as attributeTest; } }

		public schemaElementTest schemaElementTest {  get {return rootObject as schemaElementTest; } }

		public elementTest elementTest {  get {return rootObject as elementTest; } }

		public documentTest documentTest {  get {return rootObject as documentTest; } }

		public piTest piTest {  get {return rootObject as piTest; } }

		public nameTest nameTest {  get {return rootObject as nameTest; } }

		public textTest textTest {  get {return rootObject as textTest; } }

		public commentTest commentTest {  get {return rootObject as commentTest; } }

		public namespaceTest namespaceTest {  get {return rootObject as namespaceTest; } }

		public anyKindTest anyKindTest {  get {return rootObject as anyKindTest; } }

		public anyFunctionTest anyFunctionTest {  get {return rootObject as anyFunctionTest; } }

		public typedFunctionTest typedFunctionTest {  get {return rootObject as typedFunctionTest; } }

		public paramTypeList paramTypeList {  get {return rootObject as paramTypeList; } }

		public parenthesizedItemType parenthesizedItemType {  get {return rootObject as parenthesizedItemType; } }

		public anyMapTest anyMapTest {  get {return rootObject as anyMapTest; } }

		public typedMapTest typedMapTest {  get {return rootObject as typedMapTest; } }

		public anyArrayTest anyArrayTest {  get {return rootObject as anyArrayTest; } }

		public typedArrayTest typedArrayTest {  get {return rootObject as typedArrayTest; } }

		public lookup lookup {  get {return rootObject as lookup; } }

		public unaryLookup unaryLookup {  get {return rootObject as unaryLookup; } }

		public xpathAxis xpathAxis {  get {return rootObject as xpathAxis; } }

		public stepExpr stepExpr {  get {return rootObject as stepExpr; } }

		public pathExpr pathExpr {  get {return rootObject as pathExpr; } }

		public module module {  get {return rootObject as module; } }

		public mainModule mainModule {  get {return rootObject as mainModule; } }

		public libraryModule libraryModule {  get {return rootObject as libraryModule; } }

		public versionDecl versionDecl {  get {return rootObject as versionDecl; } }

		public prolog prolog {  get {return rootObject as prolog; } }

		public boundarySpaceDecl boundarySpaceDecl {  get {return rootObject as boundarySpaceDecl; } }

		public defaultCollationDecl defaultCollationDecl {  get {return rootObject as defaultCollationDecl; } }

		public baseUriDecl baseUriDecl {  get {return rootObject as baseUriDecl; } }

		public constructionDecl constructionDecl {  get {return rootObject as constructionDecl; } }

		public orderingModeDecl orderingModeDecl {  get {return rootObject as orderingModeDecl; } }

		public emptyOrderingDecl emptyOrderingDecl {  get {return rootObject as emptyOrderingDecl; } }

		public copyNamespacesDecl copyNamespacesDecl {  get {return rootObject as copyNamespacesDecl; } }

		public defaultNamespaceDecl defaultNamespaceDecl {  get {return rootObject as defaultNamespaceDecl; } }

		public namespaceDecl namespaceDecl {  get {return rootObject as namespaceDecl; } }

		public moduleDecl moduleDecl {  get {return rootObject as moduleDecl; } }

		public decimalFormatDecl decimalFormatDecl {  get {return rootObject as decimalFormatDecl; } }

		public schemaImport schemaImport {  get {return rootObject as schemaImport; } }

		public moduleImport moduleImport {  get {return rootObject as moduleImport; } }

		public contextItemDecl contextItemDecl {  get {return rootObject as contextItemDecl; } }

		public varDecl varDecl {  get {return rootObject as varDecl; } }

		public optionDecl optionDecl {  get {return rootObject as optionDecl; } }

		public functionDecl functionDecl {  get {return rootObject as functionDecl; } }

		public param param {  get {return rootObject as param; } }

		public paramList paramList {  get {return rootObject as paramList; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(itemType root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(forLetClauseItemExtensions root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(anyElementTest root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(kindTest root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(prologPartOneItem root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(prologPartTwoItem root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(NCName root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(expr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(constantExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(integerConstantExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(decimalConstantExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(doubleConstantExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(stringConstantExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(varRef root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(contextItemExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(pragma root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(extensionExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(simpleMapExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(functionCallExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(constructorFunctionExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(sequenceExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(rangeSequenceExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(operatorExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(arithmeticOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(addOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(subtractOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(multiplyOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(divOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(idivOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(modOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(unaryMinusOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(unaryPlusOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(stringOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(stringConcatenateOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(comparisonOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(valueComparisonOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(eqOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(neOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(gtOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(geOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ltOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(leOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(generalComparisonOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(equalOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(notEqualOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(lessThanOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(lessThanOrEqualOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(greaterThanOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(greaterThanOrEqualOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(nodeComparisonOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(isOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(orderComparisonOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(nodeBeforeOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(nodeAfterOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(logicalOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(andOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(orOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(setOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(unionOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(intersectOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(exceptOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(atomicType root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(singleType root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(contextItemType root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(anyItemType root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(sequenceType root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(typeDeclaration root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(sequenceTypeUnion root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(typedVariableBinding root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(positionalVariableBinding root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(variableBinding root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(forClauseItem root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(forClause root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(letClauseItem root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(letClause root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(windowClause root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(tumblingWindowClause root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(slidingWindowClause root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(windowStartCondition root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(windowEndCondition root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(windowVars root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(countClause root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(whereClause root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(groupByClause root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(groupingSpec root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(orderModifier root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(orderBySpec root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(orderByClause root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(returnClause root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(flworExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ifThenElseExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(quantifiedExprInClause root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(quantifiedExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(switchExprCaseClause root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(switchExprDefaultClause root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(switchExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(typeswitchExprCaseClause root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(typeswitchExprDefaultClause root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(typeswitchExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(tryCatchExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(catchClause root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(catchErrorList root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(instanceOfExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(treatExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(castableExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(castExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(arrowExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(validateExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(attributeList root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(elementContent root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(elementConstructor root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(computedElementConstructor root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(computedAttributeConstructor root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(computedDocumentConstructor root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(computedTextConstructor root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(computedCommentConstructor root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(computedNamespaceConstructor root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(computedPIConstructor root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(unorderedExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(orderedExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(namedFunctionRef root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(inlineFunctionExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(dynamicFunctionInvocationExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(mapConstructor root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(mapConstructorEntry root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(arrayConstructor root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(squareArray root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(curlyArray root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(stringConstructor root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Wildcard root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(schemaAttributeTest root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(attributeTest root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(schemaElementTest root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(elementTest root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(documentTest root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(piTest root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(nameTest root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(textTest root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(commentTest root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(namespaceTest root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(anyKindTest root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(anyFunctionTest root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(typedFunctionTest root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(paramTypeList root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(parenthesizedItemType root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(anyMapTest root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(typedMapTest root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(anyArrayTest root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(typedArrayTest root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(lookup root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(unaryLookup root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(xpathAxis root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(stepExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(pathExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(module root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(mainModule root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(libraryModule root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(versionDecl root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(prolog root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(boundarySpaceDecl root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(defaultCollationDecl root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(baseUriDecl root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(constructionDecl root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(orderingModeDecl root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(emptyOrderingDecl root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(copyNamespacesDecl root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(defaultNamespaceDecl root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(namespaceDecl root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(moduleDecl root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(decimalFormatDecl root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(schemaImport root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(moduleImport root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(contextItemDecl root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(varDecl root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(optionDecl root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(functionDecl root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(param root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(paramList root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public global::W3C.XQueryX.itemType itemType {  get {return rootObject as global::W3C.XQueryX.itemType; } }

		public global::W3C.XQueryX.forLetClauseItemExtensions forLetClauseItemExtensions {  get {return rootObject as global::W3C.XQueryX.forLetClauseItemExtensions; } }

		public global::W3C.XQueryX.anyElementTest anyElementTest {  get {return rootObject as global::W3C.XQueryX.anyElementTest; } }

		public global::W3C.XQueryX.kindTest kindTest {  get {return rootObject as global::W3C.XQueryX.kindTest; } }

		public global::W3C.XQueryX.prologPartOneItem prologPartOneItem {  get {return rootObject as global::W3C.XQueryX.prologPartOneItem; } }

		public global::W3C.XQueryX.prologPartTwoItem prologPartTwoItem {  get {return rootObject as global::W3C.XQueryX.prologPartTwoItem; } }

		public global::W3C.XQueryX.NCName NCName {  get {return rootObject as global::W3C.XQueryX.NCName; } }

		public global::W3C.XQueryX.expr expr {  get {return rootObject as global::W3C.XQueryX.expr; } }

		public global::W3C.XQueryX.constantExpr constantExpr {  get {return rootObject as global::W3C.XQueryX.constantExpr; } }

		public global::W3C.XQueryX.integerConstantExpr integerConstantExpr {  get {return rootObject as global::W3C.XQueryX.integerConstantExpr; } }

		public global::W3C.XQueryX.decimalConstantExpr decimalConstantExpr {  get {return rootObject as global::W3C.XQueryX.decimalConstantExpr; } }

		public global::W3C.XQueryX.doubleConstantExpr doubleConstantExpr {  get {return rootObject as global::W3C.XQueryX.doubleConstantExpr; } }

		public global::W3C.XQueryX.stringConstantExpr stringConstantExpr {  get {return rootObject as global::W3C.XQueryX.stringConstantExpr; } }

		public global::W3C.XQueryX.varRef varRef {  get {return rootObject as global::W3C.XQueryX.varRef; } }

		public global::W3C.XQueryX.contextItemExpr contextItemExpr {  get {return rootObject as global::W3C.XQueryX.contextItemExpr; } }

		public global::W3C.XQueryX.pragma pragma {  get {return rootObject as global::W3C.XQueryX.pragma; } }

		public global::W3C.XQueryX.extensionExpr extensionExpr {  get {return rootObject as global::W3C.XQueryX.extensionExpr; } }

		public global::W3C.XQueryX.simpleMapExpr simpleMapExpr {  get {return rootObject as global::W3C.XQueryX.simpleMapExpr; } }

		public global::W3C.XQueryX.functionCallExpr functionCallExpr {  get {return rootObject as global::W3C.XQueryX.functionCallExpr; } }

		public global::W3C.XQueryX.constructorFunctionExpr constructorFunctionExpr {  get {return rootObject as global::W3C.XQueryX.constructorFunctionExpr; } }

		public global::W3C.XQueryX.sequenceExpr sequenceExpr {  get {return rootObject as global::W3C.XQueryX.sequenceExpr; } }

		public global::W3C.XQueryX.rangeSequenceExpr rangeSequenceExpr {  get {return rootObject as global::W3C.XQueryX.rangeSequenceExpr; } }

		public global::W3C.XQueryX.operatorExpr operatorExpr {  get {return rootObject as global::W3C.XQueryX.operatorExpr; } }

		public global::W3C.XQueryX.arithmeticOp arithmeticOp {  get {return rootObject as global::W3C.XQueryX.arithmeticOp; } }

		public global::W3C.XQueryX.addOp addOp {  get {return rootObject as global::W3C.XQueryX.addOp; } }

		public global::W3C.XQueryX.subtractOp subtractOp {  get {return rootObject as global::W3C.XQueryX.subtractOp; } }

		public global::W3C.XQueryX.multiplyOp multiplyOp {  get {return rootObject as global::W3C.XQueryX.multiplyOp; } }

		public global::W3C.XQueryX.divOp divOp {  get {return rootObject as global::W3C.XQueryX.divOp; } }

		public global::W3C.XQueryX.idivOp idivOp {  get {return rootObject as global::W3C.XQueryX.idivOp; } }

		public global::W3C.XQueryX.modOp modOp {  get {return rootObject as global::W3C.XQueryX.modOp; } }

		public global::W3C.XQueryX.unaryMinusOp unaryMinusOp {  get {return rootObject as global::W3C.XQueryX.unaryMinusOp; } }

		public global::W3C.XQueryX.unaryPlusOp unaryPlusOp {  get {return rootObject as global::W3C.XQueryX.unaryPlusOp; } }

		public global::W3C.XQueryX.stringOp stringOp {  get {return rootObject as global::W3C.XQueryX.stringOp; } }

		public global::W3C.XQueryX.stringConcatenateOp stringConcatenateOp {  get {return rootObject as global::W3C.XQueryX.stringConcatenateOp; } }

		public global::W3C.XQueryX.comparisonOp comparisonOp {  get {return rootObject as global::W3C.XQueryX.comparisonOp; } }

		public global::W3C.XQueryX.valueComparisonOp valueComparisonOp {  get {return rootObject as global::W3C.XQueryX.valueComparisonOp; } }

		public global::W3C.XQueryX.eqOp eqOp {  get {return rootObject as global::W3C.XQueryX.eqOp; } }

		public global::W3C.XQueryX.neOp neOp {  get {return rootObject as global::W3C.XQueryX.neOp; } }

		public global::W3C.XQueryX.gtOp gtOp {  get {return rootObject as global::W3C.XQueryX.gtOp; } }

		public global::W3C.XQueryX.geOp geOp {  get {return rootObject as global::W3C.XQueryX.geOp; } }

		public global::W3C.XQueryX.ltOp ltOp {  get {return rootObject as global::W3C.XQueryX.ltOp; } }

		public global::W3C.XQueryX.leOp leOp {  get {return rootObject as global::W3C.XQueryX.leOp; } }

		public global::W3C.XQueryX.generalComparisonOp generalComparisonOp {  get {return rootObject as global::W3C.XQueryX.generalComparisonOp; } }

		public global::W3C.XQueryX.equalOp equalOp {  get {return rootObject as global::W3C.XQueryX.equalOp; } }

		public global::W3C.XQueryX.notEqualOp notEqualOp {  get {return rootObject as global::W3C.XQueryX.notEqualOp; } }

		public global::W3C.XQueryX.lessThanOp lessThanOp {  get {return rootObject as global::W3C.XQueryX.lessThanOp; } }

		public global::W3C.XQueryX.lessThanOrEqualOp lessThanOrEqualOp {  get {return rootObject as global::W3C.XQueryX.lessThanOrEqualOp; } }

		public global::W3C.XQueryX.greaterThanOp greaterThanOp {  get {return rootObject as global::W3C.XQueryX.greaterThanOp; } }

		public global::W3C.XQueryX.greaterThanOrEqualOp greaterThanOrEqualOp {  get {return rootObject as global::W3C.XQueryX.greaterThanOrEqualOp; } }

		public global::W3C.XQueryX.nodeComparisonOp nodeComparisonOp {  get {return rootObject as global::W3C.XQueryX.nodeComparisonOp; } }

		public global::W3C.XQueryX.isOp isOp {  get {return rootObject as global::W3C.XQueryX.isOp; } }

		public global::W3C.XQueryX.orderComparisonOp orderComparisonOp {  get {return rootObject as global::W3C.XQueryX.orderComparisonOp; } }

		public global::W3C.XQueryX.nodeBeforeOp nodeBeforeOp {  get {return rootObject as global::W3C.XQueryX.nodeBeforeOp; } }

		public global::W3C.XQueryX.nodeAfterOp nodeAfterOp {  get {return rootObject as global::W3C.XQueryX.nodeAfterOp; } }

		public global::W3C.XQueryX.logicalOp logicalOp {  get {return rootObject as global::W3C.XQueryX.logicalOp; } }

		public global::W3C.XQueryX.andOp andOp {  get {return rootObject as global::W3C.XQueryX.andOp; } }

		public global::W3C.XQueryX.orOp orOp {  get {return rootObject as global::W3C.XQueryX.orOp; } }

		public global::W3C.XQueryX.setOp setOp {  get {return rootObject as global::W3C.XQueryX.setOp; } }

		public global::W3C.XQueryX.unionOp unionOp {  get {return rootObject as global::W3C.XQueryX.unionOp; } }

		public global::W3C.XQueryX.intersectOp intersectOp {  get {return rootObject as global::W3C.XQueryX.intersectOp; } }

		public global::W3C.XQueryX.exceptOp exceptOp {  get {return rootObject as global::W3C.XQueryX.exceptOp; } }

		public global::W3C.XQueryX.atomicType atomicType {  get {return rootObject as global::W3C.XQueryX.atomicType; } }

		public global::W3C.XQueryX.singleType singleType {  get {return rootObject as global::W3C.XQueryX.singleType; } }

		public global::W3C.XQueryX.contextItemType contextItemType {  get {return rootObject as global::W3C.XQueryX.contextItemType; } }

		public global::W3C.XQueryX.anyItemType anyItemType {  get {return rootObject as global::W3C.XQueryX.anyItemType; } }

		public global::W3C.XQueryX.sequenceType sequenceType {  get {return rootObject as global::W3C.XQueryX.sequenceType; } }

		public global::W3C.XQueryX.typeDeclaration typeDeclaration {  get {return rootObject as global::W3C.XQueryX.typeDeclaration; } }

		public global::W3C.XQueryX.sequenceTypeUnion sequenceTypeUnion {  get {return rootObject as global::W3C.XQueryX.sequenceTypeUnion; } }

		public global::W3C.XQueryX.typedVariableBinding typedVariableBinding {  get {return rootObject as global::W3C.XQueryX.typedVariableBinding; } }

		public global::W3C.XQueryX.positionalVariableBinding positionalVariableBinding {  get {return rootObject as global::W3C.XQueryX.positionalVariableBinding; } }

		public global::W3C.XQueryX.variableBinding variableBinding {  get {return rootObject as global::W3C.XQueryX.variableBinding; } }

		public global::W3C.XQueryX.forClauseItem forClauseItem {  get {return rootObject as global::W3C.XQueryX.forClauseItem; } }

		public global::W3C.XQueryX.forClause forClause {  get {return rootObject as global::W3C.XQueryX.forClause; } }

		public global::W3C.XQueryX.letClauseItem letClauseItem {  get {return rootObject as global::W3C.XQueryX.letClauseItem; } }

		public global::W3C.XQueryX.letClause letClause {  get {return rootObject as global::W3C.XQueryX.letClause; } }

		public global::W3C.XQueryX.windowClause windowClause {  get {return rootObject as global::W3C.XQueryX.windowClause; } }

		public global::W3C.XQueryX.tumblingWindowClause tumblingWindowClause {  get {return rootObject as global::W3C.XQueryX.tumblingWindowClause; } }

		public global::W3C.XQueryX.slidingWindowClause slidingWindowClause {  get {return rootObject as global::W3C.XQueryX.slidingWindowClause; } }

		public global::W3C.XQueryX.windowStartCondition windowStartCondition {  get {return rootObject as global::W3C.XQueryX.windowStartCondition; } }

		public global::W3C.XQueryX.windowEndCondition windowEndCondition {  get {return rootObject as global::W3C.XQueryX.windowEndCondition; } }

		public global::W3C.XQueryX.windowVars windowVars {  get {return rootObject as global::W3C.XQueryX.windowVars; } }

		public global::W3C.XQueryX.countClause countClause {  get {return rootObject as global::W3C.XQueryX.countClause; } }

		public global::W3C.XQueryX.whereClause whereClause {  get {return rootObject as global::W3C.XQueryX.whereClause; } }

		public global::W3C.XQueryX.groupByClause groupByClause {  get {return rootObject as global::W3C.XQueryX.groupByClause; } }

		public global::W3C.XQueryX.groupingSpec groupingSpec {  get {return rootObject as global::W3C.XQueryX.groupingSpec; } }

		public global::W3C.XQueryX.orderModifier orderModifier {  get {return rootObject as global::W3C.XQueryX.orderModifier; } }

		public global::W3C.XQueryX.orderBySpec orderBySpec {  get {return rootObject as global::W3C.XQueryX.orderBySpec; } }

		public global::W3C.XQueryX.orderByClause orderByClause {  get {return rootObject as global::W3C.XQueryX.orderByClause; } }

		public global::W3C.XQueryX.returnClause returnClause {  get {return rootObject as global::W3C.XQueryX.returnClause; } }

		public global::W3C.XQueryX.flworExpr flworExpr {  get {return rootObject as global::W3C.XQueryX.flworExpr; } }

		public global::W3C.XQueryX.ifThenElseExpr ifThenElseExpr {  get {return rootObject as global::W3C.XQueryX.ifThenElseExpr; } }

		public global::W3C.XQueryX.quantifiedExprInClause quantifiedExprInClause {  get {return rootObject as global::W3C.XQueryX.quantifiedExprInClause; } }

		public global::W3C.XQueryX.quantifiedExpr quantifiedExpr {  get {return rootObject as global::W3C.XQueryX.quantifiedExpr; } }

		public global::W3C.XQueryX.switchExprCaseClause switchExprCaseClause {  get {return rootObject as global::W3C.XQueryX.switchExprCaseClause; } }

		public global::W3C.XQueryX.switchExprDefaultClause switchExprDefaultClause {  get {return rootObject as global::W3C.XQueryX.switchExprDefaultClause; } }

		public global::W3C.XQueryX.switchExpr switchExpr {  get {return rootObject as global::W3C.XQueryX.switchExpr; } }

		public global::W3C.XQueryX.typeswitchExprCaseClause typeswitchExprCaseClause {  get {return rootObject as global::W3C.XQueryX.typeswitchExprCaseClause; } }

		public global::W3C.XQueryX.typeswitchExprDefaultClause typeswitchExprDefaultClause {  get {return rootObject as global::W3C.XQueryX.typeswitchExprDefaultClause; } }

		public global::W3C.XQueryX.typeswitchExpr typeswitchExpr {  get {return rootObject as global::W3C.XQueryX.typeswitchExpr; } }

		public global::W3C.XQueryX.tryCatchExpr tryCatchExpr {  get {return rootObject as global::W3C.XQueryX.tryCatchExpr; } }

		public global::W3C.XQueryX.catchClause catchClause {  get {return rootObject as global::W3C.XQueryX.catchClause; } }

		public global::W3C.XQueryX.catchErrorList catchErrorList {  get {return rootObject as global::W3C.XQueryX.catchErrorList; } }

		public global::W3C.XQueryX.instanceOfExpr instanceOfExpr {  get {return rootObject as global::W3C.XQueryX.instanceOfExpr; } }

		public global::W3C.XQueryX.treatExpr treatExpr {  get {return rootObject as global::W3C.XQueryX.treatExpr; } }

		public global::W3C.XQueryX.castableExpr castableExpr {  get {return rootObject as global::W3C.XQueryX.castableExpr; } }

		public global::W3C.XQueryX.castExpr castExpr {  get {return rootObject as global::W3C.XQueryX.castExpr; } }

		public global::W3C.XQueryX.arrowExpr arrowExpr {  get {return rootObject as global::W3C.XQueryX.arrowExpr; } }

		public global::W3C.XQueryX.validateExpr validateExpr {  get {return rootObject as global::W3C.XQueryX.validateExpr; } }

		public global::W3C.XQueryX.attributeList attributeList {  get {return rootObject as global::W3C.XQueryX.attributeList; } }

		public global::W3C.XQueryX.elementContent elementContent {  get {return rootObject as global::W3C.XQueryX.elementContent; } }

		public global::W3C.XQueryX.elementConstructor elementConstructor {  get {return rootObject as global::W3C.XQueryX.elementConstructor; } }

		public global::W3C.XQueryX.computedElementConstructor computedElementConstructor {  get {return rootObject as global::W3C.XQueryX.computedElementConstructor; } }

		public global::W3C.XQueryX.computedAttributeConstructor computedAttributeConstructor {  get {return rootObject as global::W3C.XQueryX.computedAttributeConstructor; } }

		public global::W3C.XQueryX.computedDocumentConstructor computedDocumentConstructor {  get {return rootObject as global::W3C.XQueryX.computedDocumentConstructor; } }

		public global::W3C.XQueryX.computedTextConstructor computedTextConstructor {  get {return rootObject as global::W3C.XQueryX.computedTextConstructor; } }

		public global::W3C.XQueryX.computedCommentConstructor computedCommentConstructor {  get {return rootObject as global::W3C.XQueryX.computedCommentConstructor; } }

		public global::W3C.XQueryX.computedNamespaceConstructor computedNamespaceConstructor {  get {return rootObject as global::W3C.XQueryX.computedNamespaceConstructor; } }

		public global::W3C.XQueryX.computedPIConstructor computedPIConstructor {  get {return rootObject as global::W3C.XQueryX.computedPIConstructor; } }

		public global::W3C.XQueryX.unorderedExpr unorderedExpr {  get {return rootObject as global::W3C.XQueryX.unorderedExpr; } }

		public global::W3C.XQueryX.orderedExpr orderedExpr {  get {return rootObject as global::W3C.XQueryX.orderedExpr; } }

		public global::W3C.XQueryX.namedFunctionRef namedFunctionRef {  get {return rootObject as global::W3C.XQueryX.namedFunctionRef; } }

		public global::W3C.XQueryX.inlineFunctionExpr inlineFunctionExpr {  get {return rootObject as global::W3C.XQueryX.inlineFunctionExpr; } }

		public global::W3C.XQueryX.dynamicFunctionInvocationExpr dynamicFunctionInvocationExpr {  get {return rootObject as global::W3C.XQueryX.dynamicFunctionInvocationExpr; } }

		public global::W3C.XQueryX.mapConstructor mapConstructor {  get {return rootObject as global::W3C.XQueryX.mapConstructor; } }

		public global::W3C.XQueryX.mapConstructorEntry mapConstructorEntry {  get {return rootObject as global::W3C.XQueryX.mapConstructorEntry; } }

		public global::W3C.XQueryX.arrayConstructor arrayConstructor {  get {return rootObject as global::W3C.XQueryX.arrayConstructor; } }

		public global::W3C.XQueryX.squareArray squareArray {  get {return rootObject as global::W3C.XQueryX.squareArray; } }

		public global::W3C.XQueryX.curlyArray curlyArray {  get {return rootObject as global::W3C.XQueryX.curlyArray; } }

		public global::W3C.XQueryX.stringConstructor stringConstructor {  get {return rootObject as global::W3C.XQueryX.stringConstructor; } }

		public global::W3C.XQueryX.Wildcard Wildcard {  get {return rootObject as global::W3C.XQueryX.Wildcard; } }

		public global::W3C.XQueryX.schemaAttributeTest schemaAttributeTest {  get {return rootObject as global::W3C.XQueryX.schemaAttributeTest; } }

		public global::W3C.XQueryX.attributeTest attributeTest {  get {return rootObject as global::W3C.XQueryX.attributeTest; } }

		public global::W3C.XQueryX.schemaElementTest schemaElementTest {  get {return rootObject as global::W3C.XQueryX.schemaElementTest; } }

		public global::W3C.XQueryX.elementTest elementTest {  get {return rootObject as global::W3C.XQueryX.elementTest; } }

		public global::W3C.XQueryX.documentTest documentTest {  get {return rootObject as global::W3C.XQueryX.documentTest; } }

		public global::W3C.XQueryX.piTest piTest {  get {return rootObject as global::W3C.XQueryX.piTest; } }

		public global::W3C.XQueryX.nameTest nameTest {  get {return rootObject as global::W3C.XQueryX.nameTest; } }

		public global::W3C.XQueryX.textTest textTest {  get {return rootObject as global::W3C.XQueryX.textTest; } }

		public global::W3C.XQueryX.commentTest commentTest {  get {return rootObject as global::W3C.XQueryX.commentTest; } }

		public global::W3C.XQueryX.namespaceTest namespaceTest {  get {return rootObject as global::W3C.XQueryX.namespaceTest; } }

		public global::W3C.XQueryX.anyKindTest anyKindTest {  get {return rootObject as global::W3C.XQueryX.anyKindTest; } }

		public global::W3C.XQueryX.anyFunctionTest anyFunctionTest {  get {return rootObject as global::W3C.XQueryX.anyFunctionTest; } }

		public global::W3C.XQueryX.typedFunctionTest typedFunctionTest {  get {return rootObject as global::W3C.XQueryX.typedFunctionTest; } }

		public global::W3C.XQueryX.paramTypeList paramTypeList {  get {return rootObject as global::W3C.XQueryX.paramTypeList; } }

		public global::W3C.XQueryX.parenthesizedItemType parenthesizedItemType {  get {return rootObject as global::W3C.XQueryX.parenthesizedItemType; } }

		public global::W3C.XQueryX.anyMapTest anyMapTest {  get {return rootObject as global::W3C.XQueryX.anyMapTest; } }

		public global::W3C.XQueryX.typedMapTest typedMapTest {  get {return rootObject as global::W3C.XQueryX.typedMapTest; } }

		public global::W3C.XQueryX.anyArrayTest anyArrayTest {  get {return rootObject as global::W3C.XQueryX.anyArrayTest; } }

		public global::W3C.XQueryX.typedArrayTest typedArrayTest {  get {return rootObject as global::W3C.XQueryX.typedArrayTest; } }

		public global::W3C.XQueryX.lookup lookup {  get {return rootObject as global::W3C.XQueryX.lookup; } }

		public global::W3C.XQueryX.unaryLookup unaryLookup {  get {return rootObject as global::W3C.XQueryX.unaryLookup; } }

		public global::W3C.XQueryX.xpathAxis xpathAxis {  get {return rootObject as global::W3C.XQueryX.xpathAxis; } }

		public global::W3C.XQueryX.stepExpr stepExpr {  get {return rootObject as global::W3C.XQueryX.stepExpr; } }

		public global::W3C.XQueryX.pathExpr pathExpr {  get {return rootObject as global::W3C.XQueryX.pathExpr; } }

		public global::W3C.XQueryX.module module {  get {return rootObject as global::W3C.XQueryX.module; } }

		public global::W3C.XQueryX.mainModule mainModule {  get {return rootObject as global::W3C.XQueryX.mainModule; } }

		public global::W3C.XQueryX.libraryModule libraryModule {  get {return rootObject as global::W3C.XQueryX.libraryModule; } }

		public global::W3C.XQueryX.versionDecl versionDecl {  get {return rootObject as global::W3C.XQueryX.versionDecl; } }

		public global::W3C.XQueryX.prolog prolog {  get {return rootObject as global::W3C.XQueryX.prolog; } }

		public global::W3C.XQueryX.boundarySpaceDecl boundarySpaceDecl {  get {return rootObject as global::W3C.XQueryX.boundarySpaceDecl; } }

		public global::W3C.XQueryX.defaultCollationDecl defaultCollationDecl {  get {return rootObject as global::W3C.XQueryX.defaultCollationDecl; } }

		public global::W3C.XQueryX.baseUriDecl baseUriDecl {  get {return rootObject as global::W3C.XQueryX.baseUriDecl; } }

		public global::W3C.XQueryX.constructionDecl constructionDecl {  get {return rootObject as global::W3C.XQueryX.constructionDecl; } }

		public global::W3C.XQueryX.orderingModeDecl orderingModeDecl {  get {return rootObject as global::W3C.XQueryX.orderingModeDecl; } }

		public global::W3C.XQueryX.emptyOrderingDecl emptyOrderingDecl {  get {return rootObject as global::W3C.XQueryX.emptyOrderingDecl; } }

		public global::W3C.XQueryX.copyNamespacesDecl copyNamespacesDecl {  get {return rootObject as global::W3C.XQueryX.copyNamespacesDecl; } }

		public global::W3C.XQueryX.defaultNamespaceDecl defaultNamespaceDecl {  get {return rootObject as global::W3C.XQueryX.defaultNamespaceDecl; } }

		public global::W3C.XQueryX.namespaceDecl namespaceDecl {  get {return rootObject as global::W3C.XQueryX.namespaceDecl; } }

		public global::W3C.XQueryX.moduleDecl moduleDecl {  get {return rootObject as global::W3C.XQueryX.moduleDecl; } }

		public global::W3C.XQueryX.decimalFormatDecl decimalFormatDecl {  get {return rootObject as global::W3C.XQueryX.decimalFormatDecl; } }

		public global::W3C.XQueryX.schemaImport schemaImport {  get {return rootObject as global::W3C.XQueryX.schemaImport; } }

		public global::W3C.XQueryX.moduleImport moduleImport {  get {return rootObject as global::W3C.XQueryX.moduleImport; } }

		public global::W3C.XQueryX.contextItemDecl contextItemDecl {  get {return rootObject as global::W3C.XQueryX.contextItemDecl; } }

		public global::W3C.XQueryX.varDecl varDecl {  get {return rootObject as global::W3C.XQueryX.varDecl; } }

		public global::W3C.XQueryX.optionDecl optionDecl {  get {return rootObject as global::W3C.XQueryX.optionDecl; } }

		public global::W3C.XQueryX.functionDecl functionDecl {  get {return rootObject as global::W3C.XQueryX.functionDecl; } }

		public global::W3C.XQueryX.param param {  get {return rootObject as global::W3C.XQueryX.param; } }

		public global::W3C.XQueryX.paramList paramList {  get {return rootObject as global::W3C.XQueryX.paramList; } }
        
        private XRoot() {
        }
        
        public XRoot(global::W3C.XQueryX.itemType root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.forLetClauseItemExtensions root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.anyElementTest root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.kindTest root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.prologPartOneItem root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.prologPartTwoItem root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.NCName root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.expr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.constantExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.integerConstantExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.decimalConstantExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.doubleConstantExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.stringConstantExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.varRef root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.contextItemExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.pragma root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.extensionExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.simpleMapExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.functionCallExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.constructorFunctionExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.sequenceExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.rangeSequenceExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.operatorExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.arithmeticOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.addOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.subtractOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.multiplyOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.divOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.idivOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.modOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.unaryMinusOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.unaryPlusOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.stringOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.stringConcatenateOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.comparisonOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.valueComparisonOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.eqOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.neOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.gtOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.geOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.ltOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.leOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.generalComparisonOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.equalOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.notEqualOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.lessThanOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.lessThanOrEqualOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.greaterThanOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.greaterThanOrEqualOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.nodeComparisonOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.isOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.orderComparisonOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.nodeBeforeOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.nodeAfterOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.logicalOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.andOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.orOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.setOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.unionOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.intersectOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.exceptOp root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.atomicType root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.singleType root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.contextItemType root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.anyItemType root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.sequenceType root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.typeDeclaration root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.sequenceTypeUnion root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.typedVariableBinding root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.positionalVariableBinding root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.variableBinding root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.forClauseItem root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.forClause root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.letClauseItem root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.letClause root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.windowClause root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.tumblingWindowClause root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.slidingWindowClause root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.windowStartCondition root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.windowEndCondition root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.windowVars root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.countClause root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.whereClause root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.groupByClause root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.groupingSpec root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.orderModifier root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.orderBySpec root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.orderByClause root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.returnClause root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.flworExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.ifThenElseExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.quantifiedExprInClause root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.quantifiedExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.switchExprCaseClause root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.switchExprDefaultClause root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.switchExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.typeswitchExprCaseClause root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.typeswitchExprDefaultClause root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.typeswitchExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.tryCatchExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.catchClause root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.catchErrorList root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.instanceOfExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.treatExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.castableExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.castExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.arrowExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.validateExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.attributeList root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.elementContent root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.elementConstructor root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.computedElementConstructor root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.computedAttributeConstructor root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.computedDocumentConstructor root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.computedTextConstructor root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.computedCommentConstructor root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.computedNamespaceConstructor root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.computedPIConstructor root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.unorderedExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.orderedExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.namedFunctionRef root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.inlineFunctionExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.dynamicFunctionInvocationExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.mapConstructor root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.mapConstructorEntry root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.arrayConstructor root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.squareArray root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.curlyArray root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.stringConstructor root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.Wildcard root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.schemaAttributeTest root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.attributeTest root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.schemaElementTest root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.elementTest root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.documentTest root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.piTest root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.nameTest root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.textTest root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.commentTest root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.namespaceTest root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.anyKindTest root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.anyFunctionTest root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.typedFunctionTest root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.paramTypeList root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.parenthesizedItemType root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.anyMapTest root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.typedMapTest root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.anyArrayTest root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.typedArrayTest root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.lookup root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.unaryLookup root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.xpathAxis root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.stepExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.pathExpr root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.module root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.mainModule root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.libraryModule root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.versionDecl root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.prolog root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.boundarySpaceDecl root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.defaultCollationDecl root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.baseUriDecl root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.constructionDecl root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.orderingModeDecl root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.emptyOrderingDecl root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.copyNamespacesDecl root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.defaultNamespaceDecl root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.namespaceDecl root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.moduleDecl root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.decimalFormatDecl root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.schemaImport root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.moduleImport root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.contextItemDecl root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.varDecl root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.optionDecl root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.functionDecl root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.param root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XQueryX.paramList root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
