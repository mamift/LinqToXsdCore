//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace W3C.XSD {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using W3C;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: ((include | import | redefine | annotation)*, ((simpleType | complexType | group | attributeGroup | element | attribute | notation), annotation*)*)
    /// </para>
    /// </summary>
    public partial class schema : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<include> includeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<import> importField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<redefine> redefineField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<annotation> annotationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<simpleType> simpleTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<complexType> complexTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<group> groupField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<attributeGroup> attributeGroupField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<element> elementField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<attribute> attributeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<notation> notationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string[] finalDefaultDefaultValue = new string[] {
                ""};
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string[] blockDefaultDefaultValue = new string[] {
                ""};
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string attributeFormDefaultDefaultValue = "unqualified";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string elementFormDefaultDefaultValue = "unqualified";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator schema(XElement xe) { return XTypedServices.ToXTypedElement<schema>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static schema() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((include | import | redefine | annotation)*, ((simpleType | complexType | group | attributeGroup | element | attribute | notation), annotation*)*)
        /// </para>
        /// </summary>
        public schema() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((include | import | redefine | annotation)*, ((simpleType | complexType | group | attributeGroup | element | attribute | notation), annotation*)*)
        /// </para>
        /// </summary>
        public virtual IList<include> include {
            get {
                if ((this.includeField == null)) {
                    this.includeField = new XTypedList<include>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("include", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.includeField;
            }
            set {
                if ((value == null)) {
                    this.includeField = null;
                }
                else {
                    if ((this.includeField == null)) {
                        this.includeField = XTypedList<include>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("include", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<include>(this.includeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((include | import | redefine | annotation)*, ((simpleType | complexType | group | attributeGroup | element | attribute | notation), annotation*)*)
        /// </para>
        /// </summary>
        public virtual IList<import> import {
            get {
                if ((this.importField == null)) {
                    this.importField = new XTypedList<import>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("import", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.importField;
            }
            set {
                if ((value == null)) {
                    this.importField = null;
                }
                else {
                    if ((this.importField == null)) {
                        this.importField = XTypedList<import>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("import", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<import>(this.importField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((include | import | redefine | annotation)*, ((simpleType | complexType | group | attributeGroup | element | attribute | notation), annotation*)*)
        /// </para>
        /// </summary>
        public virtual IList<redefine> redefine {
            get {
                if ((this.redefineField == null)) {
                    this.redefineField = new XTypedList<redefine>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("redefine", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.redefineField;
            }
            set {
                if ((value == null)) {
                    this.redefineField = null;
                }
                else {
                    if ((this.redefineField == null)) {
                        this.redefineField = XTypedList<redefine>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("redefine", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<redefine>(this.redefineField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((include | import | redefine | annotation)*, ((simpleType | complexType | group | attributeGroup | element | attribute | notation), annotation*)*)
        /// </para>
        /// </summary>
        public virtual IList<annotation> annotation {
            get {
                if ((this.annotationField == null)) {
                    this.annotationField = new XTypedList<annotation>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.annotationField;
            }
            set {
                if ((value == null)) {
                    this.annotationField = null;
                }
                else {
                    if ((this.annotationField == null)) {
                        this.annotationField = XTypedList<annotation>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<annotation>(this.annotationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((include | import | redefine | annotation)*, ((simpleType | complexType | group | attributeGroup | element | attribute | notation), annotation*)*)
        /// </para>
        /// </summary>
        public virtual IList<simpleType> simpleType {
            get {
                if ((this.simpleTypeField == null)) {
                    this.simpleTypeField = new XTypedList<simpleType>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("simpleType", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.simpleTypeField;
            }
            set {
                if ((value == null)) {
                    this.simpleTypeField = null;
                }
                else {
                    if ((this.simpleTypeField == null)) {
                        this.simpleTypeField = XTypedList<simpleType>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("simpleType", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<simpleType>(this.simpleTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((include | import | redefine | annotation)*, ((simpleType | complexType | group | attributeGroup | element | attribute | notation), annotation*)*)
        /// </para>
        /// </summary>
        public virtual IList<complexType> complexType {
            get {
                if ((this.complexTypeField == null)) {
                    this.complexTypeField = new XTypedList<complexType>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("complexType", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.complexTypeField;
            }
            set {
                if ((value == null)) {
                    this.complexTypeField = null;
                }
                else {
                    if ((this.complexTypeField == null)) {
                        this.complexTypeField = XTypedList<complexType>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("complexType", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<complexType>(this.complexTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((include | import | redefine | annotation)*, ((simpleType | complexType | group | attributeGroup | element | attribute | notation), annotation*)*)
        /// </para>
        /// </summary>
        public virtual IList<group> group {
            get {
                if ((this.groupField == null)) {
                    this.groupField = new XTypedList<group>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("group", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.groupField;
            }
            set {
                if ((value == null)) {
                    this.groupField = null;
                }
                else {
                    if ((this.groupField == null)) {
                        this.groupField = XTypedList<group>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("group", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<group>(this.groupField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((include | import | redefine | annotation)*, ((simpleType | complexType | group | attributeGroup | element | attribute | notation), annotation*)*)
        /// </para>
        /// </summary>
        public virtual IList<attributeGroup> attributeGroup {
            get {
                if ((this.attributeGroupField == null)) {
                    this.attributeGroupField = new XTypedList<attributeGroup>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("attributeGroup", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.attributeGroupField;
            }
            set {
                if ((value == null)) {
                    this.attributeGroupField = null;
                }
                else {
                    if ((this.attributeGroupField == null)) {
                        this.attributeGroupField = XTypedList<attributeGroup>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("attributeGroup", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<attributeGroup>(this.attributeGroupField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((include | import | redefine | annotation)*, ((simpleType | complexType | group | attributeGroup | element | attribute | notation), annotation*)*)
        /// </para>
        /// </summary>
        public virtual IList<element> element {
            get {
                if ((this.elementField == null)) {
                    this.elementField = new XTypedList<element>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("element", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.elementField;
            }
            set {
                if ((value == null)) {
                    this.elementField = null;
                }
                else {
                    if ((this.elementField == null)) {
                        this.elementField = XTypedList<element>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("element", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<element>(this.elementField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((include | import | redefine | annotation)*, ((simpleType | complexType | group | attributeGroup | element | attribute | notation), annotation*)*)
        /// </para>
        /// </summary>
        public virtual IList<attribute> attribute {
            get {
                if ((this.attributeField == null)) {
                    this.attributeField = new XTypedList<attribute>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("attribute", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.attributeField;
            }
            set {
                if ((value == null)) {
                    this.attributeField = null;
                }
                else {
                    if ((this.attributeField == null)) {
                        this.attributeField = XTypedList<attribute>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("attribute", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<attribute>(this.attributeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((include | import | redefine | annotation)*, ((simpleType | complexType | group | attributeGroup | element | attribute | notation), annotation*)*)
        /// </para>
        /// </summary>
        public virtual IList<notation> notation {
            get {
                if ((this.notationField == null)) {
                    this.notationField = new XTypedList<notation>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("notation", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.notationField;
            }
            set {
                if ((value == null)) {
                    this.notationField = null;
                }
                else {
                    if ((this.notationField == null)) {
                        this.notationField = XTypedList<notation>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("notation", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<notation>(this.notationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri targetNamespace {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("targetNamespace", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("targetNamespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string version {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("version", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("version", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object finalDefault {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("finalDefault", ""));
                return XTypedServices.ParseUnionValue(x, global::W3C.XSD.fullDerivationSet.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "finalDefault", this, System.Xml.Linq.XName.Get("finalDefault", ""), global::W3C.XSD.fullDerivationSet.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object blockDefault {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("blockDefault", ""));
                return XTypedServices.ParseUnionValue(x, global::W3C.XSD.blockSet.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "blockDefault", this, System.Xml.Linq.XName.Get("blockDefault", ""), global::W3C.XSD.blockSet.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string attributeFormDefault {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("attributeFormDefault", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, attributeFormDefaultDefaultValue);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("attributeFormDefault", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string elementFormDefault {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("elementFormDefault", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, elementFormDefaultDefaultValue);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("elementFormDefault", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object lang {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("lang", "http://www.w3.org/XML/1998/namespace"));
                return XTypedServices.ParseUnionValue(x, global::W3C.lang.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "lang", this, System.Xml.Linq.XName.Get("lang", "http://www.w3.org/XML/1998/namespace"), global::W3C.lang.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("schema", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static schema Load(string xmlFile) {
            return XTypedServices.Load<schema>(xmlFile);
        }
        
        public static schema Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<schema>(xmlFile);
        }
        
        public static schema Parse(string xml) {
            return XTypedServices.Parse<schema>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<schema>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("include", "http://www.w3.org/2001/XMLSchema"), typeof(include));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("import", "http://www.w3.org/2001/XMLSchema"), typeof(import));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("redefine", "http://www.w3.org/2001/XMLSchema"), typeof(redefine));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"), typeof(annotation));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("simpleType", "http://www.w3.org/2001/XMLSchema"), typeof(simpleType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("complexType", "http://www.w3.org/2001/XMLSchema"), typeof(complexType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("group", "http://www.w3.org/2001/XMLSchema"), typeof(group));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("attributeGroup", "http://www.w3.org/2001/XMLSchema"), typeof(attributeGroup));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("element", "http://www.w3.org/2001/XMLSchema"), typeof(element));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("attribute", "http://www.w3.org/2001/XMLSchema"), typeof(attribute));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("notation", "http://www.w3.org/2001/XMLSchema"), typeof(notation));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (annotation?, (restriction | extension))
    /// </para>
    /// </summary>
    public partial class complexContent : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator complexContent(XElement xe) { return XTypedServices.ToXTypedElement<complexContent>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static complexContent() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (annotation?, (restriction | extension))
        /// </para>
        /// </summary>
        public complexContent() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (restriction | extension))
        /// </para>
        /// </summary>
        public virtual annotation annotation {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"));
                return ((annotation)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (restriction | extension))
        /// </para>
        /// </summary>
        public virtual complexRestrictionType restriction {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("restriction", "http://www.w3.org/2001/XMLSchema"));
                return ((complexRestrictionType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("restriction", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (restriction | extension))
        /// </para>
        /// </summary>
        public virtual extensionType extension {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("extension", "http://www.w3.org/2001/XMLSchema"));
                return ((extensionType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("extension", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///       Overrides any setting on complexType parent.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Nullable<bool> mixed {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("mixed", ""));
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("mixed", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("complexContent", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static complexContent Load(string xmlFile) {
            return XTypedServices.Load<complexContent>(xmlFile);
        }
        
        public static complexContent Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<complexContent>(xmlFile);
        }
        
        public static complexContent Parse(string xml) {
            return XTypedServices.Parse<complexContent>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<complexContent>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"), typeof(annotation));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("restriction", "http://www.w3.org/2001/XMLSchema"), typeof(complexRestrictionType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extension", "http://www.w3.org/2001/XMLSchema"), typeof(extensionType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (annotation?, (restriction | extension))
    /// </para>
    /// </summary>
    public partial class simpleContent : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator simpleContent(XElement xe) { return XTypedServices.ToXTypedElement<simpleContent>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static simpleContent() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (annotation?, (restriction | extension))
        /// </para>
        /// </summary>
        public simpleContent() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (restriction | extension))
        /// </para>
        /// </summary>
        public virtual annotation annotation {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"));
                return ((annotation)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (restriction | extension))
        /// </para>
        /// </summary>
        public virtual simpleRestrictionType restriction {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("restriction", "http://www.w3.org/2001/XMLSchema"));
                return ((simpleRestrictionType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("restriction", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (restriction | extension))
        /// </para>
        /// </summary>
        public virtual simpleExtensionType extension {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("extension", "http://www.w3.org/2001/XMLSchema"));
                return ((simpleExtensionType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("extension", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("simpleContent", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static simpleContent Load(string xmlFile) {
            return XTypedServices.Load<simpleContent>(xmlFile);
        }
        
        public static simpleContent Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<simpleContent>(xmlFile);
        }
        
        public static simpleContent Parse(string xml) {
            return XTypedServices.Parse<simpleContent>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<simpleContent>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"), typeof(annotation));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("restriction", "http://www.w3.org/2001/XMLSchema"), typeof(simpleRestrictionType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("extension", "http://www.w3.org/2001/XMLSchema"), typeof(simpleExtensionType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (annotation?)
    /// </para>
    /// </summary>
    public partial class any : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static decimal minOccursDefaultValue = System.Xml.XmlConvert.ToDecimal("1");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static decimal maxOccursDefaultValue = System.Xml.XmlConvert.ToDecimal("1");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string @namespaceDefaultValue = "##any";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string processContentsDefaultValue = "strict";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator any(XElement xe) { return XTypedServices.ToXTypedElement<any>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static any() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (annotation?)
        /// </para>
        /// </summary>
        public any() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (annotation?)
        /// </para>
        /// </summary>
        public virtual annotation annotation {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"));
                return ((annotation)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual decimal minOccurs {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("minOccurs", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype, minOccursDefaultValue);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("minOccurs", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object maxOccurs {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("maxOccurs", ""));
                return XTypedServices.ParseUnionValue(x, global::W3C.XSD.allNNI.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "maxOccurs", this, System.Xml.Linq.XName.Get("maxOccurs", ""), global::W3C.XSD.allNNI.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object @namespace {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("namespace", ""));
                return XTypedServices.ParseUnionValue(x, global::W3C.XSD.namespaceList.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "@namespace", this, System.Xml.Linq.XName.Get("namespace", ""), global::W3C.XSD.namespaceList.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string processContents {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("processContents", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, processContentsDefaultValue);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("processContents", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("any", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static any Load(string xmlFile) {
            return XTypedServices.Load<any>(xmlFile);
        }
        
        public static any Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<any>(xmlFile);
        }
        
        public static any Parse(string xml) {
            return XTypedServices.Parse<any>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<any>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"), typeof(annotation));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (annotation?)
    /// </para>
    /// </summary>
    public partial class include : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator include(XElement xe) { return XTypedServices.ToXTypedElement<include>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static include() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (annotation?)
        /// </para>
        /// </summary>
        public include() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (annotation?)
        /// </para>
        /// </summary>
        public virtual annotation annotation {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"));
                return ((annotation)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual System.Uri schemaLocation {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("schemaLocation", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("schemaLocation", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("include", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static include Load(string xmlFile) {
            return XTypedServices.Load<include>(xmlFile);
        }
        
        public static include Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<include>(xmlFile);
        }
        
        public static include Parse(string xml) {
            return XTypedServices.Parse<include>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<include>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"), typeof(annotation));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (annotation | simpleType | complexType | group | attributeGroup)*
    /// </para>
    /// </summary>
    public partial class redefine : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<annotation> annotationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<simpleType> simpleTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<complexType> complexTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<group> groupField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<attributeGroup> attributeGroupField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator redefine(XElement xe) { return XTypedServices.ToXTypedElement<redefine>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static redefine() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (annotation | simpleType | complexType | group | attributeGroup)*
        /// </para>
        /// </summary>
        public redefine() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (annotation | simpleType | complexType | group | attributeGroup)*
        /// </para>
        /// </summary>
        public virtual IList<annotation> annotation {
            get {
                if ((this.annotationField == null)) {
                    this.annotationField = new XTypedList<annotation>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.annotationField;
            }
            set {
                if ((value == null)) {
                    this.annotationField = null;
                }
                else {
                    if ((this.annotationField == null)) {
                        this.annotationField = XTypedList<annotation>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<annotation>(this.annotationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (annotation | simpleType | complexType | group | attributeGroup)*
        /// </para>
        /// </summary>
        public virtual IList<simpleType> simpleType {
            get {
                if ((this.simpleTypeField == null)) {
                    this.simpleTypeField = new XTypedList<simpleType>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("simpleType", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.simpleTypeField;
            }
            set {
                if ((value == null)) {
                    this.simpleTypeField = null;
                }
                else {
                    if ((this.simpleTypeField == null)) {
                        this.simpleTypeField = XTypedList<simpleType>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("simpleType", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<simpleType>(this.simpleTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (annotation | simpleType | complexType | group | attributeGroup)*
        /// </para>
        /// </summary>
        public virtual IList<complexType> complexType {
            get {
                if ((this.complexTypeField == null)) {
                    this.complexTypeField = new XTypedList<complexType>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("complexType", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.complexTypeField;
            }
            set {
                if ((value == null)) {
                    this.complexTypeField = null;
                }
                else {
                    if ((this.complexTypeField == null)) {
                        this.complexTypeField = XTypedList<complexType>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("complexType", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<complexType>(this.complexTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (annotation | simpleType | complexType | group | attributeGroup)*
        /// </para>
        /// </summary>
        public virtual IList<group> group {
            get {
                if ((this.groupField == null)) {
                    this.groupField = new XTypedList<group>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("group", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.groupField;
            }
            set {
                if ((value == null)) {
                    this.groupField = null;
                }
                else {
                    if ((this.groupField == null)) {
                        this.groupField = XTypedList<group>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("group", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<group>(this.groupField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (annotation | simpleType | complexType | group | attributeGroup)*
        /// </para>
        /// </summary>
        public virtual IList<attributeGroup> attributeGroup {
            get {
                if ((this.attributeGroupField == null)) {
                    this.attributeGroupField = new XTypedList<attributeGroup>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("attributeGroup", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.attributeGroupField;
            }
            set {
                if ((value == null)) {
                    this.attributeGroupField = null;
                }
                else {
                    if ((this.attributeGroupField == null)) {
                        this.attributeGroupField = XTypedList<attributeGroup>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("attributeGroup", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<attributeGroup>(this.attributeGroupField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual System.Uri schemaLocation {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("schemaLocation", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("schemaLocation", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("redefine", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static redefine Load(string xmlFile) {
            return XTypedServices.Load<redefine>(xmlFile);
        }
        
        public static redefine Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<redefine>(xmlFile);
        }
        
        public static redefine Parse(string xml) {
            return XTypedServices.Parse<redefine>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<redefine>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"), typeof(annotation));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("simpleType", "http://www.w3.org/2001/XMLSchema"), typeof(simpleType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("complexType", "http://www.w3.org/2001/XMLSchema"), typeof(complexType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("group", "http://www.w3.org/2001/XMLSchema"), typeof(group));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("attributeGroup", "http://www.w3.org/2001/XMLSchema"), typeof(attributeGroup));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (annotation?)
    /// </para>
    /// </summary>
    public partial class import : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator import(XElement xe) { return XTypedServices.ToXTypedElement<import>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static import() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (annotation?)
        /// </para>
        /// </summary>
        public import() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (annotation?)
        /// </para>
        /// </summary>
        public virtual annotation annotation {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"));
                return ((annotation)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri @namespace {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("namespace", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("namespace", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri schemaLocation {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("schemaLocation", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("schemaLocation", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("import", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static import Load(string xmlFile) {
            return XTypedServices.Load<import>(xmlFile);
        }
        
        public static import Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<import>(xmlFile);
        }
        
        public static import Parse(string xml) {
            return XTypedServices.Parse<import>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<import>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"), typeof(annotation));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (annotation?)
    /// </para>
    /// </summary>
    public partial class selector : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator selector(XElement xe) { return XTypedServices.ToXTypedElement<selector>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static selector() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (annotation?)
        /// </para>
        /// </summary>
        public selector() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (annotation?)
        /// </para>
        /// </summary>
        public virtual annotation annotation {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"));
                return ((annotation)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string xpath {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("xpath", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("xpath", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("selector", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static selector Load(string xmlFile) {
            return XTypedServices.Load<selector>(xmlFile);
        }
        
        public static selector Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<selector>(xmlFile);
        }
        
        public static selector Parse(string xml) {
            return XTypedServices.Parse<selector>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<selector>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"), typeof(annotation));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (annotation?)
    /// </para>
    /// </summary>
    public partial class field : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator field(XElement xe) { return XTypedServices.ToXTypedElement<field>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static field() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (annotation?)
        /// </para>
        /// </summary>
        public field() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (annotation?)
        /// </para>
        /// </summary>
        public virtual annotation annotation {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"));
                return ((annotation)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string xpath {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("xpath", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("xpath", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("field", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static field Load(string xmlFile) {
            return XTypedServices.Load<field>(xmlFile);
        }
        
        public static field Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<field>(xmlFile);
        }
        
        public static field Parse(string xml) {
            return XTypedServices.Parse<field>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<field>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"), typeof(annotation));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (annotation?, selector, field+)
    /// </para>
    /// </summary>
    public partial class keyref : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<field> fieldField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator keyref(XElement xe) { return XTypedServices.ToXTypedElement<keyref>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static keyref() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("selector", "http://www.w3.org/2001/XMLSchema")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("field", "http://www.w3.org/2001/XMLSchema")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (annotation?, selector, field+)
        /// </para>
        /// </summary>
        public keyref() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, selector, field+)
        /// </para>
        /// </summary>
        public virtual annotation annotation {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"));
                return ((annotation)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, selector, field+)
        /// </para>
        /// </summary>
        public virtual selector selector {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("selector", "http://www.w3.org/2001/XMLSchema"));
                return ((selector)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("selector", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, selector, field+)
        /// </para>
        /// </summary>
        public virtual IList<field> field {
            get {
                if ((this.fieldField == null)) {
                    this.fieldField = new XTypedList<field>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("field", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.fieldField;
            }
            set {
                if ((value == null)) {
                    this.fieldField = null;
                }
                else {
                    if ((this.fieldField == null)) {
                        this.fieldField = XTypedList<field>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("field", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<field>(this.fieldField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual System.Xml.XmlQualifiedName refer {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("refer", ""));
                return XTypedServices.ParseValue<System.Xml.XmlQualifiedName>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.QName).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("refer", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.QName).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("keyref", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static keyref Load(string xmlFile) {
            return XTypedServices.Load<keyref>(xmlFile);
        }
        
        public static keyref Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<keyref>(xmlFile);
        }
        
        public static keyref Parse(string xml) {
            return XTypedServices.Parse<keyref>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<keyref>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"), typeof(annotation));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("selector", "http://www.w3.org/2001/XMLSchema"), typeof(selector));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("field", "http://www.w3.org/2001/XMLSchema"), typeof(field));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (annotation?)
    /// </para>
    /// </summary>
    public partial class notation : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator notation(XElement xe) { return XTypedServices.ToXTypedElement<notation>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static notation() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (annotation?)
        /// </para>
        /// </summary>
        public notation() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (annotation?)
        /// </para>
        /// </summary>
        public virtual annotation annotation {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"));
                return ((annotation)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string @public {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("public", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("public", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri system {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("system", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("system", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("notation", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static notation Load(string xmlFile) {
            return XTypedServices.Load<notation>(xmlFile);
        }
        
        public static notation Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<notation>(xmlFile);
        }
        
        public static notation Parse(string xml) {
            return XTypedServices.Parse<notation>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<notation>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"), typeof(annotation));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (any)*
    /// </para>
    /// </summary>
    public partial class appinfo : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static FSM validationStates;
        
		public static explicit operator appinfo(XElement xe) { return XTypedServices.ToXTypedElement<appinfo>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static appinfo() {
            InitFSM();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)*
        /// </para>
        /// </summary>
        public appinfo() {
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)*
        /// </para>
        /// </summary>
        public virtual IEnumerable<XElement> Any {
            get {
                return this.GetWildCards(WildCard.DefaultWildCard);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri source {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("source", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("source", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("appinfo", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static appinfo Load(string xmlFile) {
            return XTypedServices.Load<appinfo>(xmlFile);
        }
        
        public static appinfo Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<appinfo>(xmlFile);
        }
        
        public static appinfo Parse(string xml) {
            return XTypedServices.Parse<appinfo>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<appinfo>(this);
        }
        
        FSM IXMetaData.GetValidationStates() {
            return validationStates;
        }
        
        private static void InitFSM() {
            Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
            transitions.Add(1, new Transitions(new SingleTransition(new WildCard("##any", "http://www.w3.org/2001/XMLSchema"), 1)));
            validationStates = new FSM(1, new Set<int>(1), transitions);
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (any)*
    /// </para>
    /// </summary>
    public partial class documentation : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static FSM validationStates;
        
		public static explicit operator documentation(XElement xe) { return XTypedServices.ToXTypedElement<documentation>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static documentation() {
            InitFSM();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)*
        /// </para>
        /// </summary>
        public documentation() {
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)*
        /// </para>
        /// </summary>
        public virtual IEnumerable<XElement> Any {
            get {
                return this.GetWildCards(WildCard.DefaultWildCard);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri source {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("source", ""));
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("source", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object lang {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("lang", "http://www.w3.org/XML/1998/namespace"));
                return XTypedServices.ParseUnionValue(x, global::W3C.lang.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "lang", this, System.Xml.Linq.XName.Get("lang", "http://www.w3.org/XML/1998/namespace"), global::W3C.lang.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("documentation", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static documentation Load(string xmlFile) {
            return XTypedServices.Load<documentation>(xmlFile);
        }
        
        public static documentation Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<documentation>(xmlFile);
        }
        
        public static documentation Parse(string xml) {
            return XTypedServices.Parse<documentation>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<documentation>(this);
        }
        
        FSM IXMetaData.GetValidationStates() {
            return validationStates;
        }
        
        private static void InitFSM() {
            Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
            transitions.Add(1, new Transitions(new SingleTransition(new WildCard("##any", "http://www.w3.org/2001/XMLSchema"), 1)));
            validationStates = new FSM(1, new Set<int>(1), transitions);
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (appinfo | documentation)*
    /// </para>
    /// </summary>
    public partial class annotation : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<appinfo> appinfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<documentation> documentationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator annotation(XElement xe) { return XTypedServices.ToXTypedElement<annotation>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static annotation() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (appinfo | documentation)*
        /// </para>
        /// </summary>
        public annotation() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (appinfo | documentation)*
        /// </para>
        /// </summary>
        public virtual IList<appinfo> appinfo {
            get {
                if ((this.appinfoField == null)) {
                    this.appinfoField = new XTypedList<appinfo>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("appinfo", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.appinfoField;
            }
            set {
                if ((value == null)) {
                    this.appinfoField = null;
                }
                else {
                    if ((this.appinfoField == null)) {
                        this.appinfoField = XTypedList<appinfo>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("appinfo", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<appinfo>(this.appinfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (appinfo | documentation)*
        /// </para>
        /// </summary>
        public virtual IList<documentation> documentation {
            get {
                if ((this.documentationField == null)) {
                    this.documentationField = new XTypedList<documentation>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("documentation", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.documentationField;
            }
            set {
                if ((value == null)) {
                    this.documentationField = null;
                }
                else {
                    if ((this.documentationField == null)) {
                        this.documentationField = XTypedList<documentation>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("documentation", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<documentation>(this.documentationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static annotation Load(string xmlFile) {
            return XTypedServices.Load<annotation>(xmlFile);
        }
        
        public static annotation Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<annotation>(xmlFile);
        }
        
        public static annotation Parse(string xml) {
            return XTypedServices.Parse<annotation>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<annotation>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("appinfo", "http://www.w3.org/2001/XMLSchema"), typeof(appinfo));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("documentation", "http://www.w3.org/2001/XMLSchema"), typeof(documentation));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///          base attribute and simpleType child are mutually
    ///          exclusive, but one or other is required
    ///        
    /// </para>
    /// <para>
    /// Regular expression: (annotation?, simpleType?, (minExclusive | minInclusive | maxExclusive | maxInclusive | totalDigits | fractionDigits | length | minLength | maxLength | enumeration | whiteSpace | pattern)*)
    /// </para>
    /// </summary>
    public partial class restriction : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<minExclusive> minExclusiveField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<minInclusive> minInclusiveField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<maxExclusive> maxExclusiveField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<maxInclusive> maxInclusiveField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<totalDigits> totalDigitsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<fractionDigits> fractionDigitsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<length> lengthField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<minLength> minLengthField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<maxLength> maxLengthField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<enumeration> enumerationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<whiteSpace> whiteSpaceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<pattern> patternField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator restriction(XElement xe) { return XTypedServices.ToXTypedElement<restriction>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static restriction() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// 
        ///          base attribute and simpleType child are mutually
        ///          exclusive, but one or other is required
        ///        
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, simpleType?, (minExclusive | minInclusive | maxExclusive | maxInclusive | totalDigits | fractionDigits | length | minLength | maxLength | enumeration | whiteSpace | pattern)*)
        /// </para>
        /// </summary>
        public restriction() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, simpleType?, (minExclusive | minInclusive | maxExclusive | maxInclusive | totalDigits | fractionDigits | length | minLength | maxLength | enumeration | whiteSpace | pattern)*)
        /// </para>
        /// </summary>
        public virtual annotation annotation {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"));
                return ((annotation)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, simpleType?, (minExclusive | minInclusive | maxExclusive | maxInclusive | totalDigits | fractionDigits | length | minLength | maxLength | enumeration | whiteSpace | pattern)*)
        /// </para>
        /// </summary>
        public virtual localSimpleType simpleType {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("simpleType", "http://www.w3.org/2001/XMLSchema"));
                return ((localSimpleType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("simpleType", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, simpleType?, (minExclusive | minInclusive | maxExclusive | maxInclusive | totalDigits | fractionDigits | length | minLength | maxLength | enumeration | whiteSpace | pattern)*)
        /// </para>
        /// </summary>
        public virtual IList<minExclusive> minExclusive {
            get {
                if ((this.minExclusiveField == null)) {
                    this.minExclusiveField = new XTypedList<minExclusive>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("minExclusive", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.minExclusiveField;
            }
            set {
                if ((value == null)) {
                    this.minExclusiveField = null;
                }
                else {
                    if ((this.minExclusiveField == null)) {
                        this.minExclusiveField = XTypedList<minExclusive>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("minExclusive", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<minExclusive>(this.minExclusiveField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, simpleType?, (minExclusive | minInclusive | maxExclusive | maxInclusive | totalDigits | fractionDigits | length | minLength | maxLength | enumeration | whiteSpace | pattern)*)
        /// </para>
        /// </summary>
        public virtual IList<minInclusive> minInclusive {
            get {
                if ((this.minInclusiveField == null)) {
                    this.minInclusiveField = new XTypedList<minInclusive>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("minInclusive", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.minInclusiveField;
            }
            set {
                if ((value == null)) {
                    this.minInclusiveField = null;
                }
                else {
                    if ((this.minInclusiveField == null)) {
                        this.minInclusiveField = XTypedList<minInclusive>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("minInclusive", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<minInclusive>(this.minInclusiveField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, simpleType?, (minExclusive | minInclusive | maxExclusive | maxInclusive | totalDigits | fractionDigits | length | minLength | maxLength | enumeration | whiteSpace | pattern)*)
        /// </para>
        /// </summary>
        public virtual IList<maxExclusive> maxExclusive {
            get {
                if ((this.maxExclusiveField == null)) {
                    this.maxExclusiveField = new XTypedList<maxExclusive>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("maxExclusive", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.maxExclusiveField;
            }
            set {
                if ((value == null)) {
                    this.maxExclusiveField = null;
                }
                else {
                    if ((this.maxExclusiveField == null)) {
                        this.maxExclusiveField = XTypedList<maxExclusive>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("maxExclusive", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<maxExclusive>(this.maxExclusiveField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, simpleType?, (minExclusive | minInclusive | maxExclusive | maxInclusive | totalDigits | fractionDigits | length | minLength | maxLength | enumeration | whiteSpace | pattern)*)
        /// </para>
        /// </summary>
        public virtual IList<maxInclusive> maxInclusive {
            get {
                if ((this.maxInclusiveField == null)) {
                    this.maxInclusiveField = new XTypedList<maxInclusive>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("maxInclusive", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.maxInclusiveField;
            }
            set {
                if ((value == null)) {
                    this.maxInclusiveField = null;
                }
                else {
                    if ((this.maxInclusiveField == null)) {
                        this.maxInclusiveField = XTypedList<maxInclusive>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("maxInclusive", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<maxInclusive>(this.maxInclusiveField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, simpleType?, (minExclusive | minInclusive | maxExclusive | maxInclusive | totalDigits | fractionDigits | length | minLength | maxLength | enumeration | whiteSpace | pattern)*)
        /// </para>
        /// </summary>
        public virtual IList<totalDigits> totalDigits {
            get {
                if ((this.totalDigitsField == null)) {
                    this.totalDigitsField = new XTypedList<totalDigits>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("totalDigits", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.totalDigitsField;
            }
            set {
                if ((value == null)) {
                    this.totalDigitsField = null;
                }
                else {
                    if ((this.totalDigitsField == null)) {
                        this.totalDigitsField = XTypedList<totalDigits>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("totalDigits", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<totalDigits>(this.totalDigitsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, simpleType?, (minExclusive | minInclusive | maxExclusive | maxInclusive | totalDigits | fractionDigits | length | minLength | maxLength | enumeration | whiteSpace | pattern)*)
        /// </para>
        /// </summary>
        public virtual IList<fractionDigits> fractionDigits {
            get {
                if ((this.fractionDigitsField == null)) {
                    this.fractionDigitsField = new XTypedList<fractionDigits>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("fractionDigits", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.fractionDigitsField;
            }
            set {
                if ((value == null)) {
                    this.fractionDigitsField = null;
                }
                else {
                    if ((this.fractionDigitsField == null)) {
                        this.fractionDigitsField = XTypedList<fractionDigits>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("fractionDigits", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<fractionDigits>(this.fractionDigitsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, simpleType?, (minExclusive | minInclusive | maxExclusive | maxInclusive | totalDigits | fractionDigits | length | minLength | maxLength | enumeration | whiteSpace | pattern)*)
        /// </para>
        /// </summary>
        public virtual IList<length> length {
            get {
                if ((this.lengthField == null)) {
                    this.lengthField = new XTypedList<length>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("length", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.lengthField;
            }
            set {
                if ((value == null)) {
                    this.lengthField = null;
                }
                else {
                    if ((this.lengthField == null)) {
                        this.lengthField = XTypedList<length>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("length", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<length>(this.lengthField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, simpleType?, (minExclusive | minInclusive | maxExclusive | maxInclusive | totalDigits | fractionDigits | length | minLength | maxLength | enumeration | whiteSpace | pattern)*)
        /// </para>
        /// </summary>
        public virtual IList<minLength> minLength {
            get {
                if ((this.minLengthField == null)) {
                    this.minLengthField = new XTypedList<minLength>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("minLength", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.minLengthField;
            }
            set {
                if ((value == null)) {
                    this.minLengthField = null;
                }
                else {
                    if ((this.minLengthField == null)) {
                        this.minLengthField = XTypedList<minLength>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("minLength", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<minLength>(this.minLengthField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, simpleType?, (minExclusive | minInclusive | maxExclusive | maxInclusive | totalDigits | fractionDigits | length | minLength | maxLength | enumeration | whiteSpace | pattern)*)
        /// </para>
        /// </summary>
        public virtual IList<maxLength> maxLength {
            get {
                if ((this.maxLengthField == null)) {
                    this.maxLengthField = new XTypedList<maxLength>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("maxLength", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.maxLengthField;
            }
            set {
                if ((value == null)) {
                    this.maxLengthField = null;
                }
                else {
                    if ((this.maxLengthField == null)) {
                        this.maxLengthField = XTypedList<maxLength>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("maxLength", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<maxLength>(this.maxLengthField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, simpleType?, (minExclusive | minInclusive | maxExclusive | maxInclusive | totalDigits | fractionDigits | length | minLength | maxLength | enumeration | whiteSpace | pattern)*)
        /// </para>
        /// </summary>
        public virtual IList<enumeration> enumeration {
            get {
                if ((this.enumerationField == null)) {
                    this.enumerationField = new XTypedList<enumeration>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("enumeration", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.enumerationField;
            }
            set {
                if ((value == null)) {
                    this.enumerationField = null;
                }
                else {
                    if ((this.enumerationField == null)) {
                        this.enumerationField = XTypedList<enumeration>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("enumeration", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<enumeration>(this.enumerationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, simpleType?, (minExclusive | minInclusive | maxExclusive | maxInclusive | totalDigits | fractionDigits | length | minLength | maxLength | enumeration | whiteSpace | pattern)*)
        /// </para>
        /// </summary>
        public virtual IList<whiteSpace> whiteSpace {
            get {
                if ((this.whiteSpaceField == null)) {
                    this.whiteSpaceField = new XTypedList<whiteSpace>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("whiteSpace", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.whiteSpaceField;
            }
            set {
                if ((value == null)) {
                    this.whiteSpaceField = null;
                }
                else {
                    if ((this.whiteSpaceField == null)) {
                        this.whiteSpaceField = XTypedList<whiteSpace>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("whiteSpace", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<whiteSpace>(this.whiteSpaceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, simpleType?, (minExclusive | minInclusive | maxExclusive | maxInclusive | totalDigits | fractionDigits | length | minLength | maxLength | enumeration | whiteSpace | pattern)*)
        /// </para>
        /// </summary>
        public virtual IList<pattern> pattern {
            get {
                if ((this.patternField == null)) {
                    this.patternField = new XTypedList<pattern>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("pattern", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.patternField;
            }
            set {
                if ((value == null)) {
                    this.patternField = null;
                }
                else {
                    if ((this.patternField == null)) {
                        this.patternField = XTypedList<pattern>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("pattern", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<pattern>(this.patternField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Xml.XmlQualifiedName @base {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("base", ""));
                return XTypedServices.ParseValue<System.Xml.XmlQualifiedName>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.QName).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("base", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.QName).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("restriction", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static restriction Load(string xmlFile) {
            return XTypedServices.Load<restriction>(xmlFile);
        }
        
        public static restriction Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<restriction>(xmlFile);
        }
        
        public static restriction Parse(string xml) {
            return XTypedServices.Parse<restriction>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<restriction>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"), typeof(annotation));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("simpleType", "http://www.w3.org/2001/XMLSchema"), typeof(localSimpleType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("minExclusive", "http://www.w3.org/2001/XMLSchema"), typeof(minExclusive));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("minInclusive", "http://www.w3.org/2001/XMLSchema"), typeof(minInclusive));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("maxExclusive", "http://www.w3.org/2001/XMLSchema"), typeof(maxExclusive));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("maxInclusive", "http://www.w3.org/2001/XMLSchema"), typeof(maxInclusive));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("totalDigits", "http://www.w3.org/2001/XMLSchema"), typeof(totalDigits));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("fractionDigits", "http://www.w3.org/2001/XMLSchema"), typeof(fractionDigits));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("length", "http://www.w3.org/2001/XMLSchema"), typeof(length));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("minLength", "http://www.w3.org/2001/XMLSchema"), typeof(minLength));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("maxLength", "http://www.w3.org/2001/XMLSchema"), typeof(maxLength));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("enumeration", "http://www.w3.org/2001/XMLSchema"), typeof(enumeration));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("whiteSpace", "http://www.w3.org/2001/XMLSchema"), typeof(whiteSpace));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("pattern", "http://www.w3.org/2001/XMLSchema"), typeof(pattern));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///          itemType attribute and simpleType child are mutually
    ///          exclusive, but one or other is required
    ///        
    /// </para>
    /// <para>
    /// Regular expression: (annotation?, simpleType?)
    /// </para>
    /// </summary>
    public partial class list : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator list(XElement xe) { return XTypedServices.ToXTypedElement<list>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static list() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("simpleType", "http://www.w3.org/2001/XMLSchema")));
        }
        
        /// <summary>
        /// <para>
        /// 
        ///          itemType attribute and simpleType child are mutually
        ///          exclusive, but one or other is required
        ///        
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, simpleType?)
        /// </para>
        /// </summary>
        public list() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, simpleType?)
        /// </para>
        /// </summary>
        public virtual annotation annotation {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"));
                return ((annotation)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, simpleType?)
        /// </para>
        /// </summary>
        public virtual localSimpleType simpleType {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("simpleType", "http://www.w3.org/2001/XMLSchema"));
                return ((localSimpleType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("simpleType", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Xml.XmlQualifiedName itemType {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("itemType", ""));
                return XTypedServices.ParseValue<System.Xml.XmlQualifiedName>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.QName).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("itemType", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.QName).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("list", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static list Load(string xmlFile) {
            return XTypedServices.Load<list>(xmlFile);
        }
        
        public static list Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<list>(xmlFile);
        }
        
        public static list Parse(string xml) {
            return XTypedServices.Parse<list>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<list>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"), typeof(annotation));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("simpleType", "http://www.w3.org/2001/XMLSchema"), typeof(localSimpleType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///          memberTypes attribute must be non-empty or there must be
    ///          at least one simpleType child
    ///        
    /// </para>
    /// <para>
    /// Regular expression: (annotation?, simpleType*)
    /// </para>
    /// </summary>
    public partial class union : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<localSimpleType> simpleTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator union(XElement xe) { return XTypedServices.ToXTypedElement<union>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static union() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("simpleType", "http://www.w3.org/2001/XMLSchema")));
        }
        
        /// <summary>
        /// <para>
        /// 
        ///          memberTypes attribute must be non-empty or there must be
        ///          at least one simpleType child
        ///        
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, simpleType*)
        /// </para>
        /// </summary>
        public union() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, simpleType*)
        /// </para>
        /// </summary>
        public virtual annotation annotation {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"));
                return ((annotation)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, simpleType*)
        /// </para>
        /// </summary>
        public virtual IList<localSimpleType> simpleType {
            get {
                if ((this.simpleTypeField == null)) {
                    this.simpleTypeField = new XTypedList<localSimpleType>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("simpleType", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.simpleTypeField;
            }
            set {
                if ((value == null)) {
                    this.simpleTypeField = null;
                }
                else {
                    if ((this.simpleTypeField == null)) {
                        this.simpleTypeField = XTypedList<localSimpleType>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("simpleType", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<localSimpleType>(this.simpleTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<System.Xml.XmlQualifiedName> memberTypes {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("memberTypes", ""));
                return XTypedServices.ParseListValue<System.Xml.XmlQualifiedName>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.QName).Datatype);
            }
            set {
                this.SetListAttribute(System.Xml.Linq.XName.Get("memberTypes", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.QName).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("union", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static union Load(string xmlFile) {
            return XTypedServices.Load<union>(xmlFile);
        }
        
        public static union Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<union>(xmlFile);
        }
        
        public static union Parse(string xml) {
            return XTypedServices.Parse<union>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<union>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"), typeof(annotation));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("simpleType", "http://www.w3.org/2001/XMLSchema"), typeof(localSimpleType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class totalDigits : XTypedElement, IXMetaData {
        
		public static explicit operator totalDigits(XElement xe) { return XTypedServices.ToXTypedElement<totalDigits>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public totalDigits() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("totalDigits", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static totalDigits Load(string xmlFile) {
            return XTypedServices.Load<totalDigits>(xmlFile);
        }
        
        public static totalDigits Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<totalDigits>(xmlFile);
        }
        
        public static totalDigits Parse(string xml) {
            return XTypedServices.Parse<totalDigits>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<totalDigits>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class whiteSpace : XTypedElement, IXMetaData {
        
		public static explicit operator whiteSpace(XElement xe) { return XTypedServices.ToXTypedElement<whiteSpace>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public whiteSpace() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("whiteSpace", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static whiteSpace Load(string xmlFile) {
            return XTypedServices.Load<whiteSpace>(xmlFile);
        }
        
        public static whiteSpace Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<whiteSpace>(xmlFile);
        }
        
        public static whiteSpace Parse(string xml) {
            return XTypedServices.Parse<whiteSpace>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<whiteSpace>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class pattern : XTypedElement, IXMetaData {
        
		public static explicit operator pattern(XElement xe) { return XTypedServices.ToXTypedElement<pattern>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public pattern() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("pattern", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static pattern Load(string xmlFile) {
            return XTypedServices.Load<pattern>(xmlFile);
        }
        
        public static pattern Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<pattern>(xmlFile);
        }
        
        public static pattern Parse(string xml) {
            return XTypedServices.Parse<pattern>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<pattern>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///       This type is extended by almost all schema types
    ///       to allow attributes from other namespaces to be
    ///       added to user schemas.
    ///     
    /// </para>
    /// </summary>
    public partial class openAttrs : XTypedElement, IXMetaData {
        
		public static explicit operator openAttrs(XElement xe) { return XTypedServices.ToXTypedElement<openAttrs>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// 
        ///       This type is extended by almost all schema types
        ///       to allow attributes from other namespaces to be
        ///       added to user schemas.
        ///     
        /// </para>
        /// </summary>
        public openAttrs() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("openAttrs", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<openAttrs>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///       This type is extended by all types which allow annotation
    ///       other than <schema> itself
    ///     
    /// </para>
    /// <para>
    /// Regular expression: (annotation?)
    /// </para>
    /// </summary>
    public partial class annotated : global::W3C.XSD.openAttrs, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator annotated(XElement xe) { return XTypedServices.ToXTypedElement<annotated>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static annotated() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema")));
        }
        
        /// <summary>
        /// <para>
        /// 
        ///       This type is extended by all types which allow annotation
        ///       other than <schema> itself
        ///     
        /// </para>
        /// <para>
        /// Regular expression: (annotation?)
        /// </para>
        /// </summary>
        public annotated() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (annotation?)
        /// </para>
        /// </summary>
        public virtual annotation annotation {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"));
                return ((annotation)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("id", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("id", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("annotated", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<annotated>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"), typeof(annotation));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///   A utility type, not for public use
    /// </para>
    /// </summary>
    public sealed class formChoice {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), null);
        
        private formChoice() {
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///   A utility type, not for public use
    /// </para>
    /// </summary>
    public sealed class reducedDerivationControl {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), null);
        
        private reducedDerivationControl() {
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///   A utility type, not for public use
    /// </para>
    /// <para>
    /// 
    ///   #all or (possibly empty) subset of {extension, restriction}
    /// </para>
    /// </summary>
    public sealed class derivationSet {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    "#all"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse)),
                    new Xml.Schema.Linq.ListSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), null, new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), null))});
        
        private derivationSet() {
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///   A utility type, not for public use
    /// </para>
    /// </summary>
    public sealed class typeDerivationControl {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), null);
        
        private typeDerivationControl() {
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///   A utility type, not for public use
    /// </para>
    /// <para>
    /// 
    ///   #all or (possibly empty) subset of {extension, restriction, list, union}
    /// </para>
    /// </summary>
    public sealed class fullDerivationSet {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    "#all"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse)),
                    new Xml.Schema.Linq.ListSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), null, new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), null))});
        
        private fullDerivationSet() {
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///   for maxOccurs
    /// </para>
    /// </summary>
    public sealed class allNNI {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger), null),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    "unbounded"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse))});
        
        private allNNI() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (annotation?, simpleType?)
    /// </para>
    /// </summary>
    public partial class attributeType : global::W3C.XSD.annotated, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string useDefaultValue = "optional";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator attributeType(XElement xe) { return XTypedServices.ToXTypedElement<attributeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static attributeType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("simpleType", "http://www.w3.org/2001/XMLSchema")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (annotation?, simpleType?)
        /// </para>
        /// </summary>
        public attributeType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, simpleType?)
        /// </para>
        /// </summary>
        public virtual localSimpleType simpleType {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("simpleType", "http://www.w3.org/2001/XMLSchema"));
                return ((localSimpleType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("simpleType", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Xml.XmlQualifiedName @ref {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("ref", ""));
                return XTypedServices.ParseValue<System.Xml.XmlQualifiedName>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.QName).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("ref", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.QName).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Xml.XmlQualifiedName type {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("type", ""));
                return XTypedServices.ParseValue<System.Xml.XmlQualifiedName>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.QName).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.QName).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string use {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("use", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, useDefaultValue);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("use", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string @default {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("default", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("default", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string @fixed {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("fixed", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("fixed", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string form {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("form", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("form", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("attribute", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<attributeType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"), typeof(annotation));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("simpleType", "http://www.w3.org/2001/XMLSchema"), typeof(localSimpleType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class topLevelAttribute : global::W3C.XSD.attributeType, IXMetaData {
        
		public static explicit operator topLevelAttribute(XElement xe) { return XTypedServices.ToXTypedElement<topLevelAttribute>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public topLevelAttribute() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("topLevelAttribute", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<topLevelAttribute>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (annotation?, (simpleContent | complexContent | ((group | all | choice | sequence)?, (attribute | attributeGroup)*, anyAttribute?)))
    /// </para>
    /// </summary>
    public abstract partial class complexTypeType : global::W3C.XSD.annotated, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<attributeType> attributeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<attributeGroupRef> attributeGroupField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool mixedDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool @abstractDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator complexTypeType(XElement xe) {  return (complexTypeType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static complexTypeType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (annotation?, (simpleContent | complexContent | ((group | all | choice | sequence)?, (attribute | attributeGroup)*, anyAttribute?)))
        /// </para>
        /// </summary>
        public complexTypeType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (simpleContent | complexContent | ((group | all | choice | sequence)?, (attribute | attributeGroup)*, anyAttribute?)))
        /// </para>
        /// </summary>
        public virtual simpleContent simpleContent {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("simpleContent", "http://www.w3.org/2001/XMLSchema"));
                return ((simpleContent)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("simpleContent", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (simpleContent | complexContent | ((group | all | choice | sequence)?, (attribute | attributeGroup)*, anyAttribute?)))
        /// </para>
        /// </summary>
        public virtual complexContent complexContent {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("complexContent", "http://www.w3.org/2001/XMLSchema"));
                return ((complexContent)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("complexContent", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (simpleContent | complexContent | ((group | all | choice | sequence)?, (attribute | attributeGroup)*, anyAttribute?)))
        /// </para>
        /// </summary>
        public virtual groupRef group {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("group", "http://www.w3.org/2001/XMLSchema"));
                return ((groupRef)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("group", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (simpleContent | complexContent | ((group | all | choice | sequence)?, (attribute | attributeGroup)*, anyAttribute?)))
        /// </para>
        /// </summary>
        public virtual all all {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("all", "http://www.w3.org/2001/XMLSchema"));
                return ((all)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("all", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (simpleContent | complexContent | ((group | all | choice | sequence)?, (attribute | attributeGroup)*, anyAttribute?)))
        /// </para>
        /// </summary>
        public virtual choice choice {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("choice", "http://www.w3.org/2001/XMLSchema"));
                return ((choice)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("choice", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (simpleContent | complexContent | ((group | all | choice | sequence)?, (attribute | attributeGroup)*, anyAttribute?)))
        /// </para>
        /// </summary>
        public virtual sequence sequence {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("sequence", "http://www.w3.org/2001/XMLSchema"));
                return ((sequence)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("sequence", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (simpleContent | complexContent | ((group | all | choice | sequence)?, (attribute | attributeGroup)*, anyAttribute?)))
        /// </para>
        /// </summary>
        public virtual IList<attributeType> attribute {
            get {
                if ((this.attributeField == null)) {
                    this.attributeField = new XTypedList<attributeType>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("attribute", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.attributeField;
            }
            set {
                if ((value == null)) {
                    this.attributeField = null;
                }
                else {
                    if ((this.attributeField == null)) {
                        this.attributeField = XTypedList<attributeType>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("attribute", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<attributeType>(this.attributeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (simpleContent | complexContent | ((group | all | choice | sequence)?, (attribute | attributeGroup)*, anyAttribute?)))
        /// </para>
        /// </summary>
        public virtual IList<attributeGroupRef> attributeGroup {
            get {
                if ((this.attributeGroupField == null)) {
                    this.attributeGroupField = new XTypedList<attributeGroupRef>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("attributeGroup", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.attributeGroupField;
            }
            set {
                if ((value == null)) {
                    this.attributeGroupField = null;
                }
                else {
                    if ((this.attributeGroupField == null)) {
                        this.attributeGroupField = XTypedList<attributeGroupRef>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("attributeGroup", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<attributeGroupRef>(this.attributeGroupField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (simpleContent | complexContent | ((group | all | choice | sequence)?, (attribute | attributeGroup)*, anyAttribute?)))
        /// </para>
        /// </summary>
        public virtual anyAttribute anyAttribute {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("anyAttribute", "http://www.w3.org/2001/XMLSchema"));
                return ((anyAttribute)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("anyAttribute", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///      Will be restricted to required or forbidden
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///      Not allowed if simpleContent child is chosen.
        ///      May be overriden by setting on complexContent child.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool mixed {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("mixed", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, mixedDefaultValue);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("mixed", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool @abstract {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("abstract", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, @abstractDefaultValue);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("abstract", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object final {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("final", ""));
                return XTypedServices.ParseUnionValue(x, global::W3C.XSD.derivationSet.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "final", this, System.Xml.Linq.XName.Get("final", ""), global::W3C.XSD.derivationSet.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object block {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("block", ""));
                return XTypedServices.ParseUnionValue(x, global::W3C.XSD.derivationSet.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "block", this, System.Xml.Linq.XName.Get("block", ""), global::W3C.XSD.derivationSet.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("complexType", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"), typeof(annotation));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("simpleContent", "http://www.w3.org/2001/XMLSchema"), typeof(simpleContent));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("complexContent", "http://www.w3.org/2001/XMLSchema"), typeof(complexContent));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("group", "http://www.w3.org/2001/XMLSchema"), typeof(groupRef));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("all", "http://www.w3.org/2001/XMLSchema"), typeof(all));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("choice", "http://www.w3.org/2001/XMLSchema"), typeof(choice));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("sequence", "http://www.w3.org/2001/XMLSchema"), typeof(sequence));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("attribute", "http://www.w3.org/2001/XMLSchema"), typeof(attributeType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("attributeGroup", "http://www.w3.org/2001/XMLSchema"), typeof(attributeGroupRef));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("anyAttribute", "http://www.w3.org/2001/XMLSchema"), typeof(anyAttribute));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class topLevelComplexType : global::W3C.XSD.complexTypeType, IXMetaData {
        
		public static explicit operator topLevelComplexType(XElement xe) { return XTypedServices.ToXTypedElement<topLevelComplexType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public topLevelComplexType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("topLevelComplexType", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<topLevelComplexType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class localComplexType : global::W3C.XSD.complexTypeType, IXMetaData {
        
		public static explicit operator localComplexType(XElement xe) { return XTypedServices.ToXTypedElement<localComplexType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public localComplexType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("localComplexType", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<localComplexType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (annotation?, (group | all | choice | sequence | (simpleType?, (minExclusive | minInclusive | maxExclusive | maxInclusive | totalDigits | fractionDigits | length | minLength | maxLength | enumeration | whiteSpace | pattern)*))?, (attribute | attributeGroup)*, anyAttribute?)
    /// </para>
    /// </summary>
    public partial class restrictionType : global::W3C.XSD.annotated, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<minExclusive> minExclusiveField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<minInclusive> minInclusiveField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<maxExclusive> maxExclusiveField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<maxInclusive> maxInclusiveField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<totalDigits> totalDigitsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<fractionDigits> fractionDigitsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<length> lengthField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<minLength> minLengthField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<maxLength> maxLengthField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<enumeration> enumerationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<whiteSpace> whiteSpaceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<pattern> patternField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<attributeType> attributeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<attributeGroupRef> attributeGroupField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator restrictionType(XElement xe) { return XTypedServices.ToXTypedElement<restrictionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static restrictionType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (annotation?, (group | all | choice | sequence | (simpleType?, (minExclusive | minInclusive | maxExclusive | maxInclusive | totalDigits | fractionDigits | length | minLength | maxLength | enumeration | whiteSpace | pattern)*))?, (attribute | attributeGroup)*, anyAttribute?)
        /// </para>
        /// </summary>
        public restrictionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (group | all | choice | sequence | (simpleType?, (minExclusive | minInclusive | maxExclusive | maxInclusive | totalDigits | fractionDigits | length | minLength | maxLength | enumeration | whiteSpace | pattern)*))?, (attribute | attributeGroup)*, anyAttribute?)
        /// </para>
        /// </summary>
        public virtual groupRef group {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("group", "http://www.w3.org/2001/XMLSchema"));
                return ((groupRef)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("group", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (group | all | choice | sequence | (simpleType?, (minExclusive | minInclusive | maxExclusive | maxInclusive | totalDigits | fractionDigits | length | minLength | maxLength | enumeration | whiteSpace | pattern)*))?, (attribute | attributeGroup)*, anyAttribute?)
        /// </para>
        /// </summary>
        public virtual all all {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("all", "http://www.w3.org/2001/XMLSchema"));
                return ((all)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("all", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (group | all | choice | sequence | (simpleType?, (minExclusive | minInclusive | maxExclusive | maxInclusive | totalDigits | fractionDigits | length | minLength | maxLength | enumeration | whiteSpace | pattern)*))?, (attribute | attributeGroup)*, anyAttribute?)
        /// </para>
        /// </summary>
        public virtual choice choice {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("choice", "http://www.w3.org/2001/XMLSchema"));
                return ((choice)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("choice", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (group | all | choice | sequence | (simpleType?, (minExclusive | minInclusive | maxExclusive | maxInclusive | totalDigits | fractionDigits | length | minLength | maxLength | enumeration | whiteSpace | pattern)*))?, (attribute | attributeGroup)*, anyAttribute?)
        /// </para>
        /// </summary>
        public virtual sequence sequence {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("sequence", "http://www.w3.org/2001/XMLSchema"));
                return ((sequence)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("sequence", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (group | all | choice | sequence | (simpleType?, (minExclusive | minInclusive | maxExclusive | maxInclusive | totalDigits | fractionDigits | length | minLength | maxLength | enumeration | whiteSpace | pattern)*))?, (attribute | attributeGroup)*, anyAttribute?)
        /// </para>
        /// </summary>
        public virtual localSimpleType simpleType {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("simpleType", "http://www.w3.org/2001/XMLSchema"));
                return ((localSimpleType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("simpleType", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (group | all | choice | sequence | (simpleType?, (minExclusive | minInclusive | maxExclusive | maxInclusive | totalDigits | fractionDigits | length | minLength | maxLength | enumeration | whiteSpace | pattern)*))?, (attribute | attributeGroup)*, anyAttribute?)
        /// </para>
        /// </summary>
        public virtual IList<minExclusive> minExclusive {
            get {
                if ((this.minExclusiveField == null)) {
                    this.minExclusiveField = new XTypedList<minExclusive>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("minExclusive", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.minExclusiveField;
            }
            set {
                if ((value == null)) {
                    this.minExclusiveField = null;
                }
                else {
                    if ((this.minExclusiveField == null)) {
                        this.minExclusiveField = XTypedList<minExclusive>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("minExclusive", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<minExclusive>(this.minExclusiveField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (group | all | choice | sequence | (simpleType?, (minExclusive | minInclusive | maxExclusive | maxInclusive | totalDigits | fractionDigits | length | minLength | maxLength | enumeration | whiteSpace | pattern)*))?, (attribute | attributeGroup)*, anyAttribute?)
        /// </para>
        /// </summary>
        public virtual IList<minInclusive> minInclusive {
            get {
                if ((this.minInclusiveField == null)) {
                    this.minInclusiveField = new XTypedList<minInclusive>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("minInclusive", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.minInclusiveField;
            }
            set {
                if ((value == null)) {
                    this.minInclusiveField = null;
                }
                else {
                    if ((this.minInclusiveField == null)) {
                        this.minInclusiveField = XTypedList<minInclusive>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("minInclusive", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<minInclusive>(this.minInclusiveField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (group | all | choice | sequence | (simpleType?, (minExclusive | minInclusive | maxExclusive | maxInclusive | totalDigits | fractionDigits | length | minLength | maxLength | enumeration | whiteSpace | pattern)*))?, (attribute | attributeGroup)*, anyAttribute?)
        /// </para>
        /// </summary>
        public virtual IList<maxExclusive> maxExclusive {
            get {
                if ((this.maxExclusiveField == null)) {
                    this.maxExclusiveField = new XTypedList<maxExclusive>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("maxExclusive", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.maxExclusiveField;
            }
            set {
                if ((value == null)) {
                    this.maxExclusiveField = null;
                }
                else {
                    if ((this.maxExclusiveField == null)) {
                        this.maxExclusiveField = XTypedList<maxExclusive>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("maxExclusive", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<maxExclusive>(this.maxExclusiveField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (group | all | choice | sequence | (simpleType?, (minExclusive | minInclusive | maxExclusive | maxInclusive | totalDigits | fractionDigits | length | minLength | maxLength | enumeration | whiteSpace | pattern)*))?, (attribute | attributeGroup)*, anyAttribute?)
        /// </para>
        /// </summary>
        public virtual IList<maxInclusive> maxInclusive {
            get {
                if ((this.maxInclusiveField == null)) {
                    this.maxInclusiveField = new XTypedList<maxInclusive>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("maxInclusive", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.maxInclusiveField;
            }
            set {
                if ((value == null)) {
                    this.maxInclusiveField = null;
                }
                else {
                    if ((this.maxInclusiveField == null)) {
                        this.maxInclusiveField = XTypedList<maxInclusive>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("maxInclusive", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<maxInclusive>(this.maxInclusiveField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (group | all | choice | sequence | (simpleType?, (minExclusive | minInclusive | maxExclusive | maxInclusive | totalDigits | fractionDigits | length | minLength | maxLength | enumeration | whiteSpace | pattern)*))?, (attribute | attributeGroup)*, anyAttribute?)
        /// </para>
        /// </summary>
        public virtual IList<totalDigits> totalDigits {
            get {
                if ((this.totalDigitsField == null)) {
                    this.totalDigitsField = new XTypedList<totalDigits>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("totalDigits", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.totalDigitsField;
            }
            set {
                if ((value == null)) {
                    this.totalDigitsField = null;
                }
                else {
                    if ((this.totalDigitsField == null)) {
                        this.totalDigitsField = XTypedList<totalDigits>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("totalDigits", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<totalDigits>(this.totalDigitsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (group | all | choice | sequence | (simpleType?, (minExclusive | minInclusive | maxExclusive | maxInclusive | totalDigits | fractionDigits | length | minLength | maxLength | enumeration | whiteSpace | pattern)*))?, (attribute | attributeGroup)*, anyAttribute?)
        /// </para>
        /// </summary>
        public virtual IList<fractionDigits> fractionDigits {
            get {
                if ((this.fractionDigitsField == null)) {
                    this.fractionDigitsField = new XTypedList<fractionDigits>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("fractionDigits", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.fractionDigitsField;
            }
            set {
                if ((value == null)) {
                    this.fractionDigitsField = null;
                }
                else {
                    if ((this.fractionDigitsField == null)) {
                        this.fractionDigitsField = XTypedList<fractionDigits>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("fractionDigits", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<fractionDigits>(this.fractionDigitsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (group | all | choice | sequence | (simpleType?, (minExclusive | minInclusive | maxExclusive | maxInclusive | totalDigits | fractionDigits | length | minLength | maxLength | enumeration | whiteSpace | pattern)*))?, (attribute | attributeGroup)*, anyAttribute?)
        /// </para>
        /// </summary>
        public virtual IList<length> length {
            get {
                if ((this.lengthField == null)) {
                    this.lengthField = new XTypedList<length>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("length", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.lengthField;
            }
            set {
                if ((value == null)) {
                    this.lengthField = null;
                }
                else {
                    if ((this.lengthField == null)) {
                        this.lengthField = XTypedList<length>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("length", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<length>(this.lengthField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (group | all | choice | sequence | (simpleType?, (minExclusive | minInclusive | maxExclusive | maxInclusive | totalDigits | fractionDigits | length | minLength | maxLength | enumeration | whiteSpace | pattern)*))?, (attribute | attributeGroup)*, anyAttribute?)
        /// </para>
        /// </summary>
        public virtual IList<minLength> minLength {
            get {
                if ((this.minLengthField == null)) {
                    this.minLengthField = new XTypedList<minLength>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("minLength", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.minLengthField;
            }
            set {
                if ((value == null)) {
                    this.minLengthField = null;
                }
                else {
                    if ((this.minLengthField == null)) {
                        this.minLengthField = XTypedList<minLength>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("minLength", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<minLength>(this.minLengthField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (group | all | choice | sequence | (simpleType?, (minExclusive | minInclusive | maxExclusive | maxInclusive | totalDigits | fractionDigits | length | minLength | maxLength | enumeration | whiteSpace | pattern)*))?, (attribute | attributeGroup)*, anyAttribute?)
        /// </para>
        /// </summary>
        public virtual IList<maxLength> maxLength {
            get {
                if ((this.maxLengthField == null)) {
                    this.maxLengthField = new XTypedList<maxLength>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("maxLength", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.maxLengthField;
            }
            set {
                if ((value == null)) {
                    this.maxLengthField = null;
                }
                else {
                    if ((this.maxLengthField == null)) {
                        this.maxLengthField = XTypedList<maxLength>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("maxLength", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<maxLength>(this.maxLengthField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (group | all | choice | sequence | (simpleType?, (minExclusive | minInclusive | maxExclusive | maxInclusive | totalDigits | fractionDigits | length | minLength | maxLength | enumeration | whiteSpace | pattern)*))?, (attribute | attributeGroup)*, anyAttribute?)
        /// </para>
        /// </summary>
        public virtual IList<enumeration> enumeration {
            get {
                if ((this.enumerationField == null)) {
                    this.enumerationField = new XTypedList<enumeration>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("enumeration", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.enumerationField;
            }
            set {
                if ((value == null)) {
                    this.enumerationField = null;
                }
                else {
                    if ((this.enumerationField == null)) {
                        this.enumerationField = XTypedList<enumeration>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("enumeration", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<enumeration>(this.enumerationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (group | all | choice | sequence | (simpleType?, (minExclusive | minInclusive | maxExclusive | maxInclusive | totalDigits | fractionDigits | length | minLength | maxLength | enumeration | whiteSpace | pattern)*))?, (attribute | attributeGroup)*, anyAttribute?)
        /// </para>
        /// </summary>
        public virtual IList<whiteSpace> whiteSpace {
            get {
                if ((this.whiteSpaceField == null)) {
                    this.whiteSpaceField = new XTypedList<whiteSpace>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("whiteSpace", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.whiteSpaceField;
            }
            set {
                if ((value == null)) {
                    this.whiteSpaceField = null;
                }
                else {
                    if ((this.whiteSpaceField == null)) {
                        this.whiteSpaceField = XTypedList<whiteSpace>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("whiteSpace", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<whiteSpace>(this.whiteSpaceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (group | all | choice | sequence | (simpleType?, (minExclusive | minInclusive | maxExclusive | maxInclusive | totalDigits | fractionDigits | length | minLength | maxLength | enumeration | whiteSpace | pattern)*))?, (attribute | attributeGroup)*, anyAttribute?)
        /// </para>
        /// </summary>
        public virtual IList<pattern> pattern {
            get {
                if ((this.patternField == null)) {
                    this.patternField = new XTypedList<pattern>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("pattern", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.patternField;
            }
            set {
                if ((value == null)) {
                    this.patternField = null;
                }
                else {
                    if ((this.patternField == null)) {
                        this.patternField = XTypedList<pattern>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("pattern", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<pattern>(this.patternField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (group | all | choice | sequence | (simpleType?, (minExclusive | minInclusive | maxExclusive | maxInclusive | totalDigits | fractionDigits | length | minLength | maxLength | enumeration | whiteSpace | pattern)*))?, (attribute | attributeGroup)*, anyAttribute?)
        /// </para>
        /// </summary>
        public virtual IList<attributeType> attribute {
            get {
                if ((this.attributeField == null)) {
                    this.attributeField = new XTypedList<attributeType>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("attribute", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.attributeField;
            }
            set {
                if ((value == null)) {
                    this.attributeField = null;
                }
                else {
                    if ((this.attributeField == null)) {
                        this.attributeField = XTypedList<attributeType>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("attribute", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<attributeType>(this.attributeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (group | all | choice | sequence | (simpleType?, (minExclusive | minInclusive | maxExclusive | maxInclusive | totalDigits | fractionDigits | length | minLength | maxLength | enumeration | whiteSpace | pattern)*))?, (attribute | attributeGroup)*, anyAttribute?)
        /// </para>
        /// </summary>
        public virtual IList<attributeGroupRef> attributeGroup {
            get {
                if ((this.attributeGroupField == null)) {
                    this.attributeGroupField = new XTypedList<attributeGroupRef>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("attributeGroup", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.attributeGroupField;
            }
            set {
                if ((value == null)) {
                    this.attributeGroupField = null;
                }
                else {
                    if ((this.attributeGroupField == null)) {
                        this.attributeGroupField = XTypedList<attributeGroupRef>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("attributeGroup", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<attributeGroupRef>(this.attributeGroupField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (group | all | choice | sequence | (simpleType?, (minExclusive | minInclusive | maxExclusive | maxInclusive | totalDigits | fractionDigits | length | minLength | maxLength | enumeration | whiteSpace | pattern)*))?, (attribute | attributeGroup)*, anyAttribute?)
        /// </para>
        /// </summary>
        public virtual anyAttribute anyAttribute {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("anyAttribute", "http://www.w3.org/2001/XMLSchema"));
                return ((anyAttribute)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("anyAttribute", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual System.Xml.XmlQualifiedName @base {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("base", ""));
                return XTypedServices.ParseValue<System.Xml.XmlQualifiedName>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.QName).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("base", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.QName).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("restrictionType", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<restrictionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"), typeof(annotation));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("group", "http://www.w3.org/2001/XMLSchema"), typeof(groupRef));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("all", "http://www.w3.org/2001/XMLSchema"), typeof(all));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("choice", "http://www.w3.org/2001/XMLSchema"), typeof(choice));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("sequence", "http://www.w3.org/2001/XMLSchema"), typeof(sequence));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("simpleType", "http://www.w3.org/2001/XMLSchema"), typeof(localSimpleType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("minExclusive", "http://www.w3.org/2001/XMLSchema"), typeof(minExclusive));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("minInclusive", "http://www.w3.org/2001/XMLSchema"), typeof(minInclusive));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("maxExclusive", "http://www.w3.org/2001/XMLSchema"), typeof(maxExclusive));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("maxInclusive", "http://www.w3.org/2001/XMLSchema"), typeof(maxInclusive));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("totalDigits", "http://www.w3.org/2001/XMLSchema"), typeof(totalDigits));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("fractionDigits", "http://www.w3.org/2001/XMLSchema"), typeof(fractionDigits));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("length", "http://www.w3.org/2001/XMLSchema"), typeof(length));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("minLength", "http://www.w3.org/2001/XMLSchema"), typeof(minLength));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("maxLength", "http://www.w3.org/2001/XMLSchema"), typeof(maxLength));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("enumeration", "http://www.w3.org/2001/XMLSchema"), typeof(enumeration));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("whiteSpace", "http://www.w3.org/2001/XMLSchema"), typeof(whiteSpace));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("pattern", "http://www.w3.org/2001/XMLSchema"), typeof(pattern));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("attribute", "http://www.w3.org/2001/XMLSchema"), typeof(attributeType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("attributeGroup", "http://www.w3.org/2001/XMLSchema"), typeof(attributeGroupRef));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("anyAttribute", "http://www.w3.org/2001/XMLSchema"), typeof(anyAttribute));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class complexRestrictionType : global::W3C.XSD.restrictionType, IXMetaData {
        
		public static explicit operator complexRestrictionType(XElement xe) { return XTypedServices.ToXTypedElement<complexRestrictionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public complexRestrictionType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("complexRestrictionType", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<complexRestrictionType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (annotation?, (group | all | choice | sequence)?, (attribute | attributeGroup)*, anyAttribute?)
    /// </para>
    /// </summary>
    public partial class extensionType : global::W3C.XSD.annotated, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<attributeType> attributeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<attributeGroupRef> attributeGroupField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator extensionType(XElement xe) { return XTypedServices.ToXTypedElement<extensionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static extensionType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (annotation?, (group | all | choice | sequence)?, (attribute | attributeGroup)*, anyAttribute?)
        /// </para>
        /// </summary>
        public extensionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (group | all | choice | sequence)?, (attribute | attributeGroup)*, anyAttribute?)
        /// </para>
        /// </summary>
        public virtual groupRef group {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("group", "http://www.w3.org/2001/XMLSchema"));
                return ((groupRef)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("group", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (group | all | choice | sequence)?, (attribute | attributeGroup)*, anyAttribute?)
        /// </para>
        /// </summary>
        public virtual all all {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("all", "http://www.w3.org/2001/XMLSchema"));
                return ((all)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("all", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (group | all | choice | sequence)?, (attribute | attributeGroup)*, anyAttribute?)
        /// </para>
        /// </summary>
        public virtual choice choice {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("choice", "http://www.w3.org/2001/XMLSchema"));
                return ((choice)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("choice", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (group | all | choice | sequence)?, (attribute | attributeGroup)*, anyAttribute?)
        /// </para>
        /// </summary>
        public virtual sequence sequence {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("sequence", "http://www.w3.org/2001/XMLSchema"));
                return ((sequence)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("sequence", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (group | all | choice | sequence)?, (attribute | attributeGroup)*, anyAttribute?)
        /// </para>
        /// </summary>
        public virtual IList<attributeType> attribute {
            get {
                if ((this.attributeField == null)) {
                    this.attributeField = new XTypedList<attributeType>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("attribute", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.attributeField;
            }
            set {
                if ((value == null)) {
                    this.attributeField = null;
                }
                else {
                    if ((this.attributeField == null)) {
                        this.attributeField = XTypedList<attributeType>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("attribute", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<attributeType>(this.attributeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (group | all | choice | sequence)?, (attribute | attributeGroup)*, anyAttribute?)
        /// </para>
        /// </summary>
        public virtual IList<attributeGroupRef> attributeGroup {
            get {
                if ((this.attributeGroupField == null)) {
                    this.attributeGroupField = new XTypedList<attributeGroupRef>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("attributeGroup", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.attributeGroupField;
            }
            set {
                if ((value == null)) {
                    this.attributeGroupField = null;
                }
                else {
                    if ((this.attributeGroupField == null)) {
                        this.attributeGroupField = XTypedList<attributeGroupRef>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("attributeGroup", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<attributeGroupRef>(this.attributeGroupField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (group | all | choice | sequence)?, (attribute | attributeGroup)*, anyAttribute?)
        /// </para>
        /// </summary>
        public virtual anyAttribute anyAttribute {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("anyAttribute", "http://www.w3.org/2001/XMLSchema"));
                return ((anyAttribute)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("anyAttribute", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual System.Xml.XmlQualifiedName @base {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("base", ""));
                return XTypedServices.ParseValue<System.Xml.XmlQualifiedName>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.QName).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("base", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.QName).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("extensionType", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<extensionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"), typeof(annotation));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("group", "http://www.w3.org/2001/XMLSchema"), typeof(groupRef));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("all", "http://www.w3.org/2001/XMLSchema"), typeof(all));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("choice", "http://www.w3.org/2001/XMLSchema"), typeof(choice));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("sequence", "http://www.w3.org/2001/XMLSchema"), typeof(sequence));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("attribute", "http://www.w3.org/2001/XMLSchema"), typeof(attributeType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("attributeGroup", "http://www.w3.org/2001/XMLSchema"), typeof(attributeGroupRef));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("anyAttribute", "http://www.w3.org/2001/XMLSchema"), typeof(anyAttribute));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class simpleRestrictionType : global::W3C.XSD.restrictionType, IXMetaData {
        
		public static explicit operator simpleRestrictionType(XElement xe) { return XTypedServices.ToXTypedElement<simpleRestrictionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public simpleRestrictionType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("simpleRestrictionType", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<simpleRestrictionType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class simpleExtensionType : global::W3C.XSD.extensionType, IXMetaData {
        
		public static explicit operator simpleExtensionType(XElement xe) { return XTypedServices.ToXTypedElement<simpleExtensionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public simpleExtensionType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("simpleExtensionType", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<simpleExtensionType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///    A utility type, not for public use
    /// </para>
    /// <para>
    /// 
    ///    #all or (possibly empty) subset of {substitution, extension,
    ///    restriction}
    /// </para>
    /// </summary>
    public sealed class blockSet {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    "#all"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse)),
                    new Xml.Schema.Linq.ListSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), null, new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                        "extension",
                                        "restriction",
                                        "substitution"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse)))});
        
        private blockSet() {
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///   The element element can be used either
    ///   at the top level to define an element-type binding globally,
    ///   or within a content model to either reference a globally-defined
    ///   element or type or declare an element-type binding locally.
    ///   The ref form is not allowed at the top level.
    /// </para>
    /// <para>
    /// Regular expression: (annotation?, (simpleType | complexType)?, (unique | key | keyref)*)
    /// </para>
    /// </summary>
    public abstract partial class elementType : global::W3C.XSD.annotated, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<unique> uniqueField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<key> keyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<keyref> keyrefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static decimal minOccursDefaultValue = System.Xml.XmlConvert.ToDecimal("1");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static decimal maxOccursDefaultValue = System.Xml.XmlConvert.ToDecimal("1");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool nillableDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool @abstractDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator elementType(XElement xe) {  return (elementType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static elementType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// 
        ///   The element element can be used either
        ///   at the top level to define an element-type binding globally,
        ///   or within a content model to either reference a globally-defined
        ///   element or type or declare an element-type binding locally.
        ///   The ref form is not allowed at the top level.
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (simpleType | complexType)?, (unique | key | keyref)*)
        /// </para>
        /// </summary>
        public elementType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (simpleType | complexType)?, (unique | key | keyref)*)
        /// </para>
        /// </summary>
        public virtual localSimpleType simpleType {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("simpleType", "http://www.w3.org/2001/XMLSchema"));
                return ((localSimpleType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("simpleType", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (simpleType | complexType)?, (unique | key | keyref)*)
        /// </para>
        /// </summary>
        public virtual localComplexType complexType {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("complexType", "http://www.w3.org/2001/XMLSchema"));
                return ((localComplexType)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("complexType", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (simpleType | complexType)?, (unique | key | keyref)*)
        /// </para>
        /// </summary>
        public virtual IList<unique> unique {
            get {
                if ((this.uniqueField == null)) {
                    this.uniqueField = new XTypedList<unique>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("unique", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.uniqueField;
            }
            set {
                if ((value == null)) {
                    this.uniqueField = null;
                }
                else {
                    if ((this.uniqueField == null)) {
                        this.uniqueField = XTypedList<unique>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("unique", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<unique>(this.uniqueField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (simpleType | complexType)?, (unique | key | keyref)*)
        /// </para>
        /// </summary>
        public virtual IList<key> key {
            get {
                if ((this.keyField == null)) {
                    this.keyField = new XTypedList<key>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("key", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.keyField;
            }
            set {
                if ((value == null)) {
                    this.keyField = null;
                }
                else {
                    if ((this.keyField == null)) {
                        this.keyField = XTypedList<key>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("key", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<key>(this.keyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (simpleType | complexType)?, (unique | key | keyref)*)
        /// </para>
        /// </summary>
        public virtual IList<keyref> keyref {
            get {
                if ((this.keyrefField == null)) {
                    this.keyrefField = new XTypedList<keyref>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("keyref", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.keyrefField;
            }
            set {
                if ((value == null)) {
                    this.keyrefField = null;
                }
                else {
                    if ((this.keyrefField == null)) {
                        this.keyrefField = XTypedList<keyref>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("keyref", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<keyref>(this.keyrefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Xml.XmlQualifiedName @ref {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("ref", ""));
                return XTypedServices.ParseValue<System.Xml.XmlQualifiedName>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.QName).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("ref", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.QName).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Xml.XmlQualifiedName type {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("type", ""));
                return XTypedServices.ParseValue<System.Xml.XmlQualifiedName>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.QName).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("type", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.QName).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Xml.XmlQualifiedName substitutionGroup {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("substitutionGroup", ""));
                return XTypedServices.ParseValue<System.Xml.XmlQualifiedName>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.QName).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("substitutionGroup", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.QName).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual decimal minOccurs {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("minOccurs", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype, minOccursDefaultValue);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("minOccurs", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object maxOccurs {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("maxOccurs", ""));
                return XTypedServices.ParseUnionValue(x, global::W3C.XSD.allNNI.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "maxOccurs", this, System.Xml.Linq.XName.Get("maxOccurs", ""), global::W3C.XSD.allNNI.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string @default {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("default", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("default", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string @fixed {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("fixed", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("fixed", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool nillable {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("nillable", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, nillableDefaultValue);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("nillable", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool @abstract {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("abstract", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, @abstractDefaultValue);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("abstract", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object final {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("final", ""));
                return XTypedServices.ParseUnionValue(x, global::W3C.XSD.derivationSet.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "final", this, System.Xml.Linq.XName.Get("final", ""), global::W3C.XSD.derivationSet.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object block {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("block", ""));
                return XTypedServices.ParseUnionValue(x, global::W3C.XSD.blockSet.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "block", this, System.Xml.Linq.XName.Get("block", ""), global::W3C.XSD.blockSet.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string form {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("form", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("form", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("element", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"), typeof(annotation));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("simpleType", "http://www.w3.org/2001/XMLSchema"), typeof(localSimpleType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("complexType", "http://www.w3.org/2001/XMLSchema"), typeof(localComplexType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("unique", "http://www.w3.org/2001/XMLSchema"), typeof(unique));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("key", "http://www.w3.org/2001/XMLSchema"), typeof(key));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("keyref", "http://www.w3.org/2001/XMLSchema"), typeof(keyref));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class topLevelElement : global::W3C.XSD.elementType, IXMetaData {
        
		public static explicit operator topLevelElement(XElement xe) { return XTypedServices.ToXTypedElement<topLevelElement>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public topLevelElement() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("topLevelElement", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<topLevelElement>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class localElement : global::W3C.XSD.elementType, IXMetaData {
        
		public static explicit operator localElement(XElement xe) { return XTypedServices.ToXTypedElement<localElement>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public localElement() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("localElement", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<localElement>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///   group type for explicit groups, named top-level groups and
    ///   group references
    /// </para>
    /// <para>
    /// Regular expression: (annotation?, (element | group | all | choice | sequence | any)*)
    /// </para>
    /// </summary>
    public abstract partial class groupType : global::W3C.XSD.annotated, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<localElement> elementField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<groupRef> groupField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<all> allField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<choice> choiceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<sequence> sequenceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<any> anyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static decimal minOccursDefaultValue = System.Xml.XmlConvert.ToDecimal("1");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static decimal maxOccursDefaultValue = System.Xml.XmlConvert.ToDecimal("1");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator groupType(XElement xe) {  return (groupType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static groupType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// 
        ///   group type for explicit groups, named top-level groups and
        ///   group references
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (element | group | all | choice | sequence | any)*)
        /// </para>
        /// </summary>
        public groupType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (element | group | all | choice | sequence | any)*)
        /// </para>
        /// </summary>
        public virtual IList<localElement> element {
            get {
                if ((this.elementField == null)) {
                    this.elementField = new XTypedList<localElement>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("element", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.elementField;
            }
            set {
                if ((value == null)) {
                    this.elementField = null;
                }
                else {
                    if ((this.elementField == null)) {
                        this.elementField = XTypedList<localElement>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("element", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<localElement>(this.elementField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (element | group | all | choice | sequence | any)*)
        /// </para>
        /// </summary>
        public virtual IList<groupRef> group {
            get {
                if ((this.groupField == null)) {
                    this.groupField = new XTypedList<groupRef>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("group", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.groupField;
            }
            set {
                if ((value == null)) {
                    this.groupField = null;
                }
                else {
                    if ((this.groupField == null)) {
                        this.groupField = XTypedList<groupRef>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("group", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<groupRef>(this.groupField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (element | group | all | choice | sequence | any)*)
        /// </para>
        /// </summary>
        public virtual IList<all> all {
            get {
                if ((this.allField == null)) {
                    this.allField = new XTypedList<all>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("all", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.allField;
            }
            set {
                if ((value == null)) {
                    this.allField = null;
                }
                else {
                    if ((this.allField == null)) {
                        this.allField = XTypedList<all>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("all", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<all>(this.allField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (element | group | all | choice | sequence | any)*)
        /// </para>
        /// </summary>
        public virtual IList<choice> choice {
            get {
                if ((this.choiceField == null)) {
                    this.choiceField = new XTypedList<choice>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("choice", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.choiceField;
            }
            set {
                if ((value == null)) {
                    this.choiceField = null;
                }
                else {
                    if ((this.choiceField == null)) {
                        this.choiceField = XTypedList<choice>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("choice", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<choice>(this.choiceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (element | group | all | choice | sequence | any)*)
        /// </para>
        /// </summary>
        public virtual IList<sequence> sequence {
            get {
                if ((this.sequenceField == null)) {
                    this.sequenceField = new XTypedList<sequence>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("sequence", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.sequenceField;
            }
            set {
                if ((value == null)) {
                    this.sequenceField = null;
                }
                else {
                    if ((this.sequenceField == null)) {
                        this.sequenceField = XTypedList<sequence>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("sequence", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<sequence>(this.sequenceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (element | group | all | choice | sequence | any)*)
        /// </para>
        /// </summary>
        public virtual IList<any> any {
            get {
                if ((this.anyField == null)) {
                    this.anyField = new XTypedList<any>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("any", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.anyField;
            }
            set {
                if ((value == null)) {
                    this.anyField = null;
                }
                else {
                    if ((this.anyField == null)) {
                        this.anyField = XTypedList<any>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("any", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<any>(this.anyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Xml.XmlQualifiedName @ref {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("ref", ""));
                return XTypedServices.ParseValue<System.Xml.XmlQualifiedName>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.QName).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("ref", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.QName).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual decimal minOccurs {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("minOccurs", ""));
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype, minOccursDefaultValue);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("minOccurs", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object maxOccurs {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("maxOccurs", ""));
                return XTypedServices.ParseUnionValue(x, global::W3C.XSD.allNNI.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "maxOccurs", this, System.Xml.Linq.XName.Get("maxOccurs", ""), global::W3C.XSD.allNNI.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("group", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"), typeof(annotation));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("element", "http://www.w3.org/2001/XMLSchema"), typeof(localElement));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("group", "http://www.w3.org/2001/XMLSchema"), typeof(groupRef));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("all", "http://www.w3.org/2001/XMLSchema"), typeof(all));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("choice", "http://www.w3.org/2001/XMLSchema"), typeof(choice));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("sequence", "http://www.w3.org/2001/XMLSchema"), typeof(sequence));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("any", "http://www.w3.org/2001/XMLSchema"), typeof(any));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class realGroup : global::W3C.XSD.groupType, IXMetaData {
        
		public static explicit operator realGroup(XElement xe) { return XTypedServices.ToXTypedElement<realGroup>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public realGroup() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("realGroup", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<realGroup>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class namedGroup : global::W3C.XSD.realGroup, IXMetaData {
        
		public static explicit operator namedGroup(XElement xe) { return XTypedServices.ToXTypedElement<namedGroup>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public namedGroup() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("namedGroup", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<namedGroup>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class groupRef : global::W3C.XSD.realGroup, IXMetaData {
        
		public static explicit operator groupRef(XElement xe) { return XTypedServices.ToXTypedElement<groupRef>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public groupRef() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("groupRef", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<groupRef>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///   group type for the three kinds of group
    /// </para>
    /// </summary>
    public partial class explicitGroup : global::W3C.XSD.groupType, IXMetaData {
        
		public static explicit operator explicitGroup(XElement xe) { return XTypedServices.ToXTypedElement<explicitGroup>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// 
        ///   group type for the three kinds of group
        /// </para>
        /// </summary>
        public explicitGroup() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("explicitGroup", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<explicitGroup>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class simpleExplicitGroup : global::W3C.XSD.explicitGroup, IXMetaData {
        
		public static explicit operator simpleExplicitGroup(XElement xe) { return XTypedServices.ToXTypedElement<simpleExplicitGroup>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public simpleExplicitGroup() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("simpleExplicitGroup", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<simpleExplicitGroup>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// restricted max/min
    /// </para>
    /// </summary>
    public partial class narrowMaxMin : global::W3C.XSD.localElement, IXMetaData {
        
		public static explicit operator narrowMaxMin(XElement xe) { return XTypedServices.ToXTypedElement<narrowMaxMin>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// restricted max/min
        /// </para>
        /// </summary>
        public narrowMaxMin() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("narrowMaxMin", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<narrowMaxMin>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///   Only elements allowed inside
    /// </para>
    /// </summary>
    public partial class allType : global::W3C.XSD.explicitGroup, IXMetaData {
        
		public static explicit operator allType(XElement xe) { return XTypedServices.ToXTypedElement<allType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// 
        ///   Only elements allowed inside
        /// </para>
        /// </summary>
        public allType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("all", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<allType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (annotation?)
    /// </para>
    /// </summary>
    public partial class wildcard : global::W3C.XSD.annotated, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string @namespaceDefaultValue = "##any";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string processContentsDefaultValue = "strict";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator wildcard(XElement xe) { return XTypedServices.ToXTypedElement<wildcard>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static wildcard() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (annotation?)
        /// </para>
        /// </summary>
        public wildcard() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object @namespace {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("namespace", ""));
                return XTypedServices.ParseUnionValue(x, global::W3C.XSD.namespaceList.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "@namespace", this, System.Xml.Linq.XName.Get("namespace", ""), global::W3C.XSD.namespaceList.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string processContents {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("processContents", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype, processContentsDefaultValue);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("processContents", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("wildcard", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<wildcard>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"), typeof(annotation));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///   A utility type, not for public use
    /// </para>
    /// </summary>
    public sealed class namespaceList {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    "##any",
                                    "##other"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse)),
                    new Xml.Schema.Linq.ListSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri), null),
                                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                                    "##targetNamespace",
                                                    "##local"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse))}))});
        
        private namespaceList() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (annotation?, (attribute | attributeGroup)*, anyAttribute?)
    /// </para>
    /// </summary>
    public abstract partial class attributeGroupType : global::W3C.XSD.annotated, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<attributeType> attributeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<attributeGroupRef> attributeGroupField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator attributeGroupType(XElement xe) {  return (attributeGroupType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static attributeGroupType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (annotation?, (attribute | attributeGroup)*, anyAttribute?)
        /// </para>
        /// </summary>
        public attributeGroupType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (attribute | attributeGroup)*, anyAttribute?)
        /// </para>
        /// </summary>
        public virtual IList<attributeType> attribute {
            get {
                if ((this.attributeField == null)) {
                    this.attributeField = new XTypedList<attributeType>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("attribute", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.attributeField;
            }
            set {
                if ((value == null)) {
                    this.attributeField = null;
                }
                else {
                    if ((this.attributeField == null)) {
                        this.attributeField = XTypedList<attributeType>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("attribute", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<attributeType>(this.attributeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (attribute | attributeGroup)*, anyAttribute?)
        /// </para>
        /// </summary>
        public virtual IList<attributeGroupRef> attributeGroup {
            get {
                if ((this.attributeGroupField == null)) {
                    this.attributeGroupField = new XTypedList<attributeGroupRef>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("attributeGroup", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.attributeGroupField;
            }
            set {
                if ((value == null)) {
                    this.attributeGroupField = null;
                }
                else {
                    if ((this.attributeGroupField == null)) {
                        this.attributeGroupField = XTypedList<attributeGroupRef>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("attributeGroup", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<attributeGroupRef>(this.attributeGroupField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (attribute | attributeGroup)*, anyAttribute?)
        /// </para>
        /// </summary>
        public virtual anyAttribute anyAttribute {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("anyAttribute", "http://www.w3.org/2001/XMLSchema"));
                return ((anyAttribute)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("anyAttribute", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Xml.XmlQualifiedName @ref {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("ref", ""));
                return XTypedServices.ParseValue<System.Xml.XmlQualifiedName>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.QName).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("ref", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.QName).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("attributeGroup", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"), typeof(annotation));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("attribute", "http://www.w3.org/2001/XMLSchema"), typeof(attributeType));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("attributeGroup", "http://www.w3.org/2001/XMLSchema"), typeof(attributeGroupRef));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("anyAttribute", "http://www.w3.org/2001/XMLSchema"), typeof(anyAttribute));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class namedAttributeGroup : global::W3C.XSD.attributeGroupType, IXMetaData {
        
		public static explicit operator namedAttributeGroup(XElement xe) { return XTypedServices.ToXTypedElement<namedAttributeGroup>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public namedAttributeGroup() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("namedAttributeGroup", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<namedAttributeGroup>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class attributeGroupRef : global::W3C.XSD.attributeGroupType, IXMetaData {
        
		public static explicit operator attributeGroupRef(XElement xe) { return XTypedServices.ToXTypedElement<attributeGroupRef>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public attributeGroupRef() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("attributeGroupRef", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<attributeGroupRef>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (annotation?, selector, field+)
    /// </para>
    /// </summary>
    public partial class keybase : global::W3C.XSD.annotated, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<field> fieldField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator keybase(XElement xe) { return XTypedServices.ToXTypedElement<keybase>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static keybase() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("selector", "http://www.w3.org/2001/XMLSchema")), new NamedContentModelEntity(System.Xml.Linq.XName.Get("field", "http://www.w3.org/2001/XMLSchema")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (annotation?, selector, field+)
        /// </para>
        /// </summary>
        public keybase() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, selector, field+)
        /// </para>
        /// </summary>
        public virtual selector selector {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("selector", "http://www.w3.org/2001/XMLSchema"));
                return ((selector)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("selector", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, selector, field+)
        /// </para>
        /// </summary>
        public virtual IList<field> field {
            get {
                if ((this.fieldField == null)) {
                    this.fieldField = new XTypedList<field>(this, LinqToXsdTypeManager.Instance, System.Xml.Linq.XName.Get("field", "http://www.w3.org/2001/XMLSchema"));
                }
                return this.fieldField;
            }
            set {
                if ((value == null)) {
                    this.fieldField = null;
                }
                else {
                    if ((this.fieldField == null)) {
                        this.fieldField = XTypedList<field>.Initialize(this, LinqToXsdTypeManager.Instance, value, System.Xml.Linq.XName.Get("field", "http://www.w3.org/2001/XMLSchema"));
                    }
                    else {
                        XTypedServices.SetList<field>(this.fieldField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("keybase", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<keybase>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"), typeof(annotation));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("selector", "http://www.w3.org/2001/XMLSchema"), typeof(selector));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("field", "http://www.w3.org/2001/XMLSchema"), typeof(field));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///   A utility type, not for public use
    /// </para>
    /// <para>
    /// 
    ///   A public identifier, per ISO 8879
    /// </para>
    /// </summary>
    public sealed class @public {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), null);
        
        private @public() {
        }
    }
    
    public sealed class @string {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private @string() {
        }
    }
    
    public sealed class boolean {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean), null);
        
        private boolean() {
        }
    }
    
    public sealed class @float {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float), null);
        
        private @float() {
        }
    }
    
    public sealed class @double {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double), null);
        
        private @double() {
        }
    }
    
    public sealed class @decimal {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), null);
        
        private @decimal() {
        }
    }
    
    public sealed class duration {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration), null);
        
        private duration() {
        }
    }
    
    public sealed class dateTime {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime), null);
        
        private dateTime() {
        }
    }
    
    public sealed class time {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time), null);
        
        private time() {
        }
    }
    
    public sealed class date {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date), null);
        
        private date() {
        }
    }
    
    public sealed class gYearMonth {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.GYearMonth), null);
        
        private gYearMonth() {
        }
    }
    
    public sealed class gYear {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.GYear), null);
        
        private gYear() {
        }
    }
    
    public sealed class gMonthDay {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.GMonthDay), null);
        
        private gMonthDay() {
        }
    }
    
    public sealed class gDay {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.GDay), null);
        
        private gDay() {
        }
    }
    
    public sealed class gMonth {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.GMonth), null);
        
        private gMonth() {
        }
    }
    
    public sealed class hexBinary {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.HexBinary), null);
        
        private hexBinary() {
        }
    }
    
    public sealed class base64Binary {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Base64Binary), null);
        
        private base64Binary() {
        }
    }
    
    public sealed class anyURI {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri), null);
        
        private anyURI() {
        }
    }
    
    public sealed class QName {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.QName), null);
        
        private QName() {
        }
    }
    
    public sealed class NOTATION {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Notation), null);
        
        private NOTATION() {
        }
    }
    
    public sealed class normalizedString {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NormalizedString), null);
        
        private normalizedString() {
        }
    }
    
    public sealed class token {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), null);
        
        private token() {
        }
    }
    
    public sealed class language {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language), null);
        
        private language() {
        }
    }
    
    public sealed class IDREFS {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.ListSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref), null, new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref), null));
        
        private IDREFS() {
        }
    }
    
    public sealed class ENTITIES {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.ListSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Entity), null, new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Entity), null));
        
        private ENTITIES() {
        }
    }
    
    public sealed class NMTOKEN {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), null);
        
        private NMTOKEN() {
        }
    }
    
    public sealed class NMTOKENS {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.ListSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), null, new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), null));
        
        private NMTOKENS() {
        }
    }
    
    public sealed class Name {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Name), null);
        
        private Name() {
        }
    }
    
    public sealed class NCName {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName), null);
        
        private NCName() {
        }
    }
    
    public sealed class ID {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id), null);
        
        private ID() {
        }
    }
    
    public sealed class IDREF {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref), null);
        
        private IDREF() {
        }
    }
    
    public sealed class ENTITY {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Entity), null);
        
        private ENTITY() {
        }
    }
    
    public sealed class integer {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), null);
        
        private integer() {
        }
    }
    
    public sealed class nonPositiveInteger {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger), null);
        
        private nonPositiveInteger() {
        }
    }
    
    public sealed class negativeInteger {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NegativeInteger), null);
        
        private negativeInteger() {
        }
    }
    
    public sealed class @long {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long), null);
        
        private @long() {
        }
    }
    
    public sealed class @int {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), null);
        
        private @int() {
        }
    }
    
    public sealed class @short {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Short), null);
        
        private @short() {
        }
    }
    
    public sealed class @byte {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte), null);
        
        private @byte() {
        }
    }
    
    public sealed class nonNegativeInteger {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger), null);
        
        private nonNegativeInteger() {
        }
    }
    
    public sealed class unsignedLong {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.UnsignedLong), null);
        
        private unsignedLong() {
        }
    }
    
    public sealed class unsignedInt {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.UnsignedInt), null);
        
        private unsignedInt() {
        }
    }
    
    public sealed class unsignedShort {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.UnsignedShort), null);
        
        private unsignedShort() {
        }
    }
    
    public sealed class unsignedByte {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.UnsignedByte), null);
        
        private unsignedByte() {
        }
    }
    
    public sealed class positiveInteger {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonNegativeInteger), null);
        
        private positiveInteger() {
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///   A utility type, not for public use
    /// </para>
    /// </summary>
    public sealed class derivationControl {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), null);
        
        private derivationControl() {
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///   #all or (possibly empty) subset of {restriction, union, list}
    ///   
    /// </para>
    /// <para>
    /// 
    ///   A utility type, not for public use
    /// </para>
    /// </summary>
    public sealed class simpleDerivationSet {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    "#all"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse)),
                    new Xml.Schema.Linq.ListSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), null, new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                        "list",
                                        "union",
                                        "restriction"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse)))});
        
        private simpleDerivationSet() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (annotation?, (restriction | list | union))
    /// </para>
    /// </summary>
    public abstract partial class simpleTypeType : global::W3C.XSD.annotated, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator simpleTypeType(XElement xe) {  return (simpleTypeType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static simpleTypeType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (annotation?, (restriction | list | union))
        /// </para>
        /// </summary>
        public simpleTypeType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (restriction | list | union))
        /// </para>
        /// </summary>
        public virtual restriction restriction {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("restriction", "http://www.w3.org/2001/XMLSchema"));
                return ((restriction)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("restriction", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (restriction | list | union))
        /// </para>
        /// </summary>
        public virtual list list {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("list", "http://www.w3.org/2001/XMLSchema"));
                return ((list)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("list", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, (restriction | list | union))
        /// </para>
        /// </summary>
        public virtual union union {
            get {
                XElement x = this.GetElement(System.Xml.Linq.XName.Get("union", "http://www.w3.org/2001/XMLSchema"));
                return ((union)(x));
            }
            set {
                this.SetElement(System.Xml.Linq.XName.Get("union", "http://www.w3.org/2001/XMLSchema"), value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object final {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("final", ""));
                return XTypedServices.ParseUnionValue(x, global::W3C.XSD.simpleDerivationSet.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "final", this, System.Xml.Linq.XName.Get("final", ""), global::W3C.XSD.simpleDerivationSet.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///              Can be restricted to required or forbidden
        ///            
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("name", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("name", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("simpleType", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"), typeof(annotation));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("restriction", "http://www.w3.org/2001/XMLSchema"), typeof(restriction));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("list", "http://www.w3.org/2001/XMLSchema"), typeof(list));
            localElementDictionary.Add(System.Xml.Linq.XName.Get("union", "http://www.w3.org/2001/XMLSchema"), typeof(union));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class topLevelSimpleType : global::W3C.XSD.simpleTypeType, IXMetaData {
        
		public static explicit operator topLevelSimpleType(XElement xe) { return XTypedServices.ToXTypedElement<topLevelSimpleType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public topLevelSimpleType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("topLevelSimpleType", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<topLevelSimpleType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class localSimpleType : global::W3C.XSD.simpleTypeType, IXMetaData {
        
		public static explicit operator localSimpleType(XElement xe) { return XTypedServices.ToXTypedElement<localSimpleType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public localSimpleType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("localSimpleType", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<localSimpleType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (annotation?)
    /// </para>
    /// </summary>
    public partial class facet : global::W3C.XSD.annotated, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool @fixedDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator facet(XElement xe) { return XTypedServices.ToXTypedElement<facet>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static facet() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema")));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (annotation?)
        /// </para>
        /// </summary>
        public facet() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string value {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("value", ""));
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("value", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool @fixed {
            get {
                XAttribute x = this.Attribute(System.Xml.Linq.XName.Get("fixed", ""));
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, @fixedDefaultValue);
            }
            set {
                this.SetAttribute(System.Xml.Linq.XName.Get("fixed", ""), value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("facet", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<facet>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"), typeof(annotation));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class noFixedFacet : global::W3C.XSD.facet, IXMetaData {
        
		public static explicit operator noFixedFacet(XElement xe) { return XTypedServices.ToXTypedElement<noFixedFacet>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public noFixedFacet() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("noFixedFacet", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<noFixedFacet>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class numFacet : global::W3C.XSD.facet, IXMetaData {
        
		public static explicit operator numFacet(XElement xe) { return XTypedServices.ToXTypedElement<numFacet>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public numFacet() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("numFacet", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<numFacet>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class anyAttribute : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private wildcard ContentField;
        
		public static explicit operator anyAttribute(XElement xe) { return XTypedServices.ToXTypedElement<anyAttribute, wildcard>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public anyAttribute() {
            SetInnerType(new wildcard());
        }
        
        public anyAttribute(wildcard content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual wildcard Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual object @namespace {
            get {
                return this.ContentField.@namespace;
            }
            set {
                this.ContentField.@namespace = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string processContents {
            get {
                return this.ContentField.processContents;
            }
            set {
                this.ContentField.processContents = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("anyAttribute", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static anyAttribute Load(string xmlFile) {
            return XTypedServices.Load<anyAttribute, wildcard>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static anyAttribute Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<anyAttribute, wildcard>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static anyAttribute Parse(string xml) {
            return XTypedServices.Parse<anyAttribute, wildcard>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new anyAttribute(((wildcard)(this.Content.Clone())));
        }
        
        private void SetInnerType(wildcard ContentField) {
            this.ContentField = ((wildcard)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class complexType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private topLevelComplexType ContentField;
        
		public static explicit operator complexType(XElement xe) { return XTypedServices.ToXTypedElement<complexType, topLevelComplexType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public complexType() {
            SetInnerType(new topLevelComplexType());
        }
        
        public complexType(topLevelComplexType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual topLevelComplexType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("complexType", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static complexType Load(string xmlFile) {
            return XTypedServices.Load<complexType, topLevelComplexType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static complexType Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<complexType, topLevelComplexType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static complexType Parse(string xml) {
            return XTypedServices.Parse<complexType, topLevelComplexType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new complexType(((topLevelComplexType)(this.Content.Clone())));
        }
        
        private void SetInnerType(topLevelComplexType ContentField) {
            this.ContentField = ((topLevelComplexType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class element : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private topLevelElement ContentField;
        
		public static explicit operator element(XElement xe) { return XTypedServices.ToXTypedElement<element, topLevelElement>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public element() {
            SetInnerType(new topLevelElement());
        }
        
        public element(topLevelElement content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual topLevelElement Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("element", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static element Load(string xmlFile) {
            return XTypedServices.Load<element, topLevelElement>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static element Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<element, topLevelElement>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static element Parse(string xml) {
            return XTypedServices.Parse<element, topLevelElement>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new element(((topLevelElement)(this.Content.Clone())));
        }
        
        private void SetInnerType(topLevelElement ContentField) {
            this.ContentField = ((topLevelElement)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///   Only elements allowed inside
    /// </para>
    /// </summary>
    public partial class all : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private allType ContentField;
        
		public static explicit operator all(XElement xe) { return XTypedServices.ToXTypedElement<all, allType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// 
        ///   Only elements allowed inside
        /// </para>
        /// </summary>
        public all() {
            SetInnerType(new allType());
        }
        
        /// <summary>
        /// <para>
        /// 
        ///   Only elements allowed inside
        /// </para>
        /// </summary>
        public all(allType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual allType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("all", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static all Load(string xmlFile) {
            return XTypedServices.Load<all, allType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static all Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<all, allType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static all Parse(string xml) {
            return XTypedServices.Parse<all, allType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new all(((allType)(this.Content.Clone())));
        }
        
        private void SetInnerType(allType ContentField) {
            this.ContentField = ((allType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///   group type for the three kinds of group
    /// </para>
    /// </summary>
    public partial class choice : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private explicitGroup ContentField;
        
		public static explicit operator choice(XElement xe) { return XTypedServices.ToXTypedElement<choice, explicitGroup>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// 
        ///   group type for the three kinds of group
        /// </para>
        /// </summary>
        public choice() {
            SetInnerType(new explicitGroup());
        }
        
        /// <summary>
        /// <para>
        /// 
        ///   group type for the three kinds of group
        /// </para>
        /// </summary>
        public choice(explicitGroup content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual explicitGroup Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("choice", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static choice Load(string xmlFile) {
            return XTypedServices.Load<choice, explicitGroup>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static choice Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<choice, explicitGroup>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static choice Parse(string xml) {
            return XTypedServices.Parse<choice, explicitGroup>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new choice(((explicitGroup)(this.Content.Clone())));
        }
        
        private void SetInnerType(explicitGroup ContentField) {
            this.ContentField = ((explicitGroup)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///   group type for the three kinds of group
    /// </para>
    /// </summary>
    public partial class sequence : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private explicitGroup ContentField;
        
		public static explicit operator sequence(XElement xe) { return XTypedServices.ToXTypedElement<sequence, explicitGroup>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// 
        ///   group type for the three kinds of group
        /// </para>
        /// </summary>
        public sequence() {
            SetInnerType(new explicitGroup());
        }
        
        /// <summary>
        /// <para>
        /// 
        ///   group type for the three kinds of group
        /// </para>
        /// </summary>
        public sequence(explicitGroup content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual explicitGroup Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("sequence", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static sequence Load(string xmlFile) {
            return XTypedServices.Load<sequence, explicitGroup>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static sequence Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<sequence, explicitGroup>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static sequence Parse(string xml) {
            return XTypedServices.Parse<sequence, explicitGroup>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new sequence(((explicitGroup)(this.Content.Clone())));
        }
        
        private void SetInnerType(explicitGroup ContentField) {
            this.ContentField = ((explicitGroup)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class group : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private namedGroup ContentField;
        
		public static explicit operator group(XElement xe) { return XTypedServices.ToXTypedElement<group, namedGroup>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public group() {
            SetInnerType(new namedGroup());
        }
        
        public group(namedGroup content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual namedGroup Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("group", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static group Load(string xmlFile) {
            return XTypedServices.Load<group, namedGroup>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static group Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<group, namedGroup>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static group Parse(string xml) {
            return XTypedServices.Parse<group, namedGroup>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new group(((namedGroup)(this.Content.Clone())));
        }
        
        private void SetInnerType(namedGroup ContentField) {
            this.ContentField = ((namedGroup)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class attribute : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private topLevelAttribute ContentField;
        
		public static explicit operator attribute(XElement xe) { return XTypedServices.ToXTypedElement<attribute, topLevelAttribute>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public attribute() {
            SetInnerType(new topLevelAttribute());
        }
        
        public attribute(topLevelAttribute content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual topLevelAttribute Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("attribute", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static attribute Load(string xmlFile) {
            return XTypedServices.Load<attribute, topLevelAttribute>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static attribute Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<attribute, topLevelAttribute>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static attribute Parse(string xml) {
            return XTypedServices.Parse<attribute, topLevelAttribute>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new attribute(((topLevelAttribute)(this.Content.Clone())));
        }
        
        private void SetInnerType(topLevelAttribute ContentField) {
            this.ContentField = ((topLevelAttribute)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class attributeGroup : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private namedAttributeGroup ContentField;
        
		public static explicit operator attributeGroup(XElement xe) { return XTypedServices.ToXTypedElement<attributeGroup, namedAttributeGroup>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public attributeGroup() {
            SetInnerType(new namedAttributeGroup());
        }
        
        public attributeGroup(namedAttributeGroup content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual namedAttributeGroup Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("attributeGroup", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static attributeGroup Load(string xmlFile) {
            return XTypedServices.Load<attributeGroup, namedAttributeGroup>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static attributeGroup Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<attributeGroup, namedAttributeGroup>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static attributeGroup Parse(string xml) {
            return XTypedServices.Parse<attributeGroup, namedAttributeGroup>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new attributeGroup(((namedAttributeGroup)(this.Content.Clone())));
        }
        
        private void SetInnerType(namedAttributeGroup ContentField) {
            this.ContentField = ((namedAttributeGroup)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class unique : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private keybase ContentField;
        
		public static explicit operator unique(XElement xe) { return XTypedServices.ToXTypedElement<unique, keybase>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public unique() {
            SetInnerType(new keybase());
        }
        
        public unique(keybase content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual keybase Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, selector, field+)
        /// </para>
        /// </summary>
        public virtual selector selector {
            get {
                return this.ContentField.selector;
            }
            set {
                this.ContentField.selector = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, selector, field+)
        /// </para>
        /// </summary>
        public virtual IList<field> field {
            get {
                return this.ContentField.field;
            }
            set {
                this.ContentField.field = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                return this.ContentField.name;
            }
            set {
                this.ContentField.name = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("unique", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static unique Load(string xmlFile) {
            return XTypedServices.Load<unique, keybase>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static unique Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<unique, keybase>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static unique Parse(string xml) {
            return XTypedServices.Parse<unique, keybase>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new unique(((keybase)(this.Content.Clone())));
        }
        
        private void SetInnerType(keybase ContentField) {
            this.ContentField = ((keybase)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class key : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private keybase ContentField;
        
		public static explicit operator key(XElement xe) { return XTypedServices.ToXTypedElement<key, keybase>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public key() {
            SetInnerType(new keybase());
        }
        
        public key(keybase content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual keybase Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, selector, field+)
        /// </para>
        /// </summary>
        public virtual selector selector {
            get {
                return this.ContentField.selector;
            }
            set {
                this.ContentField.selector = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (annotation?, selector, field+)
        /// </para>
        /// </summary>
        public virtual IList<field> field {
            get {
                return this.ContentField.field;
            }
            set {
                this.ContentField.field = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                return this.ContentField.name;
            }
            set {
                this.ContentField.name = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("key", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static key Load(string xmlFile) {
            return XTypedServices.Load<key, keybase>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static key Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<key, keybase>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static key Parse(string xml) {
            return XTypedServices.Parse<key, keybase>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new key(((keybase)(this.Content.Clone())));
        }
        
        private void SetInnerType(keybase ContentField) {
            this.ContentField = ((keybase)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class simpleType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private topLevelSimpleType ContentField;
        
		public static explicit operator simpleType(XElement xe) { return XTypedServices.ToXTypedElement<simpleType, topLevelSimpleType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public simpleType() {
            SetInnerType(new topLevelSimpleType());
        }
        
        public simpleType(topLevelSimpleType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual topLevelSimpleType Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("simpleType", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static simpleType Load(string xmlFile) {
            return XTypedServices.Load<simpleType, topLevelSimpleType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static simpleType Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<simpleType, topLevelSimpleType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static simpleType Parse(string xml) {
            return XTypedServices.Parse<simpleType, topLevelSimpleType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new simpleType(((topLevelSimpleType)(this.Content.Clone())));
        }
        
        private void SetInnerType(topLevelSimpleType ContentField) {
            this.ContentField = ((topLevelSimpleType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class minExclusive : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private facet ContentField;
        
		public static explicit operator minExclusive(XElement xe) { return XTypedServices.ToXTypedElement<minExclusive, facet>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public minExclusive() {
            SetInnerType(new facet());
        }
        
        public minExclusive(facet content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual facet Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string value {
            get {
                return this.ContentField.value;
            }
            set {
                this.ContentField.value = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool @fixed {
            get {
                return this.ContentField.@fixed;
            }
            set {
                this.ContentField.@fixed = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("minExclusive", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static minExclusive Load(string xmlFile) {
            return XTypedServices.Load<minExclusive, facet>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static minExclusive Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<minExclusive, facet>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static minExclusive Parse(string xml) {
            return XTypedServices.Parse<minExclusive, facet>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new minExclusive(((facet)(this.Content.Clone())));
        }
        
        private void SetInnerType(facet ContentField) {
            this.ContentField = ((facet)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class minInclusive : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private facet ContentField;
        
		public static explicit operator minInclusive(XElement xe) { return XTypedServices.ToXTypedElement<minInclusive, facet>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public minInclusive() {
            SetInnerType(new facet());
        }
        
        public minInclusive(facet content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual facet Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string value {
            get {
                return this.ContentField.value;
            }
            set {
                this.ContentField.value = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool @fixed {
            get {
                return this.ContentField.@fixed;
            }
            set {
                this.ContentField.@fixed = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("minInclusive", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static minInclusive Load(string xmlFile) {
            return XTypedServices.Load<minInclusive, facet>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static minInclusive Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<minInclusive, facet>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static minInclusive Parse(string xml) {
            return XTypedServices.Parse<minInclusive, facet>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new minInclusive(((facet)(this.Content.Clone())));
        }
        
        private void SetInnerType(facet ContentField) {
            this.ContentField = ((facet)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class maxExclusive : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private facet ContentField;
        
		public static explicit operator maxExclusive(XElement xe) { return XTypedServices.ToXTypedElement<maxExclusive, facet>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public maxExclusive() {
            SetInnerType(new facet());
        }
        
        public maxExclusive(facet content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual facet Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string value {
            get {
                return this.ContentField.value;
            }
            set {
                this.ContentField.value = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool @fixed {
            get {
                return this.ContentField.@fixed;
            }
            set {
                this.ContentField.@fixed = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("maxExclusive", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static maxExclusive Load(string xmlFile) {
            return XTypedServices.Load<maxExclusive, facet>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static maxExclusive Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<maxExclusive, facet>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static maxExclusive Parse(string xml) {
            return XTypedServices.Parse<maxExclusive, facet>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new maxExclusive(((facet)(this.Content.Clone())));
        }
        
        private void SetInnerType(facet ContentField) {
            this.ContentField = ((facet)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class maxInclusive : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private facet ContentField;
        
		public static explicit operator maxInclusive(XElement xe) { return XTypedServices.ToXTypedElement<maxInclusive, facet>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public maxInclusive() {
            SetInnerType(new facet());
        }
        
        public maxInclusive(facet content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual facet Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string value {
            get {
                return this.ContentField.value;
            }
            set {
                this.ContentField.value = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool @fixed {
            get {
                return this.ContentField.@fixed;
            }
            set {
                this.ContentField.@fixed = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("maxInclusive", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static maxInclusive Load(string xmlFile) {
            return XTypedServices.Load<maxInclusive, facet>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static maxInclusive Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<maxInclusive, facet>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static maxInclusive Parse(string xml) {
            return XTypedServices.Parse<maxInclusive, facet>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new maxInclusive(((facet)(this.Content.Clone())));
        }
        
        private void SetInnerType(facet ContentField) {
            this.ContentField = ((facet)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class fractionDigits : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private numFacet ContentField;
        
		public static explicit operator fractionDigits(XElement xe) { return XTypedServices.ToXTypedElement<fractionDigits, numFacet>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public fractionDigits() {
            SetInnerType(new numFacet());
        }
        
        public fractionDigits(numFacet content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual numFacet Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("fractionDigits", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static fractionDigits Load(string xmlFile) {
            return XTypedServices.Load<fractionDigits, numFacet>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static fractionDigits Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<fractionDigits, numFacet>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static fractionDigits Parse(string xml) {
            return XTypedServices.Parse<fractionDigits, numFacet>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new fractionDigits(((numFacet)(this.Content.Clone())));
        }
        
        private void SetInnerType(numFacet ContentField) {
            this.ContentField = ((numFacet)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class length : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private numFacet ContentField;
        
		public static explicit operator length(XElement xe) { return XTypedServices.ToXTypedElement<length, numFacet>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public length() {
            SetInnerType(new numFacet());
        }
        
        public length(numFacet content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual numFacet Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("length", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static length Load(string xmlFile) {
            return XTypedServices.Load<length, numFacet>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static length Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<length, numFacet>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static length Parse(string xml) {
            return XTypedServices.Parse<length, numFacet>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new length(((numFacet)(this.Content.Clone())));
        }
        
        private void SetInnerType(numFacet ContentField) {
            this.ContentField = ((numFacet)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class minLength : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private numFacet ContentField;
        
		public static explicit operator minLength(XElement xe) { return XTypedServices.ToXTypedElement<minLength, numFacet>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public minLength() {
            SetInnerType(new numFacet());
        }
        
        public minLength(numFacet content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual numFacet Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("minLength", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static minLength Load(string xmlFile) {
            return XTypedServices.Load<minLength, numFacet>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static minLength Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<minLength, numFacet>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static minLength Parse(string xml) {
            return XTypedServices.Parse<minLength, numFacet>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new minLength(((numFacet)(this.Content.Clone())));
        }
        
        private void SetInnerType(numFacet ContentField) {
            this.ContentField = ((numFacet)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class maxLength : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private numFacet ContentField;
        
		public static explicit operator maxLength(XElement xe) { return XTypedServices.ToXTypedElement<maxLength, numFacet>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public maxLength() {
            SetInnerType(new numFacet());
        }
        
        public maxLength(numFacet content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual numFacet Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("maxLength", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static maxLength Load(string xmlFile) {
            return XTypedServices.Load<maxLength, numFacet>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static maxLength Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<maxLength, numFacet>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static maxLength Parse(string xml) {
            return XTypedServices.Parse<maxLength, numFacet>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new maxLength(((numFacet)(this.Content.Clone())));
        }
        
        private void SetInnerType(numFacet ContentField) {
            this.ContentField = ((numFacet)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class enumeration : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private noFixedFacet ContentField;
        
		public static explicit operator enumeration(XElement xe) { return XTypedServices.ToXTypedElement<enumeration, noFixedFacet>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public enumeration() {
            SetInnerType(new noFixedFacet());
        }
        
        public enumeration(noFixedFacet content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual noFixedFacet Content {
            get {
                return ContentField;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return System.Xml.Linq.XName.Get("enumeration", "http://www.w3.org/2001/XMLSchema");
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static enumeration Load(string xmlFile) {
            return XTypedServices.Load<enumeration, noFixedFacet>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static enumeration Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<enumeration, noFixedFacet>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static enumeration Parse(string xml) {
            return XTypedServices.Parse<enumeration, noFixedFacet>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new enumeration(((noFixedFacet)(this.Content.Clone())));
        }
        
        private void SetInnerType(noFixedFacet ContentField) {
            this.ContentField = ((noFixedFacet)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> typeDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> elementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static Dictionary<System.Type, System.Type> wrapperDictionary = new Dictionary<System.Type, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
            BuildWrapperDictionary();
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return wrapperDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(System.Xml.Linq.XName.Get("openAttrs", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.openAttrs));
            typeDictionary.Add(System.Xml.Linq.XName.Get("annotated", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.annotated));
            typeDictionary.Add(System.Xml.Linq.XName.Get("attribute", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.attributeType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("topLevelAttribute", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.topLevelAttribute));
            typeDictionary.Add(System.Xml.Linq.XName.Get("complexType", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.complexTypeType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("topLevelComplexType", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.topLevelComplexType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("localComplexType", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.localComplexType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("restrictionType", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.restrictionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("complexRestrictionType", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.complexRestrictionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("extensionType", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.extensionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("simpleRestrictionType", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.simpleRestrictionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("simpleExtensionType", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.simpleExtensionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("element", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.elementType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("topLevelElement", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.topLevelElement));
            typeDictionary.Add(System.Xml.Linq.XName.Get("localElement", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.localElement));
            typeDictionary.Add(System.Xml.Linq.XName.Get("group", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.groupType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("realGroup", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.realGroup));
            typeDictionary.Add(System.Xml.Linq.XName.Get("namedGroup", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.namedGroup));
            typeDictionary.Add(System.Xml.Linq.XName.Get("groupRef", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.groupRef));
            typeDictionary.Add(System.Xml.Linq.XName.Get("explicitGroup", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.explicitGroup));
            typeDictionary.Add(System.Xml.Linq.XName.Get("simpleExplicitGroup", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.simpleExplicitGroup));
            typeDictionary.Add(System.Xml.Linq.XName.Get("narrowMaxMin", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.narrowMaxMin));
            typeDictionary.Add(System.Xml.Linq.XName.Get("all", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.allType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("wildcard", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.wildcard));
            typeDictionary.Add(System.Xml.Linq.XName.Get("attributeGroup", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.attributeGroupType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("namedAttributeGroup", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.namedAttributeGroup));
            typeDictionary.Add(System.Xml.Linq.XName.Get("attributeGroupRef", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.attributeGroupRef));
            typeDictionary.Add(System.Xml.Linq.XName.Get("keybase", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.keybase));
            typeDictionary.Add(System.Xml.Linq.XName.Get("simpleType", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.simpleTypeType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("topLevelSimpleType", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.topLevelSimpleType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("localSimpleType", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.localSimpleType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("facet", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.facet));
            typeDictionary.Add(System.Xml.Linq.XName.Get("noFixedFacet", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.noFixedFacet));
            typeDictionary.Add(System.Xml.Linq.XName.Get("numFacet", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.numFacet));
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(System.Xml.Linq.XName.Get("schema", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.schema));
            elementDictionary.Add(System.Xml.Linq.XName.Get("complexContent", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.complexContent));
            elementDictionary.Add(System.Xml.Linq.XName.Get("simpleContent", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.simpleContent));
            elementDictionary.Add(System.Xml.Linq.XName.Get("any", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.any));
            elementDictionary.Add(System.Xml.Linq.XName.Get("include", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.include));
            elementDictionary.Add(System.Xml.Linq.XName.Get("redefine", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.redefine));
            elementDictionary.Add(System.Xml.Linq.XName.Get("import", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.import));
            elementDictionary.Add(System.Xml.Linq.XName.Get("selector", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.selector));
            elementDictionary.Add(System.Xml.Linq.XName.Get("field", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.field));
            elementDictionary.Add(System.Xml.Linq.XName.Get("keyref", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.keyref));
            elementDictionary.Add(System.Xml.Linq.XName.Get("notation", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.notation));
            elementDictionary.Add(System.Xml.Linq.XName.Get("appinfo", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.appinfo));
            elementDictionary.Add(System.Xml.Linq.XName.Get("documentation", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.documentation));
            elementDictionary.Add(System.Xml.Linq.XName.Get("annotation", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.annotation));
            elementDictionary.Add(System.Xml.Linq.XName.Get("restriction", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.restriction));
            elementDictionary.Add(System.Xml.Linq.XName.Get("list", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.list));
            elementDictionary.Add(System.Xml.Linq.XName.Get("union", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.union));
            elementDictionary.Add(System.Xml.Linq.XName.Get("totalDigits", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.totalDigits));
            elementDictionary.Add(System.Xml.Linq.XName.Get("whiteSpace", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.whiteSpace));
            elementDictionary.Add(System.Xml.Linq.XName.Get("pattern", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.pattern));
            elementDictionary.Add(System.Xml.Linq.XName.Get("anyAttribute", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.anyAttribute));
            elementDictionary.Add(System.Xml.Linq.XName.Get("complexType", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.complexType));
            elementDictionary.Add(System.Xml.Linq.XName.Get("element", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.element));
            elementDictionary.Add(System.Xml.Linq.XName.Get("all", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.all));
            elementDictionary.Add(System.Xml.Linq.XName.Get("choice", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.choice));
            elementDictionary.Add(System.Xml.Linq.XName.Get("sequence", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.sequence));
            elementDictionary.Add(System.Xml.Linq.XName.Get("group", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.group));
            elementDictionary.Add(System.Xml.Linq.XName.Get("attribute", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.attribute));
            elementDictionary.Add(System.Xml.Linq.XName.Get("attributeGroup", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.attributeGroup));
            elementDictionary.Add(System.Xml.Linq.XName.Get("unique", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.unique));
            elementDictionary.Add(System.Xml.Linq.XName.Get("key", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.key));
            elementDictionary.Add(System.Xml.Linq.XName.Get("simpleType", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.simpleType));
            elementDictionary.Add(System.Xml.Linq.XName.Get("minExclusive", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.minExclusive));
            elementDictionary.Add(System.Xml.Linq.XName.Get("minInclusive", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.minInclusive));
            elementDictionary.Add(System.Xml.Linq.XName.Get("maxExclusive", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.maxExclusive));
            elementDictionary.Add(System.Xml.Linq.XName.Get("maxInclusive", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.maxInclusive));
            elementDictionary.Add(System.Xml.Linq.XName.Get("fractionDigits", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.fractionDigits));
            elementDictionary.Add(System.Xml.Linq.XName.Get("length", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.length));
            elementDictionary.Add(System.Xml.Linq.XName.Get("minLength", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.minLength));
            elementDictionary.Add(System.Xml.Linq.XName.Get("maxLength", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.maxLength));
            elementDictionary.Add(System.Xml.Linq.XName.Get("enumeration", "http://www.w3.org/2001/XMLSchema"), typeof(global::W3C.XSD.enumeration));
        }
        
        private static void BuildWrapperDictionary() {
            wrapperDictionary.Add(typeof(W3C.XSD.anyAttribute), typeof(global::W3C.XSD.wildcard));
            wrapperDictionary.Add(typeof(W3C.XSD.complexType), typeof(global::W3C.XSD.topLevelComplexType));
            wrapperDictionary.Add(typeof(W3C.XSD.element), typeof(global::W3C.XSD.topLevelElement));
            wrapperDictionary.Add(typeof(W3C.XSD.all), typeof(global::W3C.XSD.allType));
            wrapperDictionary.Add(typeof(W3C.XSD.choice), typeof(global::W3C.XSD.explicitGroup));
            wrapperDictionary.Add(typeof(W3C.XSD.sequence), typeof(global::W3C.XSD.explicitGroup));
            wrapperDictionary.Add(typeof(W3C.XSD.group), typeof(global::W3C.XSD.namedGroup));
            wrapperDictionary.Add(typeof(W3C.XSD.attribute), typeof(global::W3C.XSD.topLevelAttribute));
            wrapperDictionary.Add(typeof(W3C.XSD.attributeGroup), typeof(global::W3C.XSD.namedAttributeGroup));
            wrapperDictionary.Add(typeof(W3C.XSD.unique), typeof(global::W3C.XSD.keybase));
            wrapperDictionary.Add(typeof(W3C.XSD.key), typeof(global::W3C.XSD.keybase));
            wrapperDictionary.Add(typeof(W3C.XSD.simpleType), typeof(global::W3C.XSD.topLevelSimpleType));
            wrapperDictionary.Add(typeof(W3C.XSD.minExclusive), typeof(global::W3C.XSD.facet));
            wrapperDictionary.Add(typeof(W3C.XSD.minInclusive), typeof(global::W3C.XSD.facet));
            wrapperDictionary.Add(typeof(W3C.XSD.maxExclusive), typeof(global::W3C.XSD.facet));
            wrapperDictionary.Add(typeof(W3C.XSD.maxInclusive), typeof(global::W3C.XSD.facet));
            wrapperDictionary.Add(typeof(W3C.XSD.fractionDigits), typeof(global::W3C.XSD.numFacet));
            wrapperDictionary.Add(typeof(W3C.XSD.length), typeof(global::W3C.XSD.numFacet));
            wrapperDictionary.Add(typeof(W3C.XSD.minLength), typeof(global::W3C.XSD.numFacet));
            wrapperDictionary.Add(typeof(W3C.XSD.maxLength), typeof(global::W3C.XSD.numFacet));
            wrapperDictionary.Add(typeof(W3C.XSD.enumeration), typeof(global::W3C.XSD.noFixedFacet));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[System.Xml.Linq.XName.Get("schema", "http://www.w3.org/2001/XMLSchema")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public schema schema {  get {return rootObject as schema; } }

		public complexContent complexContent {  get {return rootObject as complexContent; } }

		public simpleContent simpleContent {  get {return rootObject as simpleContent; } }

		public any any {  get {return rootObject as any; } }

		public include include {  get {return rootObject as include; } }

		public redefine redefine {  get {return rootObject as redefine; } }

		public import import {  get {return rootObject as import; } }

		public selector selector {  get {return rootObject as selector; } }

		public field field {  get {return rootObject as field; } }

		public keyref keyref {  get {return rootObject as keyref; } }

		public notation notation {  get {return rootObject as notation; } }

		public appinfo appinfo {  get {return rootObject as appinfo; } }

		public documentation documentation {  get {return rootObject as documentation; } }

		public annotation annotation {  get {return rootObject as annotation; } }

		public restriction restriction {  get {return rootObject as restriction; } }

		public list list {  get {return rootObject as list; } }

		public union union {  get {return rootObject as union; } }

		public totalDigits totalDigits {  get {return rootObject as totalDigits; } }

		public whiteSpace whiteSpace {  get {return rootObject as whiteSpace; } }

		public pattern pattern {  get {return rootObject as pattern; } }

		public anyAttribute anyAttribute {  get {return rootObject as anyAttribute; } }

		public complexType complexType {  get {return rootObject as complexType; } }

		public element element {  get {return rootObject as element; } }

		public all all {  get {return rootObject as all; } }

		public choice choice {  get {return rootObject as choice; } }

		public sequence sequence {  get {return rootObject as sequence; } }

		public group group {  get {return rootObject as group; } }

		public attribute attribute {  get {return rootObject as attribute; } }

		public attributeGroup attributeGroup {  get {return rootObject as attributeGroup; } }

		public unique unique {  get {return rootObject as unique; } }

		public key key {  get {return rootObject as key; } }

		public simpleType simpleType {  get {return rootObject as simpleType; } }

		public minExclusive minExclusive {  get {return rootObject as minExclusive; } }

		public minInclusive minInclusive {  get {return rootObject as minInclusive; } }

		public maxExclusive maxExclusive {  get {return rootObject as maxExclusive; } }

		public maxInclusive maxInclusive {  get {return rootObject as maxInclusive; } }

		public fractionDigits fractionDigits {  get {return rootObject as fractionDigits; } }

		public length length {  get {return rootObject as length; } }

		public minLength minLength {  get {return rootObject as minLength; } }

		public maxLength maxLength {  get {return rootObject as maxLength; } }

		public enumeration enumeration {  get {return rootObject as enumeration; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(schema root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(complexContent root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(simpleContent root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(any root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(include root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(redefine root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(import root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(selector root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(field root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(keyref root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(notation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(appinfo root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(documentation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(annotation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(restriction root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(list root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(union root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(totalDigits root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(whiteSpace root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(pattern root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(anyAttribute root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(complexType root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(element root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(all root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(choice root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(sequence root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(group root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(attribute root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(attributeGroup root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(unique root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(key root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(simpleType root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(minExclusive root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(minInclusive root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(maxExclusive root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(maxInclusive root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(fractionDigits root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(length root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(minLength root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(maxLength root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(enumeration root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public global::W3C.XSD.schema schema {  get {return rootObject as global::W3C.XSD.schema; } }

		public global::W3C.XSD.complexContent complexContent {  get {return rootObject as global::W3C.XSD.complexContent; } }

		public global::W3C.XSD.simpleContent simpleContent {  get {return rootObject as global::W3C.XSD.simpleContent; } }

		public global::W3C.XSD.any any {  get {return rootObject as global::W3C.XSD.any; } }

		public global::W3C.XSD.include include {  get {return rootObject as global::W3C.XSD.include; } }

		public global::W3C.XSD.redefine redefine {  get {return rootObject as global::W3C.XSD.redefine; } }

		public global::W3C.XSD.import import {  get {return rootObject as global::W3C.XSD.import; } }

		public global::W3C.XSD.selector selector {  get {return rootObject as global::W3C.XSD.selector; } }

		public global::W3C.XSD.field field {  get {return rootObject as global::W3C.XSD.field; } }

		public global::W3C.XSD.keyref keyref {  get {return rootObject as global::W3C.XSD.keyref; } }

		public global::W3C.XSD.notation notation {  get {return rootObject as global::W3C.XSD.notation; } }

		public global::W3C.XSD.appinfo appinfo {  get {return rootObject as global::W3C.XSD.appinfo; } }

		public global::W3C.XSD.documentation documentation {  get {return rootObject as global::W3C.XSD.documentation; } }

		public global::W3C.XSD.annotation annotation {  get {return rootObject as global::W3C.XSD.annotation; } }

		public global::W3C.XSD.restriction restriction {  get {return rootObject as global::W3C.XSD.restriction; } }

		public global::W3C.XSD.list list {  get {return rootObject as global::W3C.XSD.list; } }

		public global::W3C.XSD.union union {  get {return rootObject as global::W3C.XSD.union; } }

		public global::W3C.XSD.totalDigits totalDigits {  get {return rootObject as global::W3C.XSD.totalDigits; } }

		public global::W3C.XSD.whiteSpace whiteSpace {  get {return rootObject as global::W3C.XSD.whiteSpace; } }

		public global::W3C.XSD.pattern pattern {  get {return rootObject as global::W3C.XSD.pattern; } }

		public global::W3C.XSD.anyAttribute anyAttribute {  get {return rootObject as global::W3C.XSD.anyAttribute; } }

		public global::W3C.XSD.complexType complexType {  get {return rootObject as global::W3C.XSD.complexType; } }

		public global::W3C.XSD.element element {  get {return rootObject as global::W3C.XSD.element; } }

		public global::W3C.XSD.all all {  get {return rootObject as global::W3C.XSD.all; } }

		public global::W3C.XSD.choice choice {  get {return rootObject as global::W3C.XSD.choice; } }

		public global::W3C.XSD.sequence sequence {  get {return rootObject as global::W3C.XSD.sequence; } }

		public global::W3C.XSD.group group {  get {return rootObject as global::W3C.XSD.group; } }

		public global::W3C.XSD.attribute attribute {  get {return rootObject as global::W3C.XSD.attribute; } }

		public global::W3C.XSD.attributeGroup attributeGroup {  get {return rootObject as global::W3C.XSD.attributeGroup; } }

		public global::W3C.XSD.unique unique {  get {return rootObject as global::W3C.XSD.unique; } }

		public global::W3C.XSD.key key {  get {return rootObject as global::W3C.XSD.key; } }

		public global::W3C.XSD.simpleType simpleType {  get {return rootObject as global::W3C.XSD.simpleType; } }

		public global::W3C.XSD.minExclusive minExclusive {  get {return rootObject as global::W3C.XSD.minExclusive; } }

		public global::W3C.XSD.minInclusive minInclusive {  get {return rootObject as global::W3C.XSD.minInclusive; } }

		public global::W3C.XSD.maxExclusive maxExclusive {  get {return rootObject as global::W3C.XSD.maxExclusive; } }

		public global::W3C.XSD.maxInclusive maxInclusive {  get {return rootObject as global::W3C.XSD.maxInclusive; } }

		public global::W3C.XSD.fractionDigits fractionDigits {  get {return rootObject as global::W3C.XSD.fractionDigits; } }

		public global::W3C.XSD.length length {  get {return rootObject as global::W3C.XSD.length; } }

		public global::W3C.XSD.minLength minLength {  get {return rootObject as global::W3C.XSD.minLength; } }

		public global::W3C.XSD.maxLength maxLength {  get {return rootObject as global::W3C.XSD.maxLength; } }

		public global::W3C.XSD.enumeration enumeration {  get {return rootObject as global::W3C.XSD.enumeration; } }
        
        private XRoot() {
        }
        
        public XRoot(global::W3C.XSD.schema root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XSD.complexContent root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XSD.simpleContent root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XSD.any root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XSD.include root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XSD.redefine root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XSD.import root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XSD.selector root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XSD.field root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XSD.keyref root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XSD.notation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XSD.appinfo root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XSD.documentation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XSD.annotation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XSD.restriction root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XSD.list root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XSD.union root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XSD.totalDigits root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XSD.whiteSpace root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XSD.pattern root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XSD.anyAttribute root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XSD.complexType root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XSD.element root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XSD.all root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XSD.choice root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XSD.sequence root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XSD.group root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XSD.attribute root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XSD.attributeGroup root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XSD.unique root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XSD.key root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XSD.simpleType root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XSD.minExclusive root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XSD.minInclusive root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XSD.maxExclusive root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XSD.maxInclusive root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XSD.fractionDigits root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XSD.length root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XSD.minLength root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XSD.maxLength root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::W3C.XSD.enumeration root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
namespace W3C {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.IO;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    using W3C.XSD;
    
    
    public sealed class lang {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language), null),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    ""}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve))});
        
        private lang() {
        }
    }
}
