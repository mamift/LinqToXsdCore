//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Schemas.SharePoint {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    
    public sealed class TRUEFALSE {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "TRUE",
                        "FALSE",
                        "True",
                        "False",
                        "true",
                        "false"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private TRUEFALSE() {
        }
    }
    
    public sealed class UniqueIdentifier {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private UniqueIdentifier() {
        }
    }
    
    public sealed class RelativeFolderPath {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private RelativeFolderPath() {
        }
    }
    
    public sealed class RelativeFilePath {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private RelativeFilePath() {
        }
    }
    
    public sealed class LocalizableString {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private LocalizableString() {
        }
    }
    
    public sealed class RelativeUrl {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private RelativeUrl() {
        }
    }
    
    public sealed class AssemblyStrongName {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(2)), null, 0, 0, null, null, 0, null, null, 2, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private AssemblyStrongName() {
        }
    }
    
    public sealed class AssemblyClass {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(2)), null, 0, 0, null, null, 0, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private AssemblyClass() {
        }
    }
    
    public sealed class String255Chars {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 255, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private String255Chars() {
        }
    }
    
    public sealed class Int0To1024 {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 1024, 0, null, 0, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private Int0To1024() {
        }
    }
    
    public sealed class BasicVersion {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private BasicVersion() {
        }
    }
    
    public sealed class AbsoluteOrRelativeUrl {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private AbsoluteOrRelativeUrl() {
        }
    }
    
    public sealed class AbsoluteUrl {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private AbsoluteUrl() {
        }
    }
    
    public sealed class ContentDirection {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "RTL",
                        "LTR",
                        "none",
                        "0",
                        "2"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ContentDirection() {
        }
    }
    
    public sealed class Sequence {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 65536, 0, null, 0, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private Sequence() {
        }
    }
    
    public sealed class Int0To65536 {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 65536, 0, null, 0, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private Int0To65536() {
        }
    }
    
    public enum TrueFalseMixed {
        
        True,
        
        False,
    }
    
    public sealed class TrueFalseMixedValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "True",
                        "False"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private TrueFalseMixedValidator() {
        }
    }
    
    public sealed class NonEmptyString {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(2)), null, 0, 0, null, null, 0, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private NonEmptyString() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Where?, OrderBy?, Eq?, Field?, ListProperty?, LookupColumn?, Column?, GetVar?, GroupBy?, Contains?, BeginsWith?)
    /// </para>
    /// </summary>
    public partial class CamlQueryRoot : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WhereXName = System.Xml.Linq.XName.Get("Where", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OrderByXName = System.Xml.Linq.XName.Get("OrderBy", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EqXName = System.Xml.Linq.XName.Get("Eq", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldXName = System.Xml.Linq.XName.Get("Field", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ListPropertyXName = System.Xml.Linq.XName.Get("ListProperty", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LookupColumnXName = System.Xml.Linq.XName.Get("LookupColumn", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ColumnXName = System.Xml.Linq.XName.Get("Column", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GetVarXName = System.Xml.Linq.XName.Get("GetVar", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GroupByXName = System.Xml.Linq.XName.Get("GroupBy", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ContainsXName = System.Xml.Linq.XName.Get("Contains", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BeginsWithXName = System.Xml.Linq.XName.Get("BeginsWith", "http://schemas.microsoft.com/sharepoint/");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CamlQueryRoot", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator CamlQueryRoot(XElement xe) { return XTypedServices.ToXTypedElement<CamlQueryRoot>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CamlQueryRoot() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Where?, OrderBy?, Eq?, Field?, ListProperty?, LookupColumn?, Column?, GetVar?, GroupBy?, Contains?, BeginsWith?)
        /// </para>
        /// </summary>
        public CamlQueryRoot() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Where?, OrderBy?, Eq?, Field?, ListProperty?, LookupColumn?, Column?, GetVar?, GroupBy?, Contains?, BeginsWith?)
        /// </para>
        /// </summary>
        public virtual LogicalJoinDefinition Where {
            get {
                XElement x = this.GetElement(WhereXName);
                return ((LogicalJoinDefinition)(x));
            }
            set {
                this.SetElement(WhereXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Where?, OrderBy?, Eq?, Field?, ListProperty?, LookupColumn?, Column?, GetVar?, GroupBy?, Contains?, BeginsWith?)
        /// </para>
        /// </summary>
        public virtual OrderByDefinition OrderBy {
            get {
                XElement x = this.GetElement(OrderByXName);
                return ((OrderByDefinition)(x));
            }
            set {
                this.SetElement(OrderByXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Where?, OrderBy?, Eq?, Field?, ListProperty?, LookupColumn?, Column?, GetVar?, GroupBy?, Contains?, BeginsWith?)
        /// </para>
        /// </summary>
        public virtual LogicalTestDefinition Eq {
            get {
                XElement x = this.GetElement(EqXName);
                return ((LogicalTestDefinition)(x));
            }
            set {
                this.SetElement(EqXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Where?, OrderBy?, Eq?, Field?, ListProperty?, LookupColumn?, Column?, GetVar?, GroupBy?, Contains?, BeginsWith?)
        /// </para>
        /// </summary>
        public virtual SimpleFieldRef Field {
            get {
                XElement x = this.GetElement(FieldXName);
                return ((SimpleFieldRef)(x));
            }
            set {
                this.SetElement(FieldXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Where?, OrderBy?, Eq?, Field?, ListProperty?, LookupColumn?, Column?, GetVar?, GroupBy?, Contains?, BeginsWith?)
        /// </para>
        /// </summary>
        public virtual ListPropertyDefinition ListProperty {
            get {
                XElement x = this.GetElement(ListPropertyXName);
                return ((ListPropertyDefinition)(x));
            }
            set {
                this.SetElement(ListPropertyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Where?, OrderBy?, Eq?, Field?, ListProperty?, LookupColumn?, Column?, GetVar?, GroupBy?, Contains?, BeginsWith?)
        /// </para>
        /// </summary>
        public virtual LookupColumnDefinition LookupColumn {
            get {
                XElement x = this.GetElement(LookupColumnXName);
                return ((LookupColumnDefinition)(x));
            }
            set {
                this.SetElement(LookupColumnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Where?, OrderBy?, Eq?, Field?, ListProperty?, LookupColumn?, Column?, GetVar?, GroupBy?, Contains?, BeginsWith?)
        /// </para>
        /// </summary>
        public virtual QueryColumnDefinition Column {
            get {
                XElement x = this.GetElement(ColumnXName);
                return ((QueryColumnDefinition)(x));
            }
            set {
                this.SetElement(ColumnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Where?, OrderBy?, Eq?, Field?, ListProperty?, LookupColumn?, Column?, GetVar?, GroupBy?, Contains?, BeginsWith?)
        /// </para>
        /// </summary>
        public virtual QueryGetVarDefinition GetVar {
            get {
                XElement x = this.GetElement(GetVarXName);
                return ((QueryGetVarDefinition)(x));
            }
            set {
                this.SetElement(GetVarXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Where?, OrderBy?, Eq?, Field?, ListProperty?, LookupColumn?, Column?, GetVar?, GroupBy?, Contains?, BeginsWith?)
        /// </para>
        /// </summary>
        public virtual GroupByDefinition GroupBy {
            get {
                XElement x = this.GetElement(GroupByXName);
                return ((GroupByDefinition)(x));
            }
            set {
                this.SetElement(GroupByXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Where?, OrderBy?, Eq?, Field?, ListProperty?, LookupColumn?, Column?, GetVar?, GroupBy?, Contains?, BeginsWith?)
        /// </para>
        /// </summary>
        public virtual LogicalTestDefinition Contains {
            get {
                XElement x = this.GetElement(ContainsXName);
                return ((LogicalTestDefinition)(x));
            }
            set {
                this.SetElement(ContainsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Where?, OrderBy?, Eq?, Field?, ListProperty?, LookupColumn?, Column?, GetVar?, GroupBy?, Contains?, BeginsWith?)
        /// </para>
        /// </summary>
        public virtual LogicalTestDefinition BeginsWith {
            get {
                XElement x = this.GetElement(BeginsWithXName);
                return ((LogicalTestDefinition)(x));
            }
            set {
                this.SetElement(BeginsWithXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CamlQueryRoot>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(WhereXName, typeof(LogicalJoinDefinition));
            localElementDictionary.Add(OrderByXName, typeof(OrderByDefinition));
            localElementDictionary.Add(EqXName, typeof(LogicalTestDefinition));
            localElementDictionary.Add(FieldXName, typeof(SimpleFieldRef));
            localElementDictionary.Add(ListPropertyXName, typeof(ListPropertyDefinition));
            localElementDictionary.Add(LookupColumnXName, typeof(LookupColumnDefinition));
            localElementDictionary.Add(ColumnXName, typeof(QueryColumnDefinition));
            localElementDictionary.Add(GetVarXName, typeof(QueryGetVarDefinition));
            localElementDictionary.Add(GroupByXName, typeof(GroupByDefinition));
            localElementDictionary.Add(ContainsXName, typeof(LogicalTestDefinition));
            localElementDictionary.Add(BeginsWithXName, typeof(LogicalTestDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((FieldRef | Value | XML)*)
    /// </para>
    /// </summary>
    public partial class LogicalTestDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldRefXName = System.Xml.Linq.XName.Get("FieldRef", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldRefDefinition> FieldRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ValueXName = System.Xml.Linq.XName.Get("Value", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ValueDefinition> ValueField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName XMLXName = System.Xml.Linq.XName.Get("XML", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> XMLField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("LogicalTestDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator LogicalTestDefinition(XElement xe) { return XTypedServices.ToXTypedElement<LogicalTestDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static LogicalTestDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(FieldRefXName), new NamedContentModelEntity(ValueXName), new NamedContentModelEntity(XMLXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((FieldRef | Value | XML)*)
        /// </para>
        /// </summary>
        public LogicalTestDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((FieldRef | Value | XML)*)
        /// </para>
        /// </summary>
        public virtual IList<FieldRefDefinition> FieldRef {
            get {
                if ((this.FieldRefField == null)) {
                    this.FieldRefField = new XTypedList<FieldRefDefinition>(this, LinqToXsdTypeManager.Instance, FieldRefXName);
                }
                return this.FieldRefField;
            }
            set {
                if ((value == null)) {
                    this.FieldRefField = null;
                }
                else {
                    if ((this.FieldRefField == null)) {
                        this.FieldRefField = XTypedList<FieldRefDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldRefXName);
                    }
                    else {
                        XTypedServices.SetList<FieldRefDefinition>(this.FieldRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((FieldRef | Value | XML)*)
        /// </para>
        /// </summary>
        public virtual IList<ValueDefinition> Value {
            get {
                if ((this.ValueField == null)) {
                    this.ValueField = new XTypedList<ValueDefinition>(this, LinqToXsdTypeManager.Instance, ValueXName);
                }
                return this.ValueField;
            }
            set {
                if ((value == null)) {
                    this.ValueField = null;
                }
                else {
                    if ((this.ValueField == null)) {
                        this.ValueField = XTypedList<ValueDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, ValueXName);
                    }
                    else {
                        XTypedServices.SetList<ValueDefinition>(this.ValueField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((FieldRef | Value | XML)*)
        /// </para>
        /// </summary>
        public virtual IList<string> XML {
            get {
                if ((this.XMLField == null)) {
                    this.XMLField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XMLXName);
                }
                return this.XMLField;
            }
            set {
                if ((value == null)) {
                    this.XMLField = null;
                }
                else {
                    if ((this.XMLField == null)) {
                        this.XMLField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XMLXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.XMLField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LogicalTestDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FieldRefXName, typeof(FieldRefDefinition));
            localElementDictionary.Add(ValueXName, typeof(ValueDefinition));
            localElementDictionary.Add(XMLXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((FieldRef | Values | XML)*)
    /// </para>
    /// </summary>
    public partial class LogicalMultiTestDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldRefXName = System.Xml.Linq.XName.Get("FieldRef", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldRefDefinition> FieldRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ValuesXName = System.Xml.Linq.XName.Get("Values", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ValueDefinitions> ValuesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName XMLXName = System.Xml.Linq.XName.Get("XML", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> XMLField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("LogicalMultiTestDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator LogicalMultiTestDefinition(XElement xe) { return XTypedServices.ToXTypedElement<LogicalMultiTestDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static LogicalMultiTestDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(FieldRefXName), new NamedContentModelEntity(ValuesXName), new NamedContentModelEntity(XMLXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((FieldRef | Values | XML)*)
        /// </para>
        /// </summary>
        public LogicalMultiTestDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((FieldRef | Values | XML)*)
        /// </para>
        /// </summary>
        public virtual IList<FieldRefDefinition> FieldRef {
            get {
                if ((this.FieldRefField == null)) {
                    this.FieldRefField = new XTypedList<FieldRefDefinition>(this, LinqToXsdTypeManager.Instance, FieldRefXName);
                }
                return this.FieldRefField;
            }
            set {
                if ((value == null)) {
                    this.FieldRefField = null;
                }
                else {
                    if ((this.FieldRefField == null)) {
                        this.FieldRefField = XTypedList<FieldRefDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldRefXName);
                    }
                    else {
                        XTypedServices.SetList<FieldRefDefinition>(this.FieldRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((FieldRef | Values | XML)*)
        /// </para>
        /// </summary>
        public virtual IList<ValueDefinitions> Values {
            get {
                if ((this.ValuesField == null)) {
                    this.ValuesField = new XTypedList<ValueDefinitions>(this, LinqToXsdTypeManager.Instance, ValuesXName);
                }
                return this.ValuesField;
            }
            set {
                if ((value == null)) {
                    this.ValuesField = null;
                }
                else {
                    if ((this.ValuesField == null)) {
                        this.ValuesField = XTypedList<ValueDefinitions>.Initialize(this, LinqToXsdTypeManager.Instance, value, ValuesXName);
                    }
                    else {
                        XTypedServices.SetList<ValueDefinitions>(this.ValuesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((FieldRef | Values | XML)*)
        /// </para>
        /// </summary>
        public virtual IList<string> XML {
            get {
                if ((this.XMLField == null)) {
                    this.XMLField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XMLXName);
                }
                return this.XMLField;
            }
            set {
                if ((value == null)) {
                    this.XMLField = null;
                }
                else {
                    if ((this.XMLField == null)) {
                        this.XMLField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XMLXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.XMLField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LogicalMultiTestDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FieldRefXName, typeof(FieldRefDefinition));
            localElementDictionary.Add(ValuesXName, typeof(ValueDefinitions));
            localElementDictionary.Add(XMLXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | Membership | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | In)*)
    /// </para>
    /// </summary>
    public partial class LogicalJoinDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EqXName = System.Xml.Linq.XName.Get("Eq", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalTestDefinition> EqField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GeqXName = System.Xml.Linq.XName.Get("Geq", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalTestDefinition> GeqField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GtXName = System.Xml.Linq.XName.Get("Gt", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalTestDefinition> GtField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LeqXName = System.Xml.Linq.XName.Get("Leq", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalTestDefinition> LeqField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LtXName = System.Xml.Linq.XName.Get("Lt", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalTestDefinition> LtField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NeqXName = System.Xml.Linq.XName.Get("Neq", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalTestDefinition> NeqField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AndXName = System.Xml.Linq.XName.Get("And", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ExtendedLogicalJoinDefinition> AndField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OrXName = System.Xml.Linq.XName.Get("Or", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ExtendedLogicalJoinDefinition> OrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MembershipXName = System.Xml.Linq.XName.Get("Membership", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MembershipDefinition> MembershipField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IsNullXName = System.Xml.Linq.XName.Get("IsNull", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalTestDefinition> IsNullField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IsNotNullXName = System.Xml.Linq.XName.Get("IsNotNull", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalTestDefinition> IsNotNullField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DateRangesOverlapXName = System.Xml.Linq.XName.Get("DateRangesOverlap", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UnlimitedLogicalTestDefinition> DateRangesOverlapField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BeginsWithXName = System.Xml.Linq.XName.Get("BeginsWith", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalTestDefinition> BeginsWithField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ContainsXName = System.Xml.Linq.XName.Get("Contains", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalTestDefinition> ContainsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InXName = System.Xml.Linq.XName.Get("In", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalMultiTestDefinition> InField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("LogicalJoinDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator LogicalJoinDefinition(XElement xe) { return XTypedServices.ToXTypedElement<LogicalJoinDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static LogicalJoinDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(EqXName), new NamedContentModelEntity(GeqXName), new NamedContentModelEntity(GtXName), new NamedContentModelEntity(LeqXName), new NamedContentModelEntity(LtXName), new NamedContentModelEntity(NeqXName), new NamedContentModelEntity(AndXName), new NamedContentModelEntity(OrXName), new NamedContentModelEntity(MembershipXName), new NamedContentModelEntity(IsNullXName), new NamedContentModelEntity(IsNotNullXName), new NamedContentModelEntity(DateRangesOverlapXName), new NamedContentModelEntity(BeginsWithXName), new NamedContentModelEntity(ContainsXName), new NamedContentModelEntity(InXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | Membership | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | In)*)
        /// </para>
        /// </summary>
        public LogicalJoinDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | Membership | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | In)*)
        /// </para>
        /// </summary>
        public virtual IList<LogicalTestDefinition> Eq {
            get {
                if ((this.EqField == null)) {
                    this.EqField = new XTypedList<LogicalTestDefinition>(this, LinqToXsdTypeManager.Instance, EqXName);
                }
                return this.EqField;
            }
            set {
                if ((value == null)) {
                    this.EqField = null;
                }
                else {
                    if ((this.EqField == null)) {
                        this.EqField = XTypedList<LogicalTestDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, EqXName);
                    }
                    else {
                        XTypedServices.SetList<LogicalTestDefinition>(this.EqField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | Membership | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | In)*)
        /// </para>
        /// </summary>
        public virtual IList<LogicalTestDefinition> Geq {
            get {
                if ((this.GeqField == null)) {
                    this.GeqField = new XTypedList<LogicalTestDefinition>(this, LinqToXsdTypeManager.Instance, GeqXName);
                }
                return this.GeqField;
            }
            set {
                if ((value == null)) {
                    this.GeqField = null;
                }
                else {
                    if ((this.GeqField == null)) {
                        this.GeqField = XTypedList<LogicalTestDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, GeqXName);
                    }
                    else {
                        XTypedServices.SetList<LogicalTestDefinition>(this.GeqField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | Membership | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | In)*)
        /// </para>
        /// </summary>
        public virtual IList<LogicalTestDefinition> Gt {
            get {
                if ((this.GtField == null)) {
                    this.GtField = new XTypedList<LogicalTestDefinition>(this, LinqToXsdTypeManager.Instance, GtXName);
                }
                return this.GtField;
            }
            set {
                if ((value == null)) {
                    this.GtField = null;
                }
                else {
                    if ((this.GtField == null)) {
                        this.GtField = XTypedList<LogicalTestDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, GtXName);
                    }
                    else {
                        XTypedServices.SetList<LogicalTestDefinition>(this.GtField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | Membership | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | In)*)
        /// </para>
        /// </summary>
        public virtual IList<LogicalTestDefinition> Leq {
            get {
                if ((this.LeqField == null)) {
                    this.LeqField = new XTypedList<LogicalTestDefinition>(this, LinqToXsdTypeManager.Instance, LeqXName);
                }
                return this.LeqField;
            }
            set {
                if ((value == null)) {
                    this.LeqField = null;
                }
                else {
                    if ((this.LeqField == null)) {
                        this.LeqField = XTypedList<LogicalTestDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, LeqXName);
                    }
                    else {
                        XTypedServices.SetList<LogicalTestDefinition>(this.LeqField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | Membership | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | In)*)
        /// </para>
        /// </summary>
        public virtual IList<LogicalTestDefinition> Lt {
            get {
                if ((this.LtField == null)) {
                    this.LtField = new XTypedList<LogicalTestDefinition>(this, LinqToXsdTypeManager.Instance, LtXName);
                }
                return this.LtField;
            }
            set {
                if ((value == null)) {
                    this.LtField = null;
                }
                else {
                    if ((this.LtField == null)) {
                        this.LtField = XTypedList<LogicalTestDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, LtXName);
                    }
                    else {
                        XTypedServices.SetList<LogicalTestDefinition>(this.LtField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | Membership | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | In)*)
        /// </para>
        /// </summary>
        public virtual IList<LogicalTestDefinition> Neq {
            get {
                if ((this.NeqField == null)) {
                    this.NeqField = new XTypedList<LogicalTestDefinition>(this, LinqToXsdTypeManager.Instance, NeqXName);
                }
                return this.NeqField;
            }
            set {
                if ((value == null)) {
                    this.NeqField = null;
                }
                else {
                    if ((this.NeqField == null)) {
                        this.NeqField = XTypedList<LogicalTestDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, NeqXName);
                    }
                    else {
                        XTypedServices.SetList<LogicalTestDefinition>(this.NeqField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | Membership | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | In)*)
        /// </para>
        /// </summary>
        public virtual IList<ExtendedLogicalJoinDefinition> And {
            get {
                if ((this.AndField == null)) {
                    this.AndField = new XTypedList<ExtendedLogicalJoinDefinition>(this, LinqToXsdTypeManager.Instance, AndXName);
                }
                return this.AndField;
            }
            set {
                if ((value == null)) {
                    this.AndField = null;
                }
                else {
                    if ((this.AndField == null)) {
                        this.AndField = XTypedList<ExtendedLogicalJoinDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, AndXName);
                    }
                    else {
                        XTypedServices.SetList<ExtendedLogicalJoinDefinition>(this.AndField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | Membership | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | In)*)
        /// </para>
        /// </summary>
        public virtual IList<ExtendedLogicalJoinDefinition> Or {
            get {
                if ((this.OrField == null)) {
                    this.OrField = new XTypedList<ExtendedLogicalJoinDefinition>(this, LinqToXsdTypeManager.Instance, OrXName);
                }
                return this.OrField;
            }
            set {
                if ((value == null)) {
                    this.OrField = null;
                }
                else {
                    if ((this.OrField == null)) {
                        this.OrField = XTypedList<ExtendedLogicalJoinDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, OrXName);
                    }
                    else {
                        XTypedServices.SetList<ExtendedLogicalJoinDefinition>(this.OrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | Membership | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | In)*)
        /// </para>
        /// </summary>
        public virtual IList<MembershipDefinition> Membership {
            get {
                if ((this.MembershipField == null)) {
                    this.MembershipField = new XTypedList<MembershipDefinition>(this, LinqToXsdTypeManager.Instance, MembershipXName);
                }
                return this.MembershipField;
            }
            set {
                if ((value == null)) {
                    this.MembershipField = null;
                }
                else {
                    if ((this.MembershipField == null)) {
                        this.MembershipField = XTypedList<MembershipDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, MembershipXName);
                    }
                    else {
                        XTypedServices.SetList<MembershipDefinition>(this.MembershipField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | Membership | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | In)*)
        /// </para>
        /// </summary>
        public virtual IList<LogicalTestDefinition> IsNull {
            get {
                if ((this.IsNullField == null)) {
                    this.IsNullField = new XTypedList<LogicalTestDefinition>(this, LinqToXsdTypeManager.Instance, IsNullXName);
                }
                return this.IsNullField;
            }
            set {
                if ((value == null)) {
                    this.IsNullField = null;
                }
                else {
                    if ((this.IsNullField == null)) {
                        this.IsNullField = XTypedList<LogicalTestDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, IsNullXName);
                    }
                    else {
                        XTypedServices.SetList<LogicalTestDefinition>(this.IsNullField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | Membership | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | In)*)
        /// </para>
        /// </summary>
        public virtual IList<LogicalTestDefinition> IsNotNull {
            get {
                if ((this.IsNotNullField == null)) {
                    this.IsNotNullField = new XTypedList<LogicalTestDefinition>(this, LinqToXsdTypeManager.Instance, IsNotNullXName);
                }
                return this.IsNotNullField;
            }
            set {
                if ((value == null)) {
                    this.IsNotNullField = null;
                }
                else {
                    if ((this.IsNotNullField == null)) {
                        this.IsNotNullField = XTypedList<LogicalTestDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, IsNotNullXName);
                    }
                    else {
                        XTypedServices.SetList<LogicalTestDefinition>(this.IsNotNullField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | Membership | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | In)*)
        /// </para>
        /// </summary>
        public virtual IList<UnlimitedLogicalTestDefinition> DateRangesOverlap {
            get {
                if ((this.DateRangesOverlapField == null)) {
                    this.DateRangesOverlapField = new XTypedList<UnlimitedLogicalTestDefinition>(this, LinqToXsdTypeManager.Instance, DateRangesOverlapXName);
                }
                return this.DateRangesOverlapField;
            }
            set {
                if ((value == null)) {
                    this.DateRangesOverlapField = null;
                }
                else {
                    if ((this.DateRangesOverlapField == null)) {
                        this.DateRangesOverlapField = XTypedList<UnlimitedLogicalTestDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, DateRangesOverlapXName);
                    }
                    else {
                        XTypedServices.SetList<UnlimitedLogicalTestDefinition>(this.DateRangesOverlapField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | Membership | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | In)*)
        /// </para>
        /// </summary>
        public virtual IList<LogicalTestDefinition> BeginsWith {
            get {
                if ((this.BeginsWithField == null)) {
                    this.BeginsWithField = new XTypedList<LogicalTestDefinition>(this, LinqToXsdTypeManager.Instance, BeginsWithXName);
                }
                return this.BeginsWithField;
            }
            set {
                if ((value == null)) {
                    this.BeginsWithField = null;
                }
                else {
                    if ((this.BeginsWithField == null)) {
                        this.BeginsWithField = XTypedList<LogicalTestDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, BeginsWithXName);
                    }
                    else {
                        XTypedServices.SetList<LogicalTestDefinition>(this.BeginsWithField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | Membership | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | In)*)
        /// </para>
        /// </summary>
        public virtual IList<LogicalTestDefinition> Contains {
            get {
                if ((this.ContainsField == null)) {
                    this.ContainsField = new XTypedList<LogicalTestDefinition>(this, LinqToXsdTypeManager.Instance, ContainsXName);
                }
                return this.ContainsField;
            }
            set {
                if ((value == null)) {
                    this.ContainsField = null;
                }
                else {
                    if ((this.ContainsField == null)) {
                        this.ContainsField = XTypedList<LogicalTestDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, ContainsXName);
                    }
                    else {
                        XTypedServices.SetList<LogicalTestDefinition>(this.ContainsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | Membership | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | In)*)
        /// </para>
        /// </summary>
        public virtual IList<LogicalMultiTestDefinition> In {
            get {
                if ((this.InField == null)) {
                    this.InField = new XTypedList<LogicalMultiTestDefinition>(this, LinqToXsdTypeManager.Instance, InXName);
                }
                return this.InField;
            }
            set {
                if ((value == null)) {
                    this.InField = null;
                }
                else {
                    if ((this.InField == null)) {
                        this.InField = XTypedList<LogicalMultiTestDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, InXName);
                    }
                    else {
                        XTypedServices.SetList<LogicalMultiTestDefinition>(this.InField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LogicalJoinDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(EqXName, typeof(LogicalTestDefinition));
            localElementDictionary.Add(GeqXName, typeof(LogicalTestDefinition));
            localElementDictionary.Add(GtXName, typeof(LogicalTestDefinition));
            localElementDictionary.Add(LeqXName, typeof(LogicalTestDefinition));
            localElementDictionary.Add(LtXName, typeof(LogicalTestDefinition));
            localElementDictionary.Add(NeqXName, typeof(LogicalTestDefinition));
            localElementDictionary.Add(AndXName, typeof(ExtendedLogicalJoinDefinition));
            localElementDictionary.Add(OrXName, typeof(ExtendedLogicalJoinDefinition));
            localElementDictionary.Add(MembershipXName, typeof(MembershipDefinition));
            localElementDictionary.Add(IsNullXName, typeof(LogicalTestDefinition));
            localElementDictionary.Add(IsNotNullXName, typeof(LogicalTestDefinition));
            localElementDictionary.Add(DateRangesOverlapXName, typeof(UnlimitedLogicalTestDefinition));
            localElementDictionary.Add(BeginsWithXName, typeof(LogicalTestDefinition));
            localElementDictionary.Add(ContainsXName, typeof(LogicalTestDefinition));
            localElementDictionary.Add(InXName, typeof(LogicalMultiTestDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class FieldRefDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AliasXName = System.Xml.Linq.XName.Get("Alias", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AscendingXName = System.Xml.Linq.XName.Get("Ascending", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CreateURLXName = System.Xml.Linq.XName.Get("CreateURL", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DisplayNameXName = System.Xml.Linq.XName.Get("DisplayName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExplicitXName = System.Xml.Linq.XName.Get("Explicit", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IDXName = System.Xml.Linq.XName.Get("ID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KeyXName = System.Xml.Linq.XName.Get("Key", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RefTypeXName = System.Xml.Linq.XName.Get("RefType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ShowFieldXName = System.Xml.Linq.XName.Get("ShowField", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TextOnlyXName = System.Xml.Linq.XName.Get("TextOnly", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypeXName = System.Xml.Linq.XName.Get("Type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FormatXName = System.Xml.Linq.XName.Get("Format", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FieldRefDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator FieldRefDefinition(XElement xe) { return XTypedServices.ToXTypedElement<FieldRefDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public FieldRefDefinition() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Alias {
            get {
                XAttribute x = this.Attribute(AliasXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AliasXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Ascending {
            get {
                XAttribute x = this.Attribute(AscendingXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AscendingXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CreateURL {
            get {
                XAttribute x = this.Attribute(CreateURLXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CreateURLXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DisplayName {
            get {
                XAttribute x = this.Attribute(DisplayNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DisplayNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Explicit {
            get {
                XAttribute x = this.Attribute(ExplicitXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ExplicitXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ID {
            get {
                XAttribute x = this.Attribute(IDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Key {
            get {
                XAttribute x = this.Attribute(KeyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(KeyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string RefType {
            get {
                XAttribute x = this.Attribute(RefTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(RefTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ShowField {
            get {
                XAttribute x = this.Attribute(ShowFieldXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ShowFieldXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TextOnly {
            get {
                XAttribute x = this.Attribute(TextOnlyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TextOnlyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.ReferenceType? Type {
            get {
                XAttribute x = this.Attribute(TypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.ReferenceType)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.ReferenceType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(TypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Format {
            get {
                XAttribute x = this.Attribute(FormatXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FormatXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FieldRefDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum ReferenceType {
        
        AVG,
        
        COUNT,
        
        MAX,
        
        MIN,
        
        SUM,
        
        STDEV,
        
        VAR,
    }
    
    public sealed class ReferenceTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "AVG",
                        "COUNT",
                        "MAX",
                        "MIN",
                        "SUM",
                        "STDEV",
                        "VAR"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ReferenceTypeValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Value)*)
    /// </para>
    /// </summary>
    public partial class ValueDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ValueXName = System.Xml.Linq.XName.Get("Value", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ValueDefinition> ValueField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ValueDefinitions", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ValueDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<ValueDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ValueDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(ValueXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Value)*)
        /// </para>
        /// </summary>
        public ValueDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Value)*)
        /// </para>
        /// </summary>
        public virtual IList<ValueDefinition> Value {
            get {
                if ((this.ValueField == null)) {
                    this.ValueField = new XTypedList<ValueDefinition>(this, LinqToXsdTypeManager.Instance, ValueXName);
                }
                return this.ValueField;
            }
            set {
                if ((value == null)) {
                    this.ValueField = null;
                }
                else {
                    if ((this.ValueField == null)) {
                        this.ValueField = XTypedList<ValueDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, ValueXName);
                    }
                    else {
                        XTypedServices.SetList<ValueDefinition>(this.ValueField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ValueDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ValueXName, typeof(ValueDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Today? | UserID | ListProperty | Now | Month | XML)*)
    /// </para>
    /// </summary>
    public partial class ValueDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TodayXName = System.Xml.Linq.XName.Get("Today", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> TodayField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UserIDXName = System.Xml.Linq.XName.Get("UserID", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> UserIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ListPropertyXName = System.Xml.Linq.XName.Get("ListProperty", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<QueryListProperty> ListPropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NowXName = System.Xml.Linq.XName.Get("Now", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> NowField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MonthXName = System.Xml.Linq.XName.Get("Month", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> MonthField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName XMLXName = System.Xml.Linq.XName.Get("XML", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> XMLField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypeXName = System.Xml.Linq.XName.Get("Type", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ValueDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ValueDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ValueDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ValueDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(TodayXName), new NamedContentModelEntity(UserIDXName), new NamedContentModelEntity(ListPropertyXName), new NamedContentModelEntity(NowXName), new NamedContentModelEntity(MonthXName), new NamedContentModelEntity(XMLXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Today? | UserID | ListProperty | Now | Month | XML)*)
        /// </para>
        /// </summary>
        public ValueDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Today? | UserID | ListProperty | Now | Month | XML)*)
        /// </para>
        /// </summary>
        public virtual IList<string> Today {
            get {
                if ((this.TodayField == null)) {
                    this.TodayField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, TodayXName);
                }
                return this.TodayField;
            }
            set {
                if ((value == null)) {
                    this.TodayField = null;
                }
                else {
                    if ((this.TodayField == null)) {
                        this.TodayField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, TodayXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.TodayField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Today? | UserID | ListProperty | Now | Month | XML)*)
        /// </para>
        /// </summary>
        public virtual IList<string> UserID {
            get {
                if ((this.UserIDField == null)) {
                    this.UserIDField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, UserIDXName);
                }
                return this.UserIDField;
            }
            set {
                if ((value == null)) {
                    this.UserIDField = null;
                }
                else {
                    if ((this.UserIDField == null)) {
                        this.UserIDField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, UserIDXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.UserIDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Today? | UserID | ListProperty | Now | Month | XML)*)
        /// </para>
        /// </summary>
        public virtual IList<QueryListProperty> ListProperty {
            get {
                if ((this.ListPropertyField == null)) {
                    this.ListPropertyField = new XTypedList<QueryListProperty>(this, LinqToXsdTypeManager.Instance, ListPropertyXName);
                }
                return this.ListPropertyField;
            }
            set {
                if ((value == null)) {
                    this.ListPropertyField = null;
                }
                else {
                    if ((this.ListPropertyField == null)) {
                        this.ListPropertyField = XTypedList<QueryListProperty>.Initialize(this, LinqToXsdTypeManager.Instance, value, ListPropertyXName);
                    }
                    else {
                        XTypedServices.SetList<QueryListProperty>(this.ListPropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Today? | UserID | ListProperty | Now | Month | XML)*)
        /// </para>
        /// </summary>
        public virtual IList<string> Now {
            get {
                if ((this.NowField == null)) {
                    this.NowField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, NowXName);
                }
                return this.NowField;
            }
            set {
                if ((value == null)) {
                    this.NowField = null;
                }
                else {
                    if ((this.NowField == null)) {
                        this.NowField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, NowXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.NowField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Today? | UserID | ListProperty | Now | Month | XML)*)
        /// </para>
        /// </summary>
        public virtual IList<string> Month {
            get {
                if ((this.MonthField == null)) {
                    this.MonthField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, MonthXName);
                }
                return this.MonthField;
            }
            set {
                if ((value == null)) {
                    this.MonthField = null;
                }
                else {
                    if ((this.MonthField == null)) {
                        this.MonthField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, MonthXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.MonthField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Today? | UserID | ListProperty | Now | Month | XML)*)
        /// </para>
        /// </summary>
        public virtual IList<string> XML {
            get {
                if ((this.XMLField == null)) {
                    this.XMLField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, XMLXName);
                }
                return this.XMLField;
            }
            set {
                if ((value == null)) {
                    this.XMLField = null;
                }
                else {
                    if ((this.XMLField == null)) {
                        this.XMLField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, XMLXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.XMLField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Type {
            get {
                XAttribute x = this.Attribute(TypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ValueDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TodayXName, typeof(string));
            localElementDictionary.Add(UserIDXName, typeof(string));
            localElementDictionary.Add(ListPropertyXName, typeof(QueryListProperty));
            localElementDictionary.Add(NowXName, typeof(string));
            localElementDictionary.Add(MonthXName, typeof(string));
            localElementDictionary.Add(XMLXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (FieldRef)
    /// </para>
    /// </summary>
    public partial class LogicalNullDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldRefXName = System.Xml.Linq.XName.Get("FieldRef", "http://schemas.microsoft.com/sharepoint/");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("LogicalNullDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator LogicalNullDefinition(XElement xe) { return XTypedServices.ToXTypedElement<LogicalNullDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static LogicalNullDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FieldRefXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (FieldRef)
        /// </para>
        /// </summary>
        public LogicalNullDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (FieldRef)
        /// </para>
        /// </summary>
        public virtual FieldRefDefinition FieldRef {
            get {
                XElement x = this.GetElement(FieldRefXName);
                return ((FieldRefDefinition)(x));
            }
            set {
                this.SetElement(FieldRefXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LogicalNullDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FieldRefXName, typeof(FieldRefDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | Membership | In)*)
    /// </para>
    /// </summary>
    public partial class ExtendedLogicalJoinDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EqXName = System.Xml.Linq.XName.Get("Eq", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalTestDefinition> EqField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GeqXName = System.Xml.Linq.XName.Get("Geq", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalTestDefinition> GeqField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GtXName = System.Xml.Linq.XName.Get("Gt", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalTestDefinition> GtField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LeqXName = System.Xml.Linq.XName.Get("Leq", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalTestDefinition> LeqField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LtXName = System.Xml.Linq.XName.Get("Lt", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalTestDefinition> LtField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NeqXName = System.Xml.Linq.XName.Get("Neq", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalTestDefinition> NeqField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AndXName = System.Xml.Linq.XName.Get("And", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ExtendedLogicalJoinDefinition> AndField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OrXName = System.Xml.Linq.XName.Get("Or", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ExtendedLogicalJoinDefinition> OrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IsNullXName = System.Xml.Linq.XName.Get("IsNull", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalNullDefinition> IsNullField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IsNotNullXName = System.Xml.Linq.XName.Get("IsNotNull", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalNullDefinition> IsNotNullField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DateRangesOverlapXName = System.Xml.Linq.XName.Get("DateRangesOverlap", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalTestDefinition> DateRangesOverlapField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BeginsWithXName = System.Xml.Linq.XName.Get("BeginsWith", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalTestDefinition> BeginsWithField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ContainsXName = System.Xml.Linq.XName.Get("Contains", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalTestDefinition> ContainsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MembershipXName = System.Xml.Linq.XName.Get("Membership", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MembershipDefinition> MembershipField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InXName = System.Xml.Linq.XName.Get("In", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LogicalMultiTestDefinition> InField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ExtendedLogicalJoinDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ExtendedLogicalJoinDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ExtendedLogicalJoinDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ExtendedLogicalJoinDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(EqXName), new NamedContentModelEntity(GeqXName), new NamedContentModelEntity(GtXName), new NamedContentModelEntity(LeqXName), new NamedContentModelEntity(LtXName), new NamedContentModelEntity(NeqXName), new NamedContentModelEntity(AndXName), new NamedContentModelEntity(OrXName), new NamedContentModelEntity(IsNullXName), new NamedContentModelEntity(IsNotNullXName), new NamedContentModelEntity(DateRangesOverlapXName), new NamedContentModelEntity(BeginsWithXName), new NamedContentModelEntity(ContainsXName), new NamedContentModelEntity(MembershipXName), new NamedContentModelEntity(InXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | Membership | In)*)
        /// </para>
        /// </summary>
        public ExtendedLogicalJoinDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | Membership | In)*)
        /// </para>
        /// </summary>
        public virtual IList<LogicalTestDefinition> Eq {
            get {
                if ((this.EqField == null)) {
                    this.EqField = new XTypedList<LogicalTestDefinition>(this, LinqToXsdTypeManager.Instance, EqXName);
                }
                return this.EqField;
            }
            set {
                if ((value == null)) {
                    this.EqField = null;
                }
                else {
                    if ((this.EqField == null)) {
                        this.EqField = XTypedList<LogicalTestDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, EqXName);
                    }
                    else {
                        XTypedServices.SetList<LogicalTestDefinition>(this.EqField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | Membership | In)*)
        /// </para>
        /// </summary>
        public virtual IList<LogicalTestDefinition> Geq {
            get {
                if ((this.GeqField == null)) {
                    this.GeqField = new XTypedList<LogicalTestDefinition>(this, LinqToXsdTypeManager.Instance, GeqXName);
                }
                return this.GeqField;
            }
            set {
                if ((value == null)) {
                    this.GeqField = null;
                }
                else {
                    if ((this.GeqField == null)) {
                        this.GeqField = XTypedList<LogicalTestDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, GeqXName);
                    }
                    else {
                        XTypedServices.SetList<LogicalTestDefinition>(this.GeqField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | Membership | In)*)
        /// </para>
        /// </summary>
        public virtual IList<LogicalTestDefinition> Gt {
            get {
                if ((this.GtField == null)) {
                    this.GtField = new XTypedList<LogicalTestDefinition>(this, LinqToXsdTypeManager.Instance, GtXName);
                }
                return this.GtField;
            }
            set {
                if ((value == null)) {
                    this.GtField = null;
                }
                else {
                    if ((this.GtField == null)) {
                        this.GtField = XTypedList<LogicalTestDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, GtXName);
                    }
                    else {
                        XTypedServices.SetList<LogicalTestDefinition>(this.GtField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | Membership | In)*)
        /// </para>
        /// </summary>
        public virtual IList<LogicalTestDefinition> Leq {
            get {
                if ((this.LeqField == null)) {
                    this.LeqField = new XTypedList<LogicalTestDefinition>(this, LinqToXsdTypeManager.Instance, LeqXName);
                }
                return this.LeqField;
            }
            set {
                if ((value == null)) {
                    this.LeqField = null;
                }
                else {
                    if ((this.LeqField == null)) {
                        this.LeqField = XTypedList<LogicalTestDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, LeqXName);
                    }
                    else {
                        XTypedServices.SetList<LogicalTestDefinition>(this.LeqField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | Membership | In)*)
        /// </para>
        /// </summary>
        public virtual IList<LogicalTestDefinition> Lt {
            get {
                if ((this.LtField == null)) {
                    this.LtField = new XTypedList<LogicalTestDefinition>(this, LinqToXsdTypeManager.Instance, LtXName);
                }
                return this.LtField;
            }
            set {
                if ((value == null)) {
                    this.LtField = null;
                }
                else {
                    if ((this.LtField == null)) {
                        this.LtField = XTypedList<LogicalTestDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, LtXName);
                    }
                    else {
                        XTypedServices.SetList<LogicalTestDefinition>(this.LtField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | Membership | In)*)
        /// </para>
        /// </summary>
        public virtual IList<LogicalTestDefinition> Neq {
            get {
                if ((this.NeqField == null)) {
                    this.NeqField = new XTypedList<LogicalTestDefinition>(this, LinqToXsdTypeManager.Instance, NeqXName);
                }
                return this.NeqField;
            }
            set {
                if ((value == null)) {
                    this.NeqField = null;
                }
                else {
                    if ((this.NeqField == null)) {
                        this.NeqField = XTypedList<LogicalTestDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, NeqXName);
                    }
                    else {
                        XTypedServices.SetList<LogicalTestDefinition>(this.NeqField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | Membership | In)*)
        /// </para>
        /// </summary>
        public virtual IList<ExtendedLogicalJoinDefinition> And {
            get {
                if ((this.AndField == null)) {
                    this.AndField = new XTypedList<ExtendedLogicalJoinDefinition>(this, LinqToXsdTypeManager.Instance, AndXName);
                }
                return this.AndField;
            }
            set {
                if ((value == null)) {
                    this.AndField = null;
                }
                else {
                    if ((this.AndField == null)) {
                        this.AndField = XTypedList<ExtendedLogicalJoinDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, AndXName);
                    }
                    else {
                        XTypedServices.SetList<ExtendedLogicalJoinDefinition>(this.AndField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | Membership | In)*)
        /// </para>
        /// </summary>
        public virtual IList<ExtendedLogicalJoinDefinition> Or {
            get {
                if ((this.OrField == null)) {
                    this.OrField = new XTypedList<ExtendedLogicalJoinDefinition>(this, LinqToXsdTypeManager.Instance, OrXName);
                }
                return this.OrField;
            }
            set {
                if ((value == null)) {
                    this.OrField = null;
                }
                else {
                    if ((this.OrField == null)) {
                        this.OrField = XTypedList<ExtendedLogicalJoinDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, OrXName);
                    }
                    else {
                        XTypedServices.SetList<ExtendedLogicalJoinDefinition>(this.OrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | Membership | In)*)
        /// </para>
        /// </summary>
        public virtual IList<LogicalNullDefinition> IsNull {
            get {
                if ((this.IsNullField == null)) {
                    this.IsNullField = new XTypedList<LogicalNullDefinition>(this, LinqToXsdTypeManager.Instance, IsNullXName);
                }
                return this.IsNullField;
            }
            set {
                if ((value == null)) {
                    this.IsNullField = null;
                }
                else {
                    if ((this.IsNullField == null)) {
                        this.IsNullField = XTypedList<LogicalNullDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, IsNullXName);
                    }
                    else {
                        XTypedServices.SetList<LogicalNullDefinition>(this.IsNullField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | Membership | In)*)
        /// </para>
        /// </summary>
        public virtual IList<LogicalNullDefinition> IsNotNull {
            get {
                if ((this.IsNotNullField == null)) {
                    this.IsNotNullField = new XTypedList<LogicalNullDefinition>(this, LinqToXsdTypeManager.Instance, IsNotNullXName);
                }
                return this.IsNotNullField;
            }
            set {
                if ((value == null)) {
                    this.IsNotNullField = null;
                }
                else {
                    if ((this.IsNotNullField == null)) {
                        this.IsNotNullField = XTypedList<LogicalNullDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, IsNotNullXName);
                    }
                    else {
                        XTypedServices.SetList<LogicalNullDefinition>(this.IsNotNullField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | Membership | In)*)
        /// </para>
        /// </summary>
        public virtual IList<LogicalTestDefinition> DateRangesOverlap {
            get {
                if ((this.DateRangesOverlapField == null)) {
                    this.DateRangesOverlapField = new XTypedList<LogicalTestDefinition>(this, LinqToXsdTypeManager.Instance, DateRangesOverlapXName);
                }
                return this.DateRangesOverlapField;
            }
            set {
                if ((value == null)) {
                    this.DateRangesOverlapField = null;
                }
                else {
                    if ((this.DateRangesOverlapField == null)) {
                        this.DateRangesOverlapField = XTypedList<LogicalTestDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, DateRangesOverlapXName);
                    }
                    else {
                        XTypedServices.SetList<LogicalTestDefinition>(this.DateRangesOverlapField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | Membership | In)*)
        /// </para>
        /// </summary>
        public virtual IList<LogicalTestDefinition> BeginsWith {
            get {
                if ((this.BeginsWithField == null)) {
                    this.BeginsWithField = new XTypedList<LogicalTestDefinition>(this, LinqToXsdTypeManager.Instance, BeginsWithXName);
                }
                return this.BeginsWithField;
            }
            set {
                if ((value == null)) {
                    this.BeginsWithField = null;
                }
                else {
                    if ((this.BeginsWithField == null)) {
                        this.BeginsWithField = XTypedList<LogicalTestDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, BeginsWithXName);
                    }
                    else {
                        XTypedServices.SetList<LogicalTestDefinition>(this.BeginsWithField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | Membership | In)*)
        /// </para>
        /// </summary>
        public virtual IList<LogicalTestDefinition> Contains {
            get {
                if ((this.ContainsField == null)) {
                    this.ContainsField = new XTypedList<LogicalTestDefinition>(this, LinqToXsdTypeManager.Instance, ContainsXName);
                }
                return this.ContainsField;
            }
            set {
                if ((value == null)) {
                    this.ContainsField = null;
                }
                else {
                    if ((this.ContainsField == null)) {
                        this.ContainsField = XTypedList<LogicalTestDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, ContainsXName);
                    }
                    else {
                        XTypedServices.SetList<LogicalTestDefinition>(this.ContainsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | Membership | In)*)
        /// </para>
        /// </summary>
        public virtual IList<MembershipDefinition> Membership {
            get {
                if ((this.MembershipField == null)) {
                    this.MembershipField = new XTypedList<MembershipDefinition>(this, LinqToXsdTypeManager.Instance, MembershipXName);
                }
                return this.MembershipField;
            }
            set {
                if ((value == null)) {
                    this.MembershipField = null;
                }
                else {
                    if ((this.MembershipField == null)) {
                        this.MembershipField = XTypedList<MembershipDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, MembershipXName);
                    }
                    else {
                        XTypedServices.SetList<MembershipDefinition>(this.MembershipField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Eq | Geq | Gt | Leq | Lt | Neq | And | Or | IsNull | IsNotNull | DateRangesOverlap | BeginsWith | Contains | Membership | In)*)
        /// </para>
        /// </summary>
        public virtual IList<LogicalMultiTestDefinition> In {
            get {
                if ((this.InField == null)) {
                    this.InField = new XTypedList<LogicalMultiTestDefinition>(this, LinqToXsdTypeManager.Instance, InXName);
                }
                return this.InField;
            }
            set {
                if ((value == null)) {
                    this.InField = null;
                }
                else {
                    if ((this.InField == null)) {
                        this.InField = XTypedList<LogicalMultiTestDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, InXName);
                    }
                    else {
                        XTypedServices.SetList<LogicalMultiTestDefinition>(this.InField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ExtendedLogicalJoinDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(EqXName, typeof(LogicalTestDefinition));
            localElementDictionary.Add(GeqXName, typeof(LogicalTestDefinition));
            localElementDictionary.Add(GtXName, typeof(LogicalTestDefinition));
            localElementDictionary.Add(LeqXName, typeof(LogicalTestDefinition));
            localElementDictionary.Add(LtXName, typeof(LogicalTestDefinition));
            localElementDictionary.Add(NeqXName, typeof(LogicalTestDefinition));
            localElementDictionary.Add(AndXName, typeof(ExtendedLogicalJoinDefinition));
            localElementDictionary.Add(OrXName, typeof(ExtendedLogicalJoinDefinition));
            localElementDictionary.Add(IsNullXName, typeof(LogicalNullDefinition));
            localElementDictionary.Add(IsNotNullXName, typeof(LogicalNullDefinition));
            localElementDictionary.Add(DateRangesOverlapXName, typeof(LogicalTestDefinition));
            localElementDictionary.Add(BeginsWithXName, typeof(LogicalTestDefinition));
            localElementDictionary.Add(ContainsXName, typeof(LogicalTestDefinition));
            localElementDictionary.Add(MembershipXName, typeof(MembershipDefinition));
            localElementDictionary.Add(InXName, typeof(LogicalMultiTestDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (FieldRef*)
    /// </para>
    /// </summary>
    public partial class FieldRefDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldRefXName = System.Xml.Linq.XName.Get("FieldRef", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldRefDefinition> FieldRefField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FieldRefDefinitions", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FieldRefDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<FieldRefDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FieldRefDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FieldRefXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (FieldRef*)
        /// </para>
        /// </summary>
        public FieldRefDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (FieldRef*)
        /// </para>
        /// </summary>
        public virtual IList<FieldRefDefinition> FieldRef {
            get {
                if ((this.FieldRefField == null)) {
                    this.FieldRefField = new XTypedList<FieldRefDefinition>(this, LinqToXsdTypeManager.Instance, FieldRefXName);
                }
                return this.FieldRefField;
            }
            set {
                if ((value == null)) {
                    this.FieldRefField = null;
                }
                else {
                    if ((this.FieldRefField == null)) {
                        this.FieldRefField = XTypedList<FieldRefDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldRefXName);
                    }
                    else {
                        XTypedServices.SetList<FieldRefDefinition>(this.FieldRefField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FieldRefDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FieldRefXName, typeof(FieldRefDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (FieldRef*)
    /// </para>
    /// </summary>
    public partial class OrderByDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldRefXName = System.Xml.Linq.XName.Get("FieldRef", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldRefDefinition> FieldRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UseIndexForOrderByXName = System.Xml.Linq.XName.Get("UseIndexForOrderBy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OverrideXName = System.Xml.Linq.XName.Get("Override", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OrderByDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator OrderByDefinition(XElement xe) { return XTypedServices.ToXTypedElement<OrderByDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static OrderByDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FieldRefXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (FieldRef*)
        /// </para>
        /// </summary>
        public OrderByDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (FieldRef*)
        /// </para>
        /// </summary>
        public virtual IList<FieldRefDefinition> FieldRef {
            get {
                if ((this.FieldRefField == null)) {
                    this.FieldRefField = new XTypedList<FieldRefDefinition>(this, LinqToXsdTypeManager.Instance, FieldRefXName);
                }
                return this.FieldRefField;
            }
            set {
                if ((value == null)) {
                    this.FieldRefField = null;
                }
                else {
                    if ((this.FieldRefField == null)) {
                        this.FieldRefField = XTypedList<FieldRefDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldRefXName);
                    }
                    else {
                        XTypedServices.SetList<FieldRefDefinition>(this.FieldRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string UseIndexForOrderBy {
            get {
                XAttribute x = this.Attribute(UseIndexForOrderByXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(UseIndexForOrderByXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Override {
            get {
                XAttribute x = this.Attribute(OverrideXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(OverrideXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OrderByDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FieldRefXName, typeof(FieldRefDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Field*)
    /// </para>
    /// </summary>
    public partial class RowDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldXName = System.Xml.Linq.XName.Get("Field", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldDataDefinition> FieldField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RowDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RowDefinition(XElement xe) { return XTypedServices.ToXTypedElement<RowDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RowDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FieldXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Field*)
        /// </para>
        /// </summary>
        public RowDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Field*)
        /// </para>
        /// </summary>
        public virtual IList<FieldDataDefinition> Field {
            get {
                if ((this.FieldField == null)) {
                    this.FieldField = new XTypedList<FieldDataDefinition>(this, LinqToXsdTypeManager.Instance, FieldXName);
                }
                return this.FieldField;
            }
            set {
                if ((value == null)) {
                    this.FieldField = null;
                }
                else {
                    if ((this.FieldField == null)) {
                        this.FieldField = XTypedList<FieldDataDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldXName);
                    }
                    else {
                        XTypedServices.SetList<FieldDataDefinition>(this.FieldField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RowDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FieldXName, typeof(FieldDataDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class FieldDataDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FieldDataDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator FieldDataDefinition(XElement xe) { return XTypedServices.ToXTypedElement<FieldDataDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public FieldDataDefinition() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FieldDataDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Row*)
    /// </para>
    /// </summary>
    public partial class RowDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RowXName = System.Xml.Linq.XName.Get("Row", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RowDefinition> RowField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RowDefinitions", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RowDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<RowDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RowDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RowXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Row*)
        /// </para>
        /// </summary>
        public RowDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Row*)
        /// </para>
        /// </summary>
        public virtual IList<RowDefinition> Row {
            get {
                if ((this.RowField == null)) {
                    this.RowField = new XTypedList<RowDefinition>(this, LinqToXsdTypeManager.Instance, RowXName);
                }
                return this.RowField;
            }
            set {
                if ((value == null)) {
                    this.RowField = null;
                }
                else {
                    if ((this.RowField == null)) {
                        this.RowField = XTypedList<RowDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, RowXName);
                    }
                    else {
                        XTypedServices.SetList<RowDefinition>(this.RowField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RowDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RowXName, typeof(RowDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class EmptyQueryDefinition : XTypedElement, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EmptyQueryDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator EmptyQueryDefinition(XElement xe) { return XTypedServices.ToXTypedElement<EmptyQueryDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public EmptyQueryDefinition() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<EmptyQueryDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class SimpleFieldRef : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SimpleFieldRef", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator SimpleFieldRef(XElement xe) { return XTypedServices.ToXTypedElement<SimpleFieldRef>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public SimpleFieldRef() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SimpleFieldRef>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class LookupColumnDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HTMLEncodeXName = System.Xml.Linq.XName.Get("HTMLEncode", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StripWSXName = System.Xml.Linq.XName.Get("StripWS", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ShowFieldXName = System.Xml.Linq.XName.Get("ShowField", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName URLEncodeXName = System.Xml.Linq.XName.Get("URLEncode", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName URLEncodeAsURLXName = System.Xml.Linq.XName.Get("URLEncodeAsURL", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IncludeVersionsXName = System.Xml.Linq.XName.Get("IncludeVersions", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("LookupColumnDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator LookupColumnDefinition(XElement xe) { return XTypedServices.ToXTypedElement<LookupColumnDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public LookupColumnDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string HTMLEncode {
            get {
                XAttribute x = this.Attribute(HTMLEncodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(HTMLEncodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string StripWS {
            get {
                XAttribute x = this.Attribute(StripWSXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(StripWSXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ShowField {
            get {
                XAttribute x = this.Attribute(ShowFieldXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ShowFieldXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string URLEncode {
            get {
                XAttribute x = this.Attribute(URLEncodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(URLEncodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string URLEncodeAsURL {
            get {
                XAttribute x = this.Attribute(URLEncodeAsURLXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(URLEncodeAsURLXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string IncludeVersions {
            get {
                XAttribute x = this.Attribute(IncludeVersionsXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IncludeVersionsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LookupColumnDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class QueryColumnDefinition : global::Microsoft.Schemas.SharePoint.LookupColumnDefinition, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DefaultXName = System.Xml.Linq.XName.Get("Default", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal new static readonly System.Xml.Linq.XName URLEncodeXName = System.Xml.Linq.XName.Get("URLEncode", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FormatXName = System.Xml.Linq.XName.Get("Format", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("QueryColumnDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator QueryColumnDefinition(XElement xe) { return XTypedServices.ToXTypedElement<QueryColumnDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public QueryColumnDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Default {
            get {
                XAttribute x = this.Attribute(DefaultXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DefaultXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public new virtual string URLEncode {
            get {
                XAttribute x = this.Attribute(URLEncodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(URLEncodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Format {
            get {
                XAttribute x = this.Attribute(FormatXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FormatXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<QueryColumnDefinition>(this);
        }
    }
    
    public partial class QueryGetVarDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HTMLEncodeXName = System.Xml.Linq.XName.Get("HTMLEncode", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("QueryGetVarDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator QueryGetVarDefinition(XElement xe) { return XTypedServices.ToXTypedElement<QueryGetVarDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public QueryGetVarDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string HTMLEncode {
            get {
                XAttribute x = this.Attribute(HTMLEncodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(HTMLEncodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<QueryGetVarDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class QueryListProperty : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName URLEncodeAsURLXName = System.Xml.Linq.XName.Get("URLEncodeAsURL", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SelectXName = System.Xml.Linq.XName.Get("Select", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("QueryListProperty", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator QueryListProperty(XElement xe) { return XTypedServices.ToXTypedElement<QueryListProperty>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public QueryListProperty() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string URLEncodeAsURL {
            get {
                XAttribute x = this.Attribute(URLEncodeAsURLXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(URLEncodeAsURLXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Select {
            get {
                XAttribute x = this.Attribute(SelectXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SelectXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<QueryListProperty>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((FieldRef | Value | XML)*)
    /// </para>
    /// </summary>
    public partial class MembershipDefinition : global::Microsoft.Schemas.SharePoint.LogicalTestDefinition, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypeXName = System.Xml.Linq.XName.Get("Type", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("MembershipDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator MembershipDefinition(XElement xe) { return XTypedServices.ToXTypedElement<MembershipDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MembershipDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(FieldRefXName), new NamedContentModelEntity(ValueXName), new NamedContentModelEntity(XMLXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((FieldRef | Value | XML)*)
        /// </para>
        /// </summary>
        public MembershipDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Type {
            get {
                XAttribute x = this.Attribute(TypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MembershipDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FieldRefXName, typeof(FieldRefDefinition));
            localElementDictionary.Add(ValueXName, typeof(ValueDefinition));
            localElementDictionary.Add(XMLXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((FieldRef | Value | XML)*)
    /// </para>
    /// </summary>
    public partial class GroupByDefinition : global::Microsoft.Schemas.SharePoint.LogicalTestDefinition, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CollapseXName = System.Xml.Linq.XName.Get("Collapse", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GroupByDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GroupByDefinition(XElement xe) { return XTypedServices.ToXTypedElement<GroupByDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GroupByDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(FieldRefXName), new NamedContentModelEntity(ValueXName), new NamedContentModelEntity(XMLXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((FieldRef | Value | XML)*)
        /// </para>
        /// </summary>
        public GroupByDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Collapse {
            get {
                XAttribute x = this.Attribute(CollapseXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CollapseXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GroupByDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FieldRefXName, typeof(FieldRefDefinition));
            localElementDictionary.Add(ValueXName, typeof(ValueDefinition));
            localElementDictionary.Add(XMLXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((FieldRef | Value)*)
    /// </para>
    /// </summary>
    public partial class UnlimitedLogicalTestDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldRefXName = System.Xml.Linq.XName.Get("FieldRef", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldRefDefinition> FieldRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ValueXName = System.Xml.Linq.XName.Get("Value", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ValueDefinition> ValueField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("UnlimitedLogicalTestDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator UnlimitedLogicalTestDefinition(XElement xe) { return XTypedServices.ToXTypedElement<UnlimitedLogicalTestDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static UnlimitedLogicalTestDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(FieldRefXName), new NamedContentModelEntity(ValueXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((FieldRef | Value)*)
        /// </para>
        /// </summary>
        public UnlimitedLogicalTestDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((FieldRef | Value)*)
        /// </para>
        /// </summary>
        public virtual IList<FieldRefDefinition> FieldRef {
            get {
                if ((this.FieldRefField == null)) {
                    this.FieldRefField = new XTypedList<FieldRefDefinition>(this, LinqToXsdTypeManager.Instance, FieldRefXName);
                }
                return this.FieldRefField;
            }
            set {
                if ((value == null)) {
                    this.FieldRefField = null;
                }
                else {
                    if ((this.FieldRefField == null)) {
                        this.FieldRefField = XTypedList<FieldRefDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldRefXName);
                    }
                    else {
                        XTypedServices.SetList<FieldRefDefinition>(this.FieldRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((FieldRef | Value)*)
        /// </para>
        /// </summary>
        public virtual IList<ValueDefinition> Value {
            get {
                if ((this.ValueField == null)) {
                    this.ValueField = new XTypedList<ValueDefinition>(this, LinqToXsdTypeManager.Instance, ValueXName);
                }
                return this.ValueField;
            }
            set {
                if ((value == null)) {
                    this.ValueField = null;
                }
                else {
                    if ((this.ValueField == null)) {
                        this.ValueField = XTypedList<ValueDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, ValueXName);
                    }
                    else {
                        XTypedServices.SetList<ValueDefinition>(this.ValueField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UnlimitedLogicalTestDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FieldRefXName, typeof(FieldRefDefinition));
            localElementDictionary.Add(ValueXName, typeof(ValueDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
    /// </para>
    /// </summary>
    public partial class CamlViewRoot : global::Microsoft.Schemas.SharePoint.CamlViewElement, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CamlViewRoot", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CamlViewRoot(XElement xe) { return XTypedServices.ToXTypedElement<CamlViewRoot>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CamlViewRoot() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(ColumnXName), new NamedContentModelEntity(Column2XName), new NamedContentModelEntity(CounterXName), new NamedContentModelEntity(CurrentRightsXName), new NamedContentModelEntity(FieldXName), new NamedContentModelEntity(FieldPrefixXName), new NamedContentModelEntity(FieldPropertyXName), new NamedContentModelEntity(FieldsXName), new NamedContentModelEntity(FieldSwitchXName), new NamedContentModelEntity(FilterLinkXName), new NamedContentModelEntity(GetFileExtensionXName), new NamedContentModelEntity(GetVarXName), new NamedContentModelEntity(HTMLXName), new NamedContentModelEntity(HttpHostXName), new NamedContentModelEntity(HttpPathXName), new NamedContentModelEntity(HttpVDirXName), new NamedContentModelEntity(IDXName), new NamedContentModelEntity(IfEqualXName), new NamedContentModelEntity(IfNegXName), new NamedContentModelEntity(IfNewXName), new NamedContentModelEntity(IfSubStringXName), new NamedContentModelEntity(LengthXName), new NamedContentModelEntity(LimitXName), new NamedContentModelEntity(ListXName), new NamedContentModelEntity(ListUrlXName), new NamedContentModelEntity(ListUrlDirXName), new NamedContentModelEntity(ListPropertyXName), new NamedContentModelEntity(LookupColumnXName), new NamedContentModelEntity(MapToAllXName), new NamedContentModelEntity(MapToIconXName), new NamedContentModelEntity(PageUrlXName), new NamedContentModelEntity(PropertyXName), new NamedContentModelEntity(ScriptQuoteXName), new NamedContentModelEntity(SelectionOptionsXName), new NamedContentModelEntity(ServerPropertyXName), new NamedContentModelEntity(SetVarXName), new NamedContentModelEntity(SwitchXName), new NamedContentModelEntity(ThreadStampXName), new NamedContentModelEntity(URLXName), new NamedContentModelEntity(UrlDirNameXName), new NamedContentModelEntity(UrlBaseNameXName), new NamedContentModelEntity(MeetingPropertyXName), new NamedContentModelEntity(ProjectPropertyXName), new NamedContentModelEntity(UserIDXName), new NamedContentModelEntity(FieldSortParamsXName), new NamedContentModelEntity(WebQueryInfoXName), new NamedContentModelEntity(IdentityXName), new NamedContentModelEntity(IfHasRightsXName), new NamedContentModelEntity(MapToControlXName), new NamedContentModelEntity(ForEachXName), new NamedContentModelEntity(ContentTypesXName), new NamedContentModelEntity(MapToContentTypeXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public CamlViewRoot() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CamlViewRoot>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ColumnXName, typeof(QueryColumnDefinition));
            localElementDictionary.Add(Column2XName, typeof(QueryColumnDefinition));
            localElementDictionary.Add(CounterXName, typeof(CounterDefinition));
            localElementDictionary.Add(CurrentRightsXName, typeof(EmptyElement));
            localElementDictionary.Add(FieldXName, typeof(FieldViewReferenceDefinition));
            localElementDictionary.Add(FieldPrefixXName, typeof(EmptyElement));
            localElementDictionary.Add(FieldPropertyXName, typeof(FieldPropertyDefinition));
            localElementDictionary.Add(FieldsXName, typeof(CamlViewElement));
            localElementDictionary.Add(FieldSwitchXName, typeof(SwitchDefinition));
            localElementDictionary.Add(FilterLinkXName, typeof(FilterLinkDefinition));
            localElementDictionary.Add(GetFileExtensionXName, typeof(XTypedElement));
            localElementDictionary.Add(GetVarXName, typeof(GetVarDefinition));
            localElementDictionary.Add(HTMLXName, typeof(HtmlContentDefinition));
            localElementDictionary.Add(HttpHostXName, typeof(HttpHostDefinition));
            localElementDictionary.Add(HttpPathXName, typeof(HttpPathDefinition));
            localElementDictionary.Add(HttpVDirXName, typeof(HttpVDirDefinition));
            localElementDictionary.Add(IDXName, typeof(EmptyElement));
            localElementDictionary.Add(IfEqualXName, typeof(IfEqualDefinition));
            localElementDictionary.Add(IfNegXName, typeof(IfNegDefinition));
            localElementDictionary.Add(IfNewXName, typeof(IfNewDefinition));
            localElementDictionary.Add(IfSubStringXName, typeof(IfSubStringDefinition));
            localElementDictionary.Add(LengthXName, typeof(XTypedElement));
            localElementDictionary.Add(LimitXName, typeof(LimitDefinition));
            localElementDictionary.Add(ListXName, typeof(EmptyElement));
            localElementDictionary.Add(ListUrlXName, typeof(EmptyElement));
            localElementDictionary.Add(ListUrlDirXName, typeof(HttpPathDefinition));
            localElementDictionary.Add(ListPropertyXName, typeof(ListPropertyDefinition));
            localElementDictionary.Add(LookupColumnXName, typeof(LookupColumnDefinition));
            localElementDictionary.Add(MapToAllXName, typeof(CamlViewElement));
            localElementDictionary.Add(MapToIconXName, typeof(CamlViewElement));
            localElementDictionary.Add(PageUrlXName, typeof(HtmlRenderingElement));
            localElementDictionary.Add(PropertyXName, typeof(FieldPropertyDefinition));
            localElementDictionary.Add(ScriptQuoteXName, typeof(ScriptQuoteDefinition));
            localElementDictionary.Add(SelectionOptionsXName, typeof(SelectOptionsDefinition));
            localElementDictionary.Add(ServerPropertyXName, typeof(ServerPropertyDefinition));
            localElementDictionary.Add(SetVarXName, typeof(SetVarDefinition));
            localElementDictionary.Add(SwitchXName, typeof(SwitchDefinition));
            localElementDictionary.Add(ThreadStampXName, typeof(ThreadStampDefinition));
            localElementDictionary.Add(URLXName, typeof(URLDefinition));
            localElementDictionary.Add(UrlDirNameXName, typeof(XTypedElement));
            localElementDictionary.Add(UrlBaseNameXName, typeof(UrlBaseNameDefinition));
            localElementDictionary.Add(MeetingPropertyXName, typeof(MeetingPropertyDefinition));
            localElementDictionary.Add(ProjectPropertyXName, typeof(ProjectPropertyDefinition));
            localElementDictionary.Add(UserIDXName, typeof(UserIDDefinition));
            localElementDictionary.Add(FieldSortParamsXName, typeof(HtmlRenderingElement));
            localElementDictionary.Add(WebQueryInfoXName, typeof(EmptyElement));
            localElementDictionary.Add(IdentityXName, typeof(EmptyElement));
            localElementDictionary.Add(IfHasRightsXName, typeof(IfHasRightsDefinition));
            localElementDictionary.Add(MapToControlXName, typeof(CamlViewElement));
            localElementDictionary.Add(ForEachXName, typeof(ForEachElement));
            localElementDictionary.Add(ContentTypesXName, typeof(CamlViewElement));
            localElementDictionary.Add(MapToContentTypeXName, typeof(CamlViewElement));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class HtmlRenderingElement : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AutoHyperLinkXName = System.Xml.Linq.XName.Get("AutoHyperLink", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName URLEncodeXName = System.Xml.Linq.XName.Get("URLEncode", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HTMLEncodeXName = System.Xml.Linq.XName.Get("HTMLEncode", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AutoNewLineXName = System.Xml.Linq.XName.Get("AutoNewLine", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName URLEncodeAsURLXName = System.Xml.Linq.XName.Get("URLEncodeAsURL", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DefaultXName = System.Xml.Linq.XName.Get("Default", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StripWSXName = System.Xml.Linq.XName.Get("StripWS", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExpandXMLXName = System.Xml.Linq.XName.Get("ExpandXML", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AutoHyperLinkNoEncodingXName = System.Xml.Linq.XName.Get("AutoHyperLinkNoEncoding", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("HtmlRenderingElement", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator HtmlRenderingElement(XElement xe) { return XTypedServices.ToXTypedElement<HtmlRenderingElement>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public HtmlRenderingElement() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string AutoHyperLink {
            get {
                XAttribute x = this.Attribute(AutoHyperLinkXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AutoHyperLinkXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string URLEncode {
            get {
                XAttribute x = this.Attribute(URLEncodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(URLEncodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string HTMLEncode {
            get {
                XAttribute x = this.Attribute(HTMLEncodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(HTMLEncodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string AutoNewLine {
            get {
                XAttribute x = this.Attribute(AutoNewLineXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AutoNewLineXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string URLEncodeAsURL {
            get {
                XAttribute x = this.Attribute(URLEncodeAsURLXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(URLEncodeAsURLXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Default {
            get {
                XAttribute x = this.Attribute(DefaultXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DefaultXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string StripWS {
            get {
                XAttribute x = this.Attribute(StripWSXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(StripWSXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ExpandXML {
            get {
                XAttribute x = this.Attribute(ExpandXMLXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ExpandXMLXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string AutoHyperLinkNoEncoding {
            get {
                XAttribute x = this.Attribute(AutoHyperLinkNoEncodingXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AutoHyperLinkNoEncodingXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HtmlRenderingElement>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (any)
    /// </para>
    /// </summary>
    public partial class HtmlDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IDXName = System.Xml.Linq.XName.Get("ID", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("HtmlDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static FSM validationStates;
        
		public static explicit operator HtmlDefinition(XElement xe) { return XTypedServices.ToXTypedElement<HtmlDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HtmlDefinition() {
            InitFSM();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public HtmlDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public virtual IEnumerable<XElement> Any {
            get {
                return this.GetWildCards(WildCard.DefaultWildCard);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ID {
            get {
                XAttribute x = this.Attribute(IDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HtmlDefinition>(this);
        }
        
        FSM IXMetaData.GetValidationStates() {
            return validationStates;
        }
        
        private static void InitFSM() {
            Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
            transitions.Add(1, new Transitions(new SingleTransition(new WildCard("##any", "http://schemas.microsoft.com/sharepoint/"), 2)));
            validationStates = new FSM(1, new Set<int>(2), transitions);
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
    /// </para>
    /// </summary>
    public partial class HtmlContentDefinition : global::Microsoft.Schemas.SharePoint.CamlViewElement, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("HtmlContentDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator HtmlContentDefinition(XElement xe) { return XTypedServices.ToXTypedElement<HtmlContentDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HtmlContentDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(ColumnXName), new NamedContentModelEntity(Column2XName), new NamedContentModelEntity(CounterXName), new NamedContentModelEntity(CurrentRightsXName), new NamedContentModelEntity(FieldXName), new NamedContentModelEntity(FieldPrefixXName), new NamedContentModelEntity(FieldPropertyXName), new NamedContentModelEntity(FieldsXName), new NamedContentModelEntity(FieldSwitchXName), new NamedContentModelEntity(FilterLinkXName), new NamedContentModelEntity(GetFileExtensionXName), new NamedContentModelEntity(GetVarXName), new NamedContentModelEntity(HTMLXName), new NamedContentModelEntity(HttpHostXName), new NamedContentModelEntity(HttpPathXName), new NamedContentModelEntity(HttpVDirXName), new NamedContentModelEntity(IDXName), new NamedContentModelEntity(IfEqualXName), new NamedContentModelEntity(IfNegXName), new NamedContentModelEntity(IfNewXName), new NamedContentModelEntity(IfSubStringXName), new NamedContentModelEntity(LengthXName), new NamedContentModelEntity(LimitXName), new NamedContentModelEntity(ListXName), new NamedContentModelEntity(ListUrlXName), new NamedContentModelEntity(ListUrlDirXName), new NamedContentModelEntity(ListPropertyXName), new NamedContentModelEntity(LookupColumnXName), new NamedContentModelEntity(MapToAllXName), new NamedContentModelEntity(MapToIconXName), new NamedContentModelEntity(PageUrlXName), new NamedContentModelEntity(PropertyXName), new NamedContentModelEntity(ScriptQuoteXName), new NamedContentModelEntity(SelectionOptionsXName), new NamedContentModelEntity(ServerPropertyXName), new NamedContentModelEntity(SetVarXName), new NamedContentModelEntity(SwitchXName), new NamedContentModelEntity(ThreadStampXName), new NamedContentModelEntity(URLXName), new NamedContentModelEntity(UrlDirNameXName), new NamedContentModelEntity(UrlBaseNameXName), new NamedContentModelEntity(MeetingPropertyXName), new NamedContentModelEntity(ProjectPropertyXName), new NamedContentModelEntity(UserIDXName), new NamedContentModelEntity(FieldSortParamsXName), new NamedContentModelEntity(WebQueryInfoXName), new NamedContentModelEntity(IdentityXName), new NamedContentModelEntity(IfHasRightsXName), new NamedContentModelEntity(MapToControlXName), new NamedContentModelEntity(ForEachXName), new NamedContentModelEntity(ContentTypesXName), new NamedContentModelEntity(MapToContentTypeXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public HtmlContentDefinition() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HtmlContentDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ColumnXName, typeof(QueryColumnDefinition));
            localElementDictionary.Add(Column2XName, typeof(QueryColumnDefinition));
            localElementDictionary.Add(CounterXName, typeof(CounterDefinition));
            localElementDictionary.Add(CurrentRightsXName, typeof(EmptyElement));
            localElementDictionary.Add(FieldXName, typeof(FieldViewReferenceDefinition));
            localElementDictionary.Add(FieldPrefixXName, typeof(EmptyElement));
            localElementDictionary.Add(FieldPropertyXName, typeof(FieldPropertyDefinition));
            localElementDictionary.Add(FieldsXName, typeof(CamlViewElement));
            localElementDictionary.Add(FieldSwitchXName, typeof(SwitchDefinition));
            localElementDictionary.Add(FilterLinkXName, typeof(FilterLinkDefinition));
            localElementDictionary.Add(GetFileExtensionXName, typeof(XTypedElement));
            localElementDictionary.Add(GetVarXName, typeof(GetVarDefinition));
            localElementDictionary.Add(HTMLXName, typeof(HtmlContentDefinition));
            localElementDictionary.Add(HttpHostXName, typeof(HttpHostDefinition));
            localElementDictionary.Add(HttpPathXName, typeof(HttpPathDefinition));
            localElementDictionary.Add(HttpVDirXName, typeof(HttpVDirDefinition));
            localElementDictionary.Add(IDXName, typeof(EmptyElement));
            localElementDictionary.Add(IfEqualXName, typeof(IfEqualDefinition));
            localElementDictionary.Add(IfNegXName, typeof(IfNegDefinition));
            localElementDictionary.Add(IfNewXName, typeof(IfNewDefinition));
            localElementDictionary.Add(IfSubStringXName, typeof(IfSubStringDefinition));
            localElementDictionary.Add(LengthXName, typeof(XTypedElement));
            localElementDictionary.Add(LimitXName, typeof(LimitDefinition));
            localElementDictionary.Add(ListXName, typeof(EmptyElement));
            localElementDictionary.Add(ListUrlXName, typeof(EmptyElement));
            localElementDictionary.Add(ListUrlDirXName, typeof(HttpPathDefinition));
            localElementDictionary.Add(ListPropertyXName, typeof(ListPropertyDefinition));
            localElementDictionary.Add(LookupColumnXName, typeof(LookupColumnDefinition));
            localElementDictionary.Add(MapToAllXName, typeof(CamlViewElement));
            localElementDictionary.Add(MapToIconXName, typeof(CamlViewElement));
            localElementDictionary.Add(PageUrlXName, typeof(HtmlRenderingElement));
            localElementDictionary.Add(PropertyXName, typeof(FieldPropertyDefinition));
            localElementDictionary.Add(ScriptQuoteXName, typeof(ScriptQuoteDefinition));
            localElementDictionary.Add(SelectionOptionsXName, typeof(SelectOptionsDefinition));
            localElementDictionary.Add(ServerPropertyXName, typeof(ServerPropertyDefinition));
            localElementDictionary.Add(SetVarXName, typeof(SetVarDefinition));
            localElementDictionary.Add(SwitchXName, typeof(SwitchDefinition));
            localElementDictionary.Add(ThreadStampXName, typeof(ThreadStampDefinition));
            localElementDictionary.Add(URLXName, typeof(URLDefinition));
            localElementDictionary.Add(UrlDirNameXName, typeof(XTypedElement));
            localElementDictionary.Add(UrlBaseNameXName, typeof(UrlBaseNameDefinition));
            localElementDictionary.Add(MeetingPropertyXName, typeof(MeetingPropertyDefinition));
            localElementDictionary.Add(ProjectPropertyXName, typeof(ProjectPropertyDefinition));
            localElementDictionary.Add(UserIDXName, typeof(UserIDDefinition));
            localElementDictionary.Add(FieldSortParamsXName, typeof(HtmlRenderingElement));
            localElementDictionary.Add(WebQueryInfoXName, typeof(EmptyElement));
            localElementDictionary.Add(IdentityXName, typeof(EmptyElement));
            localElementDictionary.Add(IfHasRightsXName, typeof(IfHasRightsDefinition));
            localElementDictionary.Add(MapToControlXName, typeof(CamlViewElement));
            localElementDictionary.Add(ForEachXName, typeof(ForEachElement));
            localElementDictionary.Add(ContentTypesXName, typeof(CamlViewElement));
            localElementDictionary.Add(MapToContentTypeXName, typeof(CamlViewElement));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class FieldRefViewDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AscendingXName = System.Xml.Linq.XName.Get("Ascending", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypeXName = System.Xml.Linq.XName.Get("Type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TextOnlyXName = System.Xml.Linq.XName.Get("TextOnly", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CreateURLXName = System.Xml.Linq.XName.Get("CreateURL", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DisplayNameXName = System.Xml.Linq.XName.Get("DisplayName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExplicitXName = System.Xml.Linq.XName.Get("Explicit", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KeyXName = System.Xml.Linq.XName.Get("Key", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FieldRefViewDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator FieldRefViewDefinition(XElement xe) { return XTypedServices.ToXTypedElement<FieldRefViewDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public FieldRefViewDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Ascending {
            get {
                XAttribute x = this.Attribute(AscendingXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AscendingXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.ReferenceType? Type {
            get {
                XAttribute x = this.Attribute(TypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.ReferenceType)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.ReferenceType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(TypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TextOnly {
            get {
                XAttribute x = this.Attribute(TextOnlyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TextOnlyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CreateURL {
            get {
                XAttribute x = this.Attribute(CreateURLXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CreateURLXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DisplayName {
            get {
                XAttribute x = this.Attribute(DisplayNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DisplayNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Explicit {
            get {
                XAttribute x = this.Attribute(ExplicitXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ExplicitXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Key {
            get {
                XAttribute x = this.Attribute(KeyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(KeyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FieldRefViewDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Method)
    /// </para>
    /// </summary>
    public partial class BatchDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MethodXName = System.Xml.Linq.XName.Get("Method", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OnErrorXName = System.Xml.Linq.XName.Get("OnError", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ListVersionXName = System.Xml.Linq.XName.Get("ListVersion", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VersionXName = System.Xml.Linq.XName.Get("Version", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ViewNameXName = System.Xml.Linq.XName.Get("ViewName", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BatchDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator BatchDefinition(XElement xe) { return XTypedServices.ToXTypedElement<BatchDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static BatchDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(MethodXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Method)
        /// </para>
        /// </summary>
        public BatchDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Method)
        /// </para>
        /// </summary>
        public virtual MethodDefinition Method {
            get {
                XElement x = this.GetElement(MethodXName);
                return ((MethodDefinition)(x));
            }
            set {
                this.SetElement(MethodXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.ErrorHandling? OnError {
            get {
                XAttribute x = this.Attribute(OnErrorXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.ErrorHandling)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.ErrorHandling), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(OnErrorXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? ListVersion {
            get {
                XAttribute x = this.Attribute(ListVersionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(ListVersionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Version {
            get {
                XAttribute x = this.Attribute(VersionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(VersionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ViewName {
            get {
                XAttribute x = this.Attribute(ViewNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ViewNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BatchDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(MethodXName, typeof(MethodDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public enum ErrorHandling {
        
        Return,
        
        Continue,
    }
    
    public sealed class ErrorHandlingValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Return",
                        "Continue"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ErrorHandlingValidator() {
        }
    }
    
    public enum UpdateMethod {
        
        Delete,
        
        New,
        
        Update,
    }
    
    public sealed class UpdateMethodValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Delete",
                        "New",
                        "Update"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private UpdateMethodValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (SetVar?, SetList?)
    /// </para>
    /// </summary>
    public partial class MethodDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SetVarXName = System.Xml.Linq.XName.Get("SetVar", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SetListXName = System.Xml.Linq.XName.Get("SetList", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IDXName = System.Xml.Linq.XName.Get("ID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CmdXName = System.Xml.Linq.XName.Get("Cmd", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("MethodDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator MethodDefinition(XElement xe) { return XTypedServices.ToXTypedElement<MethodDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MethodDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SetVar?, SetList?)
        /// </para>
        /// </summary>
        public MethodDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SetVar?, SetList?)
        /// </para>
        /// </summary>
        public virtual SetVarDefinition SetVar {
            get {
                XElement x = this.GetElement(SetVarXName);
                return ((SetVarDefinition)(x));
            }
            set {
                this.SetElement(SetVarXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SetVar?, SetList?)
        /// </para>
        /// </summary>
        public virtual SetListDefinition SetList {
            get {
                XElement x = this.GetElement(SetListXName);
                return ((SetListDefinition)(x));
            }
            set {
                this.SetElement(SetListXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ID {
            get {
                XAttribute x = this.Attribute(IDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.UpdateMethod? Cmd {
            get {
                XAttribute x = this.Attribute(CmdXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.UpdateMethod)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.UpdateMethod), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(CmdXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MethodDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SetVarXName, typeof(SetVarDefinition));
            localElementDictionary.Add(SetListXName, typeof(SetListDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (any)
    /// </para>
    /// </summary>
    public partial class SetListDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ScopeXName = System.Xml.Linq.XName.Get("Scope", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PreserveContextXName = System.Xml.Linq.XName.Get("PreserveContext", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SetListDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static FSM validationStates;
        
		public static explicit operator SetListDefinition(XElement xe) { return XTypedServices.ToXTypedElement<SetListDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SetListDefinition() {
            InitFSM();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public SetListDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public virtual IEnumerable<XElement> Any {
            get {
                return this.GetWildCards(WildCard.DefaultWildCard);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.RequestParameter? Scope {
            get {
                XAttribute x = this.Attribute(ScopeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.RequestParameter)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.RequestParameter), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ScopeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string PreserveContext {
            get {
                XAttribute x = this.Attribute(PreserveContextXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PreserveContextXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SetListDefinition>(this);
        }
        
        FSM IXMetaData.GetValidationStates() {
            return validationStates;
        }
        
        private static void InitFSM() {
            Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
            transitions.Add(1, new Transitions(new SingleTransition(new WildCard("##any", "http://schemas.microsoft.com/sharepoint/"), 2)));
            validationStates = new FSM(1, new Set<int>(2), transitions);
        }
    }
    
    public enum RequestParameter {
        
        Request,
    }
    
    public sealed class RequestParameterValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Request"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private RequestParameterValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
    /// </para>
    /// </summary>
    public partial class SetVarDefinition : global::Microsoft.Schemas.SharePoint.CamlViewElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ID1XName = System.Xml.Linq.XName.Get("ID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ScopeXName = System.Xml.Linq.XName.Get("Scope", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ValueXName = System.Xml.Linq.XName.Get("Value", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SetVarDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SetVarDefinition(XElement xe) { return XTypedServices.ToXTypedElement<SetVarDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SetVarDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(ColumnXName), new NamedContentModelEntity(Column2XName), new NamedContentModelEntity(CounterXName), new NamedContentModelEntity(CurrentRightsXName), new NamedContentModelEntity(FieldXName), new NamedContentModelEntity(FieldPrefixXName), new NamedContentModelEntity(FieldPropertyXName), new NamedContentModelEntity(FieldsXName), new NamedContentModelEntity(FieldSwitchXName), new NamedContentModelEntity(FilterLinkXName), new NamedContentModelEntity(GetFileExtensionXName), new NamedContentModelEntity(GetVarXName), new NamedContentModelEntity(HTMLXName), new NamedContentModelEntity(HttpHostXName), new NamedContentModelEntity(HttpPathXName), new NamedContentModelEntity(HttpVDirXName), new NamedContentModelEntity(IDXName), new NamedContentModelEntity(IfEqualXName), new NamedContentModelEntity(IfNegXName), new NamedContentModelEntity(IfNewXName), new NamedContentModelEntity(IfSubStringXName), new NamedContentModelEntity(LengthXName), new NamedContentModelEntity(LimitXName), new NamedContentModelEntity(ListXName), new NamedContentModelEntity(ListUrlXName), new NamedContentModelEntity(ListUrlDirXName), new NamedContentModelEntity(ListPropertyXName), new NamedContentModelEntity(LookupColumnXName), new NamedContentModelEntity(MapToAllXName), new NamedContentModelEntity(MapToIconXName), new NamedContentModelEntity(PageUrlXName), new NamedContentModelEntity(PropertyXName), new NamedContentModelEntity(ScriptQuoteXName), new NamedContentModelEntity(SelectionOptionsXName), new NamedContentModelEntity(ServerPropertyXName), new NamedContentModelEntity(SetVarXName), new NamedContentModelEntity(SwitchXName), new NamedContentModelEntity(ThreadStampXName), new NamedContentModelEntity(URLXName), new NamedContentModelEntity(UrlDirNameXName), new NamedContentModelEntity(UrlBaseNameXName), new NamedContentModelEntity(MeetingPropertyXName), new NamedContentModelEntity(ProjectPropertyXName), new NamedContentModelEntity(UserIDXName), new NamedContentModelEntity(FieldSortParamsXName), new NamedContentModelEntity(WebQueryInfoXName), new NamedContentModelEntity(IdentityXName), new NamedContentModelEntity(IfHasRightsXName), new NamedContentModelEntity(MapToControlXName), new NamedContentModelEntity(ForEachXName), new NamedContentModelEntity(ContentTypesXName), new NamedContentModelEntity(MapToContentTypeXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public SetVarDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ID1 {
            get {
                XAttribute x = this.Attribute(ID1XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ID1XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.RequestParameter? Scope {
            get {
                XAttribute x = this.Attribute(ScopeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.RequestParameter)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.RequestParameter), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ScopeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Value {
            get {
                XAttribute x = this.Attribute(ValueXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SetVarDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ColumnXName, typeof(QueryColumnDefinition));
            localElementDictionary.Add(Column2XName, typeof(QueryColumnDefinition));
            localElementDictionary.Add(CounterXName, typeof(CounterDefinition));
            localElementDictionary.Add(CurrentRightsXName, typeof(EmptyElement));
            localElementDictionary.Add(FieldXName, typeof(FieldViewReferenceDefinition));
            localElementDictionary.Add(FieldPrefixXName, typeof(EmptyElement));
            localElementDictionary.Add(FieldPropertyXName, typeof(FieldPropertyDefinition));
            localElementDictionary.Add(FieldsXName, typeof(CamlViewElement));
            localElementDictionary.Add(FieldSwitchXName, typeof(SwitchDefinition));
            localElementDictionary.Add(FilterLinkXName, typeof(FilterLinkDefinition));
            localElementDictionary.Add(GetFileExtensionXName, typeof(XTypedElement));
            localElementDictionary.Add(GetVarXName, typeof(GetVarDefinition));
            localElementDictionary.Add(HTMLXName, typeof(HtmlContentDefinition));
            localElementDictionary.Add(HttpHostXName, typeof(HttpHostDefinition));
            localElementDictionary.Add(HttpPathXName, typeof(HttpPathDefinition));
            localElementDictionary.Add(HttpVDirXName, typeof(HttpVDirDefinition));
            localElementDictionary.Add(IDXName, typeof(EmptyElement));
            localElementDictionary.Add(IfEqualXName, typeof(IfEqualDefinition));
            localElementDictionary.Add(IfNegXName, typeof(IfNegDefinition));
            localElementDictionary.Add(IfNewXName, typeof(IfNewDefinition));
            localElementDictionary.Add(IfSubStringXName, typeof(IfSubStringDefinition));
            localElementDictionary.Add(LengthXName, typeof(XTypedElement));
            localElementDictionary.Add(LimitXName, typeof(LimitDefinition));
            localElementDictionary.Add(ListXName, typeof(EmptyElement));
            localElementDictionary.Add(ListUrlXName, typeof(EmptyElement));
            localElementDictionary.Add(ListUrlDirXName, typeof(HttpPathDefinition));
            localElementDictionary.Add(ListPropertyXName, typeof(ListPropertyDefinition));
            localElementDictionary.Add(LookupColumnXName, typeof(LookupColumnDefinition));
            localElementDictionary.Add(MapToAllXName, typeof(CamlViewElement));
            localElementDictionary.Add(MapToIconXName, typeof(CamlViewElement));
            localElementDictionary.Add(PageUrlXName, typeof(HtmlRenderingElement));
            localElementDictionary.Add(PropertyXName, typeof(FieldPropertyDefinition));
            localElementDictionary.Add(ScriptQuoteXName, typeof(ScriptQuoteDefinition));
            localElementDictionary.Add(SelectionOptionsXName, typeof(SelectOptionsDefinition));
            localElementDictionary.Add(ServerPropertyXName, typeof(ServerPropertyDefinition));
            localElementDictionary.Add(SetVarXName, typeof(SetVarDefinition));
            localElementDictionary.Add(SwitchXName, typeof(SwitchDefinition));
            localElementDictionary.Add(ThreadStampXName, typeof(ThreadStampDefinition));
            localElementDictionary.Add(URLXName, typeof(URLDefinition));
            localElementDictionary.Add(UrlDirNameXName, typeof(XTypedElement));
            localElementDictionary.Add(UrlBaseNameXName, typeof(UrlBaseNameDefinition));
            localElementDictionary.Add(MeetingPropertyXName, typeof(MeetingPropertyDefinition));
            localElementDictionary.Add(ProjectPropertyXName, typeof(ProjectPropertyDefinition));
            localElementDictionary.Add(UserIDXName, typeof(UserIDDefinition));
            localElementDictionary.Add(FieldSortParamsXName, typeof(HtmlRenderingElement));
            localElementDictionary.Add(WebQueryInfoXName, typeof(EmptyElement));
            localElementDictionary.Add(IdentityXName, typeof(EmptyElement));
            localElementDictionary.Add(IfHasRightsXName, typeof(IfHasRightsDefinition));
            localElementDictionary.Add(MapToControlXName, typeof(CamlViewElement));
            localElementDictionary.Add(ForEachXName, typeof(ForEachElement));
            localElementDictionary.Add(ContentTypesXName, typeof(CamlViewElement));
            localElementDictionary.Add(MapToContentTypeXName, typeof(CamlViewElement));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
    /// </para>
    /// </summary>
    public partial class CamlViewElement : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ColumnXName = System.Xml.Linq.XName.Get("Column", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<QueryColumnDefinition> ColumnField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Column2XName = System.Xml.Linq.XName.Get("Column2", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<QueryColumnDefinition> Column2Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CounterXName = System.Xml.Linq.XName.Get("Counter", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CounterDefinition> CounterField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CurrentRightsXName = System.Xml.Linq.XName.Get("CurrentRights", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<EmptyElement> CurrentRightsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldXName = System.Xml.Linq.XName.Get("Field", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldViewReferenceDefinition> FieldField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldPrefixXName = System.Xml.Linq.XName.Get("FieldPrefix", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<EmptyElement> FieldPrefixField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldPropertyXName = System.Xml.Linq.XName.Get("FieldProperty", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldPropertyDefinition> FieldPropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldsXName = System.Xml.Linq.XName.Get("Fields", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CamlViewElement> FieldsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldSwitchXName = System.Xml.Linq.XName.Get("FieldSwitch", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SwitchDefinition> FieldSwitchField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FilterLinkXName = System.Xml.Linq.XName.Get("FilterLink", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FilterLinkDefinition> FilterLinkField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GetFileExtensionXName = System.Xml.Linq.XName.Get("GetFileExtension", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<XTypedElement> GetFileExtensionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GetVarXName = System.Xml.Linq.XName.Get("GetVar", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GetVarDefinition> GetVarField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HTMLXName = System.Xml.Linq.XName.Get("HTML", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<HtmlContentDefinition> HTMLField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HttpHostXName = System.Xml.Linq.XName.Get("HttpHost", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<HttpHostDefinition> HttpHostField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HttpPathXName = System.Xml.Linq.XName.Get("HttpPath", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<HttpPathDefinition> HttpPathField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HttpVDirXName = System.Xml.Linq.XName.Get("HttpVDir", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<HttpVDirDefinition> HttpVDirField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IDXName = System.Xml.Linq.XName.Get("ID", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<EmptyElement> IDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IfEqualXName = System.Xml.Linq.XName.Get("IfEqual", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<IfEqualDefinition> IfEqualField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IfNegXName = System.Xml.Linq.XName.Get("IfNeg", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<IfNegDefinition> IfNegField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IfNewXName = System.Xml.Linq.XName.Get("IfNew", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<IfNewDefinition> IfNewField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IfSubStringXName = System.Xml.Linq.XName.Get("IfSubString", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<IfSubStringDefinition> IfSubStringField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LengthXName = System.Xml.Linq.XName.Get("Length", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<XTypedElement> LengthField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LimitXName = System.Xml.Linq.XName.Get("Limit", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LimitDefinition> LimitField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ListXName = System.Xml.Linq.XName.Get("List", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<EmptyElement> ListField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ListUrlXName = System.Xml.Linq.XName.Get("ListUrl", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<EmptyElement> ListUrlField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ListUrlDirXName = System.Xml.Linq.XName.Get("ListUrlDir", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<HttpPathDefinition> ListUrlDirField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ListPropertyXName = System.Xml.Linq.XName.Get("ListProperty", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ListPropertyDefinition> ListPropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LookupColumnXName = System.Xml.Linq.XName.Get("LookupColumn", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LookupColumnDefinition> LookupColumnField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MapToAllXName = System.Xml.Linq.XName.Get("MapToAll", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CamlViewElement> MapToAllField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MapToIconXName = System.Xml.Linq.XName.Get("MapToIcon", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CamlViewElement> MapToIconField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PageUrlXName = System.Xml.Linq.XName.Get("PageUrl", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<HtmlRenderingElement> PageUrlField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertyXName = System.Xml.Linq.XName.Get("Property", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldPropertyDefinition> PropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ScriptQuoteXName = System.Xml.Linq.XName.Get("ScriptQuote", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ScriptQuoteDefinition> ScriptQuoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SelectionOptionsXName = System.Xml.Linq.XName.Get("SelectionOptions", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SelectOptionsDefinition> SelectionOptionsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ServerPropertyXName = System.Xml.Linq.XName.Get("ServerProperty", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ServerPropertyDefinition> ServerPropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SetVarXName = System.Xml.Linq.XName.Get("SetVar", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SetVarDefinition> SetVarField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SwitchXName = System.Xml.Linq.XName.Get("Switch", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SwitchDefinition> SwitchField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ThreadStampXName = System.Xml.Linq.XName.Get("ThreadStamp", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ThreadStampDefinition> ThreadStampField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName URLXName = System.Xml.Linq.XName.Get("URL", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<URLDefinition> URLField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UrlDirNameXName = System.Xml.Linq.XName.Get("UrlDirName", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<XTypedElement> UrlDirNameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UrlBaseNameXName = System.Xml.Linq.XName.Get("UrlBaseName", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UrlBaseNameDefinition> UrlBaseNameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MeetingPropertyXName = System.Xml.Linq.XName.Get("MeetingProperty", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MeetingPropertyDefinition> MeetingPropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProjectPropertyXName = System.Xml.Linq.XName.Get("ProjectProperty", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ProjectPropertyDefinition> ProjectPropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UserIDXName = System.Xml.Linq.XName.Get("UserID", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserIDDefinition> UserIDField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldSortParamsXName = System.Xml.Linq.XName.Get("FieldSortParams", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<HtmlRenderingElement> FieldSortParamsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WebQueryInfoXName = System.Xml.Linq.XName.Get("WebQueryInfo", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<EmptyElement> WebQueryInfoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdentityXName = System.Xml.Linq.XName.Get("Identity", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<EmptyElement> IdentityField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IfHasRightsXName = System.Xml.Linq.XName.Get("IfHasRights", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<IfHasRightsDefinition> IfHasRightsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MapToControlXName = System.Xml.Linq.XName.Get("MapToControl", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CamlViewElement> MapToControlField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ForEachXName = System.Xml.Linq.XName.Get("ForEach", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ForEachElement> ForEachField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ContentTypesXName = System.Xml.Linq.XName.Get("ContentTypes", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CamlViewElement> ContentTypesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MapToContentTypeXName = System.Xml.Linq.XName.Get("MapToContentType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CamlViewElement> MapToContentTypeField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CamlViewElement", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CamlViewElement(XElement xe) { return XTypedServices.ToXTypedElement<CamlViewElement>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CamlViewElement() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(ColumnXName), new NamedContentModelEntity(Column2XName), new NamedContentModelEntity(CounterXName), new NamedContentModelEntity(CurrentRightsXName), new NamedContentModelEntity(FieldXName), new NamedContentModelEntity(FieldPrefixXName), new NamedContentModelEntity(FieldPropertyXName), new NamedContentModelEntity(FieldsXName), new NamedContentModelEntity(FieldSwitchXName), new NamedContentModelEntity(FilterLinkXName), new NamedContentModelEntity(GetFileExtensionXName), new NamedContentModelEntity(GetVarXName), new NamedContentModelEntity(HTMLXName), new NamedContentModelEntity(HttpHostXName), new NamedContentModelEntity(HttpPathXName), new NamedContentModelEntity(HttpVDirXName), new NamedContentModelEntity(IDXName), new NamedContentModelEntity(IfEqualXName), new NamedContentModelEntity(IfNegXName), new NamedContentModelEntity(IfNewXName), new NamedContentModelEntity(IfSubStringXName), new NamedContentModelEntity(LengthXName), new NamedContentModelEntity(LimitXName), new NamedContentModelEntity(ListXName), new NamedContentModelEntity(ListUrlXName), new NamedContentModelEntity(ListUrlDirXName), new NamedContentModelEntity(ListPropertyXName), new NamedContentModelEntity(LookupColumnXName), new NamedContentModelEntity(MapToAllXName), new NamedContentModelEntity(MapToIconXName), new NamedContentModelEntity(PageUrlXName), new NamedContentModelEntity(PropertyXName), new NamedContentModelEntity(ScriptQuoteXName), new NamedContentModelEntity(SelectionOptionsXName), new NamedContentModelEntity(ServerPropertyXName), new NamedContentModelEntity(SetVarXName), new NamedContentModelEntity(SwitchXName), new NamedContentModelEntity(ThreadStampXName), new NamedContentModelEntity(URLXName), new NamedContentModelEntity(UrlDirNameXName), new NamedContentModelEntity(UrlBaseNameXName), new NamedContentModelEntity(MeetingPropertyXName), new NamedContentModelEntity(ProjectPropertyXName), new NamedContentModelEntity(UserIDXName), new NamedContentModelEntity(FieldSortParamsXName), new NamedContentModelEntity(WebQueryInfoXName), new NamedContentModelEntity(IdentityXName), new NamedContentModelEntity(IfHasRightsXName), new NamedContentModelEntity(MapToControlXName), new NamedContentModelEntity(ForEachXName), new NamedContentModelEntity(ContentTypesXName), new NamedContentModelEntity(MapToContentTypeXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public CamlViewElement() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<QueryColumnDefinition> Column {
            get {
                if ((this.ColumnField == null)) {
                    this.ColumnField = new XTypedList<QueryColumnDefinition>(this, LinqToXsdTypeManager.Instance, ColumnXName);
                }
                return this.ColumnField;
            }
            set {
                if ((value == null)) {
                    this.ColumnField = null;
                }
                else {
                    if ((this.ColumnField == null)) {
                        this.ColumnField = XTypedList<QueryColumnDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, ColumnXName);
                    }
                    else {
                        XTypedServices.SetList<QueryColumnDefinition>(this.ColumnField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<QueryColumnDefinition> Column2 {
            get {
                if ((this.Column2Field == null)) {
                    this.Column2Field = new XTypedList<QueryColumnDefinition>(this, LinqToXsdTypeManager.Instance, Column2XName);
                }
                return this.Column2Field;
            }
            set {
                if ((value == null)) {
                    this.Column2Field = null;
                }
                else {
                    if ((this.Column2Field == null)) {
                        this.Column2Field = XTypedList<QueryColumnDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, Column2XName);
                    }
                    else {
                        XTypedServices.SetList<QueryColumnDefinition>(this.Column2Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<CounterDefinition> Counter {
            get {
                if ((this.CounterField == null)) {
                    this.CounterField = new XTypedList<CounterDefinition>(this, LinqToXsdTypeManager.Instance, CounterXName);
                }
                return this.CounterField;
            }
            set {
                if ((value == null)) {
                    this.CounterField = null;
                }
                else {
                    if ((this.CounterField == null)) {
                        this.CounterField = XTypedList<CounterDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, CounterXName);
                    }
                    else {
                        XTypedServices.SetList<CounterDefinition>(this.CounterField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<EmptyElement> CurrentRights {
            get {
                if ((this.CurrentRightsField == null)) {
                    this.CurrentRightsField = new XTypedList<EmptyElement>(this, LinqToXsdTypeManager.Instance, CurrentRightsXName);
                }
                return this.CurrentRightsField;
            }
            set {
                if ((value == null)) {
                    this.CurrentRightsField = null;
                }
                else {
                    if ((this.CurrentRightsField == null)) {
                        this.CurrentRightsField = XTypedList<EmptyElement>.Initialize(this, LinqToXsdTypeManager.Instance, value, CurrentRightsXName);
                    }
                    else {
                        XTypedServices.SetList<EmptyElement>(this.CurrentRightsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<FieldViewReferenceDefinition> Field {
            get {
                if ((this.FieldField == null)) {
                    this.FieldField = new XTypedList<FieldViewReferenceDefinition>(this, LinqToXsdTypeManager.Instance, FieldXName);
                }
                return this.FieldField;
            }
            set {
                if ((value == null)) {
                    this.FieldField = null;
                }
                else {
                    if ((this.FieldField == null)) {
                        this.FieldField = XTypedList<FieldViewReferenceDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldXName);
                    }
                    else {
                        XTypedServices.SetList<FieldViewReferenceDefinition>(this.FieldField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<EmptyElement> FieldPrefix {
            get {
                if ((this.FieldPrefixField == null)) {
                    this.FieldPrefixField = new XTypedList<EmptyElement>(this, LinqToXsdTypeManager.Instance, FieldPrefixXName);
                }
                return this.FieldPrefixField;
            }
            set {
                if ((value == null)) {
                    this.FieldPrefixField = null;
                }
                else {
                    if ((this.FieldPrefixField == null)) {
                        this.FieldPrefixField = XTypedList<EmptyElement>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldPrefixXName);
                    }
                    else {
                        XTypedServices.SetList<EmptyElement>(this.FieldPrefixField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<FieldPropertyDefinition> FieldProperty {
            get {
                if ((this.FieldPropertyField == null)) {
                    this.FieldPropertyField = new XTypedList<FieldPropertyDefinition>(this, LinqToXsdTypeManager.Instance, FieldPropertyXName);
                }
                return this.FieldPropertyField;
            }
            set {
                if ((value == null)) {
                    this.FieldPropertyField = null;
                }
                else {
                    if ((this.FieldPropertyField == null)) {
                        this.FieldPropertyField = XTypedList<FieldPropertyDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldPropertyXName);
                    }
                    else {
                        XTypedServices.SetList<FieldPropertyDefinition>(this.FieldPropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<CamlViewElement> Fields {
            get {
                if ((this.FieldsField == null)) {
                    this.FieldsField = new XTypedList<CamlViewElement>(this, LinqToXsdTypeManager.Instance, FieldsXName);
                }
                return this.FieldsField;
            }
            set {
                if ((value == null)) {
                    this.FieldsField = null;
                }
                else {
                    if ((this.FieldsField == null)) {
                        this.FieldsField = XTypedList<CamlViewElement>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldsXName);
                    }
                    else {
                        XTypedServices.SetList<CamlViewElement>(this.FieldsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<SwitchDefinition> FieldSwitch {
            get {
                if ((this.FieldSwitchField == null)) {
                    this.FieldSwitchField = new XTypedList<SwitchDefinition>(this, LinqToXsdTypeManager.Instance, FieldSwitchXName);
                }
                return this.FieldSwitchField;
            }
            set {
                if ((value == null)) {
                    this.FieldSwitchField = null;
                }
                else {
                    if ((this.FieldSwitchField == null)) {
                        this.FieldSwitchField = XTypedList<SwitchDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldSwitchXName);
                    }
                    else {
                        XTypedServices.SetList<SwitchDefinition>(this.FieldSwitchField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<FilterLinkDefinition> FilterLink {
            get {
                if ((this.FilterLinkField == null)) {
                    this.FilterLinkField = new XTypedList<FilterLinkDefinition>(this, LinqToXsdTypeManager.Instance, FilterLinkXName);
                }
                return this.FilterLinkField;
            }
            set {
                if ((value == null)) {
                    this.FilterLinkField = null;
                }
                else {
                    if ((this.FilterLinkField == null)) {
                        this.FilterLinkField = XTypedList<FilterLinkDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, FilterLinkXName);
                    }
                    else {
                        XTypedServices.SetList<FilterLinkDefinition>(this.FilterLinkField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<XTypedElement> GetFileExtension {
            get {
                if ((this.GetFileExtensionField == null)) {
                    this.GetFileExtensionField = new XTypedList<XTypedElement>(this, LinqToXsdTypeManager.Instance, GetFileExtensionXName);
                }
                return this.GetFileExtensionField;
            }
            set {
                if ((value == null)) {
                    this.GetFileExtensionField = null;
                }
                else {
                    if ((this.GetFileExtensionField == null)) {
                        this.GetFileExtensionField = XTypedList<XTypedElement>.Initialize(this, LinqToXsdTypeManager.Instance, value, GetFileExtensionXName);
                    }
                    else {
                        XTypedServices.SetList<XTypedElement>(this.GetFileExtensionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<GetVarDefinition> GetVar {
            get {
                if ((this.GetVarField == null)) {
                    this.GetVarField = new XTypedList<GetVarDefinition>(this, LinqToXsdTypeManager.Instance, GetVarXName);
                }
                return this.GetVarField;
            }
            set {
                if ((value == null)) {
                    this.GetVarField = null;
                }
                else {
                    if ((this.GetVarField == null)) {
                        this.GetVarField = XTypedList<GetVarDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, GetVarXName);
                    }
                    else {
                        XTypedServices.SetList<GetVarDefinition>(this.GetVarField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<HtmlContentDefinition> HTML {
            get {
                if ((this.HTMLField == null)) {
                    this.HTMLField = new XTypedList<HtmlContentDefinition>(this, LinqToXsdTypeManager.Instance, HTMLXName);
                }
                return this.HTMLField;
            }
            set {
                if ((value == null)) {
                    this.HTMLField = null;
                }
                else {
                    if ((this.HTMLField == null)) {
                        this.HTMLField = XTypedList<HtmlContentDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, HTMLXName);
                    }
                    else {
                        XTypedServices.SetList<HtmlContentDefinition>(this.HTMLField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<HttpHostDefinition> HttpHost {
            get {
                if ((this.HttpHostField == null)) {
                    this.HttpHostField = new XTypedList<HttpHostDefinition>(this, LinqToXsdTypeManager.Instance, HttpHostXName);
                }
                return this.HttpHostField;
            }
            set {
                if ((value == null)) {
                    this.HttpHostField = null;
                }
                else {
                    if ((this.HttpHostField == null)) {
                        this.HttpHostField = XTypedList<HttpHostDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, HttpHostXName);
                    }
                    else {
                        XTypedServices.SetList<HttpHostDefinition>(this.HttpHostField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<HttpPathDefinition> HttpPath {
            get {
                if ((this.HttpPathField == null)) {
                    this.HttpPathField = new XTypedList<HttpPathDefinition>(this, LinqToXsdTypeManager.Instance, HttpPathXName);
                }
                return this.HttpPathField;
            }
            set {
                if ((value == null)) {
                    this.HttpPathField = null;
                }
                else {
                    if ((this.HttpPathField == null)) {
                        this.HttpPathField = XTypedList<HttpPathDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, HttpPathXName);
                    }
                    else {
                        XTypedServices.SetList<HttpPathDefinition>(this.HttpPathField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<HttpVDirDefinition> HttpVDir {
            get {
                if ((this.HttpVDirField == null)) {
                    this.HttpVDirField = new XTypedList<HttpVDirDefinition>(this, LinqToXsdTypeManager.Instance, HttpVDirXName);
                }
                return this.HttpVDirField;
            }
            set {
                if ((value == null)) {
                    this.HttpVDirField = null;
                }
                else {
                    if ((this.HttpVDirField == null)) {
                        this.HttpVDirField = XTypedList<HttpVDirDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, HttpVDirXName);
                    }
                    else {
                        XTypedServices.SetList<HttpVDirDefinition>(this.HttpVDirField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<EmptyElement> ID {
            get {
                if ((this.IDField == null)) {
                    this.IDField = new XTypedList<EmptyElement>(this, LinqToXsdTypeManager.Instance, IDXName);
                }
                return this.IDField;
            }
            set {
                if ((value == null)) {
                    this.IDField = null;
                }
                else {
                    if ((this.IDField == null)) {
                        this.IDField = XTypedList<EmptyElement>.Initialize(this, LinqToXsdTypeManager.Instance, value, IDXName);
                    }
                    else {
                        XTypedServices.SetList<EmptyElement>(this.IDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<IfEqualDefinition> IfEqual {
            get {
                if ((this.IfEqualField == null)) {
                    this.IfEqualField = new XTypedList<IfEqualDefinition>(this, LinqToXsdTypeManager.Instance, IfEqualXName);
                }
                return this.IfEqualField;
            }
            set {
                if ((value == null)) {
                    this.IfEqualField = null;
                }
                else {
                    if ((this.IfEqualField == null)) {
                        this.IfEqualField = XTypedList<IfEqualDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, IfEqualXName);
                    }
                    else {
                        XTypedServices.SetList<IfEqualDefinition>(this.IfEqualField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<IfNegDefinition> IfNeg {
            get {
                if ((this.IfNegField == null)) {
                    this.IfNegField = new XTypedList<IfNegDefinition>(this, LinqToXsdTypeManager.Instance, IfNegXName);
                }
                return this.IfNegField;
            }
            set {
                if ((value == null)) {
                    this.IfNegField = null;
                }
                else {
                    if ((this.IfNegField == null)) {
                        this.IfNegField = XTypedList<IfNegDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, IfNegXName);
                    }
                    else {
                        XTypedServices.SetList<IfNegDefinition>(this.IfNegField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<IfNewDefinition> IfNew {
            get {
                if ((this.IfNewField == null)) {
                    this.IfNewField = new XTypedList<IfNewDefinition>(this, LinqToXsdTypeManager.Instance, IfNewXName);
                }
                return this.IfNewField;
            }
            set {
                if ((value == null)) {
                    this.IfNewField = null;
                }
                else {
                    if ((this.IfNewField == null)) {
                        this.IfNewField = XTypedList<IfNewDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, IfNewXName);
                    }
                    else {
                        XTypedServices.SetList<IfNewDefinition>(this.IfNewField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<IfSubStringDefinition> IfSubString {
            get {
                if ((this.IfSubStringField == null)) {
                    this.IfSubStringField = new XTypedList<IfSubStringDefinition>(this, LinqToXsdTypeManager.Instance, IfSubStringXName);
                }
                return this.IfSubStringField;
            }
            set {
                if ((value == null)) {
                    this.IfSubStringField = null;
                }
                else {
                    if ((this.IfSubStringField == null)) {
                        this.IfSubStringField = XTypedList<IfSubStringDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, IfSubStringXName);
                    }
                    else {
                        XTypedServices.SetList<IfSubStringDefinition>(this.IfSubStringField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<XTypedElement> Length {
            get {
                if ((this.LengthField == null)) {
                    this.LengthField = new XTypedList<XTypedElement>(this, LinqToXsdTypeManager.Instance, LengthXName);
                }
                return this.LengthField;
            }
            set {
                if ((value == null)) {
                    this.LengthField = null;
                }
                else {
                    if ((this.LengthField == null)) {
                        this.LengthField = XTypedList<XTypedElement>.Initialize(this, LinqToXsdTypeManager.Instance, value, LengthXName);
                    }
                    else {
                        XTypedServices.SetList<XTypedElement>(this.LengthField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<LimitDefinition> Limit {
            get {
                if ((this.LimitField == null)) {
                    this.LimitField = new XTypedList<LimitDefinition>(this, LinqToXsdTypeManager.Instance, LimitXName);
                }
                return this.LimitField;
            }
            set {
                if ((value == null)) {
                    this.LimitField = null;
                }
                else {
                    if ((this.LimitField == null)) {
                        this.LimitField = XTypedList<LimitDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, LimitXName);
                    }
                    else {
                        XTypedServices.SetList<LimitDefinition>(this.LimitField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<EmptyElement> List {
            get {
                if ((this.ListField == null)) {
                    this.ListField = new XTypedList<EmptyElement>(this, LinqToXsdTypeManager.Instance, ListXName);
                }
                return this.ListField;
            }
            set {
                if ((value == null)) {
                    this.ListField = null;
                }
                else {
                    if ((this.ListField == null)) {
                        this.ListField = XTypedList<EmptyElement>.Initialize(this, LinqToXsdTypeManager.Instance, value, ListXName);
                    }
                    else {
                        XTypedServices.SetList<EmptyElement>(this.ListField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<EmptyElement> ListUrl {
            get {
                if ((this.ListUrlField == null)) {
                    this.ListUrlField = new XTypedList<EmptyElement>(this, LinqToXsdTypeManager.Instance, ListUrlXName);
                }
                return this.ListUrlField;
            }
            set {
                if ((value == null)) {
                    this.ListUrlField = null;
                }
                else {
                    if ((this.ListUrlField == null)) {
                        this.ListUrlField = XTypedList<EmptyElement>.Initialize(this, LinqToXsdTypeManager.Instance, value, ListUrlXName);
                    }
                    else {
                        XTypedServices.SetList<EmptyElement>(this.ListUrlField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<HttpPathDefinition> ListUrlDir {
            get {
                if ((this.ListUrlDirField == null)) {
                    this.ListUrlDirField = new XTypedList<HttpPathDefinition>(this, LinqToXsdTypeManager.Instance, ListUrlDirXName);
                }
                return this.ListUrlDirField;
            }
            set {
                if ((value == null)) {
                    this.ListUrlDirField = null;
                }
                else {
                    if ((this.ListUrlDirField == null)) {
                        this.ListUrlDirField = XTypedList<HttpPathDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, ListUrlDirXName);
                    }
                    else {
                        XTypedServices.SetList<HttpPathDefinition>(this.ListUrlDirField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<ListPropertyDefinition> ListProperty {
            get {
                if ((this.ListPropertyField == null)) {
                    this.ListPropertyField = new XTypedList<ListPropertyDefinition>(this, LinqToXsdTypeManager.Instance, ListPropertyXName);
                }
                return this.ListPropertyField;
            }
            set {
                if ((value == null)) {
                    this.ListPropertyField = null;
                }
                else {
                    if ((this.ListPropertyField == null)) {
                        this.ListPropertyField = XTypedList<ListPropertyDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, ListPropertyXName);
                    }
                    else {
                        XTypedServices.SetList<ListPropertyDefinition>(this.ListPropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<LookupColumnDefinition> LookupColumn {
            get {
                if ((this.LookupColumnField == null)) {
                    this.LookupColumnField = new XTypedList<LookupColumnDefinition>(this, LinqToXsdTypeManager.Instance, LookupColumnXName);
                }
                return this.LookupColumnField;
            }
            set {
                if ((value == null)) {
                    this.LookupColumnField = null;
                }
                else {
                    if ((this.LookupColumnField == null)) {
                        this.LookupColumnField = XTypedList<LookupColumnDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, LookupColumnXName);
                    }
                    else {
                        XTypedServices.SetList<LookupColumnDefinition>(this.LookupColumnField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<CamlViewElement> MapToAll {
            get {
                if ((this.MapToAllField == null)) {
                    this.MapToAllField = new XTypedList<CamlViewElement>(this, LinqToXsdTypeManager.Instance, MapToAllXName);
                }
                return this.MapToAllField;
            }
            set {
                if ((value == null)) {
                    this.MapToAllField = null;
                }
                else {
                    if ((this.MapToAllField == null)) {
                        this.MapToAllField = XTypedList<CamlViewElement>.Initialize(this, LinqToXsdTypeManager.Instance, value, MapToAllXName);
                    }
                    else {
                        XTypedServices.SetList<CamlViewElement>(this.MapToAllField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<CamlViewElement> MapToIcon {
            get {
                if ((this.MapToIconField == null)) {
                    this.MapToIconField = new XTypedList<CamlViewElement>(this, LinqToXsdTypeManager.Instance, MapToIconXName);
                }
                return this.MapToIconField;
            }
            set {
                if ((value == null)) {
                    this.MapToIconField = null;
                }
                else {
                    if ((this.MapToIconField == null)) {
                        this.MapToIconField = XTypedList<CamlViewElement>.Initialize(this, LinqToXsdTypeManager.Instance, value, MapToIconXName);
                    }
                    else {
                        XTypedServices.SetList<CamlViewElement>(this.MapToIconField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<HtmlRenderingElement> PageUrl {
            get {
                if ((this.PageUrlField == null)) {
                    this.PageUrlField = new XTypedList<HtmlRenderingElement>(this, LinqToXsdTypeManager.Instance, PageUrlXName);
                }
                return this.PageUrlField;
            }
            set {
                if ((value == null)) {
                    this.PageUrlField = null;
                }
                else {
                    if ((this.PageUrlField == null)) {
                        this.PageUrlField = XTypedList<HtmlRenderingElement>.Initialize(this, LinqToXsdTypeManager.Instance, value, PageUrlXName);
                    }
                    else {
                        XTypedServices.SetList<HtmlRenderingElement>(this.PageUrlField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<FieldPropertyDefinition> Property {
            get {
                if ((this.PropertyField == null)) {
                    this.PropertyField = new XTypedList<FieldPropertyDefinition>(this, LinqToXsdTypeManager.Instance, PropertyXName);
                }
                return this.PropertyField;
            }
            set {
                if ((value == null)) {
                    this.PropertyField = null;
                }
                else {
                    if ((this.PropertyField == null)) {
                        this.PropertyField = XTypedList<FieldPropertyDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropertyXName);
                    }
                    else {
                        XTypedServices.SetList<FieldPropertyDefinition>(this.PropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<ScriptQuoteDefinition> ScriptQuote {
            get {
                if ((this.ScriptQuoteField == null)) {
                    this.ScriptQuoteField = new XTypedList<ScriptQuoteDefinition>(this, LinqToXsdTypeManager.Instance, ScriptQuoteXName);
                }
                return this.ScriptQuoteField;
            }
            set {
                if ((value == null)) {
                    this.ScriptQuoteField = null;
                }
                else {
                    if ((this.ScriptQuoteField == null)) {
                        this.ScriptQuoteField = XTypedList<ScriptQuoteDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, ScriptQuoteXName);
                    }
                    else {
                        XTypedServices.SetList<ScriptQuoteDefinition>(this.ScriptQuoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<SelectOptionsDefinition> SelectionOptions {
            get {
                if ((this.SelectionOptionsField == null)) {
                    this.SelectionOptionsField = new XTypedList<SelectOptionsDefinition>(this, LinqToXsdTypeManager.Instance, SelectionOptionsXName);
                }
                return this.SelectionOptionsField;
            }
            set {
                if ((value == null)) {
                    this.SelectionOptionsField = null;
                }
                else {
                    if ((this.SelectionOptionsField == null)) {
                        this.SelectionOptionsField = XTypedList<SelectOptionsDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, SelectionOptionsXName);
                    }
                    else {
                        XTypedServices.SetList<SelectOptionsDefinition>(this.SelectionOptionsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<ServerPropertyDefinition> ServerProperty {
            get {
                if ((this.ServerPropertyField == null)) {
                    this.ServerPropertyField = new XTypedList<ServerPropertyDefinition>(this, LinqToXsdTypeManager.Instance, ServerPropertyXName);
                }
                return this.ServerPropertyField;
            }
            set {
                if ((value == null)) {
                    this.ServerPropertyField = null;
                }
                else {
                    if ((this.ServerPropertyField == null)) {
                        this.ServerPropertyField = XTypedList<ServerPropertyDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, ServerPropertyXName);
                    }
                    else {
                        XTypedServices.SetList<ServerPropertyDefinition>(this.ServerPropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<SetVarDefinition> SetVar {
            get {
                if ((this.SetVarField == null)) {
                    this.SetVarField = new XTypedList<SetVarDefinition>(this, LinqToXsdTypeManager.Instance, SetVarXName);
                }
                return this.SetVarField;
            }
            set {
                if ((value == null)) {
                    this.SetVarField = null;
                }
                else {
                    if ((this.SetVarField == null)) {
                        this.SetVarField = XTypedList<SetVarDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, SetVarXName);
                    }
                    else {
                        XTypedServices.SetList<SetVarDefinition>(this.SetVarField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<SwitchDefinition> Switch {
            get {
                if ((this.SwitchField == null)) {
                    this.SwitchField = new XTypedList<SwitchDefinition>(this, LinqToXsdTypeManager.Instance, SwitchXName);
                }
                return this.SwitchField;
            }
            set {
                if ((value == null)) {
                    this.SwitchField = null;
                }
                else {
                    if ((this.SwitchField == null)) {
                        this.SwitchField = XTypedList<SwitchDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, SwitchXName);
                    }
                    else {
                        XTypedServices.SetList<SwitchDefinition>(this.SwitchField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<ThreadStampDefinition> ThreadStamp {
            get {
                if ((this.ThreadStampField == null)) {
                    this.ThreadStampField = new XTypedList<ThreadStampDefinition>(this, LinqToXsdTypeManager.Instance, ThreadStampXName);
                }
                return this.ThreadStampField;
            }
            set {
                if ((value == null)) {
                    this.ThreadStampField = null;
                }
                else {
                    if ((this.ThreadStampField == null)) {
                        this.ThreadStampField = XTypedList<ThreadStampDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, ThreadStampXName);
                    }
                    else {
                        XTypedServices.SetList<ThreadStampDefinition>(this.ThreadStampField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<URLDefinition> URL {
            get {
                if ((this.URLField == null)) {
                    this.URLField = new XTypedList<URLDefinition>(this, LinqToXsdTypeManager.Instance, URLXName);
                }
                return this.URLField;
            }
            set {
                if ((value == null)) {
                    this.URLField = null;
                }
                else {
                    if ((this.URLField == null)) {
                        this.URLField = XTypedList<URLDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, URLXName);
                    }
                    else {
                        XTypedServices.SetList<URLDefinition>(this.URLField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<XTypedElement> UrlDirName {
            get {
                if ((this.UrlDirNameField == null)) {
                    this.UrlDirNameField = new XTypedList<XTypedElement>(this, LinqToXsdTypeManager.Instance, UrlDirNameXName);
                }
                return this.UrlDirNameField;
            }
            set {
                if ((value == null)) {
                    this.UrlDirNameField = null;
                }
                else {
                    if ((this.UrlDirNameField == null)) {
                        this.UrlDirNameField = XTypedList<XTypedElement>.Initialize(this, LinqToXsdTypeManager.Instance, value, UrlDirNameXName);
                    }
                    else {
                        XTypedServices.SetList<XTypedElement>(this.UrlDirNameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<UrlBaseNameDefinition> UrlBaseName {
            get {
                if ((this.UrlBaseNameField == null)) {
                    this.UrlBaseNameField = new XTypedList<UrlBaseNameDefinition>(this, LinqToXsdTypeManager.Instance, UrlBaseNameXName);
                }
                return this.UrlBaseNameField;
            }
            set {
                if ((value == null)) {
                    this.UrlBaseNameField = null;
                }
                else {
                    if ((this.UrlBaseNameField == null)) {
                        this.UrlBaseNameField = XTypedList<UrlBaseNameDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, UrlBaseNameXName);
                    }
                    else {
                        XTypedServices.SetList<UrlBaseNameDefinition>(this.UrlBaseNameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<MeetingPropertyDefinition> MeetingProperty {
            get {
                if ((this.MeetingPropertyField == null)) {
                    this.MeetingPropertyField = new XTypedList<MeetingPropertyDefinition>(this, LinqToXsdTypeManager.Instance, MeetingPropertyXName);
                }
                return this.MeetingPropertyField;
            }
            set {
                if ((value == null)) {
                    this.MeetingPropertyField = null;
                }
                else {
                    if ((this.MeetingPropertyField == null)) {
                        this.MeetingPropertyField = XTypedList<MeetingPropertyDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, MeetingPropertyXName);
                    }
                    else {
                        XTypedServices.SetList<MeetingPropertyDefinition>(this.MeetingPropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<ProjectPropertyDefinition> ProjectProperty {
            get {
                if ((this.ProjectPropertyField == null)) {
                    this.ProjectPropertyField = new XTypedList<ProjectPropertyDefinition>(this, LinqToXsdTypeManager.Instance, ProjectPropertyXName);
                }
                return this.ProjectPropertyField;
            }
            set {
                if ((value == null)) {
                    this.ProjectPropertyField = null;
                }
                else {
                    if ((this.ProjectPropertyField == null)) {
                        this.ProjectPropertyField = XTypedList<ProjectPropertyDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, ProjectPropertyXName);
                    }
                    else {
                        XTypedServices.SetList<ProjectPropertyDefinition>(this.ProjectPropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<UserIDDefinition> UserID {
            get {
                if ((this.UserIDField == null)) {
                    this.UserIDField = new XTypedList<UserIDDefinition>(this, LinqToXsdTypeManager.Instance, UserIDXName);
                }
                return this.UserIDField;
            }
            set {
                if ((value == null)) {
                    this.UserIDField = null;
                }
                else {
                    if ((this.UserIDField == null)) {
                        this.UserIDField = XTypedList<UserIDDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, UserIDXName);
                    }
                    else {
                        XTypedServices.SetList<UserIDDefinition>(this.UserIDField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<HtmlRenderingElement> FieldSortParams {
            get {
                if ((this.FieldSortParamsField == null)) {
                    this.FieldSortParamsField = new XTypedList<HtmlRenderingElement>(this, LinqToXsdTypeManager.Instance, FieldSortParamsXName);
                }
                return this.FieldSortParamsField;
            }
            set {
                if ((value == null)) {
                    this.FieldSortParamsField = null;
                }
                else {
                    if ((this.FieldSortParamsField == null)) {
                        this.FieldSortParamsField = XTypedList<HtmlRenderingElement>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldSortParamsXName);
                    }
                    else {
                        XTypedServices.SetList<HtmlRenderingElement>(this.FieldSortParamsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<EmptyElement> WebQueryInfo {
            get {
                if ((this.WebQueryInfoField == null)) {
                    this.WebQueryInfoField = new XTypedList<EmptyElement>(this, LinqToXsdTypeManager.Instance, WebQueryInfoXName);
                }
                return this.WebQueryInfoField;
            }
            set {
                if ((value == null)) {
                    this.WebQueryInfoField = null;
                }
                else {
                    if ((this.WebQueryInfoField == null)) {
                        this.WebQueryInfoField = XTypedList<EmptyElement>.Initialize(this, LinqToXsdTypeManager.Instance, value, WebQueryInfoXName);
                    }
                    else {
                        XTypedServices.SetList<EmptyElement>(this.WebQueryInfoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<EmptyElement> Identity {
            get {
                if ((this.IdentityField == null)) {
                    this.IdentityField = new XTypedList<EmptyElement>(this, LinqToXsdTypeManager.Instance, IdentityXName);
                }
                return this.IdentityField;
            }
            set {
                if ((value == null)) {
                    this.IdentityField = null;
                }
                else {
                    if ((this.IdentityField == null)) {
                        this.IdentityField = XTypedList<EmptyElement>.Initialize(this, LinqToXsdTypeManager.Instance, value, IdentityXName);
                    }
                    else {
                        XTypedServices.SetList<EmptyElement>(this.IdentityField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<IfHasRightsDefinition> IfHasRights {
            get {
                if ((this.IfHasRightsField == null)) {
                    this.IfHasRightsField = new XTypedList<IfHasRightsDefinition>(this, LinqToXsdTypeManager.Instance, IfHasRightsXName);
                }
                return this.IfHasRightsField;
            }
            set {
                if ((value == null)) {
                    this.IfHasRightsField = null;
                }
                else {
                    if ((this.IfHasRightsField == null)) {
                        this.IfHasRightsField = XTypedList<IfHasRightsDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, IfHasRightsXName);
                    }
                    else {
                        XTypedServices.SetList<IfHasRightsDefinition>(this.IfHasRightsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<CamlViewElement> MapToControl {
            get {
                if ((this.MapToControlField == null)) {
                    this.MapToControlField = new XTypedList<CamlViewElement>(this, LinqToXsdTypeManager.Instance, MapToControlXName);
                }
                return this.MapToControlField;
            }
            set {
                if ((value == null)) {
                    this.MapToControlField = null;
                }
                else {
                    if ((this.MapToControlField == null)) {
                        this.MapToControlField = XTypedList<CamlViewElement>.Initialize(this, LinqToXsdTypeManager.Instance, value, MapToControlXName);
                    }
                    else {
                        XTypedServices.SetList<CamlViewElement>(this.MapToControlField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<ForEachElement> ForEach {
            get {
                if ((this.ForEachField == null)) {
                    this.ForEachField = new XTypedList<ForEachElement>(this, LinqToXsdTypeManager.Instance, ForEachXName);
                }
                return this.ForEachField;
            }
            set {
                if ((value == null)) {
                    this.ForEachField = null;
                }
                else {
                    if ((this.ForEachField == null)) {
                        this.ForEachField = XTypedList<ForEachElement>.Initialize(this, LinqToXsdTypeManager.Instance, value, ForEachXName);
                    }
                    else {
                        XTypedServices.SetList<ForEachElement>(this.ForEachField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<CamlViewElement> ContentTypes {
            get {
                if ((this.ContentTypesField == null)) {
                    this.ContentTypesField = new XTypedList<CamlViewElement>(this, LinqToXsdTypeManager.Instance, ContentTypesXName);
                }
                return this.ContentTypesField;
            }
            set {
                if ((value == null)) {
                    this.ContentTypesField = null;
                }
                else {
                    if ((this.ContentTypesField == null)) {
                        this.ContentTypesField = XTypedList<CamlViewElement>.Initialize(this, LinqToXsdTypeManager.Instance, value, ContentTypesXName);
                    }
                    else {
                        XTypedServices.SetList<CamlViewElement>(this.ContentTypesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<CamlViewElement> MapToContentType {
            get {
                if ((this.MapToContentTypeField == null)) {
                    this.MapToContentTypeField = new XTypedList<CamlViewElement>(this, LinqToXsdTypeManager.Instance, MapToContentTypeXName);
                }
                return this.MapToContentTypeField;
            }
            set {
                if ((value == null)) {
                    this.MapToContentTypeField = null;
                }
                else {
                    if ((this.MapToContentTypeField == null)) {
                        this.MapToContentTypeField = XTypedList<CamlViewElement>.Initialize(this, LinqToXsdTypeManager.Instance, value, MapToContentTypeXName);
                    }
                    else {
                        XTypedServices.SetList<CamlViewElement>(this.MapToContentTypeField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CamlViewElement>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ColumnXName, typeof(QueryColumnDefinition));
            localElementDictionary.Add(Column2XName, typeof(QueryColumnDefinition));
            localElementDictionary.Add(CounterXName, typeof(CounterDefinition));
            localElementDictionary.Add(CurrentRightsXName, typeof(EmptyElement));
            localElementDictionary.Add(FieldXName, typeof(FieldViewReferenceDefinition));
            localElementDictionary.Add(FieldPrefixXName, typeof(EmptyElement));
            localElementDictionary.Add(FieldPropertyXName, typeof(FieldPropertyDefinition));
            localElementDictionary.Add(FieldsXName, typeof(CamlViewElement));
            localElementDictionary.Add(FieldSwitchXName, typeof(SwitchDefinition));
            localElementDictionary.Add(FilterLinkXName, typeof(FilterLinkDefinition));
            localElementDictionary.Add(GetFileExtensionXName, typeof(XTypedElement));
            localElementDictionary.Add(GetVarXName, typeof(GetVarDefinition));
            localElementDictionary.Add(HTMLXName, typeof(HtmlContentDefinition));
            localElementDictionary.Add(HttpHostXName, typeof(HttpHostDefinition));
            localElementDictionary.Add(HttpPathXName, typeof(HttpPathDefinition));
            localElementDictionary.Add(HttpVDirXName, typeof(HttpVDirDefinition));
            localElementDictionary.Add(IDXName, typeof(EmptyElement));
            localElementDictionary.Add(IfEqualXName, typeof(IfEqualDefinition));
            localElementDictionary.Add(IfNegXName, typeof(IfNegDefinition));
            localElementDictionary.Add(IfNewXName, typeof(IfNewDefinition));
            localElementDictionary.Add(IfSubStringXName, typeof(IfSubStringDefinition));
            localElementDictionary.Add(LengthXName, typeof(XTypedElement));
            localElementDictionary.Add(LimitXName, typeof(LimitDefinition));
            localElementDictionary.Add(ListXName, typeof(EmptyElement));
            localElementDictionary.Add(ListUrlXName, typeof(EmptyElement));
            localElementDictionary.Add(ListUrlDirXName, typeof(HttpPathDefinition));
            localElementDictionary.Add(ListPropertyXName, typeof(ListPropertyDefinition));
            localElementDictionary.Add(LookupColumnXName, typeof(LookupColumnDefinition));
            localElementDictionary.Add(MapToAllXName, typeof(CamlViewElement));
            localElementDictionary.Add(MapToIconXName, typeof(CamlViewElement));
            localElementDictionary.Add(PageUrlXName, typeof(HtmlRenderingElement));
            localElementDictionary.Add(PropertyXName, typeof(FieldPropertyDefinition));
            localElementDictionary.Add(ScriptQuoteXName, typeof(ScriptQuoteDefinition));
            localElementDictionary.Add(SelectionOptionsXName, typeof(SelectOptionsDefinition));
            localElementDictionary.Add(ServerPropertyXName, typeof(ServerPropertyDefinition));
            localElementDictionary.Add(SetVarXName, typeof(SetVarDefinition));
            localElementDictionary.Add(SwitchXName, typeof(SwitchDefinition));
            localElementDictionary.Add(ThreadStampXName, typeof(ThreadStampDefinition));
            localElementDictionary.Add(URLXName, typeof(URLDefinition));
            localElementDictionary.Add(UrlDirNameXName, typeof(XTypedElement));
            localElementDictionary.Add(UrlBaseNameXName, typeof(UrlBaseNameDefinition));
            localElementDictionary.Add(MeetingPropertyXName, typeof(MeetingPropertyDefinition));
            localElementDictionary.Add(ProjectPropertyXName, typeof(ProjectPropertyDefinition));
            localElementDictionary.Add(UserIDXName, typeof(UserIDDefinition));
            localElementDictionary.Add(FieldSortParamsXName, typeof(HtmlRenderingElement));
            localElementDictionary.Add(WebQueryInfoXName, typeof(EmptyElement));
            localElementDictionary.Add(IdentityXName, typeof(EmptyElement));
            localElementDictionary.Add(IfHasRightsXName, typeof(IfHasRightsDefinition));
            localElementDictionary.Add(MapToControlXName, typeof(CamlViewElement));
            localElementDictionary.Add(ForEachXName, typeof(ForEachElement));
            localElementDictionary.Add(ContentTypesXName, typeof(CamlViewElement));
            localElementDictionary.Add(MapToContentTypeXName, typeof(CamlViewElement));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class GetVarDefinition : global::Microsoft.Schemas.SharePoint.HtmlRenderingElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GetVarDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator GetVarDefinition(XElement xe) { return XTypedServices.ToXTypedElement<GetVarDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public GetVarDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GetVarDefinition>(this);
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Expr? | Case* | Default*)*)
    /// </para>
    /// </summary>
    public partial class SwitchDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExprXName = System.Xml.Linq.XName.Get("Expr", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ExprDefinition> ExprField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CaseXName = System.Xml.Linq.XName.Get("Case", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CaseDefinition> CaseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DefaultXName = System.Xml.Linq.XName.Get("Default", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DefaultDefinition> DefaultField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StripWSXName = System.Xml.Linq.XName.Get("StripWS", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SwitchDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SwitchDefinition(XElement xe) { return XTypedServices.ToXTypedElement<SwitchDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SwitchDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(ExprXName), new NamedContentModelEntity(CaseXName), new NamedContentModelEntity(DefaultXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Expr? | Case* | Default*)*)
        /// </para>
        /// </summary>
        public SwitchDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Expr? | Case* | Default*)*)
        /// </para>
        /// </summary>
        public virtual IList<ExprDefinition> Expr {
            get {
                if ((this.ExprField == null)) {
                    this.ExprField = new XTypedList<ExprDefinition>(this, LinqToXsdTypeManager.Instance, ExprXName);
                }
                return this.ExprField;
            }
            set {
                if ((value == null)) {
                    this.ExprField = null;
                }
                else {
                    if ((this.ExprField == null)) {
                        this.ExprField = XTypedList<ExprDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, ExprXName);
                    }
                    else {
                        XTypedServices.SetList<ExprDefinition>(this.ExprField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Expr? | Case* | Default*)*)
        /// </para>
        /// </summary>
        public virtual IList<CaseDefinition> Case {
            get {
                if ((this.CaseField == null)) {
                    this.CaseField = new XTypedList<CaseDefinition>(this, LinqToXsdTypeManager.Instance, CaseXName);
                }
                return this.CaseField;
            }
            set {
                if ((value == null)) {
                    this.CaseField = null;
                }
                else {
                    if ((this.CaseField == null)) {
                        this.CaseField = XTypedList<CaseDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, CaseXName);
                    }
                    else {
                        XTypedServices.SetList<CaseDefinition>(this.CaseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Expr? | Case* | Default*)*)
        /// </para>
        /// </summary>
        public virtual IList<DefaultDefinition> Default {
            get {
                if ((this.DefaultField == null)) {
                    this.DefaultField = new XTypedList<DefaultDefinition>(this, LinqToXsdTypeManager.Instance, DefaultXName);
                }
                return this.DefaultField;
            }
            set {
                if ((value == null)) {
                    this.DefaultField = null;
                }
                else {
                    if ((this.DefaultField == null)) {
                        this.DefaultField = XTypedList<DefaultDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, DefaultXName);
                    }
                    else {
                        XTypedServices.SetList<DefaultDefinition>(this.DefaultField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.TrueFalseMixed? StripWS {
            get {
                XAttribute x = this.Attribute(StripWSXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.TrueFalseMixed)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.TrueFalseMixed), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(StripWSXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SwitchDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ExprXName, typeof(ExprDefinition));
            localElementDictionary.Add(CaseXName, typeof(CaseDefinition));
            localElementDictionary.Add(DefaultXName, typeof(DefaultDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (any)
    /// </para>
    /// </summary>
    public partial class ExprDefinition : XTypedElement, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ExprDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static FSM validationStates;
        
		public static explicit operator ExprDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ExprDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ExprDefinition() {
            InitFSM();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public ExprDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public virtual IEnumerable<XElement> Any {
            get {
                return this.GetWildCards(WildCard.DefaultWildCard);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ExprDefinition>(this);
        }
        
        FSM IXMetaData.GetValidationStates() {
            return validationStates;
        }
        
        private static void InitFSM() {
            Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
            transitions.Add(1, new Transitions(new SingleTransition(new WildCard("##any", ""), 1)));
            validationStates = new FSM(1, new Set<int>(1), transitions);
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
    /// </para>
    /// </summary>
    public partial class CaseDefinition : global::Microsoft.Schemas.SharePoint.CamlViewElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ValueXName = System.Xml.Linq.XName.Get("Value", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CaseDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CaseDefinition(XElement xe) { return XTypedServices.ToXTypedElement<CaseDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CaseDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(ColumnXName), new NamedContentModelEntity(Column2XName), new NamedContentModelEntity(CounterXName), new NamedContentModelEntity(CurrentRightsXName), new NamedContentModelEntity(FieldXName), new NamedContentModelEntity(FieldPrefixXName), new NamedContentModelEntity(FieldPropertyXName), new NamedContentModelEntity(FieldsXName), new NamedContentModelEntity(FieldSwitchXName), new NamedContentModelEntity(FilterLinkXName), new NamedContentModelEntity(GetFileExtensionXName), new NamedContentModelEntity(GetVarXName), new NamedContentModelEntity(HTMLXName), new NamedContentModelEntity(HttpHostXName), new NamedContentModelEntity(HttpPathXName), new NamedContentModelEntity(HttpVDirXName), new NamedContentModelEntity(IDXName), new NamedContentModelEntity(IfEqualXName), new NamedContentModelEntity(IfNegXName), new NamedContentModelEntity(IfNewXName), new NamedContentModelEntity(IfSubStringXName), new NamedContentModelEntity(LengthXName), new NamedContentModelEntity(LimitXName), new NamedContentModelEntity(ListXName), new NamedContentModelEntity(ListUrlXName), new NamedContentModelEntity(ListUrlDirXName), new NamedContentModelEntity(ListPropertyXName), new NamedContentModelEntity(LookupColumnXName), new NamedContentModelEntity(MapToAllXName), new NamedContentModelEntity(MapToIconXName), new NamedContentModelEntity(PageUrlXName), new NamedContentModelEntity(PropertyXName), new NamedContentModelEntity(ScriptQuoteXName), new NamedContentModelEntity(SelectionOptionsXName), new NamedContentModelEntity(ServerPropertyXName), new NamedContentModelEntity(SetVarXName), new NamedContentModelEntity(SwitchXName), new NamedContentModelEntity(ThreadStampXName), new NamedContentModelEntity(URLXName), new NamedContentModelEntity(UrlDirNameXName), new NamedContentModelEntity(UrlBaseNameXName), new NamedContentModelEntity(MeetingPropertyXName), new NamedContentModelEntity(ProjectPropertyXName), new NamedContentModelEntity(UserIDXName), new NamedContentModelEntity(FieldSortParamsXName), new NamedContentModelEntity(WebQueryInfoXName), new NamedContentModelEntity(IdentityXName), new NamedContentModelEntity(IfHasRightsXName), new NamedContentModelEntity(MapToControlXName), new NamedContentModelEntity(ForEachXName), new NamedContentModelEntity(ContentTypesXName), new NamedContentModelEntity(MapToContentTypeXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public CaseDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Value {
            get {
                XAttribute x = this.Attribute(ValueXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CaseDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ColumnXName, typeof(QueryColumnDefinition));
            localElementDictionary.Add(Column2XName, typeof(QueryColumnDefinition));
            localElementDictionary.Add(CounterXName, typeof(CounterDefinition));
            localElementDictionary.Add(CurrentRightsXName, typeof(EmptyElement));
            localElementDictionary.Add(FieldXName, typeof(FieldViewReferenceDefinition));
            localElementDictionary.Add(FieldPrefixXName, typeof(EmptyElement));
            localElementDictionary.Add(FieldPropertyXName, typeof(FieldPropertyDefinition));
            localElementDictionary.Add(FieldsXName, typeof(CamlViewElement));
            localElementDictionary.Add(FieldSwitchXName, typeof(SwitchDefinition));
            localElementDictionary.Add(FilterLinkXName, typeof(FilterLinkDefinition));
            localElementDictionary.Add(GetFileExtensionXName, typeof(XTypedElement));
            localElementDictionary.Add(GetVarXName, typeof(GetVarDefinition));
            localElementDictionary.Add(HTMLXName, typeof(HtmlContentDefinition));
            localElementDictionary.Add(HttpHostXName, typeof(HttpHostDefinition));
            localElementDictionary.Add(HttpPathXName, typeof(HttpPathDefinition));
            localElementDictionary.Add(HttpVDirXName, typeof(HttpVDirDefinition));
            localElementDictionary.Add(IDXName, typeof(EmptyElement));
            localElementDictionary.Add(IfEqualXName, typeof(IfEqualDefinition));
            localElementDictionary.Add(IfNegXName, typeof(IfNegDefinition));
            localElementDictionary.Add(IfNewXName, typeof(IfNewDefinition));
            localElementDictionary.Add(IfSubStringXName, typeof(IfSubStringDefinition));
            localElementDictionary.Add(LengthXName, typeof(XTypedElement));
            localElementDictionary.Add(LimitXName, typeof(LimitDefinition));
            localElementDictionary.Add(ListXName, typeof(EmptyElement));
            localElementDictionary.Add(ListUrlXName, typeof(EmptyElement));
            localElementDictionary.Add(ListUrlDirXName, typeof(HttpPathDefinition));
            localElementDictionary.Add(ListPropertyXName, typeof(ListPropertyDefinition));
            localElementDictionary.Add(LookupColumnXName, typeof(LookupColumnDefinition));
            localElementDictionary.Add(MapToAllXName, typeof(CamlViewElement));
            localElementDictionary.Add(MapToIconXName, typeof(CamlViewElement));
            localElementDictionary.Add(PageUrlXName, typeof(HtmlRenderingElement));
            localElementDictionary.Add(PropertyXName, typeof(FieldPropertyDefinition));
            localElementDictionary.Add(ScriptQuoteXName, typeof(ScriptQuoteDefinition));
            localElementDictionary.Add(SelectionOptionsXName, typeof(SelectOptionsDefinition));
            localElementDictionary.Add(ServerPropertyXName, typeof(ServerPropertyDefinition));
            localElementDictionary.Add(SetVarXName, typeof(SetVarDefinition));
            localElementDictionary.Add(SwitchXName, typeof(SwitchDefinition));
            localElementDictionary.Add(ThreadStampXName, typeof(ThreadStampDefinition));
            localElementDictionary.Add(URLXName, typeof(URLDefinition));
            localElementDictionary.Add(UrlDirNameXName, typeof(XTypedElement));
            localElementDictionary.Add(UrlBaseNameXName, typeof(UrlBaseNameDefinition));
            localElementDictionary.Add(MeetingPropertyXName, typeof(MeetingPropertyDefinition));
            localElementDictionary.Add(ProjectPropertyXName, typeof(ProjectPropertyDefinition));
            localElementDictionary.Add(UserIDXName, typeof(UserIDDefinition));
            localElementDictionary.Add(FieldSortParamsXName, typeof(HtmlRenderingElement));
            localElementDictionary.Add(WebQueryInfoXName, typeof(EmptyElement));
            localElementDictionary.Add(IdentityXName, typeof(EmptyElement));
            localElementDictionary.Add(IfHasRightsXName, typeof(IfHasRightsDefinition));
            localElementDictionary.Add(MapToControlXName, typeof(CamlViewElement));
            localElementDictionary.Add(ForEachXName, typeof(ForEachElement));
            localElementDictionary.Add(ContentTypesXName, typeof(CamlViewElement));
            localElementDictionary.Add(MapToContentTypeXName, typeof(CamlViewElement));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
    /// </para>
    /// </summary>
    public partial class DefaultDefinition : global::Microsoft.Schemas.SharePoint.CamlViewElement, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DefaultDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DefaultDefinition(XElement xe) { return XTypedServices.ToXTypedElement<DefaultDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DefaultDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(ColumnXName), new NamedContentModelEntity(Column2XName), new NamedContentModelEntity(CounterXName), new NamedContentModelEntity(CurrentRightsXName), new NamedContentModelEntity(FieldXName), new NamedContentModelEntity(FieldPrefixXName), new NamedContentModelEntity(FieldPropertyXName), new NamedContentModelEntity(FieldsXName), new NamedContentModelEntity(FieldSwitchXName), new NamedContentModelEntity(FilterLinkXName), new NamedContentModelEntity(GetFileExtensionXName), new NamedContentModelEntity(GetVarXName), new NamedContentModelEntity(HTMLXName), new NamedContentModelEntity(HttpHostXName), new NamedContentModelEntity(HttpPathXName), new NamedContentModelEntity(HttpVDirXName), new NamedContentModelEntity(IDXName), new NamedContentModelEntity(IfEqualXName), new NamedContentModelEntity(IfNegXName), new NamedContentModelEntity(IfNewXName), new NamedContentModelEntity(IfSubStringXName), new NamedContentModelEntity(LengthXName), new NamedContentModelEntity(LimitXName), new NamedContentModelEntity(ListXName), new NamedContentModelEntity(ListUrlXName), new NamedContentModelEntity(ListUrlDirXName), new NamedContentModelEntity(ListPropertyXName), new NamedContentModelEntity(LookupColumnXName), new NamedContentModelEntity(MapToAllXName), new NamedContentModelEntity(MapToIconXName), new NamedContentModelEntity(PageUrlXName), new NamedContentModelEntity(PropertyXName), new NamedContentModelEntity(ScriptQuoteXName), new NamedContentModelEntity(SelectionOptionsXName), new NamedContentModelEntity(ServerPropertyXName), new NamedContentModelEntity(SetVarXName), new NamedContentModelEntity(SwitchXName), new NamedContentModelEntity(ThreadStampXName), new NamedContentModelEntity(URLXName), new NamedContentModelEntity(UrlDirNameXName), new NamedContentModelEntity(UrlBaseNameXName), new NamedContentModelEntity(MeetingPropertyXName), new NamedContentModelEntity(ProjectPropertyXName), new NamedContentModelEntity(UserIDXName), new NamedContentModelEntity(FieldSortParamsXName), new NamedContentModelEntity(WebQueryInfoXName), new NamedContentModelEntity(IdentityXName), new NamedContentModelEntity(IfHasRightsXName), new NamedContentModelEntity(MapToControlXName), new NamedContentModelEntity(ForEachXName), new NamedContentModelEntity(ContentTypesXName), new NamedContentModelEntity(MapToContentTypeXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public DefaultDefinition() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DefaultDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ColumnXName, typeof(QueryColumnDefinition));
            localElementDictionary.Add(Column2XName, typeof(QueryColumnDefinition));
            localElementDictionary.Add(CounterXName, typeof(CounterDefinition));
            localElementDictionary.Add(CurrentRightsXName, typeof(EmptyElement));
            localElementDictionary.Add(FieldXName, typeof(FieldViewReferenceDefinition));
            localElementDictionary.Add(FieldPrefixXName, typeof(EmptyElement));
            localElementDictionary.Add(FieldPropertyXName, typeof(FieldPropertyDefinition));
            localElementDictionary.Add(FieldsXName, typeof(CamlViewElement));
            localElementDictionary.Add(FieldSwitchXName, typeof(SwitchDefinition));
            localElementDictionary.Add(FilterLinkXName, typeof(FilterLinkDefinition));
            localElementDictionary.Add(GetFileExtensionXName, typeof(XTypedElement));
            localElementDictionary.Add(GetVarXName, typeof(GetVarDefinition));
            localElementDictionary.Add(HTMLXName, typeof(HtmlContentDefinition));
            localElementDictionary.Add(HttpHostXName, typeof(HttpHostDefinition));
            localElementDictionary.Add(HttpPathXName, typeof(HttpPathDefinition));
            localElementDictionary.Add(HttpVDirXName, typeof(HttpVDirDefinition));
            localElementDictionary.Add(IDXName, typeof(EmptyElement));
            localElementDictionary.Add(IfEqualXName, typeof(IfEqualDefinition));
            localElementDictionary.Add(IfNegXName, typeof(IfNegDefinition));
            localElementDictionary.Add(IfNewXName, typeof(IfNewDefinition));
            localElementDictionary.Add(IfSubStringXName, typeof(IfSubStringDefinition));
            localElementDictionary.Add(LengthXName, typeof(XTypedElement));
            localElementDictionary.Add(LimitXName, typeof(LimitDefinition));
            localElementDictionary.Add(ListXName, typeof(EmptyElement));
            localElementDictionary.Add(ListUrlXName, typeof(EmptyElement));
            localElementDictionary.Add(ListUrlDirXName, typeof(HttpPathDefinition));
            localElementDictionary.Add(ListPropertyXName, typeof(ListPropertyDefinition));
            localElementDictionary.Add(LookupColumnXName, typeof(LookupColumnDefinition));
            localElementDictionary.Add(MapToAllXName, typeof(CamlViewElement));
            localElementDictionary.Add(MapToIconXName, typeof(CamlViewElement));
            localElementDictionary.Add(PageUrlXName, typeof(HtmlRenderingElement));
            localElementDictionary.Add(PropertyXName, typeof(FieldPropertyDefinition));
            localElementDictionary.Add(ScriptQuoteXName, typeof(ScriptQuoteDefinition));
            localElementDictionary.Add(SelectionOptionsXName, typeof(SelectOptionsDefinition));
            localElementDictionary.Add(ServerPropertyXName, typeof(ServerPropertyDefinition));
            localElementDictionary.Add(SetVarXName, typeof(SetVarDefinition));
            localElementDictionary.Add(SwitchXName, typeof(SwitchDefinition));
            localElementDictionary.Add(ThreadStampXName, typeof(ThreadStampDefinition));
            localElementDictionary.Add(URLXName, typeof(URLDefinition));
            localElementDictionary.Add(UrlDirNameXName, typeof(XTypedElement));
            localElementDictionary.Add(UrlBaseNameXName, typeof(UrlBaseNameDefinition));
            localElementDictionary.Add(MeetingPropertyXName, typeof(MeetingPropertyDefinition));
            localElementDictionary.Add(ProjectPropertyXName, typeof(ProjectPropertyDefinition));
            localElementDictionary.Add(UserIDXName, typeof(UserIDDefinition));
            localElementDictionary.Add(FieldSortParamsXName, typeof(HtmlRenderingElement));
            localElementDictionary.Add(WebQueryInfoXName, typeof(EmptyElement));
            localElementDictionary.Add(IdentityXName, typeof(EmptyElement));
            localElementDictionary.Add(IfHasRightsXName, typeof(IfHasRightsDefinition));
            localElementDictionary.Add(MapToControlXName, typeof(CamlViewElement));
            localElementDictionary.Add(ForEachXName, typeof(ForEachElement));
            localElementDictionary.Add(ContentTypesXName, typeof(CamlViewElement));
            localElementDictionary.Add(MapToContentTypeXName, typeof(CamlViewElement));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class ListPropertyDefinition : global::Microsoft.Schemas.SharePoint.HtmlRenderingElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SelectXName = System.Xml.Linq.XName.Get("Select", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ForInstanceXName = System.Xml.Linq.XName.Get("ForInstance", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ListPropertyDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator ListPropertyDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ListPropertyDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ListPropertyDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Select {
            get {
                XAttribute x = this.Attribute(SelectXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SelectXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ForInstance {
            get {
                XAttribute x = this.Attribute(ForInstanceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ForInstanceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ListPropertyDefinition>(this);
        }
    }
    
    public partial class FieldPropertyDefinition : global::Microsoft.Schemas.SharePoint.HtmlRenderingElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SelectXName = System.Xml.Linq.XName.Get("Select", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal new static readonly System.Xml.Linq.XName HTMLEncodeXName = System.Xml.Linq.XName.Get("HTMLEncode", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FieldPropertyDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator FieldPropertyDefinition(XElement xe) { return XTypedServices.ToXTypedElement<FieldPropertyDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public FieldPropertyDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Select {
            get {
                XAttribute x = this.Attribute(SelectXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SelectXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public new virtual string HTMLEncode {
            get {
                XAttribute x = this.Attribute(HTMLEncodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(HTMLEncodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FieldPropertyDefinition>(this);
        }
    }
    
    public partial class FieldViewReferenceDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AutoHyperLinkXName = System.Xml.Linq.XName.Get("AutoHyperLink", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AutoHyperLinkNoEncodingXName = System.Xml.Linq.XName.Get("AutoHyperLinkNoEncoding", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AutoNewLineXName = System.Xml.Linq.XName.Get("AutoNewLine", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StripWSXName = System.Xml.Linq.XName.Get("StripWS", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName URLEncodeXName = System.Xml.Linq.XName.Get("URLEncode", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName URLEncodeAsURLXName = System.Xml.Linq.XName.Get("URLEncodeAsURL", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HTMLEncodeXName = System.Xml.Linq.XName.Get("HTMLEncode", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FieldViewReferenceDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator FieldViewReferenceDefinition(XElement xe) { return XTypedServices.ToXTypedElement<FieldViewReferenceDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public FieldViewReferenceDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string AutoHyperLink {
            get {
                XAttribute x = this.Attribute(AutoHyperLinkXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AutoHyperLinkXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string AutoHyperLinkNoEncoding {
            get {
                XAttribute x = this.Attribute(AutoHyperLinkNoEncodingXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AutoHyperLinkNoEncodingXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string AutoNewLine {
            get {
                XAttribute x = this.Attribute(AutoNewLineXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AutoNewLineXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string StripWS {
            get {
                XAttribute x = this.Attribute(StripWSXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(StripWSXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string URLEncode {
            get {
                XAttribute x = this.Attribute(URLEncodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(URLEncodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string URLEncodeAsURL {
            get {
                XAttribute x = this.Attribute(URLEncodeAsURLXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(URLEncodeAsURLXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string HTMLEncode {
            get {
                XAttribute x = this.Attribute(HTMLEncodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(HTMLEncodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FieldViewReferenceDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class EmptyElement : XTypedElement, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EmptyElement", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator EmptyElement(XElement xe) { return XTypedServices.ToXTypedElement<EmptyElement>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public EmptyElement() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<EmptyElement>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
    /// </para>
    /// </summary>
    public partial class ScriptQuoteDefinition : global::Microsoft.Schemas.SharePoint.CamlViewElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NotAddingQuoteXName = System.Xml.Linq.XName.Get("NotAddingQuote", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ScriptQuoteDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ScriptQuoteDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ScriptQuoteDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ScriptQuoteDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(ColumnXName), new NamedContentModelEntity(Column2XName), new NamedContentModelEntity(CounterXName), new NamedContentModelEntity(CurrentRightsXName), new NamedContentModelEntity(FieldXName), new NamedContentModelEntity(FieldPrefixXName), new NamedContentModelEntity(FieldPropertyXName), new NamedContentModelEntity(FieldsXName), new NamedContentModelEntity(FieldSwitchXName), new NamedContentModelEntity(FilterLinkXName), new NamedContentModelEntity(GetFileExtensionXName), new NamedContentModelEntity(GetVarXName), new NamedContentModelEntity(HTMLXName), new NamedContentModelEntity(HttpHostXName), new NamedContentModelEntity(HttpPathXName), new NamedContentModelEntity(HttpVDirXName), new NamedContentModelEntity(IDXName), new NamedContentModelEntity(IfEqualXName), new NamedContentModelEntity(IfNegXName), new NamedContentModelEntity(IfNewXName), new NamedContentModelEntity(IfSubStringXName), new NamedContentModelEntity(LengthXName), new NamedContentModelEntity(LimitXName), new NamedContentModelEntity(ListXName), new NamedContentModelEntity(ListUrlXName), new NamedContentModelEntity(ListUrlDirXName), new NamedContentModelEntity(ListPropertyXName), new NamedContentModelEntity(LookupColumnXName), new NamedContentModelEntity(MapToAllXName), new NamedContentModelEntity(MapToIconXName), new NamedContentModelEntity(PageUrlXName), new NamedContentModelEntity(PropertyXName), new NamedContentModelEntity(ScriptQuoteXName), new NamedContentModelEntity(SelectionOptionsXName), new NamedContentModelEntity(ServerPropertyXName), new NamedContentModelEntity(SetVarXName), new NamedContentModelEntity(SwitchXName), new NamedContentModelEntity(ThreadStampXName), new NamedContentModelEntity(URLXName), new NamedContentModelEntity(UrlDirNameXName), new NamedContentModelEntity(UrlBaseNameXName), new NamedContentModelEntity(MeetingPropertyXName), new NamedContentModelEntity(ProjectPropertyXName), new NamedContentModelEntity(UserIDXName), new NamedContentModelEntity(FieldSortParamsXName), new NamedContentModelEntity(WebQueryInfoXName), new NamedContentModelEntity(IdentityXName), new NamedContentModelEntity(IfHasRightsXName), new NamedContentModelEntity(MapToControlXName), new NamedContentModelEntity(ForEachXName), new NamedContentModelEntity(ContentTypesXName), new NamedContentModelEntity(MapToContentTypeXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public ScriptQuoteDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string NotAddingQuote {
            get {
                XAttribute x = this.Attribute(NotAddingQuoteXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NotAddingQuoteXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ScriptQuoteDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ColumnXName, typeof(QueryColumnDefinition));
            localElementDictionary.Add(Column2XName, typeof(QueryColumnDefinition));
            localElementDictionary.Add(CounterXName, typeof(CounterDefinition));
            localElementDictionary.Add(CurrentRightsXName, typeof(EmptyElement));
            localElementDictionary.Add(FieldXName, typeof(FieldViewReferenceDefinition));
            localElementDictionary.Add(FieldPrefixXName, typeof(EmptyElement));
            localElementDictionary.Add(FieldPropertyXName, typeof(FieldPropertyDefinition));
            localElementDictionary.Add(FieldsXName, typeof(CamlViewElement));
            localElementDictionary.Add(FieldSwitchXName, typeof(SwitchDefinition));
            localElementDictionary.Add(FilterLinkXName, typeof(FilterLinkDefinition));
            localElementDictionary.Add(GetFileExtensionXName, typeof(XTypedElement));
            localElementDictionary.Add(GetVarXName, typeof(GetVarDefinition));
            localElementDictionary.Add(HTMLXName, typeof(HtmlContentDefinition));
            localElementDictionary.Add(HttpHostXName, typeof(HttpHostDefinition));
            localElementDictionary.Add(HttpPathXName, typeof(HttpPathDefinition));
            localElementDictionary.Add(HttpVDirXName, typeof(HttpVDirDefinition));
            localElementDictionary.Add(IDXName, typeof(EmptyElement));
            localElementDictionary.Add(IfEqualXName, typeof(IfEqualDefinition));
            localElementDictionary.Add(IfNegXName, typeof(IfNegDefinition));
            localElementDictionary.Add(IfNewXName, typeof(IfNewDefinition));
            localElementDictionary.Add(IfSubStringXName, typeof(IfSubStringDefinition));
            localElementDictionary.Add(LengthXName, typeof(XTypedElement));
            localElementDictionary.Add(LimitXName, typeof(LimitDefinition));
            localElementDictionary.Add(ListXName, typeof(EmptyElement));
            localElementDictionary.Add(ListUrlXName, typeof(EmptyElement));
            localElementDictionary.Add(ListUrlDirXName, typeof(HttpPathDefinition));
            localElementDictionary.Add(ListPropertyXName, typeof(ListPropertyDefinition));
            localElementDictionary.Add(LookupColumnXName, typeof(LookupColumnDefinition));
            localElementDictionary.Add(MapToAllXName, typeof(CamlViewElement));
            localElementDictionary.Add(MapToIconXName, typeof(CamlViewElement));
            localElementDictionary.Add(PageUrlXName, typeof(HtmlRenderingElement));
            localElementDictionary.Add(PropertyXName, typeof(FieldPropertyDefinition));
            localElementDictionary.Add(ScriptQuoteXName, typeof(ScriptQuoteDefinition));
            localElementDictionary.Add(SelectionOptionsXName, typeof(SelectOptionsDefinition));
            localElementDictionary.Add(ServerPropertyXName, typeof(ServerPropertyDefinition));
            localElementDictionary.Add(SetVarXName, typeof(SetVarDefinition));
            localElementDictionary.Add(SwitchXName, typeof(SwitchDefinition));
            localElementDictionary.Add(ThreadStampXName, typeof(ThreadStampDefinition));
            localElementDictionary.Add(URLXName, typeof(URLDefinition));
            localElementDictionary.Add(UrlDirNameXName, typeof(XTypedElement));
            localElementDictionary.Add(UrlBaseNameXName, typeof(UrlBaseNameDefinition));
            localElementDictionary.Add(MeetingPropertyXName, typeof(MeetingPropertyDefinition));
            localElementDictionary.Add(ProjectPropertyXName, typeof(ProjectPropertyDefinition));
            localElementDictionary.Add(UserIDXName, typeof(UserIDDefinition));
            localElementDictionary.Add(FieldSortParamsXName, typeof(HtmlRenderingElement));
            localElementDictionary.Add(WebQueryInfoXName, typeof(EmptyElement));
            localElementDictionary.Add(IdentityXName, typeof(EmptyElement));
            localElementDictionary.Add(IfHasRightsXName, typeof(IfHasRightsDefinition));
            localElementDictionary.Add(MapToControlXName, typeof(CamlViewElement));
            localElementDictionary.Add(ForEachXName, typeof(ForEachElement));
            localElementDictionary.Add(ContentTypesXName, typeof(CamlViewElement));
            localElementDictionary.Add(MapToContentTypeXName, typeof(CamlViewElement));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class ThreadStampDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StripWSXName = System.Xml.Linq.XName.Get("StripWS", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ThreadStampDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator ThreadStampDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ThreadStampDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ThreadStampDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string StripWS {
            get {
                XAttribute x = this.Attribute(StripWSXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(StripWSXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ThreadStampDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class SelectOptionsDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LenXName = System.Xml.Linq.XName.Get("Len", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BlankPatternXName = System.Xml.Linq.XName.Get("BlankPattern", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MoreTextXName = System.Xml.Linq.XName.Get("MoreText", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SelectOptionsDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator SelectOptionsDefinition(XElement xe) { return XTypedServices.ToXTypedElement<SelectOptionsDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public SelectOptionsDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? Len {
            get {
                XAttribute x = this.Attribute(LenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(LenXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string BlankPattern {
            get {
                XAttribute x = this.Attribute(BlankPatternXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(BlankPatternXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string MoreText {
            get {
                XAttribute x = this.Attribute(MoreTextXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(MoreTextXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SelectOptionsDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum CounterType {
        
        View,
    }
    
    public sealed class CounterTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "View"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CounterTypeValidator() {
        }
    }
    
    public partial class CounterDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypeXName = System.Xml.Linq.XName.Get("Type", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CounterDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator CounterDefinition(XElement xe) { return XTypedServices.ToXTypedElement<CounterDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public CounterDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.CounterType? Type {
            get {
                XAttribute x = this.Attribute(TypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.CounterType)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.CounterType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(TypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CounterDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Expr1?, Expr2?, Then?, Else?)
    /// </para>
    /// </summary>
    public partial class IfEqualDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Expr1XName = System.Xml.Linq.XName.Get("Expr1", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Expr2XName = System.Xml.Linq.XName.Get("Expr2", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ThenXName = System.Xml.Linq.XName.Get("Then", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ElseXName = System.Xml.Linq.XName.Get("Else", "http://schemas.microsoft.com/sharepoint/");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("IfEqualDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator IfEqualDefinition(XElement xe) { return XTypedServices.ToXTypedElement<IfEqualDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static IfEqualDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Expr1?, Expr2?, Then?, Else?)
        /// </para>
        /// </summary>
        public IfEqualDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Expr1?, Expr2?, Then?, Else?)
        /// </para>
        /// </summary>
        public virtual CamlQueryRoot Expr1 {
            get {
                XElement x = this.GetElement(Expr1XName);
                return ((CamlQueryRoot)(x));
            }
            set {
                this.SetElement(Expr1XName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Expr1?, Expr2?, Then?, Else?)
        /// </para>
        /// </summary>
        public virtual CamlQueryRoot Expr2 {
            get {
                XElement x = this.GetElement(Expr2XName);
                return ((CamlQueryRoot)(x));
            }
            set {
                this.SetElement(Expr2XName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Expr1?, Expr2?, Then?, Else?)
        /// </para>
        /// </summary>
        public virtual CamlViewRoot Then {
            get {
                XElement x = this.GetElement(ThenXName);
                return ((CamlViewRoot)(x));
            }
            set {
                this.SetElement(ThenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Expr1?, Expr2?, Then?, Else?)
        /// </para>
        /// </summary>
        public virtual CamlViewRoot Else {
            get {
                XElement x = this.GetElement(ElseXName);
                return ((CamlViewRoot)(x));
            }
            set {
                this.SetElement(ElseXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<IfEqualDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(Expr1XName, typeof(CamlQueryRoot));
            localElementDictionary.Add(Expr2XName, typeof(CamlQueryRoot));
            localElementDictionary.Add(ThenXName, typeof(CamlViewRoot));
            localElementDictionary.Add(ElseXName, typeof(CamlViewRoot));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Expr1?, Expr2?)
    /// </para>
    /// </summary>
    public partial class IfNegDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Expr1XName = System.Xml.Linq.XName.Get("Expr1", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Expr2XName = System.Xml.Linq.XName.Get("Expr2", "http://schemas.microsoft.com/sharepoint/");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("IfNegDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator IfNegDefinition(XElement xe) { return XTypedServices.ToXTypedElement<IfNegDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static IfNegDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Expr1?, Expr2?)
        /// </para>
        /// </summary>
        public IfNegDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Expr1?, Expr2?)
        /// </para>
        /// </summary>
        public virtual CamlQueryRoot Expr1 {
            get {
                XElement x = this.GetElement(Expr1XName);
                return ((CamlQueryRoot)(x));
            }
            set {
                this.SetElement(Expr1XName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Expr1?, Expr2?)
        /// </para>
        /// </summary>
        public virtual CamlQueryRoot Expr2 {
            get {
                XElement x = this.GetElement(Expr2XName);
                return ((CamlQueryRoot)(x));
            }
            set {
                this.SetElement(Expr2XName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<IfNegDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(Expr1XName, typeof(CamlQueryRoot));
            localElementDictionary.Add(Expr2XName, typeof(CamlQueryRoot));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Expr1?, Expr2?, Then?, Else?)
    /// </para>
    /// </summary>
    public partial class IfSubStringDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Expr1XName = System.Xml.Linq.XName.Get("Expr1", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Expr2XName = System.Xml.Linq.XName.Get("Expr2", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ThenXName = System.Xml.Linq.XName.Get("Then", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ElseXName = System.Xml.Linq.XName.Get("Else", "http://schemas.microsoft.com/sharepoint/");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("IfSubStringDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator IfSubStringDefinition(XElement xe) { return XTypedServices.ToXTypedElement<IfSubStringDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static IfSubStringDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Expr1?, Expr2?, Then?, Else?)
        /// </para>
        /// </summary>
        public IfSubStringDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Expr1?, Expr2?, Then?, Else?)
        /// </para>
        /// </summary>
        public virtual CamlQueryRoot Expr1 {
            get {
                XElement x = this.GetElement(Expr1XName);
                return ((CamlQueryRoot)(x));
            }
            set {
                this.SetElement(Expr1XName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Expr1?, Expr2?, Then?, Else?)
        /// </para>
        /// </summary>
        public virtual CamlQueryRoot Expr2 {
            get {
                XElement x = this.GetElement(Expr2XName);
                return ((CamlQueryRoot)(x));
            }
            set {
                this.SetElement(Expr2XName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Expr1?, Expr2?, Then?, Else?)
        /// </para>
        /// </summary>
        public virtual CamlViewRoot Then {
            get {
                XElement x = this.GetElement(ThenXName);
                return ((CamlViewRoot)(x));
            }
            set {
                this.SetElement(ThenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Expr1?, Expr2?, Then?, Else?)
        /// </para>
        /// </summary>
        public virtual CamlViewRoot Else {
            get {
                XElement x = this.GetElement(ElseXName);
                return ((CamlViewRoot)(x));
            }
            set {
                this.SetElement(ElseXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<IfSubStringDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(Expr1XName, typeof(CamlQueryRoot));
            localElementDictionary.Add(Expr2XName, typeof(CamlQueryRoot));
            localElementDictionary.Add(ThenXName, typeof(CamlViewRoot));
            localElementDictionary.Add(ElseXName, typeof(CamlViewRoot));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Text?, More?, Column?)
    /// </para>
    /// </summary>
    public partial class LimitDefinition : global::Microsoft.Schemas.SharePoint.HtmlRenderingElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TextXName = System.Xml.Linq.XName.Get("Text", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MoreXName = System.Xml.Linq.XName.Get("More", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ColumnXName = System.Xml.Linq.XName.Get("Column", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IgnoreTagsXName = System.Xml.Linq.XName.Get("IgnoreTags", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LenXName = System.Xml.Linq.XName.Get("Len", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MoreTextXName = System.Xml.Linq.XName.Get("MoreText", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("LimitDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator LimitDefinition(XElement xe) { return XTypedServices.ToXTypedElement<LimitDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static LimitDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Text?, More?, Column?)
        /// </para>
        /// </summary>
        public LimitDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Text?, More?, Column?)
        /// </para>
        /// </summary>
        public virtual XTypedElement Text {
            get {
                XElement x = this.GetElement(TextXName);
                return ((XTypedElement)(x));
            }
            set {
                this.SetElement(TextXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Text?, More?, Column?)
        /// </para>
        /// </summary>
        public virtual XTypedElement More {
            get {
                XElement x = this.GetElement(MoreXName);
                return ((XTypedElement)(x));
            }
            set {
                this.SetElement(MoreXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Text?, More?, Column?)
        /// </para>
        /// </summary>
        public virtual ColumnDefinition Column {
            get {
                XElement x = this.GetElement(ColumnXName);
                return ((ColumnDefinition)(x));
            }
            set {
                this.SetElement(ColumnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string IgnoreTags {
            get {
                XAttribute x = this.Attribute(IgnoreTagsXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IgnoreTagsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? Len {
            get {
                XAttribute x = this.Attribute(LenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(LenXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string MoreText {
            get {
                XAttribute x = this.Attribute(MoreTextXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(MoreTextXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LimitDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TextXName, typeof(XTypedElement));
            localElementDictionary.Add(MoreXName, typeof(XTypedElement));
            localElementDictionary.Add(ColumnXName, typeof(ColumnDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ColumnDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ColumnDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator ColumnDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ColumnDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ColumnDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ColumnDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class URLDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CmdXName = System.Xml.Linq.XName.Get("Cmd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NoIDXName = System.Xml.Linq.XName.Get("NoID", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("URLDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator URLDefinition(XElement xe) { return XTypedServices.ToXTypedElement<URLDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public URLDefinition() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Cmd {
            get {
                XAttribute x = this.Attribute(CmdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CmdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string NoID {
            get {
                XAttribute x = this.Attribute(NoIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NoIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<URLDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Field? | LookupColumn?)*)
    /// </para>
    /// </summary>
    public partial class UrlBaseNameDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldXName = System.Xml.Linq.XName.Get("Field", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<XTypedElement> FieldField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LookupColumnXName = System.Xml.Linq.XName.Get("LookupColumn", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LookupColumnDefinition> LookupColumnField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HTMLEncodeXName = System.Xml.Linq.XName.Get("HTMLEncode", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("UrlBaseNameDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator UrlBaseNameDefinition(XElement xe) { return XTypedServices.ToXTypedElement<UrlBaseNameDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static UrlBaseNameDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(FieldXName), new NamedContentModelEntity(LookupColumnXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Field? | LookupColumn?)*)
        /// </para>
        /// </summary>
        public UrlBaseNameDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Field? | LookupColumn?)*)
        /// </para>
        /// </summary>
        public virtual IList<XTypedElement> Field {
            get {
                if ((this.FieldField == null)) {
                    this.FieldField = new XTypedList<XTypedElement>(this, LinqToXsdTypeManager.Instance, FieldXName);
                }
                return this.FieldField;
            }
            set {
                if ((value == null)) {
                    this.FieldField = null;
                }
                else {
                    if ((this.FieldField == null)) {
                        this.FieldField = XTypedList<XTypedElement>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldXName);
                    }
                    else {
                        XTypedServices.SetList<XTypedElement>(this.FieldField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Field? | LookupColumn?)*)
        /// </para>
        /// </summary>
        public virtual IList<LookupColumnDefinition> LookupColumn {
            get {
                if ((this.LookupColumnField == null)) {
                    this.LookupColumnField = new XTypedList<LookupColumnDefinition>(this, LinqToXsdTypeManager.Instance, LookupColumnXName);
                }
                return this.LookupColumnField;
            }
            set {
                if ((value == null)) {
                    this.LookupColumnField = null;
                }
                else {
                    if ((this.LookupColumnField == null)) {
                        this.LookupColumnField = XTypedList<LookupColumnDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, LookupColumnXName);
                    }
                    else {
                        XTypedServices.SetList<LookupColumnDefinition>(this.LookupColumnField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string HTMLEncode {
            get {
                XAttribute x = this.Attribute(HTMLEncodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(HTMLEncodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UrlBaseNameDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FieldXName, typeof(XTypedElement));
            localElementDictionary.Add(LookupColumnXName, typeof(LookupColumnDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class HttpHostDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName URLEncodeAsURLXName = System.Xml.Linq.XName.Get("URLEncodeAsURL", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("HttpHostDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator HttpHostDefinition(XElement xe) { return XTypedServices.ToXTypedElement<HttpHostDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public HttpHostDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string URLEncodeAsURL {
            get {
                XAttribute x = this.Attribute(URLEncodeAsURLXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(URLEncodeAsURLXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HttpHostDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Column*)
    /// </para>
    /// </summary>
    public partial class ServerPropertyDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ColumnXName = System.Xml.Linq.XName.Get("Column", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<QueryColumnDefinition> ColumnField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SelectXName = System.Xml.Linq.XName.Get("Select", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ServerPropertyDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ServerPropertyDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ServerPropertyDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ServerPropertyDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ColumnXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Column*)
        /// </para>
        /// </summary>
        public ServerPropertyDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Column*)
        /// </para>
        /// </summary>
        public virtual IList<QueryColumnDefinition> Column {
            get {
                if ((this.ColumnField == null)) {
                    this.ColumnField = new XTypedList<QueryColumnDefinition>(this, LinqToXsdTypeManager.Instance, ColumnXName);
                }
                return this.ColumnField;
            }
            set {
                if ((value == null)) {
                    this.ColumnField = null;
                }
                else {
                    if ((this.ColumnField == null)) {
                        this.ColumnField = XTypedList<QueryColumnDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, ColumnXName);
                    }
                    else {
                        XTypedServices.SetList<QueryColumnDefinition>(this.ColumnField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Select {
            get {
                XAttribute x = this.Attribute(SelectXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SelectXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ServerPropertyDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ColumnXName, typeof(QueryColumnDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Filter*)
    /// </para>
    /// </summary>
    public partial class CamlBdcMethod : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FilterXName = System.Xml.Linq.XName.Get("Filter", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CamlBdcFilter> FilterField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CamlBdcMethod", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CamlBdcMethod(XElement xe) { return XTypedServices.ToXTypedElement<CamlBdcMethod>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CamlBdcMethod() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FilterXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Filter*)
        /// </para>
        /// </summary>
        public CamlBdcMethod() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Filter*)
        /// </para>
        /// </summary>
        public virtual IList<CamlBdcFilter> Filter {
            get {
                if ((this.FilterField == null)) {
                    this.FilterField = new XTypedList<CamlBdcFilter>(this, LinqToXsdTypeManager.Instance, FilterXName);
                }
                return this.FilterField;
            }
            set {
                if ((value == null)) {
                    this.FilterField = null;
                }
                else {
                    if ((this.FilterField == null)) {
                        this.FilterField = XTypedList<CamlBdcFilter>.Initialize(this, LinqToXsdTypeManager.Instance, value, FilterXName);
                    }
                    else {
                        XTypedServices.SetList<CamlBdcFilter>(this.FilterField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CamlBdcMethod>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FilterXName, typeof(CamlBdcFilter));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class CamlBdcFilter : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypeXName = System.Xml.Linq.XName.Get("Type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ValueXName = System.Xml.Linq.XName.Get("Value", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CamlBdcFilter", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator CamlBdcFilter(XElement xe) { return XTypedServices.ToXTypedElement<CamlBdcFilter>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public CamlBdcFilter() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Type {
            get {
                XAttribute x = this.Attribute(TypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Value {
            get {
                XAttribute x = this.Attribute(ValueXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CamlBdcFilter>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class FilterLinkDefinition : global::Microsoft.Schemas.SharePoint.HtmlRenderingElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal new static readonly System.Xml.Linq.XName DefaultXName = System.Xml.Linq.XName.Get("Default", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PagedXName = System.Xml.Linq.XName.Get("Paged", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FilterLinkDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator FilterLinkDefinition(XElement xe) { return XTypedServices.ToXTypedElement<FilterLinkDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public FilterLinkDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public new virtual string Default {
            get {
                XAttribute x = this.Attribute(DefaultXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DefaultXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Paged {
            get {
                XAttribute x = this.Attribute(PagedXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PagedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FilterLinkDefinition>(this);
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
    /// </para>
    /// </summary>
    public partial class IfNewDefinition : global::Microsoft.Schemas.SharePoint.CamlViewElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("IfNewDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator IfNewDefinition(XElement xe) { return XTypedServices.ToXTypedElement<IfNewDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static IfNewDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(ColumnXName), new NamedContentModelEntity(Column2XName), new NamedContentModelEntity(CounterXName), new NamedContentModelEntity(CurrentRightsXName), new NamedContentModelEntity(FieldXName), new NamedContentModelEntity(FieldPrefixXName), new NamedContentModelEntity(FieldPropertyXName), new NamedContentModelEntity(FieldsXName), new NamedContentModelEntity(FieldSwitchXName), new NamedContentModelEntity(FilterLinkXName), new NamedContentModelEntity(GetFileExtensionXName), new NamedContentModelEntity(GetVarXName), new NamedContentModelEntity(HTMLXName), new NamedContentModelEntity(HttpHostXName), new NamedContentModelEntity(HttpPathXName), new NamedContentModelEntity(HttpVDirXName), new NamedContentModelEntity(IDXName), new NamedContentModelEntity(IfEqualXName), new NamedContentModelEntity(IfNegXName), new NamedContentModelEntity(IfNewXName), new NamedContentModelEntity(IfSubStringXName), new NamedContentModelEntity(LengthXName), new NamedContentModelEntity(LimitXName), new NamedContentModelEntity(ListXName), new NamedContentModelEntity(ListUrlXName), new NamedContentModelEntity(ListUrlDirXName), new NamedContentModelEntity(ListPropertyXName), new NamedContentModelEntity(LookupColumnXName), new NamedContentModelEntity(MapToAllXName), new NamedContentModelEntity(MapToIconXName), new NamedContentModelEntity(PageUrlXName), new NamedContentModelEntity(PropertyXName), new NamedContentModelEntity(ScriptQuoteXName), new NamedContentModelEntity(SelectionOptionsXName), new NamedContentModelEntity(ServerPropertyXName), new NamedContentModelEntity(SetVarXName), new NamedContentModelEntity(SwitchXName), new NamedContentModelEntity(ThreadStampXName), new NamedContentModelEntity(URLXName), new NamedContentModelEntity(UrlDirNameXName), new NamedContentModelEntity(UrlBaseNameXName), new NamedContentModelEntity(MeetingPropertyXName), new NamedContentModelEntity(ProjectPropertyXName), new NamedContentModelEntity(UserIDXName), new NamedContentModelEntity(FieldSortParamsXName), new NamedContentModelEntity(WebQueryInfoXName), new NamedContentModelEntity(IdentityXName), new NamedContentModelEntity(IfHasRightsXName), new NamedContentModelEntity(MapToControlXName), new NamedContentModelEntity(ForEachXName), new NamedContentModelEntity(ContentTypesXName), new NamedContentModelEntity(MapToContentTypeXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public IfNewDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<IfNewDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ColumnXName, typeof(QueryColumnDefinition));
            localElementDictionary.Add(Column2XName, typeof(QueryColumnDefinition));
            localElementDictionary.Add(CounterXName, typeof(CounterDefinition));
            localElementDictionary.Add(CurrentRightsXName, typeof(EmptyElement));
            localElementDictionary.Add(FieldXName, typeof(FieldViewReferenceDefinition));
            localElementDictionary.Add(FieldPrefixXName, typeof(EmptyElement));
            localElementDictionary.Add(FieldPropertyXName, typeof(FieldPropertyDefinition));
            localElementDictionary.Add(FieldsXName, typeof(CamlViewElement));
            localElementDictionary.Add(FieldSwitchXName, typeof(SwitchDefinition));
            localElementDictionary.Add(FilterLinkXName, typeof(FilterLinkDefinition));
            localElementDictionary.Add(GetFileExtensionXName, typeof(XTypedElement));
            localElementDictionary.Add(GetVarXName, typeof(GetVarDefinition));
            localElementDictionary.Add(HTMLXName, typeof(HtmlContentDefinition));
            localElementDictionary.Add(HttpHostXName, typeof(HttpHostDefinition));
            localElementDictionary.Add(HttpPathXName, typeof(HttpPathDefinition));
            localElementDictionary.Add(HttpVDirXName, typeof(HttpVDirDefinition));
            localElementDictionary.Add(IDXName, typeof(EmptyElement));
            localElementDictionary.Add(IfEqualXName, typeof(IfEqualDefinition));
            localElementDictionary.Add(IfNegXName, typeof(IfNegDefinition));
            localElementDictionary.Add(IfNewXName, typeof(IfNewDefinition));
            localElementDictionary.Add(IfSubStringXName, typeof(IfSubStringDefinition));
            localElementDictionary.Add(LengthXName, typeof(XTypedElement));
            localElementDictionary.Add(LimitXName, typeof(LimitDefinition));
            localElementDictionary.Add(ListXName, typeof(EmptyElement));
            localElementDictionary.Add(ListUrlXName, typeof(EmptyElement));
            localElementDictionary.Add(ListUrlDirXName, typeof(HttpPathDefinition));
            localElementDictionary.Add(ListPropertyXName, typeof(ListPropertyDefinition));
            localElementDictionary.Add(LookupColumnXName, typeof(LookupColumnDefinition));
            localElementDictionary.Add(MapToAllXName, typeof(CamlViewElement));
            localElementDictionary.Add(MapToIconXName, typeof(CamlViewElement));
            localElementDictionary.Add(PageUrlXName, typeof(HtmlRenderingElement));
            localElementDictionary.Add(PropertyXName, typeof(FieldPropertyDefinition));
            localElementDictionary.Add(ScriptQuoteXName, typeof(ScriptQuoteDefinition));
            localElementDictionary.Add(SelectionOptionsXName, typeof(SelectOptionsDefinition));
            localElementDictionary.Add(ServerPropertyXName, typeof(ServerPropertyDefinition));
            localElementDictionary.Add(SetVarXName, typeof(SetVarDefinition));
            localElementDictionary.Add(SwitchXName, typeof(SwitchDefinition));
            localElementDictionary.Add(ThreadStampXName, typeof(ThreadStampDefinition));
            localElementDictionary.Add(URLXName, typeof(URLDefinition));
            localElementDictionary.Add(UrlDirNameXName, typeof(XTypedElement));
            localElementDictionary.Add(UrlBaseNameXName, typeof(UrlBaseNameDefinition));
            localElementDictionary.Add(MeetingPropertyXName, typeof(MeetingPropertyDefinition));
            localElementDictionary.Add(ProjectPropertyXName, typeof(ProjectPropertyDefinition));
            localElementDictionary.Add(UserIDXName, typeof(UserIDDefinition));
            localElementDictionary.Add(FieldSortParamsXName, typeof(HtmlRenderingElement));
            localElementDictionary.Add(WebQueryInfoXName, typeof(EmptyElement));
            localElementDictionary.Add(IdentityXName, typeof(EmptyElement));
            localElementDictionary.Add(IfHasRightsXName, typeof(IfHasRightsDefinition));
            localElementDictionary.Add(MapToControlXName, typeof(CamlViewElement));
            localElementDictionary.Add(ForEachXName, typeof(ForEachElement));
            localElementDictionary.Add(ContentTypesXName, typeof(CamlViewElement));
            localElementDictionary.Add(MapToContentTypeXName, typeof(CamlViewElement));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class MeetingPropertyDefinition : global::Microsoft.Schemas.SharePoint.HtmlRenderingElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SelectXName = System.Xml.Linq.XName.Get("Select", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("MeetingPropertyDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator MeetingPropertyDefinition(XElement xe) { return XTypedServices.ToXTypedElement<MeetingPropertyDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public MeetingPropertyDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Select {
            get {
                XAttribute x = this.Attribute(SelectXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SelectXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MeetingPropertyDefinition>(this);
        }
    }
    
    public partial class ProjectPropertyDefinition : global::Microsoft.Schemas.SharePoint.HtmlRenderingElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SelectXName = System.Xml.Linq.XName.Get("Select", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ProjectPropertyDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator ProjectPropertyDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ProjectPropertyDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ProjectPropertyDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Select {
            get {
                XAttribute x = this.Attribute(SelectXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SelectXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ProjectPropertyDefinition>(this);
        }
    }
    
    public partial class UserIDDefinition : global::Microsoft.Schemas.SharePoint.EmptyElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AllowAnonymousXName = System.Xml.Linq.XName.Get("AllowAnonymous", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("UserIDDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator UserIDDefinition(XElement xe) { return XTypedServices.ToXTypedElement<UserIDDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public UserIDDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string AllowAnonymous {
            get {
                XAttribute x = this.Attribute(AllowAnonymousXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AllowAnonymousXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UserIDDefinition>(this);
        }
    }
    
    public partial class HttpPathDefinition : global::Microsoft.Schemas.SharePoint.EmptyElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ServerRelXName = System.Xml.Linq.XName.Get("ServerRel", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName URLEncodeAsURLXName = System.Xml.Linq.XName.Get("URLEncodeAsURL", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HTMLEncodeXName = System.Xml.Linq.XName.Get("HTMLEncode", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ForInstanceXName = System.Xml.Linq.XName.Get("ForInstance", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("HttpPathDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator HttpPathDefinition(XElement xe) { return XTypedServices.ToXTypedElement<HttpPathDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public HttpPathDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ServerRel {
            get {
                XAttribute x = this.Attribute(ServerRelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ServerRelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string URLEncodeAsURL {
            get {
                XAttribute x = this.Attribute(URLEncodeAsURLXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(URLEncodeAsURLXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string HTMLEncode {
            get {
                XAttribute x = this.Attribute(HTMLEncodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(HTMLEncodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ForInstance {
            get {
                XAttribute x = this.Attribute(ForInstanceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ForInstanceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HttpPathDefinition>(this);
        }
    }
    
    public partial class HttpVDirDefinition : global::Microsoft.Schemas.SharePoint.EmptyElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CurrentWebXName = System.Xml.Linq.XName.Get("CurrentWeb", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName URLEncodeAsURLXName = System.Xml.Linq.XName.Get("URLEncodeAsURL", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("HttpVDirDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator HttpVDirDefinition(XElement xe) { return XTypedServices.ToXTypedElement<HttpVDirDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public HttpVDirDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CurrentWeb {
            get {
                XAttribute x = this.Attribute(CurrentWebXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CurrentWebXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string URLEncodeAsURL {
            get {
                XAttribute x = this.Attribute(URLEncodeAsURLXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(URLEncodeAsURLXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HttpVDirDefinition>(this);
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (RightsChoices, Then, Else?)
    /// </para>
    /// </summary>
    public partial class IfHasRightsDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RightsChoicesXName = System.Xml.Linq.XName.Get("RightsChoices", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ThenXName = System.Xml.Linq.XName.Get("Then", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ElseXName = System.Xml.Linq.XName.Get("Else", "http://schemas.microsoft.com/sharepoint/");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("IfHasRightsDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator IfHasRightsDefinition(XElement xe) { return XTypedServices.ToXTypedElement<IfHasRightsDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static IfHasRightsDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RightsChoicesXName), new NamedContentModelEntity(ThenXName), new NamedContentModelEntity(ElseXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (RightsChoices, Then, Else?)
        /// </para>
        /// </summary>
        public IfHasRightsDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RightsChoices, Then, Else?)
        /// </para>
        /// </summary>
        public virtual RightsChoiceDefinitions RightsChoices {
            get {
                XElement x = this.GetElement(RightsChoicesXName);
                return ((RightsChoiceDefinitions)(x));
            }
            set {
                this.SetElement(RightsChoicesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RightsChoices, Then, Else?)
        /// </para>
        /// </summary>
        public virtual CamlViewElement Then {
            get {
                XElement x = this.GetElement(ThenXName);
                return ((CamlViewElement)(x));
            }
            set {
                this.SetElement(ThenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RightsChoices, Then, Else?)
        /// </para>
        /// </summary>
        public virtual CamlViewElement Else {
            get {
                XElement x = this.GetElement(ElseXName);
                return ((CamlViewElement)(x));
            }
            set {
                this.SetElement(ElseXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<IfHasRightsDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RightsChoicesXName, typeof(RightsChoiceDefinitions));
            localElementDictionary.Add(ThenXName, typeof(CamlViewElement));
            localElementDictionary.Add(ElseXName, typeof(CamlViewElement));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (RightsGroup*)
    /// </para>
    /// </summary>
    public partial class RightsChoiceDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RightsGroupXName = System.Xml.Linq.XName.Get("RightsGroup", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RightsGroupDefinition> RightsGroupField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RightsChoiceDefinitions", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RightsChoiceDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<RightsChoiceDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RightsChoiceDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RightsGroupXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (RightsGroup*)
        /// </para>
        /// </summary>
        public RightsChoiceDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (RightsGroup*)
        /// </para>
        /// </summary>
        public virtual IList<RightsGroupDefinition> RightsGroup {
            get {
                if ((this.RightsGroupField == null)) {
                    this.RightsGroupField = new XTypedList<RightsGroupDefinition>(this, LinqToXsdTypeManager.Instance, RightsGroupXName);
                }
                return this.RightsGroupField;
            }
            set {
                if ((value == null)) {
                    this.RightsGroupField = null;
                }
                else {
                    if ((this.RightsGroupField == null)) {
                        this.RightsGroupField = XTypedList<RightsGroupDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, RightsGroupXName);
                    }
                    else {
                        XTypedServices.SetList<RightsGroupDefinition>(this.RightsGroupField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RightsChoiceDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RightsGroupXName, typeof(RightsGroupDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class RightsGroupDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PermAddListItemsXName = System.Xml.Linq.XName.Get("PermAddListItems", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PermEditListItemsXName = System.Xml.Linq.XName.Get("PermEditListItems", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RightsGroupDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator RightsGroupDefinition(XElement xe) { return XTypedServices.ToXTypedElement<RightsGroupDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public RightsGroupDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.PermissionState? PermAddListItems {
            get {
                XAttribute x = this.Attribute(PermAddListItemsXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.PermissionState)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.PermissionState), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(PermAddListItemsXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.PermissionState? PermEditListItems {
            get {
                XAttribute x = this.Attribute(PermEditListItemsXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.PermissionState)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.PermissionState), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(PermEditListItemsXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RightsGroupDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum PermissionState {
        
        required,
    }
    
    public sealed class PermissionStateValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "required"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private PermissionStateValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
    /// </para>
    /// </summary>
    public partial class ForEachElement : global::Microsoft.Schemas.SharePoint.CamlViewElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SelectXName = System.Xml.Linq.XName.Get("Select", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ForEachElement", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ForEachElement(XElement xe) { return XTypedServices.ToXTypedElement<ForEachElement>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ForEachElement() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(ColumnXName), new NamedContentModelEntity(Column2XName), new NamedContentModelEntity(CounterXName), new NamedContentModelEntity(CurrentRightsXName), new NamedContentModelEntity(FieldXName), new NamedContentModelEntity(FieldPrefixXName), new NamedContentModelEntity(FieldPropertyXName), new NamedContentModelEntity(FieldsXName), new NamedContentModelEntity(FieldSwitchXName), new NamedContentModelEntity(FilterLinkXName), new NamedContentModelEntity(GetFileExtensionXName), new NamedContentModelEntity(GetVarXName), new NamedContentModelEntity(HTMLXName), new NamedContentModelEntity(HttpHostXName), new NamedContentModelEntity(HttpPathXName), new NamedContentModelEntity(HttpVDirXName), new NamedContentModelEntity(IDXName), new NamedContentModelEntity(IfEqualXName), new NamedContentModelEntity(IfNegXName), new NamedContentModelEntity(IfNewXName), new NamedContentModelEntity(IfSubStringXName), new NamedContentModelEntity(LengthXName), new NamedContentModelEntity(LimitXName), new NamedContentModelEntity(ListXName), new NamedContentModelEntity(ListUrlXName), new NamedContentModelEntity(ListUrlDirXName), new NamedContentModelEntity(ListPropertyXName), new NamedContentModelEntity(LookupColumnXName), new NamedContentModelEntity(MapToAllXName), new NamedContentModelEntity(MapToIconXName), new NamedContentModelEntity(PageUrlXName), new NamedContentModelEntity(PropertyXName), new NamedContentModelEntity(ScriptQuoteXName), new NamedContentModelEntity(SelectionOptionsXName), new NamedContentModelEntity(ServerPropertyXName), new NamedContentModelEntity(SetVarXName), new NamedContentModelEntity(SwitchXName), new NamedContentModelEntity(ThreadStampXName), new NamedContentModelEntity(URLXName), new NamedContentModelEntity(UrlDirNameXName), new NamedContentModelEntity(UrlBaseNameXName), new NamedContentModelEntity(MeetingPropertyXName), new NamedContentModelEntity(ProjectPropertyXName), new NamedContentModelEntity(UserIDXName), new NamedContentModelEntity(FieldSortParamsXName), new NamedContentModelEntity(WebQueryInfoXName), new NamedContentModelEntity(IdentityXName), new NamedContentModelEntity(IfHasRightsXName), new NamedContentModelEntity(MapToControlXName), new NamedContentModelEntity(ForEachXName), new NamedContentModelEntity(ContentTypesXName), new NamedContentModelEntity(MapToContentTypeXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public ForEachElement() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Select {
            get {
                XAttribute x = this.Attribute(SelectXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SelectXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ForEachElement>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ColumnXName, typeof(QueryColumnDefinition));
            localElementDictionary.Add(Column2XName, typeof(QueryColumnDefinition));
            localElementDictionary.Add(CounterXName, typeof(CounterDefinition));
            localElementDictionary.Add(CurrentRightsXName, typeof(EmptyElement));
            localElementDictionary.Add(FieldXName, typeof(FieldViewReferenceDefinition));
            localElementDictionary.Add(FieldPrefixXName, typeof(EmptyElement));
            localElementDictionary.Add(FieldPropertyXName, typeof(FieldPropertyDefinition));
            localElementDictionary.Add(FieldsXName, typeof(CamlViewElement));
            localElementDictionary.Add(FieldSwitchXName, typeof(SwitchDefinition));
            localElementDictionary.Add(FilterLinkXName, typeof(FilterLinkDefinition));
            localElementDictionary.Add(GetFileExtensionXName, typeof(XTypedElement));
            localElementDictionary.Add(GetVarXName, typeof(GetVarDefinition));
            localElementDictionary.Add(HTMLXName, typeof(HtmlContentDefinition));
            localElementDictionary.Add(HttpHostXName, typeof(HttpHostDefinition));
            localElementDictionary.Add(HttpPathXName, typeof(HttpPathDefinition));
            localElementDictionary.Add(HttpVDirXName, typeof(HttpVDirDefinition));
            localElementDictionary.Add(IDXName, typeof(EmptyElement));
            localElementDictionary.Add(IfEqualXName, typeof(IfEqualDefinition));
            localElementDictionary.Add(IfNegXName, typeof(IfNegDefinition));
            localElementDictionary.Add(IfNewXName, typeof(IfNewDefinition));
            localElementDictionary.Add(IfSubStringXName, typeof(IfSubStringDefinition));
            localElementDictionary.Add(LengthXName, typeof(XTypedElement));
            localElementDictionary.Add(LimitXName, typeof(LimitDefinition));
            localElementDictionary.Add(ListXName, typeof(EmptyElement));
            localElementDictionary.Add(ListUrlXName, typeof(EmptyElement));
            localElementDictionary.Add(ListUrlDirXName, typeof(HttpPathDefinition));
            localElementDictionary.Add(ListPropertyXName, typeof(ListPropertyDefinition));
            localElementDictionary.Add(LookupColumnXName, typeof(LookupColumnDefinition));
            localElementDictionary.Add(MapToAllXName, typeof(CamlViewElement));
            localElementDictionary.Add(MapToIconXName, typeof(CamlViewElement));
            localElementDictionary.Add(PageUrlXName, typeof(HtmlRenderingElement));
            localElementDictionary.Add(PropertyXName, typeof(FieldPropertyDefinition));
            localElementDictionary.Add(ScriptQuoteXName, typeof(ScriptQuoteDefinition));
            localElementDictionary.Add(SelectionOptionsXName, typeof(SelectOptionsDefinition));
            localElementDictionary.Add(ServerPropertyXName, typeof(ServerPropertyDefinition));
            localElementDictionary.Add(SetVarXName, typeof(SetVarDefinition));
            localElementDictionary.Add(SwitchXName, typeof(SwitchDefinition));
            localElementDictionary.Add(ThreadStampXName, typeof(ThreadStampDefinition));
            localElementDictionary.Add(URLXName, typeof(URLDefinition));
            localElementDictionary.Add(UrlDirNameXName, typeof(XTypedElement));
            localElementDictionary.Add(UrlBaseNameXName, typeof(UrlBaseNameDefinition));
            localElementDictionary.Add(MeetingPropertyXName, typeof(MeetingPropertyDefinition));
            localElementDictionary.Add(ProjectPropertyXName, typeof(ProjectPropertyDefinition));
            localElementDictionary.Add(UserIDXName, typeof(UserIDDefinition));
            localElementDictionary.Add(FieldSortParamsXName, typeof(HtmlRenderingElement));
            localElementDictionary.Add(WebQueryInfoXName, typeof(EmptyElement));
            localElementDictionary.Add(IdentityXName, typeof(EmptyElement));
            localElementDictionary.Add(IfHasRightsXName, typeof(IfHasRightsDefinition));
            localElementDictionary.Add(MapToControlXName, typeof(CamlViewElement));
            localElementDictionary.Add(ForEachXName, typeof(ForEachElement));
            localElementDictionary.Add(ContentTypesXName, typeof(CamlViewElement));
            localElementDictionary.Add(MapToContentTypeXName, typeof(CamlViewElement));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public sealed class AltType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private AltType() {
        }
    }
    
    public sealed class ClassNameType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private ClassNameType() {
        }
    }
    
    public enum ContextualColorType {
        
        None,
        
        DarkBlue,
        
        LightBlue,
        
        Teal,
        
        Orange,
        
        Green,
        
        Magenta,
        
        Yellow,
        
        Purple,
    }
    
    public sealed class ContextualColorTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "None",
                        "DarkBlue",
                        "LightBlue",
                        "Teal",
                        "Orange",
                        "Green",
                        "Magenta",
                        "Yellow",
                        "Purple"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ContextualColorTypeValidator() {
        }
    }
    
    public sealed class CommandType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private CommandType() {
        }
    }
    
    public enum CommandTypeType {
        
        General,
        
        OptionSelection,
        
        IgnoredByMenu,
    }
    
    public sealed class CommandTypeTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "General",
                        "OptionSelection",
                        "IgnoredByMenu"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CommandTypeTypeValidator() {
        }
    }
    
    public sealed class DescriptionType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private DescriptionType() {
        }
    }
    
    public enum DisplayModeType {
        
        Default,
        
        Small,
        
        Medium,
        
        Large,
        
        Text,
        
        Menu,
        
        Menu16,
        
        Menu32,
        
        Thin,
    }
    
    public sealed class DisplayModeTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Default",
                        "Small",
                        "Medium",
                        "Large",
                        "Text",
                        "Menu",
                        "Menu16",
                        "Menu32",
                        "Thin"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private DisplayModeTypeValidator() {
        }
    }
    
    public enum ElementDimensionsType {
        
        Size16by16,
        
        Size32by32,
        
        Size48by48,
        
        Size64by48,
        
        Size72by96,
        
        Size96by72,
        
        Size96by96,
        
        Size128by128,
        
        Size190by30,
        
        Size190by40,
        
        Size190by50,
        
        Size190by60,
    }
    
    public sealed class ElementDimensionsTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Size16by16",
                        "Size32by32",
                        "Size48by48",
                        "Size64by48",
                        "Size72by96",
                        "Size96by72",
                        "Size96by96",
                        "Size128by128",
                        "Size190by30",
                        "Size190by40",
                        "Size190by50",
                        "Size190by60"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ElementDimensionsTypeValidator() {
        }
    }
    
    public sealed class HTMLType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private HTMLType() {
        }
    }
    
    public sealed class IdType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private IdType() {
        }
    }
    
    public sealed class ImageClassType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private ImageClassType() {
        }
    }
    
    public sealed class ImagePositionType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger), null);
        
        private ImagePositionType() {
        }
    }
    
    public sealed class ImageUrlType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private ImageUrlType() {
        }
    }
    
    public sealed class LabelCssType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private LabelCssType() {
        }
    }
    
    public sealed class LabelTextType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private LabelTextType() {
        }
    }
    
    public sealed class MenuItemIdType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private MenuItemIdType() {
        }
    }
    
    public sealed class PixelLengthType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private PixelLengthType() {
        }
    }
    
    public enum SectionTypeType {
        
        Divider,
        
        OneRow,
        
        TwoRow,
        
        ThreeRow,
    }
    
    public sealed class SectionTypeTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Divider",
                        "OneRow",
                        "TwoRow",
                        "ThreeRow"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private SectionTypeTypeValidator() {
        }
    }
    
    public enum SectionAlignmentType {
        
        Top,
        
        Middle,
    }
    
    public sealed class SectionAlignmentTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Top",
                        "Middle"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private SectionAlignmentTypeValidator() {
        }
    }
    
    public sealed class SequenceType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), null);
        
        private SequenceType() {
        }
    }
    
    public sealed class SizeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private SizeType() {
        }
    }
    
    public sealed class TemplateType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private TemplateType() {
        }
    }
    
    public sealed class TemplateAliasType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private TemplateAliasType() {
        }
    }
    
    public sealed class TextDirectionType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private TextDirectionType() {
        }
    }
    
    public sealed class TitleType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private TitleType() {
        }
    }
    
    public sealed class UnitNameType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private UnitNameType() {
        }
    }
    
    public sealed class ValueType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), null);
        
        private ValueType() {
        }
    }
    
    public partial class ButtonType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AltXName = System.Xml.Linq.XName.Get("Alt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandXName = System.Xml.Linq.XName.Get("Command", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandTypeXName = System.Xml.Linq.XName.Get("CommandType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandValueIdXName = System.Xml.Linq.XName.Get("CommandValueId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DescriptionXName = System.Xml.Linq.XName.Get("Description", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image32by32XName = System.Xml.Linq.XName.Get("Image32by32", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image32by32ClassXName = System.Xml.Linq.XName.Get("Image32by32Class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image32by32LeftXName = System.Xml.Linq.XName.Get("Image32by32Left", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image32by32TopXName = System.Xml.Linq.XName.Get("Image32by32Top", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image16by16XName = System.Xml.Linq.XName.Get("Image16by16", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image16by16ClassXName = System.Xml.Linq.XName.Get("Image16by16Class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image16by16LeftXName = System.Xml.Linq.XName.Get("Image16by16Left", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image16by16TopXName = System.Xml.Linq.XName.Get("Image16by16Top", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LabelCssXName = System.Xml.Linq.XName.Get("LabelCss", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LabelTextXName = System.Xml.Linq.XName.Get("LabelText", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MenuItemIdXName = System.Xml.Linq.XName.Get("MenuItemId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SequenceXName = System.Xml.Linq.XName.Get("Sequence", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TemplateAliasXName = System.Xml.Linq.XName.Get("TemplateAlias", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32XName = System.Xml.Linq.XName.Get("ToolTipImage32by32", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32ClassXName = System.Xml.Linq.XName.Get("ToolTipImage32by32Class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32LeftXName = System.Xml.Linq.XName.Get("ToolTipImage32by32Left", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32TopXName = System.Xml.Linq.XName.Get("ToolTipImage32by32Top", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipTitleXName = System.Xml.Linq.XName.Get("ToolTipTitle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipDescriptionXName = System.Xml.Linq.XName.Get("ToolTipDescription", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipHelpKeyWordXName = System.Xml.Linq.XName.Get("ToolTipHelpKeyWord", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipShortcutKeyXName = System.Xml.Linq.XName.Get("ToolTipShortcutKey", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ButtonType", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator ButtonType(XElement xe) { return XTypedServices.ToXTypedElement<ButtonType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ButtonType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Alt {
            get {
                XAttribute x = this.Attribute(AltXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AltXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Command {
            get {
                XAttribute x = this.Attribute(CommandXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.CommandTypeType? CommandType {
            get {
                XAttribute x = this.Attribute(CommandTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.CommandTypeType)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.CommandTypeType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(CommandTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CommandValueId {
            get {
                XAttribute x = this.Attribute(CommandValueIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandValueIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Description {
            get {
                XAttribute x = this.Attribute(DescriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Image32by32 {
            get {
                XAttribute x = this.Attribute(Image32by32XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(Image32by32XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Image32by32Class {
            get {
                XAttribute x = this.Attribute(Image32by32ClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(Image32by32ClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Image32by32Left {
            get {
                XAttribute x = this.Attribute(Image32by32LeftXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(Image32by32LeftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Image32by32Top {
            get {
                XAttribute x = this.Attribute(Image32by32TopXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(Image32by32TopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Image16by16 {
            get {
                XAttribute x = this.Attribute(Image16by16XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(Image16by16XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Image16by16Class {
            get {
                XAttribute x = this.Attribute(Image16by16ClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(Image16by16ClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Image16by16Left {
            get {
                XAttribute x = this.Attribute(Image16by16LeftXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(Image16by16LeftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Image16by16Top {
            get {
                XAttribute x = this.Attribute(Image16by16TopXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(Image16by16TopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string LabelCss {
            get {
                XAttribute x = this.Attribute(LabelCssXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(LabelCssXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string LabelText {
            get {
                XAttribute x = this.Attribute(LabelTextXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(LabelTextXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string MenuItemId {
            get {
                XAttribute x = this.Attribute(MenuItemIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(MenuItemIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Sequence {
            get {
                XAttribute x = this.Attribute(SequenceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(SequenceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TemplateAlias {
            get {
                XAttribute x = this.Attribute(TemplateAliasXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TemplateAliasXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipImage32by32 {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipImage32by32Class {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32ClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32ClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ToolTipImage32by32Left {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32LeftXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32LeftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ToolTipImage32by32Top {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32TopXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32TopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipTitle {
            get {
                XAttribute x = this.Attribute(ToolTipTitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipTitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipDescription {
            get {
                XAttribute x = this.Attribute(ToolTipDescriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipDescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipHelpKeyWord {
            get {
                XAttribute x = this.Attribute(ToolTipHelpKeyWordXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipHelpKeyWordXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipShortcutKey {
            get {
                XAttribute x = this.Attribute(ToolTipShortcutKeyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipShortcutKeyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ButtonType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class CheckBoxType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AltXName = System.Xml.Linq.XName.Get("Alt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandXName = System.Xml.Linq.XName.Get("Command", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LabelTextXName = System.Xml.Linq.XName.Get("LabelText", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName QueryCommandXName = System.Xml.Linq.XName.Get("QueryCommand", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TemplateAliasXName = System.Xml.Linq.XName.Get("TemplateAlias", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MenuItemIdXName = System.Xml.Linq.XName.Get("MenuItemId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SequenceXName = System.Xml.Linq.XName.Get("Sequence", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32XName = System.Xml.Linq.XName.Get("ToolTipImage32by32", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32ClassXName = System.Xml.Linq.XName.Get("ToolTipImage32by32Class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32LeftXName = System.Xml.Linq.XName.Get("ToolTipImage32by32Left", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32TopXName = System.Xml.Linq.XName.Get("ToolTipImage32by32Top", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipTitleXName = System.Xml.Linq.XName.Get("ToolTipTitle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipDescriptionXName = System.Xml.Linq.XName.Get("ToolTipDescription", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipHelpKeyWordXName = System.Xml.Linq.XName.Get("ToolTipHelpKeyWord", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipShortcutKeyXName = System.Xml.Linq.XName.Get("ToolTipShortcutKey", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CheckBoxType", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator CheckBoxType(XElement xe) { return XTypedServices.ToXTypedElement<CheckBoxType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public CheckBoxType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Alt {
            get {
                XAttribute x = this.Attribute(AltXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AltXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Command {
            get {
                XAttribute x = this.Attribute(CommandXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string LabelText {
            get {
                XAttribute x = this.Attribute(LabelTextXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(LabelTextXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string QueryCommand {
            get {
                XAttribute x = this.Attribute(QueryCommandXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(QueryCommandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TemplateAlias {
            get {
                XAttribute x = this.Attribute(TemplateAliasXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TemplateAliasXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string MenuItemId {
            get {
                XAttribute x = this.Attribute(MenuItemIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(MenuItemIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Sequence {
            get {
                XAttribute x = this.Attribute(SequenceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(SequenceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipImage32by32 {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipImage32by32Class {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32ClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32ClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ToolTipImage32by32Left {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32LeftXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32LeftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ToolTipImage32by32Top {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32TopXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32TopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipTitle {
            get {
                XAttribute x = this.Attribute(ToolTipTitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipTitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipDescription {
            get {
                XAttribute x = this.Attribute(ToolTipDescriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipDescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipHelpKeyWord {
            get {
                XAttribute x = this.Attribute(ToolTipHelpKeyWordXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipHelpKeyWordXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipShortcutKey {
            get {
                XAttribute x = this.Attribute(ToolTipShortcutKeyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipShortcutKeyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CheckBoxType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Colors?)
    /// </para>
    /// </summary>
    public partial class ColorPickerType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ColorsXName = System.Xml.Linq.XName.Get("Colors", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandXName = System.Xml.Linq.XName.Get("Command", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandPreviewXName = System.Xml.Linq.XName.Get("CommandPreview", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandRevertXName = System.Xml.Linq.XName.Get("CommandRevert", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName QueryCommandXName = System.Xml.Linq.XName.Get("QueryCommand", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SequenceXName = System.Xml.Linq.XName.Get("Sequence", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TemplateAliasXName = System.Xml.Linq.XName.Get("TemplateAlias", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ColorPickerType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ColorPickerType(XElement xe) { return XTypedServices.ToXTypedElement<ColorPickerType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ColorPickerType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ColorsXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Colors?)
        /// </para>
        /// </summary>
        public ColorPickerType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Colors?)
        /// </para>
        /// </summary>
        public virtual ColorStylesType Colors {
            get {
                XElement x = this.GetElement(ColorsXName);
                return ((ColorStylesType)(x));
            }
            set {
                this.SetElement(ColorsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Command {
            get {
                XAttribute x = this.Attribute(CommandXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CommandPreview {
            get {
                XAttribute x = this.Attribute(CommandPreviewXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandPreviewXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CommandRevert {
            get {
                XAttribute x = this.Attribute(CommandRevertXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandRevertXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string QueryCommand {
            get {
                XAttribute x = this.Attribute(QueryCommandXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(QueryCommandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Sequence {
            get {
                XAttribute x = this.Attribute(SequenceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(SequenceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TemplateAlias {
            get {
                XAttribute x = this.Attribute(TemplateAliasXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TemplateAliasXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ColorPickerType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ColorsXName, typeof(ColorStylesType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Color*)
    /// </para>
    /// </summary>
    public partial class ColorStylesType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ColorXName = System.Xml.Linq.XName.Get("Color", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ColorStyleType> ColorField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ColorStylesType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ColorStylesType(XElement xe) { return XTypedServices.ToXTypedElement<ColorStylesType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ColorStylesType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ColorXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Color*)
        /// </para>
        /// </summary>
        public ColorStylesType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Color*)
        /// </para>
        /// </summary>
        public virtual IList<ColorStyleType> Color {
            get {
                if ((this.ColorField == null)) {
                    this.ColorField = new XTypedList<ColorStyleType>(this, LinqToXsdTypeManager.Instance, ColorXName);
                }
                return this.ColorField;
            }
            set {
                if ((value == null)) {
                    this.ColorField = null;
                }
                else {
                    if ((this.ColorField == null)) {
                        this.ColorField = XTypedList<ColorStyleType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ColorXName);
                    }
                    else {
                        XTypedServices.SetList<ColorStyleType>(this.ColorField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ColorStylesType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ColorXName, typeof(ColorStyleType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class ColorStyleType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SequenceXName = System.Xml.Linq.XName.Get("Sequence", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TitleXName = System.Xml.Linq.XName.Get("Title", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StyleXName = System.Xml.Linq.XName.Get("Style", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ColorXName = System.Xml.Linq.XName.Get("Color", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DisplayColorXName = System.Xml.Linq.XName.Get("DisplayColor", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ColorStyleType", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator ColorStyleType(XElement xe) { return XTypedServices.ToXTypedElement<ColorStyleType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ColorStyleType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Sequence {
            get {
                XAttribute x = this.Attribute(SequenceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(SequenceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Title {
            get {
                XAttribute x = this.Attribute(TitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Style {
            get {
                XAttribute x = this.Attribute(StyleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(StyleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Color {
            get {
                XAttribute x = this.Attribute(ColorXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ColorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DisplayColor {
            get {
                XAttribute x = this.Attribute(DisplayColorXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DisplayColorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ColorStyleType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Menu?)
    /// </para>
    /// </summary>
    public partial class ComboBoxType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MenuXName = System.Xml.Linq.XName.Get("Menu", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AllowFreeFormXName = System.Xml.Linq.XName.Get("AllowFreeForm", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool AllowFreeFormDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AltArrowXName = System.Xml.Linq.XName.Get("AltArrow", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AltXName = System.Xml.Linq.XName.Get("Alt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AutoCompleteXName = System.Xml.Linq.XName.Get("AutoComplete", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool AutoCompleteDefaultValue = System.Xml.XmlConvert.ToBoolean("true");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AutoCompleteDelayXName = System.Xml.Linq.XName.Get("AutoCompleteDelay", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static decimal AutoCompleteDelayDefaultValue = System.Xml.XmlConvert.ToDecimal("100");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CacheMenuVersionsXName = System.Xml.Linq.XName.Get("CacheMenuVersions", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool CacheMenuVersionsDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandXName = System.Xml.Linq.XName.Get("Command", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandMenuOpenXName = System.Xml.Linq.XName.Get("CommandMenuOpen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandMenuCloseXName = System.Xml.Linq.XName.Get("CommandMenuClose", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandPreviewXName = System.Xml.Linq.XName.Get("CommandPreview", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandPreviewRevertXName = System.Xml.Linq.XName.Get("CommandPreviewRevert", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImeEnabledXName = System.Xml.Linq.XName.Get("ImeEnabled", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InitialItemXName = System.Xml.Linq.XName.Get("InitialItem", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName QueryCommandXName = System.Xml.Linq.XName.Get("QueryCommand", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PopulateDynamicallyXName = System.Xml.Linq.XName.Get("PopulateDynamically", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool PopulateDynamicallyDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PopulateQueryCommandXName = System.Xml.Linq.XName.Get("PopulateQueryCommand", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PopulateOnlyOnceXName = System.Xml.Linq.XName.Get("PopulateOnlyOnce", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool PopulateOnlyOnceDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SequenceXName = System.Xml.Linq.XName.Get("Sequence", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TemplateAliasXName = System.Xml.Linq.XName.Get("TemplateAlias", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32XName = System.Xml.Linq.XName.Get("ToolTipImage32by32", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32ClassXName = System.Xml.Linq.XName.Get("ToolTipImage32by32Class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32LeftXName = System.Xml.Linq.XName.Get("ToolTipImage32by32Left", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32TopXName = System.Xml.Linq.XName.Get("ToolTipImage32by32Top", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipTitleXName = System.Xml.Linq.XName.Get("ToolTipTitle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipDescriptionXName = System.Xml.Linq.XName.Get("ToolTipDescription", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipHelpKeyWordXName = System.Xml.Linq.XName.Get("ToolTipHelpKeyWord", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipSelectedItemTitleXName = System.Xml.Linq.XName.Get("ToolTipSelectedItemTitle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipShortcutKeyXName = System.Xml.Linq.XName.Get("ToolTipShortcutKey", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WidthXName = System.Xml.Linq.XName.Get("Width", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ComboBoxType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ComboBoxType(XElement xe) { return XTypedServices.ToXTypedElement<ComboBoxType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ComboBoxType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(MenuXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Menu?)
        /// </para>
        /// </summary>
        public ComboBoxType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Menu?)
        /// </para>
        /// </summary>
        public virtual MenuType Menu {
            get {
                XElement x = this.GetElement(MenuXName);
                return ((MenuType)(x));
            }
            set {
                this.SetElement(MenuXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool AllowFreeForm {
            get {
                XAttribute x = this.Attribute(AllowFreeFormXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, AllowFreeFormDefaultValue);
            }
            set {
                this.SetAttribute(AllowFreeFormXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string AltArrow {
            get {
                XAttribute x = this.Attribute(AltArrowXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AltArrowXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Alt {
            get {
                XAttribute x = this.Attribute(AltXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AltXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool AutoComplete {
            get {
                XAttribute x = this.Attribute(AutoCompleteXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, AutoCompleteDefaultValue);
            }
            set {
                this.SetAttribute(AutoCompleteXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual decimal AutoCompleteDelay {
            get {
                XAttribute x = this.Attribute(AutoCompleteDelayXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype, AutoCompleteDelayDefaultValue);
            }
            set {
                this.SetAttribute(AutoCompleteDelayXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool CacheMenuVersions {
            get {
                XAttribute x = this.Attribute(CacheMenuVersionsXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, CacheMenuVersionsDefaultValue);
            }
            set {
                this.SetAttribute(CacheMenuVersionsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Command {
            get {
                XAttribute x = this.Attribute(CommandXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CommandMenuOpen {
            get {
                XAttribute x = this.Attribute(CommandMenuOpenXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandMenuOpenXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CommandMenuClose {
            get {
                XAttribute x = this.Attribute(CommandMenuCloseXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandMenuCloseXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CommandPreview {
            get {
                XAttribute x = this.Attribute(CommandPreviewXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandPreviewXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CommandPreviewRevert {
            get {
                XAttribute x = this.Attribute(CommandPreviewRevertXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandPreviewRevertXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? ImeEnabled {
            get {
                XAttribute x = this.Attribute(ImeEnabledXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(ImeEnabledXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string InitialItem {
            get {
                XAttribute x = this.Attribute(InitialItemXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(InitialItemXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string QueryCommand {
            get {
                XAttribute x = this.Attribute(QueryCommandXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(QueryCommandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool PopulateDynamically {
            get {
                XAttribute x = this.Attribute(PopulateDynamicallyXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, PopulateDynamicallyDefaultValue);
            }
            set {
                this.SetAttribute(PopulateDynamicallyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string PopulateQueryCommand {
            get {
                XAttribute x = this.Attribute(PopulateQueryCommandXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PopulateQueryCommandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool PopulateOnlyOnce {
            get {
                XAttribute x = this.Attribute(PopulateOnlyOnceXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, PopulateOnlyOnceDefaultValue);
            }
            set {
                this.SetAttribute(PopulateOnlyOnceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Sequence {
            get {
                XAttribute x = this.Attribute(SequenceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(SequenceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TemplateAlias {
            get {
                XAttribute x = this.Attribute(TemplateAliasXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TemplateAliasXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipImage32by32 {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipImage32by32Class {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32ClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32ClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ToolTipImage32by32Left {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32LeftXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32LeftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ToolTipImage32by32Top {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32TopXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32TopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipTitle {
            get {
                XAttribute x = this.Attribute(ToolTipTitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipTitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipDescription {
            get {
                XAttribute x = this.Attribute(ToolTipDescriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipDescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipHelpKeyWord {
            get {
                XAttribute x = this.Attribute(ToolTipHelpKeyWordXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipHelpKeyWordXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipSelectedItemTitle {
            get {
                XAttribute x = this.Attribute(ToolTipSelectedItemTitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipSelectedItemTitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipShortcutKey {
            get {
                XAttribute x = this.Attribute(ToolTipShortcutKeyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipShortcutKeyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Width {
            get {
                XAttribute x = this.Attribute(WidthXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(WidthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ComboBoxType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(MenuXName, typeof(MenuType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Ribbon? | QAT? | Jewel? | Templates?)+)
    /// </para>
    /// </summary>
    public partial class CommandUIType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RibbonXName = System.Xml.Linq.XName.Get("Ribbon", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RibbonType> RibbonField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName QATXName = System.Xml.Linq.XName.Get("QAT", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<QATType> QATField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName JewelXName = System.Xml.Linq.XName.Get("Jewel", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<JewelType> JewelField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TemplatesXName = System.Xml.Linq.XName.Get("Templates", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TemplatesType> TemplatesField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CommandUIType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CommandUIType(XElement xe) { return XTypedServices.ToXTypedElement<CommandUIType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CommandUIType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(RibbonXName), new NamedContentModelEntity(QATXName), new NamedContentModelEntity(JewelXName), new NamedContentModelEntity(TemplatesXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Ribbon? | QAT? | Jewel? | Templates?)+)
        /// </para>
        /// </summary>
        public CommandUIType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Ribbon? | QAT? | Jewel? | Templates?)+)
        /// </para>
        /// </summary>
        public virtual IList<RibbonType> Ribbon {
            get {
                if ((this.RibbonField == null)) {
                    this.RibbonField = new XTypedList<RibbonType>(this, LinqToXsdTypeManager.Instance, RibbonXName);
                }
                return this.RibbonField;
            }
            set {
                if ((value == null)) {
                    this.RibbonField = null;
                }
                else {
                    if ((this.RibbonField == null)) {
                        this.RibbonField = XTypedList<RibbonType>.Initialize(this, LinqToXsdTypeManager.Instance, value, RibbonXName);
                    }
                    else {
                        XTypedServices.SetList<RibbonType>(this.RibbonField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Ribbon? | QAT? | Jewel? | Templates?)+)
        /// </para>
        /// </summary>
        public virtual IList<QATType> QAT {
            get {
                if ((this.QATField == null)) {
                    this.QATField = new XTypedList<QATType>(this, LinqToXsdTypeManager.Instance, QATXName);
                }
                return this.QATField;
            }
            set {
                if ((value == null)) {
                    this.QATField = null;
                }
                else {
                    if ((this.QATField == null)) {
                        this.QATField = XTypedList<QATType>.Initialize(this, LinqToXsdTypeManager.Instance, value, QATXName);
                    }
                    else {
                        XTypedServices.SetList<QATType>(this.QATField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Ribbon? | QAT? | Jewel? | Templates?)+)
        /// </para>
        /// </summary>
        public virtual IList<JewelType> Jewel {
            get {
                if ((this.JewelField == null)) {
                    this.JewelField = new XTypedList<JewelType>(this, LinqToXsdTypeManager.Instance, JewelXName);
                }
                return this.JewelField;
            }
            set {
                if ((value == null)) {
                    this.JewelField = null;
                }
                else {
                    if ((this.JewelField == null)) {
                        this.JewelField = XTypedList<JewelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, JewelXName);
                    }
                    else {
                        XTypedServices.SetList<JewelType>(this.JewelField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Ribbon? | QAT? | Jewel? | Templates?)+)
        /// </para>
        /// </summary>
        public virtual IList<TemplatesType> Templates {
            get {
                if ((this.TemplatesField == null)) {
                    this.TemplatesField = new XTypedList<TemplatesType>(this, LinqToXsdTypeManager.Instance, TemplatesXName);
                }
                return this.TemplatesField;
            }
            set {
                if ((value == null)) {
                    this.TemplatesField = null;
                }
                else {
                    if ((this.TemplatesField == null)) {
                        this.TemplatesField = XTypedList<TemplatesType>.Initialize(this, LinqToXsdTypeManager.Instance, value, TemplatesXName);
                    }
                    else {
                        XTypedServices.SetList<TemplatesType>(this.TemplatesField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CommandUIType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RibbonXName, typeof(RibbonType));
            localElementDictionary.Add(QATXName, typeof(QATType));
            localElementDictionary.Add(JewelXName, typeof(JewelType));
            localElementDictionary.Add(TemplatesXName, typeof(TemplatesType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Tab*)
    /// </para>
    /// </summary>
    public partial class ContextualGroupType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TabXName = System.Xml.Linq.XName.Get("Tab", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TabType> TabField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ColorXName = System.Xml.Linq.XName.Get("Color", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandXName = System.Xml.Linq.XName.Get("Command", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ContextualGroupIdXName = System.Xml.Linq.XName.Get("ContextualGroupId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SequenceXName = System.Xml.Linq.XName.Get("Sequence", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TitleXName = System.Xml.Linq.XName.Get("Title", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ContextualGroupType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ContextualGroupType(XElement xe) { return XTypedServices.ToXTypedElement<ContextualGroupType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ContextualGroupType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TabXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Tab*)
        /// </para>
        /// </summary>
        public ContextualGroupType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Tab*)
        /// </para>
        /// </summary>
        public virtual IList<TabType> Tab {
            get {
                if ((this.TabField == null)) {
                    this.TabField = new XTypedList<TabType>(this, LinqToXsdTypeManager.Instance, TabXName);
                }
                return this.TabField;
            }
            set {
                if ((value == null)) {
                    this.TabField = null;
                }
                else {
                    if ((this.TabField == null)) {
                        this.TabField = XTypedList<TabType>.Initialize(this, LinqToXsdTypeManager.Instance, value, TabXName);
                    }
                    else {
                        XTypedServices.SetList<TabType>(this.TabField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.ContextualColorType? Color {
            get {
                XAttribute x = this.Attribute(ColorXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.ContextualColorType)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.ContextualColorType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ColorXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Command {
            get {
                XAttribute x = this.Attribute(CommandXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ContextualGroupId {
            get {
                XAttribute x = this.Attribute(ContextualGroupIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ContextualGroupIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Sequence {
            get {
                XAttribute x = this.Attribute(SequenceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(SequenceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Title {
            get {
                XAttribute x = this.Attribute(TitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ContextualGroupType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TabXName, typeof(TabType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ContextualGroup*)
    /// </para>
    /// </summary>
    public partial class ContextualTabsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ContextualGroupXName = System.Xml.Linq.XName.Get("ContextualGroup", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ContextualGroupType> ContextualGroupField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ContextualTabsType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ContextualTabsType(XElement xe) { return XTypedServices.ToXTypedElement<ContextualTabsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ContextualTabsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ContextualGroupXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ContextualGroup*)
        /// </para>
        /// </summary>
        public ContextualTabsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ContextualGroup*)
        /// </para>
        /// </summary>
        public virtual IList<ContextualGroupType> ContextualGroup {
            get {
                if ((this.ContextualGroupField == null)) {
                    this.ContextualGroupField = new XTypedList<ContextualGroupType>(this, LinqToXsdTypeManager.Instance, ContextualGroupXName);
                }
                return this.ContextualGroupField;
            }
            set {
                if ((value == null)) {
                    this.ContextualGroupField = null;
                }
                else {
                    if ((this.ContextualGroupField == null)) {
                        this.ContextualGroupField = XTypedList<ContextualGroupType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ContextualGroupXName);
                    }
                    else {
                        XTypedServices.SetList<ContextualGroupType>(this.ContextualGroupField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ContextualTabsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ContextualGroupXName, typeof(ContextualGroupType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class ControlRefType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DisplayModeXName = System.Xml.Linq.XName.Get("DisplayMode", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TemplateAliasXName = System.Xml.Linq.XName.Get("TemplateAlias", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ControlRefType", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator ControlRefType(XElement xe) { return XTypedServices.ToXTypedElement<ControlRefType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ControlRefType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.DisplayModeType? DisplayMode {
            get {
                XAttribute x = this.Attribute(DisplayModeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.DisplayModeType)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.DisplayModeType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(DisplayModeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TemplateAlias {
            get {
                XAttribute x = this.Attribute(TemplateAliasXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TemplateAliasXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ControlRefType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Button* | CheckBox* | ComboBox* | DropDown* | FlyoutAnchor* | GalleryButton* | Label* | MRUSplitButton* | Spinner* | SplitButton* | TextBox* | ToggleButton*)*)
    /// </para>
    /// </summary>
    public partial class ControlsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ButtonXName = System.Xml.Linq.XName.Get("Button", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ButtonType> ButtonField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CheckBoxXName = System.Xml.Linq.XName.Get("CheckBox", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CheckBoxType> CheckBoxField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ComboBoxXName = System.Xml.Linq.XName.Get("ComboBox", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ComboBoxType> ComboBoxField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DropDownXName = System.Xml.Linq.XName.Get("DropDown", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DropDownType> DropDownField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FlyoutAnchorXName = System.Xml.Linq.XName.Get("FlyoutAnchor", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FlyoutAnchorType> FlyoutAnchorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GalleryButtonXName = System.Xml.Linq.XName.Get("GalleryButton", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GalleryButtonType> GalleryButtonField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LabelXName = System.Xml.Linq.XName.Get("Label", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LabelType> LabelField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MRUSplitButtonXName = System.Xml.Linq.XName.Get("MRUSplitButton", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MRUSplitButtonType> MRUSplitButtonField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SpinnerXName = System.Xml.Linq.XName.Get("Spinner", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SpinnerType> SpinnerField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SplitButtonXName = System.Xml.Linq.XName.Get("SplitButton", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SplitButtonType> SplitButtonField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TextBoxXName = System.Xml.Linq.XName.Get("TextBox", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TextBoxType> TextBoxField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToggleButtonXName = System.Xml.Linq.XName.Get("ToggleButton", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ToggleButtonType> ToggleButtonField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32XName = System.Xml.Linq.XName.Get("ToolTipImage32by32", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32ClassXName = System.Xml.Linq.XName.Get("ToolTipImage32by32Class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32LeftXName = System.Xml.Linq.XName.Get("ToolTipImage32by32Left", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32TopXName = System.Xml.Linq.XName.Get("ToolTipImage32by32Top", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipTitleXName = System.Xml.Linq.XName.Get("ToolTipTitle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipDescriptionXName = System.Xml.Linq.XName.Get("ToolTipDescription", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipHelpKeyWordXName = System.Xml.Linq.XName.Get("ToolTipHelpKeyWord", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipShortcutKeyXName = System.Xml.Linq.XName.Get("ToolTipShortcutKey", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipSelectedItemTitleXName = System.Xml.Linq.XName.Get("ToolTipSelectedItemTitle", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ControlsType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ControlsType(XElement xe) { return XTypedServices.ToXTypedElement<ControlsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ControlsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(ButtonXName), new NamedContentModelEntity(CheckBoxXName), new NamedContentModelEntity(ComboBoxXName), new NamedContentModelEntity(DropDownXName), new NamedContentModelEntity(FlyoutAnchorXName), new NamedContentModelEntity(GalleryButtonXName), new NamedContentModelEntity(LabelXName), new NamedContentModelEntity(MRUSplitButtonXName), new NamedContentModelEntity(SpinnerXName), new NamedContentModelEntity(SplitButtonXName), new NamedContentModelEntity(TextBoxXName), new NamedContentModelEntity(ToggleButtonXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Button* | CheckBox* | ComboBox* | DropDown* | FlyoutAnchor* | GalleryButton* | Label* | MRUSplitButton* | Spinner* | SplitButton* | TextBox* | ToggleButton*)*)
        /// </para>
        /// </summary>
        public ControlsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Button* | CheckBox* | ComboBox* | DropDown* | FlyoutAnchor* | GalleryButton* | Label* | MRUSplitButton* | Spinner* | SplitButton* | TextBox* | ToggleButton*)*)
        /// </para>
        /// </summary>
        public virtual IList<ButtonType> Button {
            get {
                if ((this.ButtonField == null)) {
                    this.ButtonField = new XTypedList<ButtonType>(this, LinqToXsdTypeManager.Instance, ButtonXName);
                }
                return this.ButtonField;
            }
            set {
                if ((value == null)) {
                    this.ButtonField = null;
                }
                else {
                    if ((this.ButtonField == null)) {
                        this.ButtonField = XTypedList<ButtonType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ButtonXName);
                    }
                    else {
                        XTypedServices.SetList<ButtonType>(this.ButtonField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Button* | CheckBox* | ComboBox* | DropDown* | FlyoutAnchor* | GalleryButton* | Label* | MRUSplitButton* | Spinner* | SplitButton* | TextBox* | ToggleButton*)*)
        /// </para>
        /// </summary>
        public virtual IList<CheckBoxType> CheckBox {
            get {
                if ((this.CheckBoxField == null)) {
                    this.CheckBoxField = new XTypedList<CheckBoxType>(this, LinqToXsdTypeManager.Instance, CheckBoxXName);
                }
                return this.CheckBoxField;
            }
            set {
                if ((value == null)) {
                    this.CheckBoxField = null;
                }
                else {
                    if ((this.CheckBoxField == null)) {
                        this.CheckBoxField = XTypedList<CheckBoxType>.Initialize(this, LinqToXsdTypeManager.Instance, value, CheckBoxXName);
                    }
                    else {
                        XTypedServices.SetList<CheckBoxType>(this.CheckBoxField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Button* | CheckBox* | ComboBox* | DropDown* | FlyoutAnchor* | GalleryButton* | Label* | MRUSplitButton* | Spinner* | SplitButton* | TextBox* | ToggleButton*)*)
        /// </para>
        /// </summary>
        public virtual IList<ComboBoxType> ComboBox {
            get {
                if ((this.ComboBoxField == null)) {
                    this.ComboBoxField = new XTypedList<ComboBoxType>(this, LinqToXsdTypeManager.Instance, ComboBoxXName);
                }
                return this.ComboBoxField;
            }
            set {
                if ((value == null)) {
                    this.ComboBoxField = null;
                }
                else {
                    if ((this.ComboBoxField == null)) {
                        this.ComboBoxField = XTypedList<ComboBoxType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ComboBoxXName);
                    }
                    else {
                        XTypedServices.SetList<ComboBoxType>(this.ComboBoxField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Button* | CheckBox* | ComboBox* | DropDown* | FlyoutAnchor* | GalleryButton* | Label* | MRUSplitButton* | Spinner* | SplitButton* | TextBox* | ToggleButton*)*)
        /// </para>
        /// </summary>
        public virtual IList<DropDownType> DropDown {
            get {
                if ((this.DropDownField == null)) {
                    this.DropDownField = new XTypedList<DropDownType>(this, LinqToXsdTypeManager.Instance, DropDownXName);
                }
                return this.DropDownField;
            }
            set {
                if ((value == null)) {
                    this.DropDownField = null;
                }
                else {
                    if ((this.DropDownField == null)) {
                        this.DropDownField = XTypedList<DropDownType>.Initialize(this, LinqToXsdTypeManager.Instance, value, DropDownXName);
                    }
                    else {
                        XTypedServices.SetList<DropDownType>(this.DropDownField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Button* | CheckBox* | ComboBox* | DropDown* | FlyoutAnchor* | GalleryButton* | Label* | MRUSplitButton* | Spinner* | SplitButton* | TextBox* | ToggleButton*)*)
        /// </para>
        /// </summary>
        public virtual IList<FlyoutAnchorType> FlyoutAnchor {
            get {
                if ((this.FlyoutAnchorField == null)) {
                    this.FlyoutAnchorField = new XTypedList<FlyoutAnchorType>(this, LinqToXsdTypeManager.Instance, FlyoutAnchorXName);
                }
                return this.FlyoutAnchorField;
            }
            set {
                if ((value == null)) {
                    this.FlyoutAnchorField = null;
                }
                else {
                    if ((this.FlyoutAnchorField == null)) {
                        this.FlyoutAnchorField = XTypedList<FlyoutAnchorType>.Initialize(this, LinqToXsdTypeManager.Instance, value, FlyoutAnchorXName);
                    }
                    else {
                        XTypedServices.SetList<FlyoutAnchorType>(this.FlyoutAnchorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Button* | CheckBox* | ComboBox* | DropDown* | FlyoutAnchor* | GalleryButton* | Label* | MRUSplitButton* | Spinner* | SplitButton* | TextBox* | ToggleButton*)*)
        /// </para>
        /// </summary>
        public virtual IList<GalleryButtonType> GalleryButton {
            get {
                if ((this.GalleryButtonField == null)) {
                    this.GalleryButtonField = new XTypedList<GalleryButtonType>(this, LinqToXsdTypeManager.Instance, GalleryButtonXName);
                }
                return this.GalleryButtonField;
            }
            set {
                if ((value == null)) {
                    this.GalleryButtonField = null;
                }
                else {
                    if ((this.GalleryButtonField == null)) {
                        this.GalleryButtonField = XTypedList<GalleryButtonType>.Initialize(this, LinqToXsdTypeManager.Instance, value, GalleryButtonXName);
                    }
                    else {
                        XTypedServices.SetList<GalleryButtonType>(this.GalleryButtonField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Button* | CheckBox* | ComboBox* | DropDown* | FlyoutAnchor* | GalleryButton* | Label* | MRUSplitButton* | Spinner* | SplitButton* | TextBox* | ToggleButton*)*)
        /// </para>
        /// </summary>
        public virtual IList<LabelType> Label {
            get {
                if ((this.LabelField == null)) {
                    this.LabelField = new XTypedList<LabelType>(this, LinqToXsdTypeManager.Instance, LabelXName);
                }
                return this.LabelField;
            }
            set {
                if ((value == null)) {
                    this.LabelField = null;
                }
                else {
                    if ((this.LabelField == null)) {
                        this.LabelField = XTypedList<LabelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, LabelXName);
                    }
                    else {
                        XTypedServices.SetList<LabelType>(this.LabelField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Button* | CheckBox* | ComboBox* | DropDown* | FlyoutAnchor* | GalleryButton* | Label* | MRUSplitButton* | Spinner* | SplitButton* | TextBox* | ToggleButton*)*)
        /// </para>
        /// </summary>
        public virtual IList<MRUSplitButtonType> MRUSplitButton {
            get {
                if ((this.MRUSplitButtonField == null)) {
                    this.MRUSplitButtonField = new XTypedList<MRUSplitButtonType>(this, LinqToXsdTypeManager.Instance, MRUSplitButtonXName);
                }
                return this.MRUSplitButtonField;
            }
            set {
                if ((value == null)) {
                    this.MRUSplitButtonField = null;
                }
                else {
                    if ((this.MRUSplitButtonField == null)) {
                        this.MRUSplitButtonField = XTypedList<MRUSplitButtonType>.Initialize(this, LinqToXsdTypeManager.Instance, value, MRUSplitButtonXName);
                    }
                    else {
                        XTypedServices.SetList<MRUSplitButtonType>(this.MRUSplitButtonField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Button* | CheckBox* | ComboBox* | DropDown* | FlyoutAnchor* | GalleryButton* | Label* | MRUSplitButton* | Spinner* | SplitButton* | TextBox* | ToggleButton*)*)
        /// </para>
        /// </summary>
        public virtual IList<SpinnerType> Spinner {
            get {
                if ((this.SpinnerField == null)) {
                    this.SpinnerField = new XTypedList<SpinnerType>(this, LinqToXsdTypeManager.Instance, SpinnerXName);
                }
                return this.SpinnerField;
            }
            set {
                if ((value == null)) {
                    this.SpinnerField = null;
                }
                else {
                    if ((this.SpinnerField == null)) {
                        this.SpinnerField = XTypedList<SpinnerType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SpinnerXName);
                    }
                    else {
                        XTypedServices.SetList<SpinnerType>(this.SpinnerField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Button* | CheckBox* | ComboBox* | DropDown* | FlyoutAnchor* | GalleryButton* | Label* | MRUSplitButton* | Spinner* | SplitButton* | TextBox* | ToggleButton*)*)
        /// </para>
        /// </summary>
        public virtual IList<SplitButtonType> SplitButton {
            get {
                if ((this.SplitButtonField == null)) {
                    this.SplitButtonField = new XTypedList<SplitButtonType>(this, LinqToXsdTypeManager.Instance, SplitButtonXName);
                }
                return this.SplitButtonField;
            }
            set {
                if ((value == null)) {
                    this.SplitButtonField = null;
                }
                else {
                    if ((this.SplitButtonField == null)) {
                        this.SplitButtonField = XTypedList<SplitButtonType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SplitButtonXName);
                    }
                    else {
                        XTypedServices.SetList<SplitButtonType>(this.SplitButtonField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Button* | CheckBox* | ComboBox* | DropDown* | FlyoutAnchor* | GalleryButton* | Label* | MRUSplitButton* | Spinner* | SplitButton* | TextBox* | ToggleButton*)*)
        /// </para>
        /// </summary>
        public virtual IList<TextBoxType> TextBox {
            get {
                if ((this.TextBoxField == null)) {
                    this.TextBoxField = new XTypedList<TextBoxType>(this, LinqToXsdTypeManager.Instance, TextBoxXName);
                }
                return this.TextBoxField;
            }
            set {
                if ((value == null)) {
                    this.TextBoxField = null;
                }
                else {
                    if ((this.TextBoxField == null)) {
                        this.TextBoxField = XTypedList<TextBoxType>.Initialize(this, LinqToXsdTypeManager.Instance, value, TextBoxXName);
                    }
                    else {
                        XTypedServices.SetList<TextBoxType>(this.TextBoxField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Button* | CheckBox* | ComboBox* | DropDown* | FlyoutAnchor* | GalleryButton* | Label* | MRUSplitButton* | Spinner* | SplitButton* | TextBox* | ToggleButton*)*)
        /// </para>
        /// </summary>
        public virtual IList<ToggleButtonType> ToggleButton {
            get {
                if ((this.ToggleButtonField == null)) {
                    this.ToggleButtonField = new XTypedList<ToggleButtonType>(this, LinqToXsdTypeManager.Instance, ToggleButtonXName);
                }
                return this.ToggleButtonField;
            }
            set {
                if ((value == null)) {
                    this.ToggleButtonField = null;
                }
                else {
                    if ((this.ToggleButtonField == null)) {
                        this.ToggleButtonField = XTypedList<ToggleButtonType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ToggleButtonXName);
                    }
                    else {
                        XTypedServices.SetList<ToggleButtonType>(this.ToggleButtonField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipImage32by32 {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipImage32by32Class {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32ClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32ClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ToolTipImage32by32Left {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32LeftXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32LeftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ToolTipImage32by32Top {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32TopXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32TopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipTitle {
            get {
                XAttribute x = this.Attribute(ToolTipTitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipTitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipDescription {
            get {
                XAttribute x = this.Attribute(ToolTipDescriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipDescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipHelpKeyWord {
            get {
                XAttribute x = this.Attribute(ToolTipHelpKeyWordXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipHelpKeyWordXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipShortcutKey {
            get {
                XAttribute x = this.Attribute(ToolTipShortcutKeyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipShortcutKeyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipSelectedItemTitle {
            get {
                XAttribute x = this.Attribute(ToolTipSelectedItemTitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipSelectedItemTitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ControlsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ButtonXName, typeof(ButtonType));
            localElementDictionary.Add(CheckBoxXName, typeof(CheckBoxType));
            localElementDictionary.Add(ComboBoxXName, typeof(ComboBoxType));
            localElementDictionary.Add(DropDownXName, typeof(DropDownType));
            localElementDictionary.Add(FlyoutAnchorXName, typeof(FlyoutAnchorType));
            localElementDictionary.Add(GalleryButtonXName, typeof(GalleryButtonType));
            localElementDictionary.Add(LabelXName, typeof(LabelType));
            localElementDictionary.Add(MRUSplitButtonXName, typeof(MRUSplitButtonType));
            localElementDictionary.Add(SpinnerXName, typeof(SpinnerType));
            localElementDictionary.Add(SplitButtonXName, typeof(SplitButtonType));
            localElementDictionary.Add(TextBoxXName, typeof(TextBoxType));
            localElementDictionary.Add(ToggleButtonXName, typeof(ToggleButtonType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Menu?)
    /// </para>
    /// </summary>
    public partial class DropDownType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MenuXName = System.Xml.Linq.XName.Get("Menu", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AltArrowXName = System.Xml.Linq.XName.Get("AltArrow", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AltXName = System.Xml.Linq.XName.Get("Alt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CacheMenuVersionsXName = System.Xml.Linq.XName.Get("CacheMenuVersions", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool CacheMenuVersionsDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandXName = System.Xml.Linq.XName.Get("Command", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandMenuOpenXName = System.Xml.Linq.XName.Get("CommandMenuOpen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandMenuCloseXName = System.Xml.Linq.XName.Get("CommandMenuClose", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandPreviewXName = System.Xml.Linq.XName.Get("CommandPreview", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandPreviewRevertXName = System.Xml.Linq.XName.Get("CommandPreviewRevert", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InitialItemXName = System.Xml.Linq.XName.Get("InitialItem", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PopulateDynamicallyXName = System.Xml.Linq.XName.Get("PopulateDynamically", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool PopulateDynamicallyDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PopulateQueryCommandXName = System.Xml.Linq.XName.Get("PopulateQueryCommand", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PopulateOnlyOnceXName = System.Xml.Linq.XName.Get("PopulateOnlyOnce", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool PopulateOnlyOnceDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName QueryCommandXName = System.Xml.Linq.XName.Get("QueryCommand", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SequenceXName = System.Xml.Linq.XName.Get("Sequence", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TemplateAliasXName = System.Xml.Linq.XName.Get("TemplateAlias", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32XName = System.Xml.Linq.XName.Get("ToolTipImage32by32", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32ClassXName = System.Xml.Linq.XName.Get("ToolTipImage32by32Class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32LeftXName = System.Xml.Linq.XName.Get("ToolTipImage32by32Left", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32TopXName = System.Xml.Linq.XName.Get("ToolTipImage32by32Top", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipTitleXName = System.Xml.Linq.XName.Get("ToolTipTitle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipDescriptionXName = System.Xml.Linq.XName.Get("ToolTipDescription", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipHelpKeyWordXName = System.Xml.Linq.XName.Get("ToolTipHelpKeyWord", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipShortcutKeyXName = System.Xml.Linq.XName.Get("ToolTipShortcutKey", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipSelectedItemTitleXName = System.Xml.Linq.XName.Get("ToolTipSelectedItemTitle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WidthXName = System.Xml.Linq.XName.Get("Width", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SelectedItemDisplayModeXName = System.Xml.Linq.XName.Get("SelectedItemDisplayMode", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DropDownType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DropDownType(XElement xe) { return XTypedServices.ToXTypedElement<DropDownType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DropDownType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(MenuXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Menu?)
        /// </para>
        /// </summary>
        public DropDownType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Menu?)
        /// </para>
        /// </summary>
        public virtual MenuType Menu {
            get {
                XElement x = this.GetElement(MenuXName);
                return ((MenuType)(x));
            }
            set {
                this.SetElement(MenuXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string AltArrow {
            get {
                XAttribute x = this.Attribute(AltArrowXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AltArrowXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Alt {
            get {
                XAttribute x = this.Attribute(AltXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AltXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool CacheMenuVersions {
            get {
                XAttribute x = this.Attribute(CacheMenuVersionsXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, CacheMenuVersionsDefaultValue);
            }
            set {
                this.SetAttribute(CacheMenuVersionsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Command {
            get {
                XAttribute x = this.Attribute(CommandXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CommandMenuOpen {
            get {
                XAttribute x = this.Attribute(CommandMenuOpenXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandMenuOpenXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CommandMenuClose {
            get {
                XAttribute x = this.Attribute(CommandMenuCloseXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandMenuCloseXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CommandPreview {
            get {
                XAttribute x = this.Attribute(CommandPreviewXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandPreviewXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CommandPreviewRevert {
            get {
                XAttribute x = this.Attribute(CommandPreviewRevertXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandPreviewRevertXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string InitialItem {
            get {
                XAttribute x = this.Attribute(InitialItemXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(InitialItemXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool PopulateDynamically {
            get {
                XAttribute x = this.Attribute(PopulateDynamicallyXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, PopulateDynamicallyDefaultValue);
            }
            set {
                this.SetAttribute(PopulateDynamicallyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string PopulateQueryCommand {
            get {
                XAttribute x = this.Attribute(PopulateQueryCommandXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PopulateQueryCommandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool PopulateOnlyOnce {
            get {
                XAttribute x = this.Attribute(PopulateOnlyOnceXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, PopulateOnlyOnceDefaultValue);
            }
            set {
                this.SetAttribute(PopulateOnlyOnceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string QueryCommand {
            get {
                XAttribute x = this.Attribute(QueryCommandXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(QueryCommandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Sequence {
            get {
                XAttribute x = this.Attribute(SequenceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(SequenceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TemplateAlias {
            get {
                XAttribute x = this.Attribute(TemplateAliasXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TemplateAliasXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipImage32by32 {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipImage32by32Class {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32ClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32ClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ToolTipImage32by32Left {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32LeftXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32LeftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ToolTipImage32by32Top {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32TopXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32TopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipTitle {
            get {
                XAttribute x = this.Attribute(ToolTipTitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipTitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipDescription {
            get {
                XAttribute x = this.Attribute(ToolTipDescriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipDescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipHelpKeyWord {
            get {
                XAttribute x = this.Attribute(ToolTipHelpKeyWordXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipHelpKeyWordXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipShortcutKey {
            get {
                XAttribute x = this.Attribute(ToolTipShortcutKeyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipShortcutKeyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipSelectedItemTitle {
            get {
                XAttribute x = this.Attribute(ToolTipSelectedItemTitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipSelectedItemTitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Width {
            get {
                XAttribute x = this.Attribute(WidthXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(WidthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.DisplayModeType? SelectedItemDisplayMode {
            get {
                XAttribute x = this.Attribute(SelectedItemDisplayModeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.DisplayModeType)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.DisplayModeType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(SelectedItemDisplayModeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DropDownType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(MenuXName, typeof(MenuType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Menu?)
    /// </para>
    /// </summary>
    public partial class FlyoutAnchorType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MenuXName = System.Xml.Linq.XName.Get("Menu", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AltXName = System.Xml.Linq.XName.Get("Alt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CacheMenuVersionsXName = System.Xml.Linq.XName.Get("CacheMenuVersions", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool CacheMenuVersionsDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandXName = System.Xml.Linq.XName.Get("Command", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandTypeXName = System.Xml.Linq.XName.Get("CommandType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandMenuCloseXName = System.Xml.Linq.XName.Get("CommandMenuClose", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image16by16XName = System.Xml.Linq.XName.Get("Image16by16", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image16by16ClassXName = System.Xml.Linq.XName.Get("Image16by16Class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image16by16LeftXName = System.Xml.Linq.XName.Get("Image16by16Left", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image16by16TopXName = System.Xml.Linq.XName.Get("Image16by16Top", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image32by32XName = System.Xml.Linq.XName.Get("Image32by32", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image32by32ClassXName = System.Xml.Linq.XName.Get("Image32by32Class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image32by32LeftXName = System.Xml.Linq.XName.Get("Image32by32Left", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image32by32TopXName = System.Xml.Linq.XName.Get("Image32by32Top", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LabelTextXName = System.Xml.Linq.XName.Get("LabelText", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PopulateDynamicallyXName = System.Xml.Linq.XName.Get("PopulateDynamically", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool PopulateDynamicallyDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PopulateQueryCommandXName = System.Xml.Linq.XName.Get("PopulateQueryCommand", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PopulateOnlyOnceXName = System.Xml.Linq.XName.Get("PopulateOnlyOnce", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool PopulateOnlyOnceDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SequenceXName = System.Xml.Linq.XName.Get("Sequence", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TemplateAliasXName = System.Xml.Linq.XName.Get("TemplateAlias", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32XName = System.Xml.Linq.XName.Get("ToolTipImage32by32", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32ClassXName = System.Xml.Linq.XName.Get("ToolTipImage32by32Class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32LeftXName = System.Xml.Linq.XName.Get("ToolTipImage32by32Left", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32TopXName = System.Xml.Linq.XName.Get("ToolTipImage32by32Top", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipTitleXName = System.Xml.Linq.XName.Get("ToolTipTitle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipDescriptionXName = System.Xml.Linq.XName.Get("ToolTipDescription", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipHelpKeyWordXName = System.Xml.Linq.XName.Get("ToolTipHelpKeyWord", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipSelectedItemTitleXName = System.Xml.Linq.XName.Get("ToolTipSelectedItemTitle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipShortcutKeyXName = System.Xml.Linq.XName.Get("ToolTipShortcutKey", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FlyoutAnchorType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FlyoutAnchorType(XElement xe) { return XTypedServices.ToXTypedElement<FlyoutAnchorType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FlyoutAnchorType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(MenuXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Menu?)
        /// </para>
        /// </summary>
        public FlyoutAnchorType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Menu?)
        /// </para>
        /// </summary>
        public virtual MenuType Menu {
            get {
                XElement x = this.GetElement(MenuXName);
                return ((MenuType)(x));
            }
            set {
                this.SetElement(MenuXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Alt {
            get {
                XAttribute x = this.Attribute(AltXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AltXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool CacheMenuVersions {
            get {
                XAttribute x = this.Attribute(CacheMenuVersionsXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, CacheMenuVersionsDefaultValue);
            }
            set {
                this.SetAttribute(CacheMenuVersionsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Command {
            get {
                XAttribute x = this.Attribute(CommandXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.CommandTypeType? CommandType {
            get {
                XAttribute x = this.Attribute(CommandTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.CommandTypeType)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.CommandTypeType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(CommandTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CommandMenuClose {
            get {
                XAttribute x = this.Attribute(CommandMenuCloseXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandMenuCloseXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Image16by16 {
            get {
                XAttribute x = this.Attribute(Image16by16XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(Image16by16XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Image16by16Class {
            get {
                XAttribute x = this.Attribute(Image16by16ClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(Image16by16ClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Image16by16Left {
            get {
                XAttribute x = this.Attribute(Image16by16LeftXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(Image16by16LeftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Image16by16Top {
            get {
                XAttribute x = this.Attribute(Image16by16TopXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(Image16by16TopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Image32by32 {
            get {
                XAttribute x = this.Attribute(Image32by32XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(Image32by32XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Image32by32Class {
            get {
                XAttribute x = this.Attribute(Image32by32ClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(Image32by32ClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Image32by32Left {
            get {
                XAttribute x = this.Attribute(Image32by32LeftXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(Image32by32LeftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Image32by32Top {
            get {
                XAttribute x = this.Attribute(Image32by32TopXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(Image32by32TopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string LabelText {
            get {
                XAttribute x = this.Attribute(LabelTextXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(LabelTextXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool PopulateDynamically {
            get {
                XAttribute x = this.Attribute(PopulateDynamicallyXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, PopulateDynamicallyDefaultValue);
            }
            set {
                this.SetAttribute(PopulateDynamicallyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string PopulateQueryCommand {
            get {
                XAttribute x = this.Attribute(PopulateQueryCommandXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PopulateQueryCommandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool PopulateOnlyOnce {
            get {
                XAttribute x = this.Attribute(PopulateOnlyOnceXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, PopulateOnlyOnceDefaultValue);
            }
            set {
                this.SetAttribute(PopulateOnlyOnceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Sequence {
            get {
                XAttribute x = this.Attribute(SequenceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(SequenceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TemplateAlias {
            get {
                XAttribute x = this.Attribute(TemplateAliasXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TemplateAliasXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipImage32by32 {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipImage32by32Class {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32ClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32ClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ToolTipImage32by32Left {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32LeftXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32LeftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ToolTipImage32by32Top {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32TopXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32TopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipTitle {
            get {
                XAttribute x = this.Attribute(ToolTipTitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipTitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipDescription {
            get {
                XAttribute x = this.Attribute(ToolTipDescriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipDescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipHelpKeyWord {
            get {
                XAttribute x = this.Attribute(ToolTipHelpKeyWordXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipHelpKeyWordXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipSelectedItemTitle {
            get {
                XAttribute x = this.Attribute(ToolTipSelectedItemTitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipSelectedItemTitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipShortcutKey {
            get {
                XAttribute x = this.Attribute(ToolTipShortcutKeyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipShortcutKeyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FlyoutAnchorType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(MenuXName, typeof(MenuType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (GalleryButton+)
    /// </para>
    /// </summary>
    public partial class GalleryType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GalleryButtonXName = System.Xml.Linq.XName.Get("GalleryButton", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GalleryButtonType> GalleryButtonField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandXName = System.Xml.Linq.XName.Get("Command", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandPreviewXName = System.Xml.Linq.XName.Get("CommandPreview", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandRevertXName = System.Xml.Linq.XName.Get("CommandRevert", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ElementDimensionsXName = System.Xml.Linq.XName.Get("ElementDimensions", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName QueryCommandXName = System.Xml.Linq.XName.Get("QueryCommand", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SequenceXName = System.Xml.Linq.XName.Get("Sequence", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WidthXName = System.Xml.Linq.XName.Get("Width", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GalleryType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GalleryType(XElement xe) { return XTypedServices.ToXTypedElement<GalleryType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GalleryType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(GalleryButtonXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (GalleryButton+)
        /// </para>
        /// </summary>
        public GalleryType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GalleryButton+)
        /// </para>
        /// </summary>
        public virtual IList<GalleryButtonType> GalleryButton {
            get {
                if ((this.GalleryButtonField == null)) {
                    this.GalleryButtonField = new XTypedList<GalleryButtonType>(this, LinqToXsdTypeManager.Instance, GalleryButtonXName);
                }
                return this.GalleryButtonField;
            }
            set {
                if ((value == null)) {
                    this.GalleryButtonField = null;
                }
                else {
                    if ((this.GalleryButtonField == null)) {
                        this.GalleryButtonField = XTypedList<GalleryButtonType>.Initialize(this, LinqToXsdTypeManager.Instance, value, GalleryButtonXName);
                    }
                    else {
                        XTypedServices.SetList<GalleryButtonType>(this.GalleryButtonField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Command {
            get {
                XAttribute x = this.Attribute(CommandXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CommandPreview {
            get {
                XAttribute x = this.Attribute(CommandPreviewXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandPreviewXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CommandRevert {
            get {
                XAttribute x = this.Attribute(CommandRevertXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandRevertXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.ElementDimensionsType ElementDimensions {
            get {
                XAttribute x = this.Attribute(ElementDimensionsXName);
                return ((Microsoft.Schemas.SharePoint.ElementDimensionsType)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.ElementDimensionsType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ElementDimensionsXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string QueryCommand {
            get {
                XAttribute x = this.Attribute(QueryCommandXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(QueryCommandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Sequence {
            get {
                XAttribute x = this.Attribute(SequenceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(SequenceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual decimal Width {
            get {
                XAttribute x = this.Attribute(WidthXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(WidthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GalleryType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(GalleryButtonXName, typeof(GalleryButtonType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class GalleryButtonType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AltXName = System.Xml.Linq.XName.Get("Alt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandXName = System.Xml.Linq.XName.Get("Command", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandPreviewXName = System.Xml.Linq.XName.Get("CommandPreview", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandRevertXName = System.Xml.Linq.XName.Get("CommandRevert", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandTypeXName = System.Xml.Linq.XName.Get("CommandType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandValueIdXName = System.Xml.Linq.XName.Get("CommandValueId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ElementDimensionsXName = System.Xml.Linq.XName.Get("ElementDimensions", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageXName = System.Xml.Linq.XName.Get("Image", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageClassXName = System.Xml.Linq.XName.Get("ImageClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageLeftXName = System.Xml.Linq.XName.Get("ImageLeft", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageTopXName = System.Xml.Linq.XName.Get("ImageTop", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InnerHTMLXName = System.Xml.Linq.XName.Get("InnerHTML", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MenuItemIdXName = System.Xml.Linq.XName.Get("MenuItemId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName QueryCommandXName = System.Xml.Linq.XName.Get("QueryCommand", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SequenceXName = System.Xml.Linq.XName.Get("Sequence", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TemplateAliasXName = System.Xml.Linq.XName.Get("TemplateAlias", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32XName = System.Xml.Linq.XName.Get("ToolTipImage32by32", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32ClassXName = System.Xml.Linq.XName.Get("ToolTipImage32by32Class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32LeftXName = System.Xml.Linq.XName.Get("ToolTipImage32by32Left", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32TopXName = System.Xml.Linq.XName.Get("ToolTipImage32by32Top", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipTitleXName = System.Xml.Linq.XName.Get("ToolTipTitle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipDescriptionXName = System.Xml.Linq.XName.Get("ToolTipDescription", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipHelpKeyWordXName = System.Xml.Linq.XName.Get("ToolTipHelpKeyWord", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipShortcutKeyXName = System.Xml.Linq.XName.Get("ToolTipShortcutKey", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GalleryButtonType", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator GalleryButtonType(XElement xe) { return XTypedServices.ToXTypedElement<GalleryButtonType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public GalleryButtonType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Alt {
            get {
                XAttribute x = this.Attribute(AltXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AltXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Command {
            get {
                XAttribute x = this.Attribute(CommandXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CommandPreview {
            get {
                XAttribute x = this.Attribute(CommandPreviewXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandPreviewXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CommandRevert {
            get {
                XAttribute x = this.Attribute(CommandRevertXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandRevertXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.CommandTypeType? CommandType {
            get {
                XAttribute x = this.Attribute(CommandTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.CommandTypeType)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.CommandTypeType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(CommandTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CommandValueId {
            get {
                XAttribute x = this.Attribute(CommandValueIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandValueIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.ElementDimensionsType? ElementDimensions {
            get {
                XAttribute x = this.Attribute(ElementDimensionsXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.ElementDimensionsType)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.ElementDimensionsType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ElementDimensionsXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Image {
            get {
                XAttribute x = this.Attribute(ImageXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ImageClass {
            get {
                XAttribute x = this.Attribute(ImageClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ImageLeft {
            get {
                XAttribute x = this.Attribute(ImageLeftXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ImageLeftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ImageTop {
            get {
                XAttribute x = this.Attribute(ImageTopXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ImageTopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string InnerHTML {
            get {
                XAttribute x = this.Attribute(InnerHTMLXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(InnerHTMLXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string MenuItemId {
            get {
                XAttribute x = this.Attribute(MenuItemIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(MenuItemIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string QueryCommand {
            get {
                XAttribute x = this.Attribute(QueryCommandXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(QueryCommandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Sequence {
            get {
                XAttribute x = this.Attribute(SequenceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(SequenceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TemplateAlias {
            get {
                XAttribute x = this.Attribute(TemplateAliasXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TemplateAliasXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipImage32by32 {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipImage32by32Class {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32ClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32ClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ToolTipImage32by32Left {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32LeftXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32LeftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ToolTipImage32by32Top {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32TopXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32TopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipTitle {
            get {
                XAttribute x = this.Attribute(ToolTipTitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipTitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipDescription {
            get {
                XAttribute x = this.Attribute(ToolTipDescriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipDescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipHelpKeyWord {
            get {
                XAttribute x = this.Attribute(ToolTipHelpKeyWordXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipHelpKeyWordXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipShortcutKey {
            get {
                XAttribute x = this.Attribute(ToolTipShortcutKeyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipShortcutKeyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GalleryButtonType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Layout*)
    /// </para>
    /// </summary>
    public partial class GroupTemplateType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LayoutXName = System.Xml.Linq.XName.Get("Layout", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LayoutType> LayoutField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ClassNameXName = System.Xml.Linq.XName.Get("ClassName", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GroupTemplateType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GroupTemplateType(XElement xe) { return XTypedServices.ToXTypedElement<GroupTemplateType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GroupTemplateType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(LayoutXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Layout*)
        /// </para>
        /// </summary>
        public GroupTemplateType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Layout*)
        /// </para>
        /// </summary>
        public virtual IList<LayoutType> Layout {
            get {
                if ((this.LayoutField == null)) {
                    this.LayoutField = new XTypedList<LayoutType>(this, LinqToXsdTypeManager.Instance, LayoutXName);
                }
                return this.LayoutField;
            }
            set {
                if ((value == null)) {
                    this.LayoutField = null;
                }
                else {
                    if ((this.LayoutField == null)) {
                        this.LayoutField = XTypedList<LayoutType>.Initialize(this, LinqToXsdTypeManager.Instance, value, LayoutXName);
                    }
                    else {
                        XTypedServices.SetList<LayoutType>(this.LayoutField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ClassName {
            get {
                XAttribute x = this.Attribute(ClassNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ClassNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GroupTemplateType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(LayoutXName, typeof(LayoutType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Group*)
    /// </para>
    /// </summary>
    public partial class GroupsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GroupXName = System.Xml.Linq.XName.Get("Group", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GroupType> GroupField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GroupsType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GroupsType(XElement xe) { return XTypedServices.ToXTypedElement<GroupsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GroupsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(GroupXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Group*)
        /// </para>
        /// </summary>
        public GroupsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Group*)
        /// </para>
        /// </summary>
        public virtual IList<GroupType> Group {
            get {
                if ((this.GroupField == null)) {
                    this.GroupField = new XTypedList<GroupType>(this, LinqToXsdTypeManager.Instance, GroupXName);
                }
                return this.GroupField;
            }
            set {
                if ((value == null)) {
                    this.GroupField = null;
                }
                else {
                    if ((this.GroupField == null)) {
                        this.GroupField = XTypedList<GroupType>.Initialize(this, LinqToXsdTypeManager.Instance, value, GroupXName);
                    }
                    else {
                        XTypedServices.SetList<GroupType>(this.GroupField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GroupsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(GroupXName, typeof(GroupType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Controls)
    /// </para>
    /// </summary>
    public partial class GroupType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ControlsXName = System.Xml.Linq.XName.Get("Controls", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandXName = System.Xml.Linq.XName.Get("Command", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DescriptionXName = System.Xml.Linq.XName.Get("Description", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image32by32PopupXName = System.Xml.Linq.XName.Get("Image32by32Popup", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image32by32PopupClassXName = System.Xml.Linq.XName.Get("Image32by32PopupClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image32by32PopupLeftXName = System.Xml.Linq.XName.Get("Image32by32PopupLeft", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image32by32PopupTopXName = System.Xml.Linq.XName.Get("Image32by32PopupTop", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PopupWidthXName = System.Xml.Linq.XName.Get("PopupWidth", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SequenceXName = System.Xml.Linq.XName.Get("Sequence", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TemplateXName = System.Xml.Linq.XName.Get("Template", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TitleXName = System.Xml.Linq.XName.Get("Title", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GroupType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator GroupType(XElement xe) { return XTypedServices.ToXTypedElement<GroupType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GroupType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Controls)
        /// </para>
        /// </summary>
        public GroupType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Controls)
        /// </para>
        /// </summary>
        public virtual ControlsType Controls {
            get {
                XElement x = this.GetElement(ControlsXName);
                return ((ControlsType)(x));
            }
            set {
                this.SetElement(ControlsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Command {
            get {
                XAttribute x = this.Attribute(CommandXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Description {
            get {
                XAttribute x = this.Attribute(DescriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Image32by32Popup {
            get {
                XAttribute x = this.Attribute(Image32by32PopupXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(Image32by32PopupXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Image32by32PopupClass {
            get {
                XAttribute x = this.Attribute(Image32by32PopupClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(Image32by32PopupClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Image32by32PopupLeft {
            get {
                XAttribute x = this.Attribute(Image32by32PopupLeftXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(Image32by32PopupLeftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Image32by32PopupTop {
            get {
                XAttribute x = this.Attribute(Image32by32PopupTopXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(Image32by32PopupTopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string PopupWidth {
            get {
                XAttribute x = this.Attribute(PopupWidthXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PopupWidthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Sequence {
            get {
                XAttribute x = this.Attribute(SequenceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(SequenceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Template {
            get {
                XAttribute x = this.Attribute(TemplateXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TemplateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Title {
            get {
                XAttribute x = this.Attribute(TitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GroupType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ControlsXName, typeof(ControlsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class InsertTableType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AltXName = System.Xml.Linq.XName.Get("Alt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandXName = System.Xml.Linq.XName.Get("Command", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandTypeXName = System.Xml.Linq.XName.Get("CommandType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandPreviewXName = System.Xml.Linq.XName.Get("CommandPreview", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandRevertXName = System.Xml.Linq.XName.Get("CommandRevert", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MenuSectionInitialTitleXName = System.Xml.Linq.XName.Get("MenuSectionInitialTitle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MenuSectionTitleXName = System.Xml.Linq.XName.Get("MenuSectionTitle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SequenceXName = System.Xml.Linq.XName.Get("Sequence", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("InsertTableType", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator InsertTableType(XElement xe) { return XTypedServices.ToXTypedElement<InsertTableType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public InsertTableType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Alt {
            get {
                XAttribute x = this.Attribute(AltXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AltXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Command {
            get {
                XAttribute x = this.Attribute(CommandXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.CommandTypeType? CommandType {
            get {
                XAttribute x = this.Attribute(CommandTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.CommandTypeType)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.CommandTypeType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(CommandTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CommandPreview {
            get {
                XAttribute x = this.Attribute(CommandPreviewXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandPreviewXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CommandRevert {
            get {
                XAttribute x = this.Attribute(CommandRevertXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandRevertXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string MenuSectionInitialTitle {
            get {
                XAttribute x = this.Attribute(MenuSectionInitialTitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(MenuSectionInitialTitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string MenuSectionTitle {
            get {
                XAttribute x = this.Attribute(MenuSectionTitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(MenuSectionTitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Sequence {
            get {
                XAttribute x = this.Attribute(SequenceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(SequenceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<InsertTableType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Menu?)
    /// </para>
    /// </summary>
    public partial class JewelType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MenuXName = System.Xml.Linq.XName.Get("Menu", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AltXName = System.Xml.Linq.XName.Get("Alt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CacheMenuVersionsXName = System.Xml.Linq.XName.Get("CacheMenuVersions", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool CacheMenuVersionsDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandXName = System.Xml.Linq.XName.Get("Command", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandMenuCloseXName = System.Xml.Linq.XName.Get("CommandMenuClose", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandMenuOpenXName = System.Xml.Linq.XName.Get("CommandMenuOpen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HeightXName = System.Xml.Linq.XName.Get("Height", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageDownArrowXName = System.Xml.Linq.XName.Get("ImageDownArrow", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageDownArrowClassXName = System.Xml.Linq.XName.Get("ImageDownArrowClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageDownArrowLeftXName = System.Xml.Linq.XName.Get("ImageDownArrowLeft", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageDownArrowTopXName = System.Xml.Linq.XName.Get("ImageDownArrowTop", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageSideArrowXName = System.Xml.Linq.XName.Get("ImageSideArrow", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageSideArrowClassXName = System.Xml.Linq.XName.Get("ImageSideArrowClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageSideArrowLeftXName = System.Xml.Linq.XName.Get("ImageSideArrowLeft", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageSideArrowTopXName = System.Xml.Linq.XName.Get("ImageSideArrowTop", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageUpArrowXName = System.Xml.Linq.XName.Get("ImageUpArrow", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageUpArrowClassXName = System.Xml.Linq.XName.Get("ImageUpArrowClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageUpArrowLeftXName = System.Xml.Linq.XName.Get("ImageUpArrowLeft", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageUpArrowTopXName = System.Xml.Linq.XName.Get("ImageUpArrowTop", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageXName = System.Xml.Linq.XName.Get("Image", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageClassXName = System.Xml.Linq.XName.Get("ImageClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageLeftXName = System.Xml.Linq.XName.Get("ImageLeft", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageTopXName = System.Xml.Linq.XName.Get("ImageTop", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageHoverXName = System.Xml.Linq.XName.Get("ImageHover", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageHoverClassXName = System.Xml.Linq.XName.Get("ImageHoverClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageHoverLeftXName = System.Xml.Linq.XName.Get("ImageHoverLeft", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageHoverTopXName = System.Xml.Linq.XName.Get("ImageHoverTop", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageDownXName = System.Xml.Linq.XName.Get("ImageDown", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageDownClassXName = System.Xml.Linq.XName.Get("ImageDownClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageDownLeftXName = System.Xml.Linq.XName.Get("ImageDownLeft", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageDownTopXName = System.Xml.Linq.XName.Get("ImageDownTop", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageLeftSideXName = System.Xml.Linq.XName.Get("ImageLeftSide", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageLeftSideClassXName = System.Xml.Linq.XName.Get("ImageLeftSideClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageLeftSideLeftXName = System.Xml.Linq.XName.Get("ImageLeftSideLeft", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageLeftSideTopXName = System.Xml.Linq.XName.Get("ImageLeftSideTop", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageLeftSideWidthXName = System.Xml.Linq.XName.Get("ImageLeftSideWidth", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageLeftSideHoverXName = System.Xml.Linq.XName.Get("ImageLeftSideHover", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageLeftSideHoverClassXName = System.Xml.Linq.XName.Get("ImageLeftSideHoverClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageLeftSideHoverLeftXName = System.Xml.Linq.XName.Get("ImageLeftSideHoverLeft", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageLeftSideHoverTopXName = System.Xml.Linq.XName.Get("ImageLeftSideHoverTop", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageLeftSideDownXName = System.Xml.Linq.XName.Get("ImageLeftSideDown", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageLeftSideDownClassXName = System.Xml.Linq.XName.Get("ImageLeftSideDownClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageLeftSideDownLeftXName = System.Xml.Linq.XName.Get("ImageLeftSideDownLeft", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageLeftSideDownTopXName = System.Xml.Linq.XName.Get("ImageLeftSideDownTop", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageRightSideXName = System.Xml.Linq.XName.Get("ImageRightSide", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageRightSideClassXName = System.Xml.Linq.XName.Get("ImageRightSideClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageRightSideLeftXName = System.Xml.Linq.XName.Get("ImageRightSideLeft", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageRightSideTopXName = System.Xml.Linq.XName.Get("ImageRightSideTop", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageRightSideWidthXName = System.Xml.Linq.XName.Get("ImageRightSideWidth", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageRightSideHoverXName = System.Xml.Linq.XName.Get("ImageRightSideHover", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageRightSideHoverClassXName = System.Xml.Linq.XName.Get("ImageRightSideHoverClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageRightSideHoverLeftXName = System.Xml.Linq.XName.Get("ImageRightSideHoverLeft", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageRightSideHoverTopXName = System.Xml.Linq.XName.Get("ImageRightSideHoverTop", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageRightSideDownXName = System.Xml.Linq.XName.Get("ImageRightSideDown", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageRightSideDownClassXName = System.Xml.Linq.XName.Get("ImageRightSideDownClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageRightSideDownLeftXName = System.Xml.Linq.XName.Get("ImageRightSideDownLeft", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageRightSideDownTopXName = System.Xml.Linq.XName.Get("ImageRightSideDownTop", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LabelCssXName = System.Xml.Linq.XName.Get("LabelCss", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LabelTextXName = System.Xml.Linq.XName.Get("LabelText", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PopulateDynamicallyXName = System.Xml.Linq.XName.Get("PopulateDynamically", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool PopulateDynamicallyDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PopulateQueryCommandXName = System.Xml.Linq.XName.Get("PopulateQueryCommand", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PopulateOnlyOnceXName = System.Xml.Linq.XName.Get("PopulateOnlyOnce", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool PopulateOnlyOnceDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("JewelType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator JewelType(XElement xe) { return XTypedServices.ToXTypedElement<JewelType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static JewelType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(MenuXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Menu?)
        /// </para>
        /// </summary>
        public JewelType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Menu?)
        /// </para>
        /// </summary>
        public virtual MenuType Menu {
            get {
                XElement x = this.GetElement(MenuXName);
                return ((MenuType)(x));
            }
            set {
                this.SetElement(MenuXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Alt {
            get {
                XAttribute x = this.Attribute(AltXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AltXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool CacheMenuVersions {
            get {
                XAttribute x = this.Attribute(CacheMenuVersionsXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, CacheMenuVersionsDefaultValue);
            }
            set {
                this.SetAttribute(CacheMenuVersionsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Command {
            get {
                XAttribute x = this.Attribute(CommandXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CommandMenuClose {
            get {
                XAttribute x = this.Attribute(CommandMenuCloseXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandMenuCloseXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CommandMenuOpen {
            get {
                XAttribute x = this.Attribute(CommandMenuOpenXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandMenuOpenXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Height {
            get {
                XAttribute x = this.Attribute(HeightXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(HeightXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ImageDownArrow {
            get {
                XAttribute x = this.Attribute(ImageDownArrowXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageDownArrowXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ImageDownArrowClass {
            get {
                XAttribute x = this.Attribute(ImageDownArrowClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageDownArrowClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ImageDownArrowLeft {
            get {
                XAttribute x = this.Attribute(ImageDownArrowLeftXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ImageDownArrowLeftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ImageDownArrowTop {
            get {
                XAttribute x = this.Attribute(ImageDownArrowTopXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ImageDownArrowTopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ImageSideArrow {
            get {
                XAttribute x = this.Attribute(ImageSideArrowXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageSideArrowXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ImageSideArrowClass {
            get {
                XAttribute x = this.Attribute(ImageSideArrowClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageSideArrowClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ImageSideArrowLeft {
            get {
                XAttribute x = this.Attribute(ImageSideArrowLeftXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ImageSideArrowLeftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ImageSideArrowTop {
            get {
                XAttribute x = this.Attribute(ImageSideArrowTopXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ImageSideArrowTopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ImageUpArrow {
            get {
                XAttribute x = this.Attribute(ImageUpArrowXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageUpArrowXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ImageUpArrowClass {
            get {
                XAttribute x = this.Attribute(ImageUpArrowClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageUpArrowClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ImageUpArrowLeft {
            get {
                XAttribute x = this.Attribute(ImageUpArrowLeftXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ImageUpArrowLeftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ImageUpArrowTop {
            get {
                XAttribute x = this.Attribute(ImageUpArrowTopXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ImageUpArrowTopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Image {
            get {
                XAttribute x = this.Attribute(ImageXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ImageClass {
            get {
                XAttribute x = this.Attribute(ImageClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ImageLeft {
            get {
                XAttribute x = this.Attribute(ImageLeftXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ImageLeftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ImageTop {
            get {
                XAttribute x = this.Attribute(ImageTopXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ImageTopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ImageHover {
            get {
                XAttribute x = this.Attribute(ImageHoverXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageHoverXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ImageHoverClass {
            get {
                XAttribute x = this.Attribute(ImageHoverClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageHoverClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ImageHoverLeft {
            get {
                XAttribute x = this.Attribute(ImageHoverLeftXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ImageHoverLeftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ImageHoverTop {
            get {
                XAttribute x = this.Attribute(ImageHoverTopXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ImageHoverTopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ImageDown {
            get {
                XAttribute x = this.Attribute(ImageDownXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageDownXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ImageDownClass {
            get {
                XAttribute x = this.Attribute(ImageDownClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageDownClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ImageDownLeft {
            get {
                XAttribute x = this.Attribute(ImageDownLeftXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ImageDownLeftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ImageDownTop {
            get {
                XAttribute x = this.Attribute(ImageDownTopXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ImageDownTopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ImageLeftSide {
            get {
                XAttribute x = this.Attribute(ImageLeftSideXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageLeftSideXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ImageLeftSideClass {
            get {
                XAttribute x = this.Attribute(ImageLeftSideClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageLeftSideClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ImageLeftSideLeft {
            get {
                XAttribute x = this.Attribute(ImageLeftSideLeftXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ImageLeftSideLeftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ImageLeftSideTop {
            get {
                XAttribute x = this.Attribute(ImageLeftSideTopXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ImageLeftSideTopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ImageLeftSideWidth {
            get {
                XAttribute x = this.Attribute(ImageLeftSideWidthXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(ImageLeftSideWidthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ImageLeftSideHover {
            get {
                XAttribute x = this.Attribute(ImageLeftSideHoverXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageLeftSideHoverXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ImageLeftSideHoverClass {
            get {
                XAttribute x = this.Attribute(ImageLeftSideHoverClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageLeftSideHoverClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ImageLeftSideHoverLeft {
            get {
                XAttribute x = this.Attribute(ImageLeftSideHoverLeftXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ImageLeftSideHoverLeftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ImageLeftSideHoverTop {
            get {
                XAttribute x = this.Attribute(ImageLeftSideHoverTopXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ImageLeftSideHoverTopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ImageLeftSideDown {
            get {
                XAttribute x = this.Attribute(ImageLeftSideDownXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageLeftSideDownXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ImageLeftSideDownClass {
            get {
                XAttribute x = this.Attribute(ImageLeftSideDownClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageLeftSideDownClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ImageLeftSideDownLeft {
            get {
                XAttribute x = this.Attribute(ImageLeftSideDownLeftXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ImageLeftSideDownLeftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ImageLeftSideDownTop {
            get {
                XAttribute x = this.Attribute(ImageLeftSideDownTopXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ImageLeftSideDownTopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ImageRightSide {
            get {
                XAttribute x = this.Attribute(ImageRightSideXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageRightSideXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ImageRightSideClass {
            get {
                XAttribute x = this.Attribute(ImageRightSideClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageRightSideClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ImageRightSideLeft {
            get {
                XAttribute x = this.Attribute(ImageRightSideLeftXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ImageRightSideLeftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ImageRightSideTop {
            get {
                XAttribute x = this.Attribute(ImageRightSideTopXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ImageRightSideTopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ImageRightSideWidth {
            get {
                XAttribute x = this.Attribute(ImageRightSideWidthXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(ImageRightSideWidthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ImageRightSideHover {
            get {
                XAttribute x = this.Attribute(ImageRightSideHoverXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageRightSideHoverXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ImageRightSideHoverClass {
            get {
                XAttribute x = this.Attribute(ImageRightSideHoverClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageRightSideHoverClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ImageRightSideHoverLeft {
            get {
                XAttribute x = this.Attribute(ImageRightSideHoverLeftXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ImageRightSideHoverLeftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ImageRightSideHoverTop {
            get {
                XAttribute x = this.Attribute(ImageRightSideHoverTopXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ImageRightSideHoverTopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ImageRightSideDown {
            get {
                XAttribute x = this.Attribute(ImageRightSideDownXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageRightSideDownXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ImageRightSideDownClass {
            get {
                XAttribute x = this.Attribute(ImageRightSideDownClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageRightSideDownClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ImageRightSideDownLeft {
            get {
                XAttribute x = this.Attribute(ImageRightSideDownLeftXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ImageRightSideDownLeftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ImageRightSideDownTop {
            get {
                XAttribute x = this.Attribute(ImageRightSideDownTopXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ImageRightSideDownTopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string LabelCss {
            get {
                XAttribute x = this.Attribute(LabelCssXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(LabelCssXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string LabelText {
            get {
                XAttribute x = this.Attribute(LabelTextXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(LabelTextXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool PopulateDynamically {
            get {
                XAttribute x = this.Attribute(PopulateDynamicallyXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, PopulateDynamicallyDefaultValue);
            }
            set {
                this.SetAttribute(PopulateDynamicallyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string PopulateQueryCommand {
            get {
                XAttribute x = this.Attribute(PopulateQueryCommandXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PopulateQueryCommandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool PopulateOnlyOnce {
            get {
                XAttribute x = this.Attribute(PopulateOnlyOnceXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, PopulateOnlyOnceDefaultValue);
            }
            set {
                this.SetAttribute(PopulateOnlyOnceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<JewelType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(MenuXName, typeof(MenuType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class LabelType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ForIdXName = System.Xml.Linq.XName.Get("ForId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LabelTextXName = System.Xml.Linq.XName.Get("LabelText", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image16by16XName = System.Xml.Linq.XName.Get("Image16by16", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image16by16ClassXName = System.Xml.Linq.XName.Get("Image16by16Class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image16by16LeftXName = System.Xml.Linq.XName.Get("Image16by16Left", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image16by16TopXName = System.Xml.Linq.XName.Get("Image16by16Top", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SequenceXName = System.Xml.Linq.XName.Get("Sequence", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TemplateAliasXName = System.Xml.Linq.XName.Get("TemplateAlias", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName QueryCommandXName = System.Xml.Linq.XName.Get("QueryCommand", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandXName = System.Xml.Linq.XName.Get("Command", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("LabelType", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator LabelType(XElement xe) { return XTypedServices.ToXTypedElement<LabelType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public LabelType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ForId {
            get {
                XAttribute x = this.Attribute(ForIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ForIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string LabelText {
            get {
                XAttribute x = this.Attribute(LabelTextXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(LabelTextXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Image16by16 {
            get {
                XAttribute x = this.Attribute(Image16by16XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(Image16by16XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Image16by16Class {
            get {
                XAttribute x = this.Attribute(Image16by16ClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(Image16by16ClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Image16by16Left {
            get {
                XAttribute x = this.Attribute(Image16by16LeftXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(Image16by16LeftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Image16by16Top {
            get {
                XAttribute x = this.Attribute(Image16by16TopXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(Image16by16TopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Sequence {
            get {
                XAttribute x = this.Attribute(SequenceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(SequenceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TemplateAlias {
            get {
                XAttribute x = this.Attribute(TemplateAliasXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TemplateAliasXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string QueryCommand {
            get {
                XAttribute x = this.Attribute(QueryCommandXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(QueryCommandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Command {
            get {
                XAttribute x = this.Attribute(CommandXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LabelType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Section* | OverflowSection*)*)
    /// </para>
    /// </summary>
    public partial class LayoutType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SectionXName = System.Xml.Linq.XName.Get("Section", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SectionType> SectionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OverflowSectionXName = System.Xml.Linq.XName.Get("OverflowSection", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<OverflowSectionType> OverflowSectionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TitleXName = System.Xml.Linq.XName.Get("Title", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LayoutTitleXName = System.Xml.Linq.XName.Get("LayoutTitle", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("LayoutType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator LayoutType(XElement xe) { return XTypedServices.ToXTypedElement<LayoutType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static LayoutType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(SectionXName), new NamedContentModelEntity(OverflowSectionXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Section* | OverflowSection*)*)
        /// </para>
        /// </summary>
        public LayoutType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Section* | OverflowSection*)*)
        /// </para>
        /// </summary>
        public virtual IList<SectionType> Section {
            get {
                if ((this.SectionField == null)) {
                    this.SectionField = new XTypedList<SectionType>(this, LinqToXsdTypeManager.Instance, SectionXName);
                }
                return this.SectionField;
            }
            set {
                if ((value == null)) {
                    this.SectionField = null;
                }
                else {
                    if ((this.SectionField == null)) {
                        this.SectionField = XTypedList<SectionType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SectionXName);
                    }
                    else {
                        XTypedServices.SetList<SectionType>(this.SectionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Section* | OverflowSection*)*)
        /// </para>
        /// </summary>
        public virtual IList<OverflowSectionType> OverflowSection {
            get {
                if ((this.OverflowSectionField == null)) {
                    this.OverflowSectionField = new XTypedList<OverflowSectionType>(this, LinqToXsdTypeManager.Instance, OverflowSectionXName);
                }
                return this.OverflowSectionField;
            }
            set {
                if ((value == null)) {
                    this.OverflowSectionField = null;
                }
                else {
                    if ((this.OverflowSectionField == null)) {
                        this.OverflowSectionField = XTypedList<OverflowSectionType>.Initialize(this, LinqToXsdTypeManager.Instance, value, OverflowSectionXName);
                    }
                    else {
                        XTypedServices.SetList<OverflowSectionType>(this.OverflowSectionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Title {
            get {
                XAttribute x = this.Attribute(TitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string LayoutTitle {
            get {
                XAttribute x = this.Attribute(LayoutTitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(LayoutTitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LayoutType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SectionXName, typeof(SectionType));
            localElementDictionary.Add(OverflowSectionXName, typeof(OverflowSectionType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class MaxSizeType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GroupIdXName = System.Xml.Linq.XName.Get("GroupId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SequenceXName = System.Xml.Linq.XName.Get("Sequence", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SizeXName = System.Xml.Linq.XName.Get("Size", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("MaxSizeType", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator MaxSizeType(XElement xe) { return XTypedServices.ToXTypedElement<MaxSizeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public MaxSizeType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string GroupId {
            get {
                XAttribute x = this.Attribute(GroupIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(GroupIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Sequence {
            get {
                XAttribute x = this.Attribute(SequenceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(SequenceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Size {
            get {
                XAttribute x = this.Attribute(SizeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SizeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MaxSizeType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (MenuSection+)
    /// </para>
    /// </summary>
    public partial class MenuType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MenuSectionXName = System.Xml.Linq.XName.Get("MenuSection", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MenuSectionType> MenuSectionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MaxWidthXName = System.Xml.Linq.XName.Get("MaxWidth", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("MenuType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator MenuType(XElement xe) { return XTypedServices.ToXTypedElement<MenuType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MenuType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(MenuSectionXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (MenuSection+)
        /// </para>
        /// </summary>
        public MenuType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (MenuSection+)
        /// </para>
        /// </summary>
        public virtual IList<MenuSectionType> MenuSection {
            get {
                if ((this.MenuSectionField == null)) {
                    this.MenuSectionField = new XTypedList<MenuSectionType>(this, LinqToXsdTypeManager.Instance, MenuSectionXName);
                }
                return this.MenuSectionField;
            }
            set {
                if ((value == null)) {
                    this.MenuSectionField = null;
                }
                else {
                    if ((this.MenuSectionField == null)) {
                        this.MenuSectionField = XTypedList<MenuSectionType>.Initialize(this, LinqToXsdTypeManager.Instance, value, MenuSectionXName);
                    }
                    else {
                        XTypedServices.SetList<MenuSectionType>(this.MenuSectionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string MaxWidth {
            get {
                XAttribute x = this.Attribute(MaxWidthXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(MaxWidthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MenuType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(MenuSectionXName, typeof(MenuSectionType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Controls | Gallery)
    /// </para>
    /// </summary>
    public partial class MenuSectionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ControlsXName = System.Xml.Linq.XName.Get("Controls", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GalleryXName = System.Xml.Linq.XName.Get("Gallery", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TitleXName = System.Xml.Linq.XName.Get("Title", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ScrollableXName = System.Xml.Linq.XName.Get("Scrollable", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool ScrollableDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SequenceXName = System.Xml.Linq.XName.Get("Sequence", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MaxHeightXName = System.Xml.Linq.XName.Get("MaxHeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DisplayModeXName = System.Xml.Linq.XName.Get("DisplayMode", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string DisplayModeDefaultValue = "Menu";
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("MenuSectionType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator MenuSectionType(XElement xe) { return XTypedServices.ToXTypedElement<MenuSectionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MenuSectionType() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ControlsXName), new NamedContentModelEntity(GalleryXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Controls | Gallery)
        /// </para>
        /// </summary>
        public MenuSectionType() {
        }
        
        public MenuSectionType(MenuSectionControlsType Controls) {
            this.Controls = Controls;
        }
        
        public MenuSectionType(GalleryType Gallery) {
            this.Gallery = Gallery;
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Controls | Gallery)
        /// </para>
        /// </summary>
        public virtual MenuSectionControlsType Controls {
            get {
                XElement x = this.GetElement(ControlsXName);
                return ((MenuSectionControlsType)(x));
            }
            set {
                this.SetElement(ControlsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Controls | Gallery)
        /// </para>
        /// </summary>
        public virtual GalleryType Gallery {
            get {
                XElement x = this.GetElement(GalleryXName);
                return ((GalleryType)(x));
            }
            set {
                this.SetElement(GalleryXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Title {
            get {
                XAttribute x = this.Attribute(TitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool Scrollable {
            get {
                XAttribute x = this.Attribute(ScrollableXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, ScrollableDefaultValue);
            }
            set {
                this.SetAttribute(ScrollableXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Sequence {
            get {
                XAttribute x = this.Attribute(SequenceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(SequenceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string MaxHeight {
            get {
                XAttribute x = this.Attribute(MaxHeightXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(MaxHeightXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.DisplayModeType DisplayMode {
            get {
                XAttribute x = this.Attribute(DisplayModeXName);
                return ((Microsoft.Schemas.SharePoint.DisplayModeType)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.DisplayModeType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, DisplayModeDefaultValue))));
            }
            set {
                this.SetAttribute(DisplayModeXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MenuSectionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ControlsXName, typeof(MenuSectionControlsType));
            localElementDictionary.Add(GalleryXName, typeof(GalleryType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((ToggleButton* | Button* | ColorPicker* | FlyoutAnchor* | InsertTable*)*)
    /// </para>
    /// </summary>
    public partial class MenuSectionControlsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToggleButtonXName = System.Xml.Linq.XName.Get("ToggleButton", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ToggleButtonType> ToggleButtonField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ButtonXName = System.Xml.Linq.XName.Get("Button", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ButtonType> ButtonField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ColorPickerXName = System.Xml.Linq.XName.Get("ColorPicker", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ColorPickerType> ColorPickerField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FlyoutAnchorXName = System.Xml.Linq.XName.Get("FlyoutAnchor", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FlyoutAnchorType> FlyoutAnchorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InsertTableXName = System.Xml.Linq.XName.Get("InsertTable", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<InsertTableType> InsertTableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("MenuSectionControlsType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator MenuSectionControlsType(XElement xe) { return XTypedServices.ToXTypedElement<MenuSectionControlsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MenuSectionControlsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(ToggleButtonXName), new NamedContentModelEntity(ButtonXName), new NamedContentModelEntity(ColorPickerXName), new NamedContentModelEntity(FlyoutAnchorXName), new NamedContentModelEntity(InsertTableXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((ToggleButton* | Button* | ColorPicker* | FlyoutAnchor* | InsertTable*)*)
        /// </para>
        /// </summary>
        public MenuSectionControlsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ToggleButton* | Button* | ColorPicker* | FlyoutAnchor* | InsertTable*)*)
        /// </para>
        /// </summary>
        public virtual IList<ToggleButtonType> ToggleButton {
            get {
                if ((this.ToggleButtonField == null)) {
                    this.ToggleButtonField = new XTypedList<ToggleButtonType>(this, LinqToXsdTypeManager.Instance, ToggleButtonXName);
                }
                return this.ToggleButtonField;
            }
            set {
                if ((value == null)) {
                    this.ToggleButtonField = null;
                }
                else {
                    if ((this.ToggleButtonField == null)) {
                        this.ToggleButtonField = XTypedList<ToggleButtonType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ToggleButtonXName);
                    }
                    else {
                        XTypedServices.SetList<ToggleButtonType>(this.ToggleButtonField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ToggleButton* | Button* | ColorPicker* | FlyoutAnchor* | InsertTable*)*)
        /// </para>
        /// </summary>
        public virtual IList<ButtonType> Button {
            get {
                if ((this.ButtonField == null)) {
                    this.ButtonField = new XTypedList<ButtonType>(this, LinqToXsdTypeManager.Instance, ButtonXName);
                }
                return this.ButtonField;
            }
            set {
                if ((value == null)) {
                    this.ButtonField = null;
                }
                else {
                    if ((this.ButtonField == null)) {
                        this.ButtonField = XTypedList<ButtonType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ButtonXName);
                    }
                    else {
                        XTypedServices.SetList<ButtonType>(this.ButtonField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ToggleButton* | Button* | ColorPicker* | FlyoutAnchor* | InsertTable*)*)
        /// </para>
        /// </summary>
        public virtual IList<ColorPickerType> ColorPicker {
            get {
                if ((this.ColorPickerField == null)) {
                    this.ColorPickerField = new XTypedList<ColorPickerType>(this, LinqToXsdTypeManager.Instance, ColorPickerXName);
                }
                return this.ColorPickerField;
            }
            set {
                if ((value == null)) {
                    this.ColorPickerField = null;
                }
                else {
                    if ((this.ColorPickerField == null)) {
                        this.ColorPickerField = XTypedList<ColorPickerType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ColorPickerXName);
                    }
                    else {
                        XTypedServices.SetList<ColorPickerType>(this.ColorPickerField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ToggleButton* | Button* | ColorPicker* | FlyoutAnchor* | InsertTable*)*)
        /// </para>
        /// </summary>
        public virtual IList<FlyoutAnchorType> FlyoutAnchor {
            get {
                if ((this.FlyoutAnchorField == null)) {
                    this.FlyoutAnchorField = new XTypedList<FlyoutAnchorType>(this, LinqToXsdTypeManager.Instance, FlyoutAnchorXName);
                }
                return this.FlyoutAnchorField;
            }
            set {
                if ((value == null)) {
                    this.FlyoutAnchorField = null;
                }
                else {
                    if ((this.FlyoutAnchorField == null)) {
                        this.FlyoutAnchorField = XTypedList<FlyoutAnchorType>.Initialize(this, LinqToXsdTypeManager.Instance, value, FlyoutAnchorXName);
                    }
                    else {
                        XTypedServices.SetList<FlyoutAnchorType>(this.FlyoutAnchorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ToggleButton* | Button* | ColorPicker* | FlyoutAnchor* | InsertTable*)*)
        /// </para>
        /// </summary>
        public virtual IList<InsertTableType> InsertTable {
            get {
                if ((this.InsertTableField == null)) {
                    this.InsertTableField = new XTypedList<InsertTableType>(this, LinqToXsdTypeManager.Instance, InsertTableXName);
                }
                return this.InsertTableField;
            }
            set {
                if ((value == null)) {
                    this.InsertTableField = null;
                }
                else {
                    if ((this.InsertTableField == null)) {
                        this.InsertTableField = XTypedList<InsertTableType>.Initialize(this, LinqToXsdTypeManager.Instance, value, InsertTableXName);
                    }
                    else {
                        XTypedServices.SetList<InsertTableType>(this.InsertTableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MenuSectionControlsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ToggleButtonXName, typeof(ToggleButtonType));
            localElementDictionary.Add(ButtonXName, typeof(ButtonType));
            localElementDictionary.Add(ColorPickerXName, typeof(ColorPickerType));
            localElementDictionary.Add(FlyoutAnchorXName, typeof(FlyoutAnchorType));
            localElementDictionary.Add(InsertTableXName, typeof(InsertTableType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Menu?)
    /// </para>
    /// </summary>
    public partial class MRUSplitButtonType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MenuXName = System.Xml.Linq.XName.Get("Menu", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AltXName = System.Xml.Linq.XName.Get("Alt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CacheMenuVersionsXName = System.Xml.Linq.XName.Get("CacheMenuVersions", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool CacheMenuVersionsDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandXName = System.Xml.Linq.XName.Get("Command", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandMenuOpenXName = System.Xml.Linq.XName.Get("CommandMenuOpen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandMenuCloseXName = System.Xml.Linq.XName.Get("CommandMenuClose", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandPreviewXName = System.Xml.Linq.XName.Get("CommandPreview", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandPreviewRevertXName = System.Xml.Linq.XName.Get("CommandPreviewRevert", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InitialItemXName = System.Xml.Linq.XName.Get("InitialItem", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MenuAltXName = System.Xml.Linq.XName.Get("MenuAlt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MenuCommandXName = System.Xml.Linq.XName.Get("MenuCommand", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PopulateDynamicallyXName = System.Xml.Linq.XName.Get("PopulateDynamically", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool PopulateDynamicallyDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PopulateQueryCommandXName = System.Xml.Linq.XName.Get("PopulateQueryCommand", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PopulateOnlyOnceXName = System.Xml.Linq.XName.Get("PopulateOnlyOnce", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool PopulateOnlyOnceDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SequenceXName = System.Xml.Linq.XName.Get("Sequence", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName QueryCommandXName = System.Xml.Linq.XName.Get("QueryCommand", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TemplateAliasXName = System.Xml.Linq.XName.Get("TemplateAlias", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32XName = System.Xml.Linq.XName.Get("ToolTipImage32by32", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32ClassXName = System.Xml.Linq.XName.Get("ToolTipImage32by32Class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32LeftXName = System.Xml.Linq.XName.Get("ToolTipImage32by32Left", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32TopXName = System.Xml.Linq.XName.Get("ToolTipImage32by32Top", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipTitleXName = System.Xml.Linq.XName.Get("ToolTipTitle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipDescriptionXName = System.Xml.Linq.XName.Get("ToolTipDescription", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipHelpKeyWordXName = System.Xml.Linq.XName.Get("ToolTipHelpKeyWord", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipSelectedItemTitleXName = System.Xml.Linq.XName.Get("ToolTipSelectedItemTitle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipShortcutKeyXName = System.Xml.Linq.XName.Get("ToolTipShortcutKey", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("MRUSplitButtonType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator MRUSplitButtonType(XElement xe) { return XTypedServices.ToXTypedElement<MRUSplitButtonType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MRUSplitButtonType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(MenuXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Menu?)
        /// </para>
        /// </summary>
        public MRUSplitButtonType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Menu?)
        /// </para>
        /// </summary>
        public virtual MenuType Menu {
            get {
                XElement x = this.GetElement(MenuXName);
                return ((MenuType)(x));
            }
            set {
                this.SetElement(MenuXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Alt {
            get {
                XAttribute x = this.Attribute(AltXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AltXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool CacheMenuVersions {
            get {
                XAttribute x = this.Attribute(CacheMenuVersionsXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, CacheMenuVersionsDefaultValue);
            }
            set {
                this.SetAttribute(CacheMenuVersionsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Command {
            get {
                XAttribute x = this.Attribute(CommandXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CommandMenuOpen {
            get {
                XAttribute x = this.Attribute(CommandMenuOpenXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandMenuOpenXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CommandMenuClose {
            get {
                XAttribute x = this.Attribute(CommandMenuCloseXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandMenuCloseXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CommandPreview {
            get {
                XAttribute x = this.Attribute(CommandPreviewXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandPreviewXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CommandPreviewRevert {
            get {
                XAttribute x = this.Attribute(CommandPreviewRevertXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandPreviewRevertXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string InitialItem {
            get {
                XAttribute x = this.Attribute(InitialItemXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(InitialItemXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string MenuAlt {
            get {
                XAttribute x = this.Attribute(MenuAltXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(MenuAltXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string MenuCommand {
            get {
                XAttribute x = this.Attribute(MenuCommandXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(MenuCommandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool PopulateDynamically {
            get {
                XAttribute x = this.Attribute(PopulateDynamicallyXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, PopulateDynamicallyDefaultValue);
            }
            set {
                this.SetAttribute(PopulateDynamicallyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string PopulateQueryCommand {
            get {
                XAttribute x = this.Attribute(PopulateQueryCommandXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PopulateQueryCommandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool PopulateOnlyOnce {
            get {
                XAttribute x = this.Attribute(PopulateOnlyOnceXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, PopulateOnlyOnceDefaultValue);
            }
            set {
                this.SetAttribute(PopulateOnlyOnceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Sequence {
            get {
                XAttribute x = this.Attribute(SequenceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(SequenceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string QueryCommand {
            get {
                XAttribute x = this.Attribute(QueryCommandXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(QueryCommandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TemplateAlias {
            get {
                XAttribute x = this.Attribute(TemplateAliasXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TemplateAliasXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipImage32by32 {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipImage32by32Class {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32ClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32ClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ToolTipImage32by32Left {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32LeftXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32LeftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ToolTipImage32by32Top {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32TopXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32TopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipTitle {
            get {
                XAttribute x = this.Attribute(ToolTipTitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipTitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipDescription {
            get {
                XAttribute x = this.Attribute(ToolTipDescriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipDescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipHelpKeyWord {
            get {
                XAttribute x = this.Attribute(ToolTipHelpKeyWordXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipHelpKeyWordXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipSelectedItemTitle {
            get {
                XAttribute x = this.Attribute(ToolTipSelectedItemTitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipSelectedItemTitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipShortcutKey {
            get {
                XAttribute x = this.Attribute(ToolTipShortcutKeyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipShortcutKeyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MRUSplitButtonType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(MenuXName, typeof(MenuType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class LowScaleWarningType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MessageXName = System.Xml.Linq.XName.Get("Message", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SequenceXName = System.Xml.Linq.XName.Get("Sequence", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("LowScaleWarningType", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator LowScaleWarningType(XElement xe) { return XTypedServices.ToXTypedElement<LowScaleWarningType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public LowScaleWarningType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Message {
            get {
                XAttribute x = this.Attribute(MessageXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(MessageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Sequence {
            get {
                XAttribute x = this.Attribute(SequenceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(SequenceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LowScaleWarningType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class OverflowAreaType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DisplayModeXName = System.Xml.Linq.XName.Get("DisplayMode", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TemplateAliasXName = System.Xml.Linq.XName.Get("TemplateAlias", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OverflowAreaType", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator OverflowAreaType(XElement xe) { return XTypedServices.ToXTypedElement<OverflowAreaType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public OverflowAreaType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.DisplayModeType? DisplayMode {
            get {
                XAttribute x = this.Attribute(DisplayModeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.DisplayModeType)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.DisplayModeType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(DisplayModeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TemplateAlias {
            get {
                XAttribute x = this.Attribute(TemplateAliasXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TemplateAliasXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OverflowAreaType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class OverflowSectionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DisplayModeXName = System.Xml.Linq.XName.Get("DisplayMode", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DividerAfterXName = System.Xml.Linq.XName.Get("DividerAfter", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DividerBeforeXName = System.Xml.Linq.XName.Get("DividerBefore", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TemplateAliasXName = System.Xml.Linq.XName.Get("TemplateAlias", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypeXName = System.Xml.Linq.XName.Get("Type", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OverflowSectionType", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator OverflowSectionType(XElement xe) { return XTypedServices.ToXTypedElement<OverflowSectionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public OverflowSectionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.DisplayModeType? DisplayMode {
            get {
                XAttribute x = this.Attribute(DisplayModeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.DisplayModeType)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.DisplayModeType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(DisplayModeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? DividerAfter {
            get {
                XAttribute x = this.Attribute(DividerAfterXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(DividerAfterXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? DividerBefore {
            get {
                XAttribute x = this.Attribute(DividerBeforeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(DividerBeforeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TemplateAlias {
            get {
                XAttribute x = this.Attribute(TemplateAliasXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TemplateAliasXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.SectionTypeType? Type {
            get {
                XAttribute x = this.Attribute(TypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.SectionTypeType)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.SectionTypeType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(TypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OverflowSectionType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Controls)
    /// </para>
    /// </summary>
    public partial class QATType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ControlsXName = System.Xml.Linq.XName.Get("Controls", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageDownArrowXName = System.Xml.Linq.XName.Get("ImageDownArrow", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageDownArrowClassXName = System.Xml.Linq.XName.Get("ImageDownArrowClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageDownArrowLeftXName = System.Xml.Linq.XName.Get("ImageDownArrowLeft", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageDownArrowTopXName = System.Xml.Linq.XName.Get("ImageDownArrowTop", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageSideArrowXName = System.Xml.Linq.XName.Get("ImageSideArrow", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageSideArrowClassXName = System.Xml.Linq.XName.Get("ImageSideArrowClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageSideArrowLeftXName = System.Xml.Linq.XName.Get("ImageSideArrowLeft", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageSideArrowTopXName = System.Xml.Linq.XName.Get("ImageSideArrowTop", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageUpArrowXName = System.Xml.Linq.XName.Get("ImageUpArrow", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageUpArrowClassXName = System.Xml.Linq.XName.Get("ImageUpArrowClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageUpArrowLeftXName = System.Xml.Linq.XName.Get("ImageUpArrowLeft", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageUpArrowTopXName = System.Xml.Linq.XName.Get("ImageUpArrowTop", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("QATType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator QATType(XElement xe) { return XTypedServices.ToXTypedElement<QATType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static QATType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ControlsXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Controls)
        /// </para>
        /// </summary>
        public QATType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Controls)
        /// </para>
        /// </summary>
        public virtual ControlsType Controls {
            get {
                XElement x = this.GetElement(ControlsXName);
                return ((ControlsType)(x));
            }
            set {
                this.SetElement(ControlsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ImageDownArrow {
            get {
                XAttribute x = this.Attribute(ImageDownArrowXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageDownArrowXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ImageDownArrowClass {
            get {
                XAttribute x = this.Attribute(ImageDownArrowClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageDownArrowClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ImageDownArrowLeft {
            get {
                XAttribute x = this.Attribute(ImageDownArrowLeftXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ImageDownArrowLeftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ImageDownArrowTop {
            get {
                XAttribute x = this.Attribute(ImageDownArrowTopXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ImageDownArrowTopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ImageSideArrow {
            get {
                XAttribute x = this.Attribute(ImageSideArrowXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageSideArrowXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ImageSideArrowClass {
            get {
                XAttribute x = this.Attribute(ImageSideArrowClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageSideArrowClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ImageSideArrowLeft {
            get {
                XAttribute x = this.Attribute(ImageSideArrowLeftXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ImageSideArrowLeftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ImageSideArrowTop {
            get {
                XAttribute x = this.Attribute(ImageSideArrowTopXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ImageSideArrowTopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ImageUpArrow {
            get {
                XAttribute x = this.Attribute(ImageUpArrowXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageUpArrowXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ImageUpArrowClass {
            get {
                XAttribute x = this.Attribute(ImageUpArrowClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageUpArrowClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ImageUpArrowLeft {
            get {
                XAttribute x = this.Attribute(ImageUpArrowLeftXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ImageUpArrowLeftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ImageUpArrowTop {
            get {
                XAttribute x = this.Attribute(ImageUpArrowTopXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ImageUpArrowTopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<QATType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ControlsXName, typeof(ControlsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (GroupTemplate*)
    /// </para>
    /// </summary>
    public partial class RibbonTemplatesType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GroupTemplateXName = System.Xml.Linq.XName.Get("GroupTemplate", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GroupTemplateType> GroupTemplateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RibbonTemplatesType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RibbonTemplatesType(XElement xe) { return XTypedServices.ToXTypedElement<RibbonTemplatesType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RibbonTemplatesType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(GroupTemplateXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (GroupTemplate*)
        /// </para>
        /// </summary>
        public RibbonTemplatesType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GroupTemplate*)
        /// </para>
        /// </summary>
        public virtual IList<GroupTemplateType> GroupTemplate {
            get {
                if ((this.GroupTemplateField == null)) {
                    this.GroupTemplateField = new XTypedList<GroupTemplateType>(this, LinqToXsdTypeManager.Instance, GroupTemplateXName);
                }
                return this.GroupTemplateField;
            }
            set {
                if ((value == null)) {
                    this.GroupTemplateField = null;
                }
                else {
                    if ((this.GroupTemplateField == null)) {
                        this.GroupTemplateField = XTypedList<GroupTemplateType>.Initialize(this, LinqToXsdTypeManager.Instance, value, GroupTemplateXName);
                    }
                    else {
                        XTypedServices.SetList<GroupTemplateType>(this.GroupTemplateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RibbonTemplatesType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(GroupTemplateXName, typeof(GroupTemplateType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Tabs, ContextualTabs)
    /// </para>
    /// </summary>
    public partial class RibbonType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TabsXName = System.Xml.Linq.XName.Get("Tabs", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ContextualTabsXName = System.Xml.Linq.XName.Get("ContextualTabs", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image32by32GroupPopupDefaultXName = System.Xml.Linq.XName.Get("Image32by32GroupPopupDefault", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image32by32GroupPopupDefaultClassXName = System.Xml.Linq.XName.Get("Image32by32GroupPopupDefaultClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image32by32GroupPopupDefaultLeftXName = System.Xml.Linq.XName.Get("Image32by32GroupPopupDefaultLeft", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image32by32GroupPopupDefaultTopXName = System.Xml.Linq.XName.Get("Image32by32GroupPopupDefaultTop", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageDownArrowXName = System.Xml.Linq.XName.Get("ImageDownArrow", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageDownArrowClassXName = System.Xml.Linq.XName.Get("ImageDownArrowClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageDownArrowLeftXName = System.Xml.Linq.XName.Get("ImageDownArrowLeft", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageDownArrowTopXName = System.Xml.Linq.XName.Get("ImageDownArrowTop", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageSideArrowXName = System.Xml.Linq.XName.Get("ImageSideArrow", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageSideArrowClassXName = System.Xml.Linq.XName.Get("ImageSideArrowClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageSideArrowLeftXName = System.Xml.Linq.XName.Get("ImageSideArrowLeft", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageSideArrowTopXName = System.Xml.Linq.XName.Get("ImageSideArrowTop", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageUpArrowXName = System.Xml.Linq.XName.Get("ImageUpArrow", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageUpArrowClassXName = System.Xml.Linq.XName.Get("ImageUpArrowClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageUpArrowLeftXName = System.Xml.Linq.XName.Get("ImageUpArrowLeft", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageUpArrowTopXName = System.Xml.Linq.XName.Get("ImageUpArrowTop", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RootEventCommandXName = System.Xml.Linq.XName.Get("RootEventCommand", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TabSwitchCommandXName = System.Xml.Linq.XName.Get("TabSwitchCommand", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ScaleCommandXName = System.Xml.Linq.XName.Get("ScaleCommand", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TextDirectionXName = System.Xml.Linq.XName.Get("TextDirection", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipFooterTextXName = System.Xml.Linq.XName.Get("ToolTipFooterText", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipFooterImage16by16XName = System.Xml.Linq.XName.Get("ToolTipFooterImage16by16", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipFooterImage16by16ClassXName = System.Xml.Linq.XName.Get("ToolTipFooterImage16by16Class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipFooterImage16by16LeftXName = System.Xml.Linq.XName.Get("ToolTipFooterImage16by16Left", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipFooterImage16by16TopXName = System.Xml.Linq.XName.Get("ToolTipFooterImage16by16Top", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipDisabledCommandImage16by16XName = System.Xml.Linq.XName.Get("ToolTipDisabledCommandImage16by16", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipDisabledCommandImage16by16ClassXName = System.Xml.Linq.XName.Get("ToolTipDisabledCommandImage16by16Class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipDisabledCommandImage16by16LeftXName = System.Xml.Linq.XName.Get("ToolTipDisabledCommandImage16by16Left", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipDisabledCommandImage16by16TopXName = System.Xml.Linq.XName.Get("ToolTipDisabledCommandImage16by16Top", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipDisabledCommandDescriptionXName = System.Xml.Linq.XName.Get("ToolTipDisabledCommandDescription", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipDisabledCommandTitleXName = System.Xml.Linq.XName.Get("ToolTipDisabledCommandTitle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipDisabledCommandHelpKeyXName = System.Xml.Linq.XName.Get("ToolTipDisabledCommandHelpKey", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipHelpCommandXName = System.Xml.Linq.XName.Get("ToolTipHelpCommand", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipSelectedItemTitlePrefixXName = System.Xml.Linq.XName.Get("ToolTipSelectedItemTitlePrefix", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ShortcutKeyJumpToRibbon_CtrlXName = System.Xml.Linq.XName.Get("ShortcutKeyJumpToRibbon_Ctrl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ShortcutKeyJumpToRibbon_AltXName = System.Xml.Linq.XName.Get("ShortcutKeyJumpToRibbon_Alt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ShortcutKeyJumpToRibbon_ShiftXName = System.Xml.Linq.XName.Get("ShortcutKeyJumpToRibbon_Shift", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ShortcutKeyJumpToRibbon_AccessKeyXName = System.Xml.Linq.XName.Get("ShortcutKeyJumpToRibbon_AccessKey", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ShortcutKeyJumpToFirstControl_CtrlXName = System.Xml.Linq.XName.Get("ShortcutKeyJumpToFirstControl_Ctrl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ShortcutKeyJumpToFirstControl_AltXName = System.Xml.Linq.XName.Get("ShortcutKeyJumpToFirstControl_Alt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ShortcutKeyJumpToFirstControl_ShiftXName = System.Xml.Linq.XName.Get("ShortcutKeyJumpToFirstControl_Shift", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ShortcutKeyJumpToFirstControl_AccessKeyXName = System.Xml.Linq.XName.Get("ShortcutKeyJumpToFirstControl_AccessKey", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ATContextualTabTextXName = System.Xml.Linq.XName.Get("ATContextualTabText", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ATTabPositionTextXName = System.Xml.Linq.XName.Get("ATTabPositionText", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NavigationHelpTextXName = System.Xml.Linq.XName.Get("NavigationHelpText", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RibbonType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RibbonType(XElement xe) { return XTypedServices.ToXTypedElement<RibbonType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RibbonType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TabsXName), new NamedContentModelEntity(ContextualTabsXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Tabs, ContextualTabs)
        /// </para>
        /// </summary>
        public RibbonType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Tabs, ContextualTabs)
        /// </para>
        /// </summary>
        public virtual TabsType Tabs {
            get {
                XElement x = this.GetElement(TabsXName);
                return ((TabsType)(x));
            }
            set {
                this.SetElement(TabsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Tabs, ContextualTabs)
        /// </para>
        /// </summary>
        public virtual ContextualTabsType ContextualTabs {
            get {
                XElement x = this.GetElement(ContextualTabsXName);
                return ((ContextualTabsType)(x));
            }
            set {
                this.SetElement(ContextualTabsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Image32by32GroupPopupDefault {
            get {
                XAttribute x = this.Attribute(Image32by32GroupPopupDefaultXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(Image32by32GroupPopupDefaultXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Image32by32GroupPopupDefaultClass {
            get {
                XAttribute x = this.Attribute(Image32by32GroupPopupDefaultClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(Image32by32GroupPopupDefaultClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Image32by32GroupPopupDefaultLeft {
            get {
                XAttribute x = this.Attribute(Image32by32GroupPopupDefaultLeftXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(Image32by32GroupPopupDefaultLeftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Image32by32GroupPopupDefaultTop {
            get {
                XAttribute x = this.Attribute(Image32by32GroupPopupDefaultTopXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(Image32by32GroupPopupDefaultTopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ImageDownArrow {
            get {
                XAttribute x = this.Attribute(ImageDownArrowXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageDownArrowXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ImageDownArrowClass {
            get {
                XAttribute x = this.Attribute(ImageDownArrowClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageDownArrowClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ImageDownArrowLeft {
            get {
                XAttribute x = this.Attribute(ImageDownArrowLeftXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ImageDownArrowLeftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ImageDownArrowTop {
            get {
                XAttribute x = this.Attribute(ImageDownArrowTopXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ImageDownArrowTopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ImageSideArrow {
            get {
                XAttribute x = this.Attribute(ImageSideArrowXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageSideArrowXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ImageSideArrowClass {
            get {
                XAttribute x = this.Attribute(ImageSideArrowClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageSideArrowClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ImageSideArrowLeft {
            get {
                XAttribute x = this.Attribute(ImageSideArrowLeftXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ImageSideArrowLeftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ImageSideArrowTop {
            get {
                XAttribute x = this.Attribute(ImageSideArrowTopXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ImageSideArrowTopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ImageUpArrow {
            get {
                XAttribute x = this.Attribute(ImageUpArrowXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageUpArrowXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ImageUpArrowClass {
            get {
                XAttribute x = this.Attribute(ImageUpArrowClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageUpArrowClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ImageUpArrowLeft {
            get {
                XAttribute x = this.Attribute(ImageUpArrowLeftXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ImageUpArrowLeftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ImageUpArrowTop {
            get {
                XAttribute x = this.Attribute(ImageUpArrowTopXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ImageUpArrowTopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string RootEventCommand {
            get {
                XAttribute x = this.Attribute(RootEventCommandXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(RootEventCommandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TabSwitchCommand {
            get {
                XAttribute x = this.Attribute(TabSwitchCommandXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TabSwitchCommandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ScaleCommand {
            get {
                XAttribute x = this.Attribute(ScaleCommandXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ScaleCommandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TextDirection {
            get {
                XAttribute x = this.Attribute(TextDirectionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TextDirectionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipFooterText {
            get {
                XAttribute x = this.Attribute(ToolTipFooterTextXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipFooterTextXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipFooterImage16by16 {
            get {
                XAttribute x = this.Attribute(ToolTipFooterImage16by16XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipFooterImage16by16XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipFooterImage16by16Class {
            get {
                XAttribute x = this.Attribute(ToolTipFooterImage16by16ClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipFooterImage16by16ClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ToolTipFooterImage16by16Left {
            get {
                XAttribute x = this.Attribute(ToolTipFooterImage16by16LeftXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ToolTipFooterImage16by16LeftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ToolTipFooterImage16by16Top {
            get {
                XAttribute x = this.Attribute(ToolTipFooterImage16by16TopXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ToolTipFooterImage16by16TopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipDisabledCommandImage16by16 {
            get {
                XAttribute x = this.Attribute(ToolTipDisabledCommandImage16by16XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipDisabledCommandImage16by16XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipDisabledCommandImage16by16Class {
            get {
                XAttribute x = this.Attribute(ToolTipDisabledCommandImage16by16ClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipDisabledCommandImage16by16ClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ToolTipDisabledCommandImage16by16Left {
            get {
                XAttribute x = this.Attribute(ToolTipDisabledCommandImage16by16LeftXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ToolTipDisabledCommandImage16by16LeftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ToolTipDisabledCommandImage16by16Top {
            get {
                XAttribute x = this.Attribute(ToolTipDisabledCommandImage16by16TopXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ToolTipDisabledCommandImage16by16TopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipDisabledCommandDescription {
            get {
                XAttribute x = this.Attribute(ToolTipDisabledCommandDescriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipDisabledCommandDescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipDisabledCommandTitle {
            get {
                XAttribute x = this.Attribute(ToolTipDisabledCommandTitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipDisabledCommandTitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipDisabledCommandHelpKey {
            get {
                XAttribute x = this.Attribute(ToolTipDisabledCommandHelpKeyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipDisabledCommandHelpKeyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipHelpCommand {
            get {
                XAttribute x = this.Attribute(ToolTipHelpCommandXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipHelpCommandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipSelectedItemTitlePrefix {
            get {
                XAttribute x = this.Attribute(ToolTipSelectedItemTitlePrefixXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipSelectedItemTitlePrefixXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ShortcutKeyJumpToRibbon_Ctrl {
            get {
                XAttribute x = this.Attribute(ShortcutKeyJumpToRibbon_CtrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ShortcutKeyJumpToRibbon_CtrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ShortcutKeyJumpToRibbon_Alt {
            get {
                XAttribute x = this.Attribute(ShortcutKeyJumpToRibbon_AltXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ShortcutKeyJumpToRibbon_AltXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ShortcutKeyJumpToRibbon_Shift {
            get {
                XAttribute x = this.Attribute(ShortcutKeyJumpToRibbon_ShiftXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ShortcutKeyJumpToRibbon_ShiftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ShortcutKeyJumpToRibbon_AccessKey {
            get {
                XAttribute x = this.Attribute(ShortcutKeyJumpToRibbon_AccessKeyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ShortcutKeyJumpToRibbon_AccessKeyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ShortcutKeyJumpToFirstControl_Ctrl {
            get {
                XAttribute x = this.Attribute(ShortcutKeyJumpToFirstControl_CtrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ShortcutKeyJumpToFirstControl_CtrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ShortcutKeyJumpToFirstControl_Alt {
            get {
                XAttribute x = this.Attribute(ShortcutKeyJumpToFirstControl_AltXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ShortcutKeyJumpToFirstControl_AltXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ShortcutKeyJumpToFirstControl_Shift {
            get {
                XAttribute x = this.Attribute(ShortcutKeyJumpToFirstControl_ShiftXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ShortcutKeyJumpToFirstControl_ShiftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ShortcutKeyJumpToFirstControl_AccessKey {
            get {
                XAttribute x = this.Attribute(ShortcutKeyJumpToFirstControl_AccessKeyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ShortcutKeyJumpToFirstControl_AccessKeyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ATContextualTabText {
            get {
                XAttribute x = this.Attribute(ATContextualTabTextXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ATContextualTabTextXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ATTabPositionText {
            get {
                XAttribute x = this.Attribute(ATTabPositionTextXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ATTabPositionTextXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string NavigationHelpText {
            get {
                XAttribute x = this.Attribute(NavigationHelpTextXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NavigationHelpTextXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RibbonType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TabsXName, typeof(TabsType));
            localElementDictionary.Add(ContextualTabsXName, typeof(ContextualTabsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((ControlRef* | Strip* | OverflowArea*)*)
    /// </para>
    /// </summary>
    public partial class RowType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ControlRefXName = System.Xml.Linq.XName.Get("ControlRef", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ControlRefType> ControlRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StripXName = System.Xml.Linq.XName.Get("Strip", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StripType> StripField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OverflowAreaXName = System.Xml.Linq.XName.Get("OverflowArea", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<OverflowAreaType> OverflowAreaField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RowType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RowType(XElement xe) { return XTypedServices.ToXTypedElement<RowType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RowType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(ControlRefXName), new NamedContentModelEntity(StripXName), new NamedContentModelEntity(OverflowAreaXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((ControlRef* | Strip* | OverflowArea*)*)
        /// </para>
        /// </summary>
        public RowType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ControlRef* | Strip* | OverflowArea*)*)
        /// </para>
        /// </summary>
        public virtual IList<ControlRefType> ControlRef {
            get {
                if ((this.ControlRefField == null)) {
                    this.ControlRefField = new XTypedList<ControlRefType>(this, LinqToXsdTypeManager.Instance, ControlRefXName);
                }
                return this.ControlRefField;
            }
            set {
                if ((value == null)) {
                    this.ControlRefField = null;
                }
                else {
                    if ((this.ControlRefField == null)) {
                        this.ControlRefField = XTypedList<ControlRefType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ControlRefXName);
                    }
                    else {
                        XTypedServices.SetList<ControlRefType>(this.ControlRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ControlRef* | Strip* | OverflowArea*)*)
        /// </para>
        /// </summary>
        public virtual IList<StripType> Strip {
            get {
                if ((this.StripField == null)) {
                    this.StripField = new XTypedList<StripType>(this, LinqToXsdTypeManager.Instance, StripXName);
                }
                return this.StripField;
            }
            set {
                if ((value == null)) {
                    this.StripField = null;
                }
                else {
                    if ((this.StripField == null)) {
                        this.StripField = XTypedList<StripType>.Initialize(this, LinqToXsdTypeManager.Instance, value, StripXName);
                    }
                    else {
                        XTypedServices.SetList<StripType>(this.StripField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ControlRef* | Strip* | OverflowArea*)*)
        /// </para>
        /// </summary>
        public virtual IList<OverflowAreaType> OverflowArea {
            get {
                if ((this.OverflowAreaField == null)) {
                    this.OverflowAreaField = new XTypedList<OverflowAreaType>(this, LinqToXsdTypeManager.Instance, OverflowAreaXName);
                }
                return this.OverflowAreaField;
            }
            set {
                if ((value == null)) {
                    this.OverflowAreaField = null;
                }
                else {
                    if ((this.OverflowAreaField == null)) {
                        this.OverflowAreaField = XTypedList<OverflowAreaType>.Initialize(this, LinqToXsdTypeManager.Instance, value, OverflowAreaXName);
                    }
                    else {
                        XTypedServices.SetList<OverflowAreaType>(this.OverflowAreaField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RowType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ControlRefXName, typeof(ControlRefType));
            localElementDictionary.Add(StripXName, typeof(StripType));
            localElementDictionary.Add(OverflowAreaXName, typeof(OverflowAreaType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class ScaleType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GroupIdXName = System.Xml.Linq.XName.Get("GroupId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SequenceXName = System.Xml.Linq.XName.Get("Sequence", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SizeXName = System.Xml.Linq.XName.Get("Size", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PopupSizeXName = System.Xml.Linq.XName.Get("PopupSize", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ScaleType", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator ScaleType(XElement xe) { return XTypedServices.ToXTypedElement<ScaleType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ScaleType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string GroupId {
            get {
                XAttribute x = this.Attribute(GroupIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(GroupIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Sequence {
            get {
                XAttribute x = this.Attribute(SequenceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(SequenceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Size {
            get {
                XAttribute x = this.Attribute(SizeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SizeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string PopupSize {
            get {
                XAttribute x = this.Attribute(PopupSizeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PopupSizeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ScaleType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (MaxSize*, (Scale? | LowScaleWarning?)*)
    /// </para>
    /// </summary>
    public partial class ScalingType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MaxSizeXName = System.Xml.Linq.XName.Get("MaxSize", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MaxSizeType> MaxSizeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ScaleXName = System.Xml.Linq.XName.Get("Scale", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ScaleType> ScaleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LowScaleWarningXName = System.Xml.Linq.XName.Get("LowScaleWarning", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LowScaleWarningType> LowScaleWarningField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ScalingType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ScalingType(XElement xe) { return XTypedServices.ToXTypedElement<ScalingType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ScalingType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(MaxSizeXName), new ChoiceContentModelEntity(new NamedContentModelEntity(ScaleXName), new NamedContentModelEntity(LowScaleWarningXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (MaxSize*, (Scale? | LowScaleWarning?)*)
        /// </para>
        /// </summary>
        public ScalingType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (MaxSize*, (Scale? | LowScaleWarning?)*)
        /// </para>
        /// </summary>
        public virtual IList<MaxSizeType> MaxSize {
            get {
                if ((this.MaxSizeField == null)) {
                    this.MaxSizeField = new XTypedList<MaxSizeType>(this, LinqToXsdTypeManager.Instance, MaxSizeXName);
                }
                return this.MaxSizeField;
            }
            set {
                if ((value == null)) {
                    this.MaxSizeField = null;
                }
                else {
                    if ((this.MaxSizeField == null)) {
                        this.MaxSizeField = XTypedList<MaxSizeType>.Initialize(this, LinqToXsdTypeManager.Instance, value, MaxSizeXName);
                    }
                    else {
                        XTypedServices.SetList<MaxSizeType>(this.MaxSizeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (MaxSize*, (Scale? | LowScaleWarning?)*)
        /// </para>
        /// </summary>
        public virtual IList<ScaleType> Scale {
            get {
                if ((this.ScaleField == null)) {
                    this.ScaleField = new XTypedList<ScaleType>(this, LinqToXsdTypeManager.Instance, ScaleXName);
                }
                return this.ScaleField;
            }
            set {
                if ((value == null)) {
                    this.ScaleField = null;
                }
                else {
                    if ((this.ScaleField == null)) {
                        this.ScaleField = XTypedList<ScaleType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ScaleXName);
                    }
                    else {
                        XTypedServices.SetList<ScaleType>(this.ScaleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (MaxSize*, (Scale? | LowScaleWarning?)*)
        /// </para>
        /// </summary>
        public virtual IList<LowScaleWarningType> LowScaleWarning {
            get {
                if ((this.LowScaleWarningField == null)) {
                    this.LowScaleWarningField = new XTypedList<LowScaleWarningType>(this, LinqToXsdTypeManager.Instance, LowScaleWarningXName);
                }
                return this.LowScaleWarningField;
            }
            set {
                if ((value == null)) {
                    this.LowScaleWarningField = null;
                }
                else {
                    if ((this.LowScaleWarningField == null)) {
                        this.LowScaleWarningField = XTypedList<LowScaleWarningType>.Initialize(this, LinqToXsdTypeManager.Instance, value, LowScaleWarningXName);
                    }
                    else {
                        XTypedServices.SetList<LowScaleWarningType>(this.LowScaleWarningField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ScalingType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(MaxSizeXName, typeof(MaxSizeType));
            localElementDictionary.Add(ScaleXName, typeof(ScaleType));
            localElementDictionary.Add(LowScaleWarningXName, typeof(LowScaleWarningType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Row*)
    /// </para>
    /// </summary>
    public partial class SectionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RowXName = System.Xml.Linq.XName.Get("Row", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RowType> RowField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypeXName = System.Xml.Linq.XName.Get("Type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AlignmentXName = System.Xml.Linq.XName.Get("Alignment", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SectionType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SectionType(XElement xe) { return XTypedServices.ToXTypedElement<SectionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SectionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RowXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Row*)
        /// </para>
        /// </summary>
        public SectionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Row*)
        /// </para>
        /// </summary>
        public virtual IList<RowType> Row {
            get {
                if ((this.RowField == null)) {
                    this.RowField = new XTypedList<RowType>(this, LinqToXsdTypeManager.Instance, RowXName);
                }
                return this.RowField;
            }
            set {
                if ((value == null)) {
                    this.RowField = null;
                }
                else {
                    if ((this.RowField == null)) {
                        this.RowField = XTypedList<RowType>.Initialize(this, LinqToXsdTypeManager.Instance, value, RowXName);
                    }
                    else {
                        XTypedServices.SetList<RowType>(this.RowField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.SectionTypeType? Type {
            get {
                XAttribute x = this.Attribute(TypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.SectionTypeType)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.SectionTypeType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(TypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.SectionAlignmentType? Alignment {
            get {
                XAttribute x = this.Attribute(AlignmentXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.SectionAlignmentType)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.SectionAlignmentType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(AlignmentXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SectionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RowXName, typeof(RowType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Unit+)
    /// </para>
    /// </summary>
    public partial class SpinnerType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UnitXName = System.Xml.Linq.XName.Get("Unit", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UnitType> UnitField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AccelerationIntervalXName = System.Xml.Linq.XName.Get("AccelerationInterval", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AltDownArrowXName = System.Xml.Linq.XName.Get("AltDownArrow", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AltUpArrowXName = System.Xml.Linq.XName.Get("AltUpArrow", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandXName = System.Xml.Linq.XName.Get("Command", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DefaultUnitXName = System.Xml.Linq.XName.Get("DefaultUnit", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DefaultValueXName = System.Xml.Linq.XName.Get("DefaultValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImeEnabledXName = System.Xml.Linq.XName.Get("ImeEnabled", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MultiplierIntervalXName = System.Xml.Linq.XName.Get("MultiplierInterval", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName QueryCommandXName = System.Xml.Linq.XName.Get("QueryCommand", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SequenceXName = System.Xml.Linq.XName.Get("Sequence", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TemplateAliasXName = System.Xml.Linq.XName.Get("TemplateAlias", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32XName = System.Xml.Linq.XName.Get("ToolTipImage32by32", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32ClassXName = System.Xml.Linq.XName.Get("ToolTipImage32by32Class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32LeftXName = System.Xml.Linq.XName.Get("ToolTipImage32by32Left", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32TopXName = System.Xml.Linq.XName.Get("ToolTipImage32by32Top", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipTitleXName = System.Xml.Linq.XName.Get("ToolTipTitle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipDescriptionXName = System.Xml.Linq.XName.Get("ToolTipDescription", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipHelpKeyWordXName = System.Xml.Linq.XName.Get("ToolTipHelpKeyWord", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipShortcutKeyXName = System.Xml.Linq.XName.Get("ToolTipShortcutKey", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SpinnerType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SpinnerType(XElement xe) { return XTypedServices.ToXTypedElement<SpinnerType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SpinnerType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(UnitXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Unit+)
        /// </para>
        /// </summary>
        public SpinnerType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Unit+)
        /// </para>
        /// </summary>
        public virtual IList<UnitType> Unit {
            get {
                if ((this.UnitField == null)) {
                    this.UnitField = new XTypedList<UnitType>(this, LinqToXsdTypeManager.Instance, UnitXName);
                }
                return this.UnitField;
            }
            set {
                if ((value == null)) {
                    this.UnitField = null;
                }
                else {
                    if ((this.UnitField == null)) {
                        this.UnitField = XTypedList<UnitType>.Initialize(this, LinqToXsdTypeManager.Instance, value, UnitXName);
                    }
                    else {
                        XTypedServices.SetList<UnitType>(this.UnitField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? AccelerationInterval {
            get {
                XAttribute x = this.Attribute(AccelerationIntervalXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(AccelerationIntervalXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string AltDownArrow {
            get {
                XAttribute x = this.Attribute(AltDownArrowXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AltDownArrowXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string AltUpArrow {
            get {
                XAttribute x = this.Attribute(AltUpArrowXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AltUpArrowXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Command {
            get {
                XAttribute x = this.Attribute(CommandXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DefaultUnit {
            get {
                XAttribute x = this.Attribute(DefaultUnitXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DefaultUnitXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? DefaultValue {
            get {
                XAttribute x = this.Attribute(DefaultValueXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetAttribute(DefaultValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? ImeEnabled {
            get {
                XAttribute x = this.Attribute(ImeEnabledXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(ImeEnabledXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? MultiplierInterval {
            get {
                XAttribute x = this.Attribute(MultiplierIntervalXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(MultiplierIntervalXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string QueryCommand {
            get {
                XAttribute x = this.Attribute(QueryCommandXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(QueryCommandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Sequence {
            get {
                XAttribute x = this.Attribute(SequenceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(SequenceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TemplateAlias {
            get {
                XAttribute x = this.Attribute(TemplateAliasXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TemplateAliasXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipImage32by32 {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipImage32by32Class {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32ClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32ClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ToolTipImage32by32Left {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32LeftXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32LeftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ToolTipImage32by32Top {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32TopXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32TopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipTitle {
            get {
                XAttribute x = this.Attribute(ToolTipTitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipTitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipDescription {
            get {
                XAttribute x = this.Attribute(ToolTipDescriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipDescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipHelpKeyWord {
            get {
                XAttribute x = this.Attribute(ToolTipHelpKeyWordXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipHelpKeyWordXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipShortcutKey {
            get {
                XAttribute x = this.Attribute(ToolTipShortcutKeyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipShortcutKeyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SpinnerType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(UnitXName, typeof(UnitType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Menu?)
    /// </para>
    /// </summary>
    public partial class SplitButtonType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MenuXName = System.Xml.Linq.XName.Get("Menu", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AltXName = System.Xml.Linq.XName.Get("Alt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CacheMenuVersionsXName = System.Xml.Linq.XName.Get("CacheMenuVersions", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool CacheMenuVersionsDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandXName = System.Xml.Linq.XName.Get("Command", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandMenuOpenXName = System.Xml.Linq.XName.Get("CommandMenuOpen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandMenuCloseXName = System.Xml.Linq.XName.Get("CommandMenuClose", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandTypeXName = System.Xml.Linq.XName.Get("CommandType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image32by32XName = System.Xml.Linq.XName.Get("Image32by32", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image32by32ClassXName = System.Xml.Linq.XName.Get("Image32by32Class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image32by32LeftXName = System.Xml.Linq.XName.Get("Image32by32Left", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image32by32TopXName = System.Xml.Linq.XName.Get("Image32by32Top", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image16by16XName = System.Xml.Linq.XName.Get("Image16by16", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image16by16ClassXName = System.Xml.Linq.XName.Get("Image16by16Class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image16by16LeftXName = System.Xml.Linq.XName.Get("Image16by16Left", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image16by16TopXName = System.Xml.Linq.XName.Get("Image16by16Top", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LabelTextXName = System.Xml.Linq.XName.Get("LabelText", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MenuAltXName = System.Xml.Linq.XName.Get("MenuAlt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MenuCommandXName = System.Xml.Linq.XName.Get("MenuCommand", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PopulateDynamicallyXName = System.Xml.Linq.XName.Get("PopulateDynamically", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool PopulateDynamicallyDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PopulateQueryCommandXName = System.Xml.Linq.XName.Get("PopulateQueryCommand", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PopulateOnlyOnceXName = System.Xml.Linq.XName.Get("PopulateOnlyOnce", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool PopulateOnlyOnceDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SequenceXName = System.Xml.Linq.XName.Get("Sequence", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TemplateAliasXName = System.Xml.Linq.XName.Get("TemplateAlias", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32XName = System.Xml.Linq.XName.Get("ToolTipImage32by32", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32ClassXName = System.Xml.Linq.XName.Get("ToolTipImage32by32Class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32LeftXName = System.Xml.Linq.XName.Get("ToolTipImage32by32Left", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32TopXName = System.Xml.Linq.XName.Get("ToolTipImage32by32Top", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipTitleXName = System.Xml.Linq.XName.Get("ToolTipTitle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipDescriptionXName = System.Xml.Linq.XName.Get("ToolTipDescription", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipHelpKeyWordXName = System.Xml.Linq.XName.Get("ToolTipHelpKeyWord", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipSelectedItemTitleXName = System.Xml.Linq.XName.Get("ToolTipSelectedItemTitle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipShortcutKeyXName = System.Xml.Linq.XName.Get("ToolTipShortcutKey", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SplitButtonType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SplitButtonType(XElement xe) { return XTypedServices.ToXTypedElement<SplitButtonType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SplitButtonType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(MenuXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Menu?)
        /// </para>
        /// </summary>
        public SplitButtonType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Menu?)
        /// </para>
        /// </summary>
        public virtual MenuType Menu {
            get {
                XElement x = this.GetElement(MenuXName);
                return ((MenuType)(x));
            }
            set {
                this.SetElement(MenuXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Alt {
            get {
                XAttribute x = this.Attribute(AltXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AltXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool CacheMenuVersions {
            get {
                XAttribute x = this.Attribute(CacheMenuVersionsXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, CacheMenuVersionsDefaultValue);
            }
            set {
                this.SetAttribute(CacheMenuVersionsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Command {
            get {
                XAttribute x = this.Attribute(CommandXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CommandMenuOpen {
            get {
                XAttribute x = this.Attribute(CommandMenuOpenXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandMenuOpenXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CommandMenuClose {
            get {
                XAttribute x = this.Attribute(CommandMenuCloseXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandMenuCloseXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.CommandTypeType? CommandType {
            get {
                XAttribute x = this.Attribute(CommandTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.CommandTypeType)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.CommandTypeType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(CommandTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Image32by32 {
            get {
                XAttribute x = this.Attribute(Image32by32XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(Image32by32XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Image32by32Class {
            get {
                XAttribute x = this.Attribute(Image32by32ClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(Image32by32ClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Image32by32Left {
            get {
                XAttribute x = this.Attribute(Image32by32LeftXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(Image32by32LeftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Image32by32Top {
            get {
                XAttribute x = this.Attribute(Image32by32TopXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(Image32by32TopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Image16by16 {
            get {
                XAttribute x = this.Attribute(Image16by16XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(Image16by16XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Image16by16Class {
            get {
                XAttribute x = this.Attribute(Image16by16ClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(Image16by16ClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Image16by16Left {
            get {
                XAttribute x = this.Attribute(Image16by16LeftXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(Image16by16LeftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Image16by16Top {
            get {
                XAttribute x = this.Attribute(Image16by16TopXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(Image16by16TopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string LabelText {
            get {
                XAttribute x = this.Attribute(LabelTextXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(LabelTextXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string MenuAlt {
            get {
                XAttribute x = this.Attribute(MenuAltXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(MenuAltXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string MenuCommand {
            get {
                XAttribute x = this.Attribute(MenuCommandXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(MenuCommandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool PopulateDynamically {
            get {
                XAttribute x = this.Attribute(PopulateDynamicallyXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, PopulateDynamicallyDefaultValue);
            }
            set {
                this.SetAttribute(PopulateDynamicallyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string PopulateQueryCommand {
            get {
                XAttribute x = this.Attribute(PopulateQueryCommandXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PopulateQueryCommandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool PopulateOnlyOnce {
            get {
                XAttribute x = this.Attribute(PopulateOnlyOnceXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, PopulateOnlyOnceDefaultValue);
            }
            set {
                this.SetAttribute(PopulateOnlyOnceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Sequence {
            get {
                XAttribute x = this.Attribute(SequenceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(SequenceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TemplateAlias {
            get {
                XAttribute x = this.Attribute(TemplateAliasXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TemplateAliasXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipImage32by32 {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipImage32by32Class {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32ClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32ClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ToolTipImage32by32Left {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32LeftXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32LeftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ToolTipImage32by32Top {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32TopXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32TopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipTitle {
            get {
                XAttribute x = this.Attribute(ToolTipTitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipTitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipDescription {
            get {
                XAttribute x = this.Attribute(ToolTipDescriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipDescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipHelpKeyWord {
            get {
                XAttribute x = this.Attribute(ToolTipHelpKeyWordXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipHelpKeyWordXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipSelectedItemTitle {
            get {
                XAttribute x = this.Attribute(ToolTipSelectedItemTitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipSelectedItemTitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipShortcutKey {
            get {
                XAttribute x = this.Attribute(ToolTipShortcutKeyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipShortcutKeyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SplitButtonType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(MenuXName, typeof(MenuType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ControlRef*)
    /// </para>
    /// </summary>
    public partial class StripType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ControlRefXName = System.Xml.Linq.XName.Get("ControlRef", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ControlRefType> ControlRefField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StripType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator StripType(XElement xe) { return XTypedServices.ToXTypedElement<StripType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static StripType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ControlRefXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ControlRef*)
        /// </para>
        /// </summary>
        public StripType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ControlRef*)
        /// </para>
        /// </summary>
        public virtual IList<ControlRefType> ControlRef {
            get {
                if ((this.ControlRefField == null)) {
                    this.ControlRefField = new XTypedList<ControlRefType>(this, LinqToXsdTypeManager.Instance, ControlRefXName);
                }
                return this.ControlRefField;
            }
            set {
                if ((value == null)) {
                    this.ControlRefField = null;
                }
                else {
                    if ((this.ControlRefField == null)) {
                        this.ControlRefField = XTypedList<ControlRefType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ControlRefXName);
                    }
                    else {
                        XTypedServices.SetList<ControlRefType>(this.ControlRefField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StripType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ControlRefXName, typeof(ControlRefType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Scaling, Groups)
    /// </para>
    /// </summary>
    public partial class TabType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ScalingXName = System.Xml.Linq.XName.Get("Scaling", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GroupsXName = System.Xml.Linq.XName.Get("Groups", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandXName = System.Xml.Linq.XName.Get("Command", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CssClassXName = System.Xml.Linq.XName.Get("CssClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DescriptionXName = System.Xml.Linq.XName.Get("Description", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SequenceXName = System.Xml.Linq.XName.Get("Sequence", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TitleXName = System.Xml.Linq.XName.Get("Title", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TabType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TabType(XElement xe) { return XTypedServices.ToXTypedElement<TabType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TabType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ScalingXName), new NamedContentModelEntity(GroupsXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Scaling, Groups)
        /// </para>
        /// </summary>
        public TabType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Scaling, Groups)
        /// </para>
        /// </summary>
        public virtual ScalingType Scaling {
            get {
                XElement x = this.GetElement(ScalingXName);
                return ((ScalingType)(x));
            }
            set {
                this.SetElement(ScalingXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Scaling, Groups)
        /// </para>
        /// </summary>
        public virtual GroupsType Groups {
            get {
                XElement x = this.GetElement(GroupsXName);
                return ((GroupsType)(x));
            }
            set {
                this.SetElement(GroupsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Command {
            get {
                XAttribute x = this.Attribute(CommandXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CssClass {
            get {
                XAttribute x = this.Attribute(CssClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CssClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Description {
            get {
                XAttribute x = this.Attribute(DescriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Sequence {
            get {
                XAttribute x = this.Attribute(SequenceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(SequenceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Title {
            get {
                XAttribute x = this.Attribute(TitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TabType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ScalingXName, typeof(ScalingType));
            localElementDictionary.Add(GroupsXName, typeof(GroupsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Tab*)
    /// </para>
    /// </summary>
    public partial class TabsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TabXName = System.Xml.Linq.XName.Get("Tab", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TabType> TabField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TabsType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TabsType(XElement xe) { return XTypedServices.ToXTypedElement<TabsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TabsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TabXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Tab*)
        /// </para>
        /// </summary>
        public TabsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Tab*)
        /// </para>
        /// </summary>
        public virtual IList<TabType> Tab {
            get {
                if ((this.TabField == null)) {
                    this.TabField = new XTypedList<TabType>(this, LinqToXsdTypeManager.Instance, TabXName);
                }
                return this.TabField;
            }
            set {
                if ((value == null)) {
                    this.TabField = null;
                }
                else {
                    if ((this.TabField == null)) {
                        this.TabField = XTypedList<TabType>.Initialize(this, LinqToXsdTypeManager.Instance, value, TabXName);
                    }
                    else {
                        XTypedServices.SetList<TabType>(this.TabField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TabsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TabXName, typeof(TabType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (RibbonTemplates)
    /// </para>
    /// </summary>
    public partial class TemplatesType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RibbonTemplatesXName = System.Xml.Linq.XName.Get("RibbonTemplates", "http://schemas.microsoft.com/sharepoint/");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TemplatesType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator TemplatesType(XElement xe) { return XTypedServices.ToXTypedElement<TemplatesType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TemplatesType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (RibbonTemplates)
        /// </para>
        /// </summary>
        public TemplatesType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RibbonTemplates)
        /// </para>
        /// </summary>
        public virtual RibbonTemplatesType RibbonTemplates {
            get {
                XElement x = this.GetElement(RibbonTemplatesXName);
                return ((RibbonTemplatesType)(x));
            }
            set {
                this.SetElement(RibbonTemplatesXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TemplatesType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RibbonTemplatesXName, typeof(RibbonTemplatesType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class TextBoxType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandXName = System.Xml.Linq.XName.Get("Command", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImeEnabledXName = System.Xml.Linq.XName.Get("ImeEnabled", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MaxLengthXName = System.Xml.Linq.XName.Get("MaxLength", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName QueryCommandXName = System.Xml.Linq.XName.Get("QueryCommand", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SequenceXName = System.Xml.Linq.XName.Get("Sequence", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ShowAsLabelXName = System.Xml.Linq.XName.Get("ShowAsLabel", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TemplateAliasXName = System.Xml.Linq.XName.Get("TemplateAlias", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32XName = System.Xml.Linq.XName.Get("ToolTipImage32by32", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32ClassXName = System.Xml.Linq.XName.Get("ToolTipImage32by32Class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32LeftXName = System.Xml.Linq.XName.Get("ToolTipImage32by32Left", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32TopXName = System.Xml.Linq.XName.Get("ToolTipImage32by32Top", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipTitleXName = System.Xml.Linq.XName.Get("ToolTipTitle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipDescriptionXName = System.Xml.Linq.XName.Get("ToolTipDescription", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipHelpKeyWordXName = System.Xml.Linq.XName.Get("ToolTipHelpKeyWord", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipShortcutKeyXName = System.Xml.Linq.XName.Get("ToolTipShortcutKey", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WidthXName = System.Xml.Linq.XName.Get("Width", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TextBoxType", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator TextBoxType(XElement xe) { return XTypedServices.ToXTypedElement<TextBoxType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public TextBoxType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Command {
            get {
                XAttribute x = this.Attribute(CommandXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? ImeEnabled {
            get {
                XAttribute x = this.Attribute(ImeEnabledXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(ImeEnabledXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? MaxLength {
            get {
                XAttribute x = this.Attribute(MaxLengthXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(MaxLengthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string QueryCommand {
            get {
                XAttribute x = this.Attribute(QueryCommandXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(QueryCommandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Sequence {
            get {
                XAttribute x = this.Attribute(SequenceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(SequenceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? ShowAsLabel {
            get {
                XAttribute x = this.Attribute(ShowAsLabelXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(ShowAsLabelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TemplateAlias {
            get {
                XAttribute x = this.Attribute(TemplateAliasXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TemplateAliasXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipImage32by32 {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipImage32by32Class {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32ClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32ClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ToolTipImage32by32Left {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32LeftXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32LeftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ToolTipImage32by32Top {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32TopXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32TopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipTitle {
            get {
                XAttribute x = this.Attribute(ToolTipTitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipTitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipDescription {
            get {
                XAttribute x = this.Attribute(ToolTipDescriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipDescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipHelpKeyWord {
            get {
                XAttribute x = this.Attribute(ToolTipHelpKeyWordXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipHelpKeyWordXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipShortcutKey {
            get {
                XAttribute x = this.Attribute(ToolTipShortcutKeyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipShortcutKeyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Width {
            get {
                XAttribute x = this.Attribute(WidthXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(WidthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TextBoxType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ToggleButtonType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AltXName = System.Xml.Linq.XName.Get("Alt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandXName = System.Xml.Linq.XName.Get("Command", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandValueIdXName = System.Xml.Linq.XName.Get("CommandValueId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DescriptionXName = System.Xml.Linq.XName.Get("Description", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LabelCssXName = System.Xml.Linq.XName.Get("LabelCss", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LabelTextXName = System.Xml.Linq.XName.Get("LabelText", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image32by32XName = System.Xml.Linq.XName.Get("Image32by32", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image32by32ClassXName = System.Xml.Linq.XName.Get("Image32by32Class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image32by32LeftXName = System.Xml.Linq.XName.Get("Image32by32Left", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image32by32TopXName = System.Xml.Linq.XName.Get("Image32by32Top", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image16by16XName = System.Xml.Linq.XName.Get("Image16by16", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image16by16ClassXName = System.Xml.Linq.XName.Get("Image16by16Class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image16by16LeftXName = System.Xml.Linq.XName.Get("Image16by16Left", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Image16by16TopXName = System.Xml.Linq.XName.Get("Image16by16Top", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MenuItemIdXName = System.Xml.Linq.XName.Get("MenuItemId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName QueryCommandXName = System.Xml.Linq.XName.Get("QueryCommand", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SequenceXName = System.Xml.Linq.XName.Get("Sequence", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TemplateAliasXName = System.Xml.Linq.XName.Get("TemplateAlias", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32XName = System.Xml.Linq.XName.Get("ToolTipImage32by32", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32ClassXName = System.Xml.Linq.XName.Get("ToolTipImage32by32Class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32LeftXName = System.Xml.Linq.XName.Get("ToolTipImage32by32Left", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipImage32by32TopXName = System.Xml.Linq.XName.Get("ToolTipImage32by32Top", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipTitleXName = System.Xml.Linq.XName.Get("ToolTipTitle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipDescriptionXName = System.Xml.Linq.XName.Get("ToolTipDescription", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipHelpKeyWordXName = System.Xml.Linq.XName.Get("ToolTipHelpKeyWord", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolTipShortcutKeyXName = System.Xml.Linq.XName.Get("ToolTipShortcutKey", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ToggleButtonType", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator ToggleButtonType(XElement xe) { return XTypedServices.ToXTypedElement<ToggleButtonType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ToggleButtonType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Alt {
            get {
                XAttribute x = this.Attribute(AltXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AltXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Command {
            get {
                XAttribute x = this.Attribute(CommandXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CommandValueId {
            get {
                XAttribute x = this.Attribute(CommandValueIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandValueIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Description {
            get {
                XAttribute x = this.Attribute(DescriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string LabelCss {
            get {
                XAttribute x = this.Attribute(LabelCssXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(LabelCssXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string LabelText {
            get {
                XAttribute x = this.Attribute(LabelTextXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(LabelTextXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Image32by32 {
            get {
                XAttribute x = this.Attribute(Image32by32XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(Image32by32XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Image32by32Class {
            get {
                XAttribute x = this.Attribute(Image32by32ClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(Image32by32ClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Image32by32Left {
            get {
                XAttribute x = this.Attribute(Image32by32LeftXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(Image32by32LeftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Image32by32Top {
            get {
                XAttribute x = this.Attribute(Image32by32TopXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(Image32by32TopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Image16by16 {
            get {
                XAttribute x = this.Attribute(Image16by16XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(Image16by16XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Image16by16Class {
            get {
                XAttribute x = this.Attribute(Image16by16ClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(Image16by16ClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Image16by16Left {
            get {
                XAttribute x = this.Attribute(Image16by16LeftXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(Image16by16LeftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Image16by16Top {
            get {
                XAttribute x = this.Attribute(Image16by16TopXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(Image16by16TopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string MenuItemId {
            get {
                XAttribute x = this.Attribute(MenuItemIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(MenuItemIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string QueryCommand {
            get {
                XAttribute x = this.Attribute(QueryCommandXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(QueryCommandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Sequence {
            get {
                XAttribute x = this.Attribute(SequenceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(SequenceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TemplateAlias {
            get {
                XAttribute x = this.Attribute(TemplateAliasXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TemplateAliasXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipImage32by32 {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipImage32by32Class {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32ClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32ClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ToolTipImage32by32Left {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32LeftXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32LeftXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? ToolTipImage32by32Top {
            get {
                XAttribute x = this.Attribute(ToolTipImage32by32TopXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(ToolTipImage32by32TopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NonPositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipTitle {
            get {
                XAttribute x = this.Attribute(ToolTipTitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipTitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipDescription {
            get {
                XAttribute x = this.Attribute(ToolTipDescriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipDescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipHelpKeyWord {
            get {
                XAttribute x = this.Attribute(ToolTipHelpKeyWordXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipHelpKeyWordXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolTipShortcutKey {
            get {
                XAttribute x = this.Attribute(ToolTipShortcutKeyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolTipShortcutKeyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ToggleButtonType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (UnitAbbreviation+)
    /// </para>
    /// </summary>
    public partial class UnitType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UnitAbbreviationXName = System.Xml.Linq.XName.Get("UnitAbbreviation", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UnitAbbreviationType> UnitAbbreviationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MinimumValueXName = System.Xml.Linq.XName.Get("MinimumValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MaximumValueXName = System.Xml.Linq.XName.Get("MaximumValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DecimalDigitsXName = System.Xml.Linq.XName.Get("DecimalDigits", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IntervalXName = System.Xml.Linq.XName.Get("Interval", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("UnitType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator UnitType(XElement xe) { return XTypedServices.ToXTypedElement<UnitType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static UnitType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(UnitAbbreviationXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (UnitAbbreviation+)
        /// </para>
        /// </summary>
        public UnitType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (UnitAbbreviation+)
        /// </para>
        /// </summary>
        public virtual IList<UnitAbbreviationType> UnitAbbreviation {
            get {
                if ((this.UnitAbbreviationField == null)) {
                    this.UnitAbbreviationField = new XTypedList<UnitAbbreviationType>(this, LinqToXsdTypeManager.Instance, UnitAbbreviationXName);
                }
                return this.UnitAbbreviationField;
            }
            set {
                if ((value == null)) {
                    this.UnitAbbreviationField = null;
                }
                else {
                    if ((this.UnitAbbreviationField == null)) {
                        this.UnitAbbreviationField = XTypedList<UnitAbbreviationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, UnitAbbreviationXName);
                    }
                    else {
                        XTypedServices.SetList<UnitAbbreviationType>(this.UnitAbbreviationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? MinimumValue {
            get {
                XAttribute x = this.Attribute(MinimumValueXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetAttribute(MinimumValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? MaximumValue {
            get {
                XAttribute x = this.Attribute(MaximumValueXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetAttribute(MaximumValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? DecimalDigits {
            get {
                XAttribute x = this.Attribute(DecimalDigitsXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(DecimalDigitsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? Interval {
            get {
                XAttribute x = this.Attribute(IntervalXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(IntervalXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UnitType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(UnitAbbreviationXName, typeof(UnitAbbreviationType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class UnitAbbreviationType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SequenceXName = System.Xml.Linq.XName.Get("Sequence", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ValueXName = System.Xml.Linq.XName.Get("Value", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("UnitAbbreviationType", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator UnitAbbreviationType(XElement xe) { return XTypedServices.ToXTypedElement<UnitAbbreviationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public UnitAbbreviationType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? Sequence {
            get {
                XAttribute x = this.Attribute(SequenceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(SequenceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Value {
            get {
                XAttribute x = this.Attribute(ValueXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UnitAbbreviationType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (FieldBind*)
    /// </para>
    /// </summary>
    public partial class ruleDesignerType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldBindXName = System.Xml.Linq.XName.Get("FieldBind", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldBindLocalType> FieldBindField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SentenceXName = System.Xml.Linq.XName.Get("Sentence", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ruleDesignerType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ruleDesignerType(XElement xe) { return XTypedServices.ToXTypedElement<ruleDesignerType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ruleDesignerType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FieldBindXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (FieldBind*)
        /// </para>
        /// </summary>
        public ruleDesignerType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (FieldBind*)
        /// </para>
        /// </summary>
        public virtual IList<Microsoft.Schemas.SharePoint.ruleDesignerType.FieldBindLocalType> FieldBind {
            get {
                if ((this.FieldBindField == null)) {
                    this.FieldBindField = new XTypedList<FieldBindLocalType>(this, LinqToXsdTypeManager.Instance, FieldBindXName);
                }
                return this.FieldBindField;
            }
            set {
                if ((value == null)) {
                    this.FieldBindField = null;
                }
                else {
                    if ((this.FieldBindField == null)) {
                        this.FieldBindField = XTypedList<FieldBindLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldBindXName);
                    }
                    else {
                        XTypedServices.SetList<FieldBindLocalType>(this.FieldBindField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Sentence {
            get {
                XAttribute x = this.Attribute(SentenceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SentenceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ruleDesignerType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FieldBindXName, typeof(FieldBindLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Option* | DataSourceRef+)
        /// </para>
        /// </summary>
        public partial class FieldBindLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OptionXName = System.Xml.Linq.XName.Get("Option", "http://schemas.microsoft.com/sharepoint/");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<OptionLocalType> OptionField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DataSourceRefXName = System.Xml.Linq.XName.Get("DataSourceRef", "http://schemas.microsoft.com/sharepoint/");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<DataSourceRefLocalType> DataSourceRefField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName FieldXName = System.Xml.Linq.XName.Get("Field", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName TextXName = System.Xml.Linq.XName.Get("Text", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DesignerTypeXName = System.Xml.Linq.XName.Get("DesignerType", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OperatorTypeFromXName = System.Xml.Linq.XName.Get("OperatorTypeFrom", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName TypeFromXName = System.Xml.Linq.XName.Get("TypeFrom", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName FunctionXName = System.Xml.Linq.XName.Get("Function", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static bool FunctionDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ValueXName = System.Xml.Linq.XName.Get("Value", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FieldBind", "http://schemas.microsoft.com/sharepoint/");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator FieldBindLocalType(XElement xe) { return XTypedServices.ToXTypedElement<FieldBindLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static FieldBindLocalType() {
                BuildElementDictionary();
                contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(OptionXName), new NamedContentModelEntity(DataSourceRefXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Option* | DataSourceRef+)
            /// </para>
            /// </summary>
            public FieldBindLocalType() {
            }
            
            public FieldBindLocalType(IEnumerable<OptionLocalType> Option) {
                this.OptionField = XTypedList<OptionLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, Option, OptionXName);
            }
            
            public FieldBindLocalType(IEnumerable<DataSourceRefLocalType> DataSourceRef) {
                this.DataSourceRefField = XTypedList<DataSourceRefLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, DataSourceRef, DataSourceRefXName);
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating, choice
            /// </para>
            /// <para>
            /// Regular expression: (Option* | DataSourceRef+)
            /// </para>
            /// </summary>
            public virtual IList<Microsoft.Schemas.SharePoint.ruleDesignerType.FieldBindLocalType.OptionLocalType> Option {
                get {
                    if ((this.OptionField == null)) {
                        this.OptionField = new XTypedList<OptionLocalType>(this, LinqToXsdTypeManager.Instance, OptionXName);
                    }
                    return this.OptionField;
                }
                set {
                    if ((value == null)) {
                        this.OptionField = null;
                    }
                    else {
                        if ((this.OptionField == null)) {
                            this.OptionField = XTypedList<OptionLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, OptionXName);
                        }
                        else {
                            XTypedServices.SetList<OptionLocalType>(this.OptionField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating, choice
            /// </para>
            /// <para>
            /// Regular expression: (Option* | DataSourceRef+)
            /// </para>
            /// </summary>
            public virtual IList<Microsoft.Schemas.SharePoint.ruleDesignerType.FieldBindLocalType.DataSourceRefLocalType> DataSourceRef {
                get {
                    if ((this.DataSourceRefField == null)) {
                        this.DataSourceRefField = new XTypedList<DataSourceRefLocalType>(this, LinqToXsdTypeManager.Instance, DataSourceRefXName);
                    }
                    return this.DataSourceRefField;
                }
                set {
                    if ((value == null)) {
                        this.DataSourceRefField = null;
                    }
                    else {
                        if ((this.DataSourceRefField == null)) {
                            this.DataSourceRefField = XTypedList<DataSourceRefLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, DataSourceRefXName);
                        }
                        else {
                            XTypedServices.SetList<DataSourceRefLocalType>(this.DataSourceRefField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public virtual string Field {
                get {
                    XAttribute x = this.Attribute(FieldXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(FieldXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public virtual string Text {
                get {
                    XAttribute x = this.Attribute(TextXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(TextXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual decimal Id {
                get {
                    XAttribute x = this.Attribute(IdXName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                }
                set {
                    this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual Microsoft.Schemas.SharePoint.ruleDesignerType.FieldBindLocalType.DesignerTypeEnum DesignerType {
                get {
                    XAttribute x = this.Attribute(DesignerTypeXName);
                    return ((Microsoft.Schemas.SharePoint.ruleDesignerType.FieldBindLocalType.DesignerTypeEnum)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.ruleDesignerType.FieldBindLocalType.DesignerTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
                }
                set {
                    this.SetAttribute(DesignerTypeXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public virtual string OperatorTypeFrom {
                get {
                    XAttribute x = this.Attribute(OperatorTypeFromXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(OperatorTypeFromXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public virtual string TypeFrom {
                get {
                    XAttribute x = this.Attribute(TypeFromXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(TypeFromXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public virtual bool Function {
                get {
                    XAttribute x = this.Attribute(FunctionXName);
                    return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, FunctionDefaultValue);
                }
                set {
                    this.SetAttribute(FunctionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public virtual string Value {
                get {
                    XAttribute x = this.Attribute(ValueXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(ValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<FieldBindLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(OptionXName, typeof(OptionLocalType));
                localElementDictionary.Add(DataSourceRefXName, typeof(DataSourceRefLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            public enum DesignerTypeEnum {
                
                AddPermission,
                
                Assignment,
                
                Bool,
                
                CheckPermission,
                
                ChooseDoclibItem,
                
                ChooseListItem,
                
                CreateListItem,
                
                DataSourceFieldNames,
                
                DataSourceValues,
                
                Date,
                
                Dependent,
                
                Dropdown,
                
                Email,
                
                FieldNames,
                
                Float,
                
                Hyperlink,
                
                Integer,
                
                ListNames,
                
                Operator,
                
                ParameterNames,
                
                Person,
                
                RemovePermission,
                
                ReplacePermission,
                
                SinglePerson,
                
                StatusDropdown,
                
                StringBuilder,
                
                Survey,
                
                TaskSummary,
                
                Text,
                
                TextBox,
                
                TextArea,
                
                UpdateListItem,
                
                WritableFieldNames,
            }
            
            public partial class OptionLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ValueXName = System.Xml.Linq.XName.Get("Value", "");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName TypeFilterXName = System.Xml.Linq.XName.Get("TypeFilter", "");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName UnaryHidesXName = System.Xml.Linq.XName.Get("UnaryHides", "");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Option", "http://schemas.microsoft.com/sharepoint/");
                
		public static explicit operator OptionLocalType(XElement xe) { return XTypedServices.ToXTypedElement<OptionLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public OptionLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// </summary>
                public virtual string Name {
                    get {
                        XAttribute x = this.Attribute(NameXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// </summary>
                public virtual string Value {
                    get {
                        XAttribute x = this.Attribute(ValueXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(ValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public virtual string TypeFilter {
                    get {
                        XAttribute x = this.Attribute(TypeFilterXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(TypeFilterXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public virtual string UnaryHides {
                    get {
                        XAttribute x = this.Attribute(UnaryHidesXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(UnaryHidesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<OptionLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
            
            public partial class DataSourceRefLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName RefXName = System.Xml.Linq.XName.Get("Ref", "");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DataSourceRef", "http://schemas.microsoft.com/sharepoint/");
                
		public static explicit operator DataSourceRefLocalType(XElement xe) { return XTypedServices.ToXTypedElement<DataSourceRefLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public DataSourceRefLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public virtual string Ref {
                    get {
                        XAttribute x = this.Attribute(RefXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(RefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<DataSourceRefLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (RuleDesigner)
    /// </para>
    /// </summary>
    public partial class defaultElementType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RuleDesignerXName = System.Xml.Linq.XName.Get("RuleDesigner", "http://schemas.microsoft.com/sharepoint/");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("defaultElementType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator defaultElementType(XElement xe) { return XTypedServices.ToXTypedElement<defaultElementType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static defaultElementType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RuleDesignerXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (RuleDesigner)
        /// </para>
        /// </summary>
        public defaultElementType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RuleDesigner)
        /// </para>
        /// </summary>
        public virtual ruleDesignerType RuleDesigner {
            get {
                XElement x = this.GetElement(RuleDesignerXName);
                return ((ruleDesignerType)(x));
            }
            set {
                this.SetElement(RuleDesignerXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<defaultElementType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RuleDesignerXName, typeof(ruleDesignerType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Parameter*)
    /// </para>
    /// </summary>
    public partial class parametersType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ParameterXName = System.Xml.Linq.XName.Get("Parameter", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ParameterLocalType> ParameterField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("parametersType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator parametersType(XElement xe) { return XTypedServices.ToXTypedElement<parametersType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static parametersType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ParameterXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Parameter*)
        /// </para>
        /// </summary>
        public parametersType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Parameter*)
        /// </para>
        /// </summary>
        public virtual IList<Microsoft.Schemas.SharePoint.parametersType.ParameterLocalType> Parameter {
            get {
                if ((this.ParameterField == null)) {
                    this.ParameterField = new XTypedList<ParameterLocalType>(this, LinqToXsdTypeManager.Instance, ParameterXName);
                }
                return this.ParameterField;
            }
            set {
                if ((value == null)) {
                    this.ParameterField = null;
                }
                else {
                    if ((this.ParameterField == null)) {
                        this.ParameterField = XTypedList<ParameterLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ParameterXName);
                    }
                    else {
                        XTypedServices.SetList<ParameterLocalType>(this.ParameterField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<parametersType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ParameterXName, typeof(ParameterLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class ParameterLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName TypeXName = System.Xml.Linq.XName.Get("Type", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DirectionXName = System.Xml.Linq.XName.Get("Direction", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DescriptionXName = System.Xml.Linq.XName.Get("Description", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DesignerTypeXName = System.Xml.Linq.XName.Get("DesignerType", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DisplayNameXName = System.Xml.Linq.XName.Get("DisplayName", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName InitialValueXName = System.Xml.Linq.XName.Get("InitialValue", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName InitialBindingXName = System.Xml.Linq.XName.Get("InitialBinding", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Parameter", "http://schemas.microsoft.com/sharepoint/");
            
		public static explicit operator ParameterLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ParameterLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public ParameterLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string Name {
                get {
                    XAttribute x = this.Attribute(NameXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual string Type {
                get {
                    XAttribute x = this.Attribute(TypeXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(TypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// </summary>
            public virtual Microsoft.Schemas.SharePoint.parametersType.ParameterLocalType.DirectionEnum Direction {
                get {
                    XAttribute x = this.Attribute(DirectionXName);
                    return ((Microsoft.Schemas.SharePoint.parametersType.ParameterLocalType.DirectionEnum)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.parametersType.ParameterLocalType.DirectionEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
                }
                set {
                    this.SetAttribute(DirectionXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public virtual string Description {
                get {
                    XAttribute x = this.Attribute(DescriptionXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(DescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public virtual Microsoft.Schemas.SharePoint.parametersType.ParameterLocalType.DesignerTypeEnum? DesignerType {
                get {
                    XAttribute x = this.Attribute(DesignerTypeXName);
                    if ((x == null)) {
                        return null;
                    }
                    return ((Microsoft.Schemas.SharePoint.parametersType.ParameterLocalType.DesignerTypeEnum)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.parametersType.ParameterLocalType.DesignerTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
                }
                set {
                    this.SetAttribute(DesignerTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public virtual string DisplayName {
                get {
                    XAttribute x = this.Attribute(DisplayNameXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(DisplayNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public virtual string InitialValue {
                get {
                    XAttribute x = this.Attribute(InitialValueXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(InitialValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public virtual string InitialBinding {
                get {
                    XAttribute x = this.Attribute(InitialBindingXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(InitialBindingXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ParameterLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
            
            public enum DirectionEnum {
                
                In,
                
                Out,
                
                Optional,
            }
            
            public enum DesignerTypeEnum {
                
                ContentType,
                
                DataSourceFieldNames,
                
                DataSourceValues,
                
                Date,
                
                Dependent,
                
                Dropdown,
                
                FieldNames,
                
                Hide,
                
                Integer,
                
                ItemProperties,
                
                ListItem,
                
                ListNames,
                
                ParameterNames,
                
                Person,
                
                SinglePerson,
                
                StatusDropdown,
                
                StringBuilder,
                
                TextArea,
                
                TextBox,
                
                WritableFieldNames,
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (DataSource*)
    /// </para>
    /// </summary>
    public partial class dataSourcesType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DataSourceXName = System.Xml.Linq.XName.Get("DataSource", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dataSourceType> DataSourceField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("dataSourcesType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator dataSourcesType(XElement xe) { return XTypedServices.ToXTypedElement<dataSourcesType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static dataSourcesType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DataSourceXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (DataSource*)
        /// </para>
        /// </summary>
        public dataSourcesType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DataSource*)
        /// </para>
        /// </summary>
        public virtual IList<dataSourceType> DataSource {
            get {
                if ((this.DataSourceField == null)) {
                    this.DataSourceField = new XTypedList<dataSourceType>(this, LinqToXsdTypeManager.Instance, DataSourceXName);
                }
                return this.DataSourceField;
            }
            set {
                if ((value == null)) {
                    this.DataSourceField = null;
                }
                else {
                    if ((this.DataSourceField == null)) {
                        this.DataSourceField = XTypedList<dataSourceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, DataSourceXName);
                    }
                    else {
                        XTypedServices.SetList<dataSourceType>(this.DataSourceField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<dataSourcesType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(DataSourceXName, typeof(dataSourceType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (SchemaSource, Evaluation)
    /// </para>
    /// </summary>
    public partial class dataSourceType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchemaSourceXName = System.Xml.Linq.XName.Get("SchemaSource", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EvaluationXName = System.Xml.Linq.XName.Get("Evaluation", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InternalNameXName = System.Xml.Linq.XName.Get("InternalName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NamePropertyXName = System.Xml.Linq.XName.Get("NameProperty", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("dataSourceType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator dataSourceType(XElement xe) { return XTypedServices.ToXTypedElement<dataSourceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static dataSourceType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SchemaSourceXName), new NamedContentModelEntity(EvaluationXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SchemaSource, Evaluation)
        /// </para>
        /// </summary>
        public dataSourceType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SchemaSource, Evaluation)
        /// </para>
        /// </summary>
        public virtual SchemaSourceLocalType SchemaSource {
            get {
                XElement x = this.GetElement(SchemaSourceXName);
                return ((SchemaSourceLocalType)(x));
            }
            set {
                this.SetElement(SchemaSourceXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SchemaSource, Evaluation)
        /// </para>
        /// </summary>
        public virtual EvaluationLocalType Evaluation {
            get {
                XElement x = this.GetElement(EvaluationXName);
                return ((EvaluationLocalType)(x));
            }
            set {
                this.SetElement(EvaluationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string InternalName {
            get {
                XAttribute x = this.Attribute(InternalNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(InternalNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string NameProperty {
            get {
                XAttribute x = this.Attribute(NamePropertyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NamePropertyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<dataSourceType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SchemaSourceXName, typeof(SchemaSourceLocalType));
            localElementDictionary.Add(EvaluationXName, typeof(EvaluationLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Fields? | ContentType? | Dictionary? | NestedInitiationFieldNodes?)
        /// </para>
        /// </summary>
        public partial class SchemaSourceLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName FieldsXName = System.Xml.Linq.XName.Get("Fields", "http://schemas.microsoft.com/sharepoint/");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ContentTypeXName = System.Xml.Linq.XName.Get("ContentType", "http://schemas.microsoft.com/sharepoint/");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DictionaryXName = System.Xml.Linq.XName.Get("Dictionary", "http://schemas.microsoft.com/sharepoint/");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NestedInitiationFieldNodesXName = System.Xml.Linq.XName.Get("NestedInitiationFieldNodes", "http://schemas.microsoft.com/sharepoint/");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SchemaSource", "http://schemas.microsoft.com/sharepoint/");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator SchemaSourceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<SchemaSourceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static SchemaSourceLocalType() {
                BuildElementDictionary();
                contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(FieldsXName), new NamedContentModelEntity(ContentTypeXName), new NamedContentModelEntity(DictionaryXName), new NamedContentModelEntity(NestedInitiationFieldNodesXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Fields? | ContentType? | Dictionary? | NestedInitiationFieldNodes?)
            /// </para>
            /// </summary>
            public SchemaSourceLocalType() {
            }
            
            public SchemaSourceLocalType(FieldsLocalType Fields) {
                this.Fields = Fields;
            }
            
            public SchemaSourceLocalType(ContentTypeLocalType ContentType) {
                this.ContentType = ContentType;
            }
            
            public SchemaSourceLocalType(DictionaryLocalType Dictionary) {
                this.Dictionary = Dictionary;
            }
            
            public SchemaSourceLocalType(XTypedElement NestedInitiationFieldNodes) {
                this.NestedInitiationFieldNodes = NestedInitiationFieldNodes;
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, choice
            /// </para>
            /// <para>
            /// Regular expression: (Fields? | ContentType? | Dictionary? | NestedInitiationFieldNodes?)
            /// </para>
            /// </summary>
            public virtual FieldsLocalType Fields {
                get {
                    XElement x = this.GetElement(FieldsXName);
                    return ((FieldsLocalType)(x));
                }
                set {
                    this.SetElement(FieldsXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, choice
            /// </para>
            /// <para>
            /// Regular expression: (Fields? | ContentType? | Dictionary? | NestedInitiationFieldNodes?)
            /// </para>
            /// </summary>
            public virtual ContentTypeLocalType ContentType {
                get {
                    XElement x = this.GetElement(ContentTypeXName);
                    return ((ContentTypeLocalType)(x));
                }
                set {
                    this.SetElement(ContentTypeXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, choice
            /// </para>
            /// <para>
            /// Regular expression: (Fields? | ContentType? | Dictionary? | NestedInitiationFieldNodes?)
            /// </para>
            /// </summary>
            public virtual DictionaryLocalType Dictionary {
                get {
                    XElement x = this.GetElement(DictionaryXName);
                    return ((DictionaryLocalType)(x));
                }
                set {
                    this.SetElement(DictionaryXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, choice
            /// </para>
            /// <para>
            /// Regular expression: (Fields? | ContentType? | Dictionary? | NestedInitiationFieldNodes?)
            /// </para>
            /// </summary>
            public virtual XTypedElement NestedInitiationFieldNodes {
                get {
                    XElement x = this.GetElement(NestedInitiationFieldNodesXName);
                    return ((XTypedElement)(x));
                }
                set {
                    this.SetElement(NestedInitiationFieldNodesXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<SchemaSourceLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(FieldsXName, typeof(FieldsLocalType));
                localElementDictionary.Add(ContentTypeXName, typeof(ContentTypeLocalType));
                localElementDictionary.Add(DictionaryXName, typeof(DictionaryLocalType));
                localElementDictionary.Add(NestedInitiationFieldNodesXName, typeof(XTypedElement));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Field+)
            /// </para>
            /// </summary>
            public partial class FieldsLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName FieldXName = System.Xml.Linq.XName.Get("Field", "http://schemas.microsoft.com/sharepoint/");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<FieldLocalType> FieldField;
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Fields", "http://schemas.microsoft.com/sharepoint/");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator FieldsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<FieldsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static FieldsLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FieldXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (Field+)
                /// </para>
                /// </summary>
                public FieldsLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required, repeating
                /// </para>
                /// <para>
                /// Regular expression: (Field+)
                /// </para>
                /// </summary>
                public virtual IList<Microsoft.Schemas.SharePoint.dataSourceType.SchemaSourceLocalType.FieldsLocalType.FieldLocalType> Field {
                    get {
                        if ((this.FieldField == null)) {
                            this.FieldField = new XTypedList<FieldLocalType>(this, LinqToXsdTypeManager.Instance, FieldXName);
                        }
                        return this.FieldField;
                    }
                    set {
                        if ((value == null)) {
                            this.FieldField = null;
                        }
                        else {
                            if ((this.FieldField == null)) {
                                this.FieldField = XTypedList<FieldLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldXName);
                            }
                            else {
                                XTypedServices.SetList<FieldLocalType>(this.FieldField, value);
                            }
                        }
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<FieldsLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(FieldXName, typeof(FieldLocalType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                public partial class FieldLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName DisplayNameXName = System.Xml.Linq.XName.Get("DisplayName", "");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName TypeXName = System.Xml.Linq.XName.Get("Type", "");
                    
                    private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Field", "http://schemas.microsoft.com/sharepoint/");
                    
		public static explicit operator FieldLocalType(XElement xe) { return XTypedServices.ToXTypedElement<FieldLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    public FieldLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// </summary>
                    public virtual string Name {
                        get {
                            XAttribute x = this.Attribute(NameXName);
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// </summary>
                    public virtual string DisplayName {
                        get {
                            XAttribute x = this.Attribute(DisplayNameXName);
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetAttribute(DisplayNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// </summary>
                    public virtual string Type {
                        get {
                            XAttribute x = this.Attribute(TypeXName);
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetAttribute(TypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    System.Xml.Linq.XName IXMetaData.SchemaName {
                        get {
                            return xName;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<FieldLocalType>(this);
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return ContentModelEntity.Default;
                    }
                }
            }
            
            public partial class ContentTypeLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName IDFromXName = System.Xml.Linq.XName.Get("IDFrom", "");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ContentType", "http://schemas.microsoft.com/sharepoint/");
                
		public static explicit operator ContentTypeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ContentTypeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public ContentTypeLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public virtual string IDFrom {
                    get {
                        XAttribute x = this.Attribute(IDFromXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(IDFromXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<ContentTypeLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
            
            public partial class DictionaryLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ValueFromXName = System.Xml.Linq.XName.Get("ValueFrom", "");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Dictionary", "http://schemas.microsoft.com/sharepoint/");
                
		public static explicit operator DictionaryLocalType(XElement xe) { return XTypedServices.ToXTypedElement<DictionaryLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public DictionaryLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public virtual string ValueFrom {
                    get {
                        XAttribute x = this.Attribute(ValueFromXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(ValueFromXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<DictionaryLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ActivitySource | HashtableSource)
        /// </para>
        /// </summary>
        public partial class EvaluationLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ActivitySourceXName = System.Xml.Linq.XName.Get("ActivitySource", "http://schemas.microsoft.com/sharepoint/");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName HashtableSourceXName = System.Xml.Linq.XName.Get("HashtableSource", "http://schemas.microsoft.com/sharepoint/");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Evaluation", "http://schemas.microsoft.com/sharepoint/");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator EvaluationLocalType(XElement xe) { return XTypedServices.ToXTypedElement<EvaluationLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static EvaluationLocalType() {
                BuildElementDictionary();
                contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ActivitySourceXName), new NamedContentModelEntity(HashtableSourceXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (ActivitySource | HashtableSource)
            /// </para>
            /// </summary>
            public EvaluationLocalType() {
            }
            
            public EvaluationLocalType(ActivitySourceLocalType ActivitySource) {
                this.ActivitySource = ActivitySource;
            }
            
            public EvaluationLocalType(HashtableSourceLocalType HashtableSource) {
                this.HashtableSource = HashtableSource;
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Regular expression: (ActivitySource | HashtableSource)
            /// </para>
            /// </summary>
            public virtual ActivitySourceLocalType ActivitySource {
                get {
                    XElement x = this.GetElement(ActivitySourceXName);
                    return ((ActivitySourceLocalType)(x));
                }
                set {
                    this.SetElement(ActivitySourceXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Regular expression: (ActivitySource | HashtableSource)
            /// </para>
            /// </summary>
            public virtual HashtableSourceLocalType HashtableSource {
                get {
                    XElement x = this.GetElement(HashtableSourceXName);
                    return ((HashtableSourceLocalType)(x));
                }
                set {
                    this.SetElement(HashtableSourceXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<EvaluationLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(ActivitySourceXName, typeof(ActivitySourceLocalType));
                localElementDictionary.Add(HashtableSourceXName, typeof(HashtableSourceLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            public partial class ActivitySourceLocalType : XTypedElement, IXMetaData {
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ActivitySource", "http://schemas.microsoft.com/sharepoint/");
                
		public static explicit operator ActivitySourceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ActivitySourceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public ActivitySourceLocalType() {
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<ActivitySourceLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
            
            public partial class HashtableSourceLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName HashtableFromXName = System.Xml.Linq.XName.Get("HashtableFrom", "");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("HashtableSource", "http://schemas.microsoft.com/sharepoint/");
                
		public static explicit operator HashtableSourceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<HashtableSourceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public HashtableSourceLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public virtual string HashtableFrom {
                    get {
                        XAttribute x = this.Attribute(HashtableFromXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(HashtableFromXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<HashtableSourceLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Parameters?, RuleDesigner, DataSources?, Modifications?, ActionVariables?, ActionBody?, ActionConditions?)
    /// </para>
    /// </summary>
    public partial class actionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ParametersXName = System.Xml.Linq.XName.Get("Parameters", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RuleDesignerXName = System.Xml.Linq.XName.Get("RuleDesigner", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DataSourcesXName = System.Xml.Linq.XName.Get("DataSources", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ModificationsXName = System.Xml.Linq.XName.Get("Modifications", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ActionVariablesXName = System.Xml.Linq.XName.Get("ActionVariables", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ActionBodyXName = System.Xml.Linq.XName.Get("ActionBody", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ActionConditionsXName = System.Xml.Linq.XName.Get("ActionConditions", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ClassNameXName = System.Xml.Linq.XName.Get("ClassName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AssemblyXName = System.Xml.Linq.XName.Get("Assembly", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FunctionNameXName = System.Xml.Linq.XName.Get("FunctionName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string FunctionNameDefaultValue = "";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CategoryXName = System.Xml.Linq.XName.Get("Category", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CreatesTaskXName = System.Xml.Linq.XName.Get("CreatesTask", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool CreatesTaskDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CreatesInListXName = System.Xml.Linq.XName.Get("CreatesInList", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AppliesToXName = System.Xml.Linq.XName.Get("AppliesTo", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IsErrorXName = System.Xml.Linq.XName.Get("IsError", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool IsErrorDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ListModerationXName = System.Xml.Linq.XName.Get("ListModeration", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool ListModerationDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UsesCurrentItemXName = System.Xml.Linq.XName.Get("UsesCurrentItem", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool UsesCurrentItemDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RequiredInvocationTagsXName = System.Xml.Linq.XName.Get("RequiredInvocationTags", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InvocationTagsXName = System.Xml.Linq.XName.Get("InvocationTags", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProhibitedInvocationTagsXName = System.Xml.Linq.XName.Get("ProhibitedInvocationTags", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CreatedTaskFormTypeXName = System.Xml.Linq.XName.Get("CreatedTaskFormType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @__SolutionIdXName = System.Xml.Linq.XName.Get("__SolutionId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SandboxedFunctionXName = System.Xml.Linq.XName.Get("SandboxedFunction", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool SandboxedFunctionDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("actionType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator actionType(XElement xe) { return XTypedServices.ToXTypedElement<actionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static actionType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Parameters?, RuleDesigner, DataSources?, Modifications?, ActionVariables?, ActionBody?, ActionConditions?)
        /// </para>
        /// </summary>
        public actionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Parameters?, RuleDesigner, DataSources?, Modifications?, ActionVariables?, ActionBody?, ActionConditions?)
        /// </para>
        /// </summary>
        public virtual parametersType Parameters {
            get {
                XElement x = this.GetElement(ParametersXName);
                return ((parametersType)(x));
            }
            set {
                this.SetElement(ParametersXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Parameters?, RuleDesigner, DataSources?, Modifications?, ActionVariables?, ActionBody?, ActionConditions?)
        /// </para>
        /// </summary>
        public virtual ruleDesignerType RuleDesigner {
            get {
                XElement x = this.GetElement(RuleDesignerXName);
                return ((ruleDesignerType)(x));
            }
            set {
                this.SetElement(RuleDesignerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Parameters?, RuleDesigner, DataSources?, Modifications?, ActionVariables?, ActionBody?, ActionConditions?)
        /// </para>
        /// </summary>
        public virtual dataSourcesType DataSources {
            get {
                XElement x = this.GetElement(DataSourcesXName);
                return ((dataSourcesType)(x));
            }
            set {
                this.SetElement(DataSourcesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Parameters?, RuleDesigner, DataSources?, Modifications?, ActionVariables?, ActionBody?, ActionConditions?)
        /// </para>
        /// </summary>
        public virtual ModificationsLocalType Modifications {
            get {
                XElement x = this.GetElement(ModificationsXName);
                return ((ModificationsLocalType)(x));
            }
            set {
                this.SetElement(ModificationsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Parameters?, RuleDesigner, DataSources?, Modifications?, ActionVariables?, ActionBody?, ActionConditions?)
        /// </para>
        /// </summary>
        public virtual ActionVariablesLocalType ActionVariables {
            get {
                XElement x = this.GetElement(ActionVariablesXName);
                return ((ActionVariablesLocalType)(x));
            }
            set {
                this.SetElement(ActionVariablesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Parameters?, RuleDesigner, DataSources?, Modifications?, ActionVariables?, ActionBody?, ActionConditions?)
        /// </para>
        /// </summary>
        public virtual ActionBodyLocalType ActionBody {
            get {
                XElement x = this.GetElement(ActionBodyXName);
                return ((ActionBodyLocalType)(x));
            }
            set {
                this.SetElement(ActionBodyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Parameters?, RuleDesigner, DataSources?, Modifications?, ActionVariables?, ActionBody?, ActionConditions?)
        /// </para>
        /// </summary>
        public virtual ActionConditionsLocalType ActionConditions {
            get {
                XElement x = this.GetElement(ActionConditionsXName);
                return ((ActionConditionsLocalType)(x));
            }
            set {
                this.SetElement(ActionConditionsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string ClassName {
            get {
                XAttribute x = this.Attribute(ClassNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ClassNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Assembly {
            get {
                XAttribute x = this.Attribute(AssemblyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AssemblyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FunctionName {
            get {
                XAttribute x = this.Attribute(FunctionNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, FunctionNameDefaultValue);
            }
            set {
                this.SetAttribute(FunctionNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Category {
            get {
                XAttribute x = this.Attribute(CategoryXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CategoryXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool CreatesTask {
            get {
                XAttribute x = this.Attribute(CreatesTaskXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, CreatesTaskDefaultValue);
            }
            set {
                this.SetAttribute(CreatesTaskXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CreatesInList {
            get {
                XAttribute x = this.Attribute(CreatesInListXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CreatesInListXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.appliesToTypes AppliesTo {
            get {
                XAttribute x = this.Attribute(AppliesToXName);
                return ((Microsoft.Schemas.SharePoint.appliesToTypes)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.appliesToTypes), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(AppliesToXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool IsError {
            get {
                XAttribute x = this.Attribute(IsErrorXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, IsErrorDefaultValue);
            }
            set {
                this.SetAttribute(IsErrorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool ListModeration {
            get {
                XAttribute x = this.Attribute(ListModerationXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, ListModerationDefaultValue);
            }
            set {
                this.SetAttribute(ListModerationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool UsesCurrentItem {
            get {
                XAttribute x = this.Attribute(UsesCurrentItemXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, UsesCurrentItemDefaultValue);
            }
            set {
                this.SetAttribute(UsesCurrentItemXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string RequiredInvocationTags {
            get {
                XAttribute x = this.Attribute(RequiredInvocationTagsXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(RequiredInvocationTagsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string InvocationTags {
            get {
                XAttribute x = this.Attribute(InvocationTagsXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(InvocationTagsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ProhibitedInvocationTags {
            get {
                XAttribute x = this.Attribute(ProhibitedInvocationTagsXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ProhibitedInvocationTagsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.actionType.CreatedTaskFormTypeEnum? CreatedTaskFormType {
            get {
                XAttribute x = this.Attribute(CreatedTaskFormTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.actionType.CreatedTaskFormTypeEnum)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.actionType.CreatedTaskFormTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(CreatedTaskFormTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string @__SolutionId {
            get {
                XAttribute x = this.Attribute(@__SolutionIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(@__SolutionIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool SandboxedFunction {
            get {
                XAttribute x = this.Attribute(SandboxedFunctionXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, SandboxedFunctionDefaultValue);
            }
            set {
                this.SetAttribute(SandboxedFunctionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<actionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ParametersXName, typeof(parametersType));
            localElementDictionary.Add(RuleDesignerXName, typeof(ruleDesignerType));
            localElementDictionary.Add(DataSourcesXName, typeof(dataSourcesType));
            localElementDictionary.Add(ModificationsXName, typeof(ModificationsLocalType));
            localElementDictionary.Add(ActionVariablesXName, typeof(ActionVariablesLocalType));
            localElementDictionary.Add(ActionBodyXName, typeof(ActionBodyLocalType));
            localElementDictionary.Add(ActionConditionsXName, typeof(ActionConditionsLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        public enum CreatedTaskFormTypeEnum {
            
            DataCollectTask,
            
            GroupAssignedTask,
            
            TodoItemTask,
            
            TaskProcess,
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Modification+)
        /// </para>
        /// </summary>
        public partial class ModificationsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ModificationXName = System.Xml.Linq.XName.Get("Modification", "http://schemas.microsoft.com/sharepoint/");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<ModificationLocalType> ModificationField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Modifications", "http://schemas.microsoft.com/sharepoint/");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator ModificationsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ModificationsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static ModificationsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ModificationXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Modification+)
            /// </para>
            /// </summary>
            public ModificationsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Modification+)
            /// </para>
            /// </summary>
            public virtual IList<Microsoft.Schemas.SharePoint.actionType.ModificationsLocalType.ModificationLocalType> Modification {
                get {
                    if ((this.ModificationField == null)) {
                        this.ModificationField = new XTypedList<ModificationLocalType>(this, LinqToXsdTypeManager.Instance, ModificationXName);
                    }
                    return this.ModificationField;
                }
                set {
                    if ((value == null)) {
                        this.ModificationField = null;
                    }
                    else {
                        if ((this.ModificationField == null)) {
                            this.ModificationField = XTypedList<ModificationLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ModificationXName);
                        }
                        else {
                            XTypedServices.SetList<ModificationLocalType>(this.ModificationField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ModificationsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(ModificationXName, typeof(ModificationLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            public partial class ModificationLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName TypeIdXName = System.Xml.Linq.XName.Get("TypeId", "");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName NameFormatXName = System.Xml.Linq.XName.Get("NameFormat", "");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName FormURNXName = System.Xml.Linq.XName.Get("FormURN", "");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Modification", "http://schemas.microsoft.com/sharepoint/");
                
		public static explicit operator ModificationLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ModificationLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public ModificationLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// </summary>
                public virtual string TypeId {
                    get {
                        XAttribute x = this.Attribute(TypeIdXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(TypeIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// </summary>
                public virtual string NameFormat {
                    get {
                        XAttribute x = this.Attribute(NameFormatXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(NameFormatXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// </summary>
                public virtual string FormURN {
                    get {
                        XAttribute x = this.Attribute(FormURNXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(FormURNXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<ModificationLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public partial class ActionVariablesLocalType : XTypedElement, IXMetaData {
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ActionVariables", "http://schemas.microsoft.com/sharepoint/");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static FSM validationStates;
            
		public static explicit operator ActionVariablesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ActionVariablesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static ActionVariablesLocalType() {
                InitFSM();
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (any)
            /// </para>
            /// </summary>
            public ActionVariablesLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (any)
            /// </para>
            /// </summary>
            public virtual IEnumerable<XElement> Any {
                get {
                    return this.GetWildCards(WildCard.DefaultWildCard);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ActionVariablesLocalType>(this);
            }
            
            FSM IXMetaData.GetValidationStates() {
                return validationStates;
            }
            
            private static void InitFSM() {
                Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
                transitions.Add(1, new Transitions(new SingleTransition(new WildCard("##any", "http://schemas.microsoft.com/sharepoint/"), 1)));
                validationStates = new FSM(1, new Set<int>(1), transitions);
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public partial class ActionBodyLocalType : XTypedElement, IXMetaData {
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ActionBody", "http://schemas.microsoft.com/sharepoint/");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static FSM validationStates;
            
		public static explicit operator ActionBodyLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ActionBodyLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static ActionBodyLocalType() {
                InitFSM();
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (any)
            /// </para>
            /// </summary>
            public ActionBodyLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (any)
            /// </para>
            /// </summary>
            public virtual IEnumerable<XElement> Any {
                get {
                    return this.GetWildCards(WildCard.DefaultWildCard);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ActionBodyLocalType>(this);
            }
            
            FSM IXMetaData.GetValidationStates() {
                return validationStates;
            }
            
            private static void InitFSM() {
                Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
                transitions.Add(1, new Transitions(new SingleTransition(new WildCard("##any", "http://schemas.microsoft.com/sharepoint/"), 1)));
                validationStates = new FSM(1, new Set<int>(1), transitions);
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public partial class ActionConditionsLocalType : XTypedElement, IXMetaData {
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ActionConditions", "http://schemas.microsoft.com/sharepoint/");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static FSM validationStates;
            
		public static explicit operator ActionConditionsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ActionConditionsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static ActionConditionsLocalType() {
                InitFSM();
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (any)
            /// </para>
            /// </summary>
            public ActionConditionsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (any)
            /// </para>
            /// </summary>
            public virtual IEnumerable<XElement> Any {
                get {
                    return this.GetWildCards(WildCard.DefaultWildCard);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ActionConditionsLocalType>(this);
            }
            
            FSM IXMetaData.GetValidationStates() {
                return validationStates;
            }
            
            private static void InitFSM() {
                Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
                transitions.Add(1, new Transitions(new SingleTransition(new WildCard("##any", "http://schemas.microsoft.com/sharepoint/"), 1)));
                validationStates = new FSM(1, new Set<int>(1), transitions);
            }
        }
    }
    
    public enum appliesToTypes {
        
        none,
        
        list,
        
        doclib,
        
        all,
        
        displayonly,
    }
    
    public sealed class appliesToTypesValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "none",
                        "list",
                        "doclib",
                        "all",
                        "displayonly"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private appliesToTypesValidator() {
        }
    }
    
    public enum DeleteBehaviorType {
        
        None,
        
        Cascade,
        
        Restrict,
    }
    
    public sealed class DeleteBehaviorTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "None",
                        "Cascade",
                        "Restrict"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private DeleteBehaviorTypeValidator() {
        }
    }
    
    public enum DisplayFormat {
        
        DateOnly,
        
        DateTime,
        
        TimeOnly,
        
        EventList,
        
        ISO8601,
        
        MonthDayOnly,
        
        MonthYearOnly,
        
        ISO8601Basic,
        
        ISO8601Gregorian,
        
        ISO8601BasicDateOnly,
        
        Dropdown,
        
        RadioButtons,
        
        Hyperlink,
        
        Image,
        
        TRUE,
        
        FALSE,
    }
    
    public sealed class DisplayFormatValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "DateOnly",
                        "DateTime",
                        "TimeOnly",
                        "EventList",
                        "ISO8601",
                        "MonthDayOnly",
                        "MonthYearOnly",
                        "ISO8601Basic",
                        "ISO8601Gregorian",
                        "ISO8601BasicDateOnly",
                        "Dropdown",
                        "RadioButtons",
                        "Hyperlink",
                        "Image",
                        "TRUE",
                        "FALSE"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private DisplayFormatValidator() {
        }
    }
    
    public sealed class JoinType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "INNER",
                        "LEFT OUTER",
                        "RIGHT OUTER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private JoinType() {
        }
    }
    
    public enum ListItemMenuType {
        
        Required,
        
        Allowed,
        
        Prohibited,
    }
    
    public sealed class ListItemMenuTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Required",
                        "Allowed",
                        "Prohibited"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ListItemMenuTypeValidator() {
        }
    }
    
    public enum NegativeFormat {
        
        MinusSign,
        
        Parens,
    }
    
    public sealed class NegativeFormatValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "MinusSign",
                        "Parens"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private NegativeFormatValidator() {
        }
    }
    
    public enum IMEMode {
        
        inactive,
    }
    
    public sealed class IMEModeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "inactive"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private IMEModeValidator() {
        }
    }
    
    public enum EventReceiverScope {
        
        Site,
        
        Web,
    }
    
    public sealed class EventReceiverScopeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Site",
                        "Web"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private EventReceiverScopeValidator() {
        }
    }
    
    public enum EventReceiverSynchronization {
        
        Synchronous,
        
        Asynchronous,
    }
    
    public sealed class EventReceiverSynchronizationValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Synchronous",
                        "Asynchronous"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private EventReceiverSynchronizationValidator() {
        }
    }
    
    public enum EventReceiverType {
        
        ItemAdding,
        
        ItemUpdating,
        
        ItemDeleting,
        
        ItemCheckingIn,
        
        ItemCheckingOut,
        
        ItemUncheckingOut,
        
        ItemAttachmentAdding,
        
        ItemAttachmentDeleting,
        
        ItemFileMoving,
        
        FieldAdding,
        
        FieldUpdating,
        
        FieldDeleting,
        
        ListAdding,
        
        ListDeleting,
        
        SiteDeleting,
        
        WebDeleting,
        
        WebMoving,
        
        WebAdding,
        
        WorkflowStarting,
        
        WorkflowLoading,
        
        WorkflowUnloading,
        
        ItemAdded,
        
        ItemUpdated,
        
        ItemDeleted,
        
        ItemCheckedIn,
        
        ItemCheckedOut,
        
        ItemUncheckedOut,
        
        ItemAttachmentAdded,
        
        ItemAttachmentDeleted,
        
        ItemFileMoved,
        
        ItemFileConverted,
        
        FieldAdded,
        
        FieldUpdated,
        
        FieldDeleted,
        
        ListAdded,
        
        ListDeleted,
        
        SiteDeleted,
        
        WebDeleted,
        
        WebMoved,
        
        WebProvisioned,
        
        WorkflowStarted,
        
        WorkflowPostponed,
        
        WorkflowCompleted,
        
        EmailReceived,
        
        ContextEvent,
        
        ContextLookupReceivers,
    }
    
    public sealed class EventReceiverTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "ItemAdding",
                        "ItemUpdating",
                        "ItemDeleting",
                        "ItemCheckingIn",
                        "ItemCheckingOut",
                        "ItemUncheckingOut",
                        "ItemAttachmentAdding",
                        "ItemAttachmentDeleting",
                        "ItemFileMoving",
                        "FieldAdding",
                        "FieldUpdating",
                        "FieldDeleting",
                        "ListAdding",
                        "ListDeleting",
                        "SiteDeleting",
                        "WebDeleting",
                        "WebMoving",
                        "WebAdding",
                        "WorkflowStarting",
                        "WorkflowLoading",
                        "WorkflowUnloading",
                        "ItemAdded",
                        "ItemUpdated",
                        "ItemDeleted",
                        "ItemCheckedIn",
                        "ItemCheckedOut",
                        "ItemUncheckedOut",
                        "ItemAttachmentAdded",
                        "ItemAttachmentDeleted",
                        "ItemFileMoved",
                        "ItemFileConverted",
                        "FieldAdded",
                        "FieldUpdated",
                        "FieldDeleted",
                        "ListAdded",
                        "ListDeleted",
                        "SiteDeleted",
                        "WebDeleted",
                        "WebMoved",
                        "WebProvisioned",
                        "WorkflowStarted",
                        "WorkflowPostponed",
                        "WorkflowCompleted",
                        "EmailReceived",
                        "ContextEvent",
                        "ContextLookupReceivers"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private EventReceiverTypeValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (NavBars, ListTemplates?, DocumentTemplates?, BaseTypes?, Configurations?, Modules?, Components?, ServerEmailFooter?)
    /// </para>
    /// </summary>
    public partial class SiteDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NavBarsXName = System.Xml.Linq.XName.Get("NavBars", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ListTemplatesXName = System.Xml.Linq.XName.Get("ListTemplates", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DocumentTemplatesXName = System.Xml.Linq.XName.Get("DocumentTemplates", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BaseTypesXName = System.Xml.Linq.XName.Get("BaseTypes", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConfigurationsXName = System.Xml.Linq.XName.Get("Configurations", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ModulesXName = System.Xml.Linq.XName.Get("Modules", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ComponentsXName = System.Xml.Linq.XName.Get("Components", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ServerEmailFooterXName = System.Xml.Linq.XName.Get("ServerEmailFooter", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TitleXName = System.Xml.Linq.XName.Get("Title", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ListDirXName = System.Xml.Linq.XName.Get("ListDir", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AlternateURLXName = System.Xml.Linq.XName.Get("AlternateURL", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AlternateCSSXName = System.Xml.Linq.XName.Get("AlternateCSS", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RevisionXName = System.Xml.Linq.XName.Get("Revision", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SiteLogoUrlXName = System.Xml.Linq.XName.Get("SiteLogoUrl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SiteLogoDescriptionXName = System.Xml.Linq.XName.Get("SiteLogoDescription", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DisableWebDesignFeaturesXName = System.Xml.Linq.XName.Get("DisableWebDesignFeatures", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SiteDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator SiteDefinition(XElement xe) { return XTypedServices.ToXTypedElement<SiteDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SiteDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (NavBars, ListTemplates?, DocumentTemplates?, BaseTypes?, Configurations?, Modules?, Components?, ServerEmailFooter?)
        /// </para>
        /// </summary>
        public SiteDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (NavBars, ListTemplates?, DocumentTemplates?, BaseTypes?, Configurations?, Modules?, Components?, ServerEmailFooter?)
        /// </para>
        /// </summary>
        public virtual NavBarDefinitions NavBars {
            get {
                XElement x = this.GetElement(NavBarsXName);
                return ((NavBarDefinitions)(x));
            }
            set {
                this.SetElement(NavBarsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NavBars, ListTemplates?, DocumentTemplates?, BaseTypes?, Configurations?, Modules?, Components?, ServerEmailFooter?)
        /// </para>
        /// </summary>
        public virtual ListTemplateDefinitions ListTemplates {
            get {
                XElement x = this.GetElement(ListTemplatesXName);
                return ((ListTemplateDefinitions)(x));
            }
            set {
                this.SetElement(ListTemplatesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NavBars, ListTemplates?, DocumentTemplates?, BaseTypes?, Configurations?, Modules?, Components?, ServerEmailFooter?)
        /// </para>
        /// </summary>
        public virtual DocumentTemplateDefinitions DocumentTemplates {
            get {
                XElement x = this.GetElement(DocumentTemplatesXName);
                return ((DocumentTemplateDefinitions)(x));
            }
            set {
                this.SetElement(DocumentTemplatesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NavBars, ListTemplates?, DocumentTemplates?, BaseTypes?, Configurations?, Modules?, Components?, ServerEmailFooter?)
        /// </para>
        /// </summary>
        public virtual BaseTypeDefinitions BaseTypes {
            get {
                XElement x = this.GetElement(BaseTypesXName);
                return ((BaseTypeDefinitions)(x));
            }
            set {
                this.SetElement(BaseTypesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NavBars, ListTemplates?, DocumentTemplates?, BaseTypes?, Configurations?, Modules?, Components?, ServerEmailFooter?)
        /// </para>
        /// </summary>
        public virtual ConfigurationDefinitions Configurations {
            get {
                XElement x = this.GetElement(ConfigurationsXName);
                return ((ConfigurationDefinitions)(x));
            }
            set {
                this.SetElement(ConfigurationsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NavBars, ListTemplates?, DocumentTemplates?, BaseTypes?, Configurations?, Modules?, Components?, ServerEmailFooter?)
        /// </para>
        /// </summary>
        public virtual ModuleDefinitions Modules {
            get {
                XElement x = this.GetElement(ModulesXName);
                return ((ModuleDefinitions)(x));
            }
            set {
                this.SetElement(ModulesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NavBars, ListTemplates?, DocumentTemplates?, BaseTypes?, Configurations?, Modules?, Components?, ServerEmailFooter?)
        /// </para>
        /// </summary>
        public virtual ComponentsDefinition Components {
            get {
                XElement x = this.GetElement(ComponentsXName);
                return ((ComponentsDefinition)(x));
            }
            set {
                this.SetElement(ComponentsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NavBars, ListTemplates?, DocumentTemplates?, BaseTypes?, Configurations?, Modules?, Components?, ServerEmailFooter?)
        /// </para>
        /// </summary>
        public virtual ServerEmailFooterDefinition ServerEmailFooter {
            get {
                XElement x = this.GetElement(ServerEmailFooterXName);
                return ((ServerEmailFooterDefinition)(x));
            }
            set {
                this.SetElement(ServerEmailFooterXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Title {
            get {
                XAttribute x = this.Attribute(TitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ListDir {
            get {
                XAttribute x = this.Attribute(ListDirXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ListDirXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string AlternateURL {
            get {
                XAttribute x = this.Attribute(AlternateURLXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AlternateURLXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string AlternateCSS {
            get {
                XAttribute x = this.Attribute(AlternateCSSXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AlternateCSSXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? Revision {
            get {
                XAttribute x = this.Attribute(RevisionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(RevisionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SiteLogoUrl {
            get {
                XAttribute x = this.Attribute(SiteLogoUrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SiteLogoUrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SiteLogoDescription {
            get {
                XAttribute x = this.Attribute(SiteLogoDescriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SiteLogoDescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DisableWebDesignFeatures {
            get {
                XAttribute x = this.Attribute(DisableWebDesignFeaturesXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DisableWebDesignFeaturesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SiteDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(NavBarsXName, typeof(NavBarDefinitions));
            localElementDictionary.Add(ListTemplatesXName, typeof(ListTemplateDefinitions));
            localElementDictionary.Add(DocumentTemplatesXName, typeof(DocumentTemplateDefinitions));
            localElementDictionary.Add(BaseTypesXName, typeof(BaseTypeDefinitions));
            localElementDictionary.Add(ConfigurationsXName, typeof(ConfigurationDefinitions));
            localElementDictionary.Add(ModulesXName, typeof(ModuleDefinitions));
            localElementDictionary.Add(ComponentsXName, typeof(ComponentsDefinition));
            localElementDictionary.Add(ServerEmailFooterXName, typeof(ServerEmailFooterDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (NavBarLink*, NavBarPage*)
    /// </para>
    /// </summary>
    public partial class NavBarDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NavBarLinkXName = System.Xml.Linq.XName.Get("NavBarLink", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<NavBarLinkDefinition> NavBarLinkField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NavBarPageXName = System.Xml.Linq.XName.Get("NavBarPage", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<NavBarLinkDefinition> NavBarPageField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SuffixXName = System.Xml.Linq.XName.Get("Suffix", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SeparatorXName = System.Xml.Linq.XName.Get("Separator", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PrefixXName = System.Xml.Linq.XName.Get("Prefix", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UrlXName = System.Xml.Linq.XName.Get("Url", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BodyXName = System.Xml.Linq.XName.Get("Body", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IDXName = System.Xml.Linq.XName.Get("ID", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("NavBarDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator NavBarDefinition(XElement xe) { return XTypedServices.ToXTypedElement<NavBarDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static NavBarDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(NavBarLinkXName), new NamedContentModelEntity(NavBarPageXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (NavBarLink*, NavBarPage*)
        /// </para>
        /// </summary>
        public NavBarDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (NavBarLink*, NavBarPage*)
        /// </para>
        /// </summary>
        public virtual IList<NavBarLinkDefinition> NavBarLink {
            get {
                if ((this.NavBarLinkField == null)) {
                    this.NavBarLinkField = new XTypedList<NavBarLinkDefinition>(this, LinqToXsdTypeManager.Instance, NavBarLinkXName);
                }
                return this.NavBarLinkField;
            }
            set {
                if ((value == null)) {
                    this.NavBarLinkField = null;
                }
                else {
                    if ((this.NavBarLinkField == null)) {
                        this.NavBarLinkField = XTypedList<NavBarLinkDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, NavBarLinkXName);
                    }
                    else {
                        XTypedServices.SetList<NavBarLinkDefinition>(this.NavBarLinkField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (NavBarLink*, NavBarPage*)
        /// </para>
        /// </summary>
        public virtual IList<NavBarLinkDefinition> NavBarPage {
            get {
                if ((this.NavBarPageField == null)) {
                    this.NavBarPageField = new XTypedList<NavBarLinkDefinition>(this, LinqToXsdTypeManager.Instance, NavBarPageXName);
                }
                return this.NavBarPageField;
            }
            set {
                if ((value == null)) {
                    this.NavBarPageField = null;
                }
                else {
                    if ((this.NavBarPageField == null)) {
                        this.NavBarPageField = XTypedList<NavBarLinkDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, NavBarPageXName);
                    }
                    else {
                        XTypedServices.SetList<NavBarLinkDefinition>(this.NavBarPageField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Suffix {
            get {
                XAttribute x = this.Attribute(SuffixXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SuffixXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Separator {
            get {
                XAttribute x = this.Attribute(SeparatorXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SeparatorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Prefix {
            get {
                XAttribute x = this.Attribute(PrefixXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PrefixXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Url {
            get {
                XAttribute x = this.Attribute(UrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(UrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Body {
            get {
                XAttribute x = this.Attribute(BodyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(BodyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? ID {
            get {
                XAttribute x = this.Attribute(IDXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(IDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NavBarDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(NavBarLinkXName, typeof(NavBarLinkDefinition));
            localElementDictionary.Add(NavBarPageXName, typeof(NavBarLinkDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class NavBarLinkDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UrlXName = System.Xml.Linq.XName.Get("Url", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("NavBarLinkDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator NavBarLinkDefinition(XElement xe) { return XTypedServices.ToXTypedElement<NavBarLinkDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public NavBarLinkDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Url {
            get {
                XAttribute x = this.Attribute(UrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(UrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NavBarLinkDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (NavBar*)
    /// </para>
    /// </summary>
    public partial class NavBarDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NavBarXName = System.Xml.Linq.XName.Get("NavBar", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<NavBarDefinition> NavBarField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("NavBarDefinitions", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator NavBarDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<NavBarDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static NavBarDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(NavBarXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (NavBar*)
        /// </para>
        /// </summary>
        public NavBarDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (NavBar*)
        /// </para>
        /// </summary>
        public virtual IList<NavBarDefinition> NavBar {
            get {
                if ((this.NavBarField == null)) {
                    this.NavBarField = new XTypedList<NavBarDefinition>(this, LinqToXsdTypeManager.Instance, NavBarXName);
                }
                return this.NavBarField;
            }
            set {
                if ((value == null)) {
                    this.NavBarField = null;
                }
                else {
                    if ((this.NavBarField == null)) {
                        this.NavBarField = XTypedList<NavBarDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, NavBarXName);
                    }
                    else {
                        XTypedServices.SetList<NavBarDefinition>(this.NavBarField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NavBarDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(NavBarXName, typeof(NavBarDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (FieldRefs?, DisplayPattern?, DisplayBidiPattern?, CHOICES?, MAPPINGS?, Default?, Formula?, FormulaDisplayNames?, DefaultFormula?, Validation?, Customization?)
    /// </para>
    /// </summary>
    public partial class FieldDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldRefsXName = System.Xml.Linq.XName.Get("FieldRefs", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DisplayPatternXName = System.Xml.Linq.XName.Get("DisplayPattern", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DisplayBidiPatternXName = System.Xml.Linq.XName.Get("DisplayBidiPattern", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CHOICESXName = System.Xml.Linq.XName.Get("CHOICES", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MAPPINGSXName = System.Xml.Linq.XName.Get("MAPPINGS", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DefaultXName = System.Xml.Linq.XName.Get("Default", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FormulaXName = System.Xml.Linq.XName.Get("Formula", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FormulaDisplayNamesXName = System.Xml.Linq.XName.Get("FormulaDisplayNames", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DefaultFormulaXName = System.Xml.Linq.XName.Get("DefaultFormula", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ValidationXName = System.Xml.Linq.XName.Get("Validation", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CustomizationXName = System.Xml.Linq.XName.Get("Customization", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AggregationXName = System.Xml.Linq.XName.Get("Aggregation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AllowDeletionXName = System.Xml.Linq.XName.Get("AllowDeletion", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AllowDuplicateValuesXName = System.Xml.Linq.XName.Get("AllowDuplicateValues", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AllowHyperlinkXName = System.Xml.Linq.XName.Get("AllowHyperlink", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AllowMultiVoteXName = System.Xml.Linq.XName.Get("AllowMultiVote", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AppendOnlyXName = System.Xml.Linq.XName.Get("AppendOnly", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AuthoringInfoXName = System.Xml.Linq.XName.Get("AuthoringInfo", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BaseTypeXName = System.Xml.Linq.XName.Get("BaseType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CalTypeXName = System.Xml.Linq.XName.Get("CalType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CanToggleHiddenXName = System.Xml.Linq.XName.Get("CanToggleHidden", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ClassInfoXName = System.Xml.Linq.XName.Get("ClassInfo", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ColNameXName = System.Xml.Linq.XName.Get("ColName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ColName2XName = System.Xml.Linq.XName.Get("ColName2", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommasXName = System.Xml.Linq.XName.Get("Commas", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Customization1XName = System.Xml.Linq.XName.Get("Customization", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DefaultListFieldXName = System.Xml.Linq.XName.Get("DefaultListField", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DecimalsXName = System.Xml.Linq.XName.Get("Decimals", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DescriptionXName = System.Xml.Linq.XName.Get("Description", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DirXName = System.Xml.Linq.XName.Get("Dir", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DirectionXName = System.Xml.Linq.XName.Get("Direction", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DisplayImageXName = System.Xml.Linq.XName.Get("DisplayImage", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DisplayNameXName = System.Xml.Linq.XName.Get("DisplayName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DisplayNameSrcFieldXName = System.Xml.Linq.XName.Get("DisplayNameSrcField", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DisplaySizeXName = System.Xml.Linq.XName.Get("DisplaySize", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DivXName = System.Xml.Linq.XName.Get("Div", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ListItemMenuXName = System.Xml.Linq.XName.Get("ListItemMenu", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ListItemMenuAllowedXName = System.Xml.Linq.XName.Get("ListItemMenuAllowed", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EnableLookupXName = System.Xml.Linq.XName.Get("EnableLookup", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EnforceUniqueValuesXName = System.Xml.Linq.XName.Get("EnforceUniqueValues", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExceptionImageXName = System.Xml.Linq.XName.Get("ExceptionImage", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldRefXName = System.Xml.Linq.XName.Get("FieldRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FillInChoiceXName = System.Xml.Linq.XName.Get("FillInChoice", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FilterableXName = System.Xml.Linq.XName.Get("Filterable", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FilterableNoRecurrenceXName = System.Xml.Linq.XName.Get("FilterableNoRecurrence", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ForcedDisplayXName = System.Xml.Linq.XName.Get("ForcedDisplay", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ForcePromoteDemoteXName = System.Xml.Linq.XName.Get("ForcePromoteDemote", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FormatXName = System.Xml.Linq.XName.Get("Format", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FromBaseTypeXName = System.Xml.Linq.XName.Get("FromBaseType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HeaderImageXName = System.Xml.Linq.XName.Get("HeaderImage", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HeightXName = System.Xml.Linq.XName.Get("Height", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HiddenXName = System.Xml.Linq.XName.Get("Hidden", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HTMLEncodeXName = System.Xml.Linq.XName.Get("HTMLEncode", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IMEModeXName = System.Xml.Linq.XName.Get("IMEMode", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IndexedXName = System.Xml.Linq.XName.Get("Indexed", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IsolateStylesXName = System.Xml.Linq.XName.Get("IsolateStyles", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IsRelationshipXName = System.Xml.Linq.XName.Get("IsRelationship", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName JoinColNameXName = System.Xml.Linq.XName.Get("JoinColName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName JoinTypeXName = System.Xml.Linq.XName.Get("JoinType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LCIDXName = System.Xml.Linq.XName.Get("LCID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LinkToItemXName = System.Xml.Linq.XName.Get("LinkToItem", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LinkToItemAllowedXName = System.Xml.Linq.XName.Get("LinkToItemAllowed", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ListXName = System.Xml.Linq.XName.Get("List", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MaxXName = System.Xml.Linq.XName.Get("Max", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MinXName = System.Xml.Linq.XName.Get("Min", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MultXName = System.Xml.Linq.XName.Get("Mult", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NegativeFormatXName = System.Xml.Linq.XName.Get("NegativeFormat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NoCrawlXName = System.Xml.Linq.XName.Get("NoCrawl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NodeXName = System.Xml.Linq.XName.Get("Node", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NoEditFormBreakXName = System.Xml.Linq.XName.Get("NoEditFormBreak", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NumLinesXName = System.Xml.Linq.XName.Get("NumLines", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PercentageXName = System.Xml.Linq.XName.Get("Percentage", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PIAttributeXName = System.Xml.Linq.XName.Get("PIAttribute", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PITargetXName = System.Xml.Linq.XName.Get("PITarget", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PrimaryPIAttributeXName = System.Xml.Linq.XName.Get("PrimaryPIAttribute", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PrimaryPITargetXName = System.Xml.Linq.XName.Get("PrimaryPITarget", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PresenceXName = System.Xml.Linq.XName.Get("Presence", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PrimaryKeyXName = System.Xml.Linq.XName.Get("PrimaryKey", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ReadOnlyXName = System.Xml.Linq.XName.Get("ReadOnly", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ReadOnlyEnforcedXName = System.Xml.Linq.XName.Get("ReadOnlyEnforced", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RelationshipDeleteBehaviorXName = System.Xml.Linq.XName.Get("RelationshipDeleteBehavior", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RenderXMLUsingPatternXName = System.Xml.Linq.XName.Get("RenderXMLUsingPattern", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RequiredXName = System.Xml.Linq.XName.Get("Required", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RestrictedModeXName = System.Xml.Linq.XName.Get("RestrictedMode", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ResultTypeXName = System.Xml.Linq.XName.Get("ResultType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RichTextModeXName = System.Xml.Linq.XName.Get("RichTextMode", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RichTextXName = System.Xml.Linq.XName.Get("RichText", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SealedXName = System.Xml.Linq.XName.Get("Sealed", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SeperateLineXName = System.Xml.Linq.XName.Get("SeperateLine", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SetAsXName = System.Xml.Linq.XName.Get("SetAs", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ShowAddressBookButtonXName = System.Xml.Linq.XName.Get("ShowAddressBookButton", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ShowAlwaysXName = System.Xml.Linq.XName.Get("ShowAlways", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ShowFieldXName = System.Xml.Linq.XName.Get("ShowField", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ShowInDisplayFormXName = System.Xml.Linq.XName.Get("ShowInDisplayForm", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ShowInEditFormXName = System.Xml.Linq.XName.Get("ShowInEditForm", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ShowInFileDlgXName = System.Xml.Linq.XName.Get("ShowInFileDlg", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ShowInListSettingsXName = System.Xml.Linq.XName.Get("ShowInListSettings", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ShowInNewFormXName = System.Xml.Linq.XName.Get("ShowInNewForm", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ShowInViewFormsXName = System.Xml.Linq.XName.Get("ShowInViewForms", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SortableXName = System.Xml.Linq.XName.Get("Sortable", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StorageTZXName = System.Xml.Linq.XName.Get("StorageTZ", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StripWSXName = System.Xml.Linq.XName.Get("StripWS", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SuppressNameDisplayXName = System.Xml.Linq.XName.Get("SuppressNameDisplay", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TextOnlyXName = System.Xml.Linq.XName.Get("TextOnly", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TitleXName = System.Xml.Linq.XName.Get("Title", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypeXName = System.Xml.Linq.XName.Get("Type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UniqueIdXName = System.Xml.Linq.XName.Get("UniqueId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UnlimitedLengthInDocumentLibraryXName = System.Xml.Linq.XName.Get("UnlimitedLengthInDocumentLibrary", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName URLEncodeXName = System.Xml.Linq.XName.Get("URLEncode", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName URLEncodeAsURLXName = System.Xml.Linq.XName.Get("URLEncodeAsURL", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VersionXName = System.Xml.Linq.XName.Get("Version", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ViewableXName = System.Xml.Linq.XName.Get("Viewable", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WikiLinkingXName = System.Xml.Linq.XName.Get("WikiLinking", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WidthXName = System.Xml.Linq.XName.Get("Width", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WebIdXName = System.Xml.Linq.XName.Get("WebId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName XNameXName = System.Xml.Linq.XName.Get("XName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ID1XName = System.Xml.Linq.XName.Get("ID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GroupXName = System.Xml.Linq.XName.Get("Group", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MaxLengthXName = System.Xml.Linq.XName.Get("MaxLength", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SourceIDXName = System.Xml.Linq.XName.Get("SourceID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StaticNameXName = System.Xml.Linq.XName.Get("StaticName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName JoinRowOrdinalXName = System.Xml.Linq.XName.Get("JoinRowOrdinal", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RowOrdinalXName = System.Xml.Linq.XName.Get("RowOrdinal", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RowOrdinal2XName = System.Xml.Linq.XName.Get("RowOrdinal2", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ShowInVersionHistoryXName = System.Xml.Linq.XName.Get("ShowInVersionHistory", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PrependIdXName = System.Xml.Linq.XName.Get("PrependId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DisplaceOnUpgradeXName = System.Xml.Linq.XName.Get("DisplaceOnUpgrade", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UserSelectionModeXName = System.Xml.Linq.XName.Get("UserSelectionMode", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UserSelectionScopeXName = System.Xml.Linq.XName.Get("UserSelectionScope", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FieldDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator FieldDefinition(XElement xe) { return XTypedServices.ToXTypedElement<FieldDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FieldDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (FieldRefs?, DisplayPattern?, DisplayBidiPattern?, CHOICES?, MAPPINGS?, Default?, Formula?, FormulaDisplayNames?, DefaultFormula?, Validation?, Customization?)
        /// </para>
        /// </summary>
        public FieldDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FieldRefs?, DisplayPattern?, DisplayBidiPattern?, CHOICES?, MAPPINGS?, Default?, Formula?, FormulaDisplayNames?, DefaultFormula?, Validation?, Customization?)
        /// </para>
        /// </summary>
        public virtual FieldRefDefinitions FieldRefs {
            get {
                XElement x = this.GetElement(FieldRefsXName);
                return ((FieldRefDefinitions)(x));
            }
            set {
                this.SetElement(FieldRefsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FieldRefs?, DisplayPattern?, DisplayBidiPattern?, CHOICES?, MAPPINGS?, Default?, Formula?, FormulaDisplayNames?, DefaultFormula?, Validation?, Customization?)
        /// </para>
        /// </summary>
        public virtual CamlViewRoot DisplayPattern {
            get {
                XElement x = this.GetElement(DisplayPatternXName);
                return ((CamlViewRoot)(x));
            }
            set {
                this.SetElement(DisplayPatternXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FieldRefs?, DisplayPattern?, DisplayBidiPattern?, CHOICES?, MAPPINGS?, Default?, Formula?, FormulaDisplayNames?, DefaultFormula?, Validation?, Customization?)
        /// </para>
        /// </summary>
        public virtual CamlViewRoot DisplayBidiPattern {
            get {
                XElement x = this.GetElement(DisplayBidiPatternXName);
                return ((CamlViewRoot)(x));
            }
            set {
                this.SetElement(DisplayBidiPatternXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FieldRefs?, DisplayPattern?, DisplayBidiPattern?, CHOICES?, MAPPINGS?, Default?, Formula?, FormulaDisplayNames?, DefaultFormula?, Validation?, Customization?)
        /// </para>
        /// </summary>
        public virtual CHOICEDEFINITIONS CHOICES {
            get {
                XElement x = this.GetElement(CHOICESXName);
                return ((CHOICEDEFINITIONS)(x));
            }
            set {
                this.SetElement(CHOICESXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FieldRefs?, DisplayPattern?, DisplayBidiPattern?, CHOICES?, MAPPINGS?, Default?, Formula?, FormulaDisplayNames?, DefaultFormula?, Validation?, Customization?)
        /// </para>
        /// </summary>
        public virtual MAPPINGDEFINITIONS MAPPINGS {
            get {
                XElement x = this.GetElement(MAPPINGSXName);
                return ((MAPPINGDEFINITIONS)(x));
            }
            set {
                this.SetElement(MAPPINGSXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FieldRefs?, DisplayPattern?, DisplayBidiPattern?, CHOICES?, MAPPINGS?, Default?, Formula?, FormulaDisplayNames?, DefaultFormula?, Validation?, Customization?)
        /// </para>
        /// </summary>
        public virtual string Default {
            get {
                XElement x = this.GetElement(DefaultXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(DefaultXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FieldRefs?, DisplayPattern?, DisplayBidiPattern?, CHOICES?, MAPPINGS?, Default?, Formula?, FormulaDisplayNames?, DefaultFormula?, Validation?, Customization?)
        /// </para>
        /// </summary>
        public virtual string Formula {
            get {
                XElement x = this.GetElement(FormulaXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(FormulaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FieldRefs?, DisplayPattern?, DisplayBidiPattern?, CHOICES?, MAPPINGS?, Default?, Formula?, FormulaDisplayNames?, DefaultFormula?, Validation?, Customization?)
        /// </para>
        /// </summary>
        public virtual string FormulaDisplayNames {
            get {
                XElement x = this.GetElement(FormulaDisplayNamesXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(FormulaDisplayNamesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FieldRefs?, DisplayPattern?, DisplayBidiPattern?, CHOICES?, MAPPINGS?, Default?, Formula?, FormulaDisplayNames?, DefaultFormula?, Validation?, Customization?)
        /// </para>
        /// </summary>
        public virtual string DefaultFormula {
            get {
                XElement x = this.GetElement(DefaultFormulaXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(DefaultFormulaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FieldRefs?, DisplayPattern?, DisplayBidiPattern?, CHOICES?, MAPPINGS?, Default?, Formula?, FormulaDisplayNames?, DefaultFormula?, Validation?, Customization?)
        /// </para>
        /// </summary>
        public virtual ValidationDefinition Validation {
            get {
                XElement x = this.GetElement(ValidationXName);
                return ((ValidationDefinition)(x));
            }
            set {
                this.SetElement(ValidationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FieldRefs?, DisplayPattern?, DisplayBidiPattern?, CHOICES?, MAPPINGS?, Default?, Formula?, FormulaDisplayNames?, DefaultFormula?, Validation?, Customization?)
        /// </para>
        /// </summary>
        public virtual CustomizationDefinition Customization {
            get {
                XElement x = this.GetElement(CustomizationXName);
                return ((CustomizationDefinition)(x));
            }
            set {
                this.SetElement(CustomizationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Aggregation {
            get {
                XAttribute x = this.Attribute(AggregationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AggregationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string AllowDeletion {
            get {
                XAttribute x = this.Attribute(AllowDeletionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AllowDeletionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string AllowDuplicateValues {
            get {
                XAttribute x = this.Attribute(AllowDuplicateValuesXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AllowDuplicateValuesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string AllowHyperlink {
            get {
                XAttribute x = this.Attribute(AllowHyperlinkXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AllowHyperlinkXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string AllowMultiVote {
            get {
                XAttribute x = this.Attribute(AllowMultiVoteXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AllowMultiVoteXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string AppendOnly {
            get {
                XAttribute x = this.Attribute(AppendOnlyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AppendOnlyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string AuthoringInfo {
            get {
                XAttribute x = this.Attribute(AuthoringInfoXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AuthoringInfoXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string BaseType {
            get {
                XAttribute x = this.Attribute(BaseTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(BaseTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? CalType {
            get {
                XAttribute x = this.Attribute(CalTypeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(CalTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CanToggleHidden {
            get {
                XAttribute x = this.Attribute(CanToggleHiddenXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CanToggleHiddenXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ClassInfo {
            get {
                XAttribute x = this.Attribute(ClassInfoXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ClassInfoXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ColName {
            get {
                XAttribute x = this.Attribute(ColNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ColNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ColName2 {
            get {
                XAttribute x = this.Attribute(ColName2XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ColName2XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Commas {
            get {
                XAttribute x = this.Attribute(CommasXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommasXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Customization1 {
            get {
                XAttribute x = this.Attribute(Customization1XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(Customization1XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DefaultListField {
            get {
                XAttribute x = this.Attribute(DefaultListFieldXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DefaultListFieldXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? Decimals {
            get {
                XAttribute x = this.Attribute(DecimalsXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(DecimalsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Description {
            get {
                XAttribute x = this.Attribute(DescriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Dir {
            get {
                XAttribute x = this.Attribute(DirXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DirXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Direction {
            get {
                XAttribute x = this.Attribute(DirectionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DirectionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DisplayImage {
            get {
                XAttribute x = this.Attribute(DisplayImageXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DisplayImageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DisplayName {
            get {
                XAttribute x = this.Attribute(DisplayNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DisplayNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DisplayNameSrcField {
            get {
                XAttribute x = this.Attribute(DisplayNameSrcFieldXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DisplayNameSrcFieldXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? DisplaySize {
            get {
                XAttribute x = this.Attribute(DisplaySizeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(DisplaySizeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Div {
            get {
                XAttribute x = this.Attribute(DivXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DivXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ListItemMenu {
            get {
                XAttribute x = this.Attribute(ListItemMenuXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ListItemMenuXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.ListItemMenuType? ListItemMenuAllowed {
            get {
                XAttribute x = this.Attribute(ListItemMenuAllowedXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.ListItemMenuType)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.ListItemMenuType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ListItemMenuAllowedXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string EnableLookup {
            get {
                XAttribute x = this.Attribute(EnableLookupXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(EnableLookupXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string EnforceUniqueValues {
            get {
                XAttribute x = this.Attribute(EnforceUniqueValuesXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(EnforceUniqueValuesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ExceptionImage {
            get {
                XAttribute x = this.Attribute(ExceptionImageXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ExceptionImageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FieldRef {
            get {
                XAttribute x = this.Attribute(FieldRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FieldRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FillInChoice {
            get {
                XAttribute x = this.Attribute(FillInChoiceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FillInChoiceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Filterable {
            get {
                XAttribute x = this.Attribute(FilterableXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FilterableXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FilterableNoRecurrence {
            get {
                XAttribute x = this.Attribute(FilterableNoRecurrenceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FilterableNoRecurrenceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ForcedDisplay {
            get {
                XAttribute x = this.Attribute(ForcedDisplayXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ForcedDisplayXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ForcePromoteDemote {
            get {
                XAttribute x = this.Attribute(ForcePromoteDemoteXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ForcePromoteDemoteXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.DisplayFormat? Format {
            get {
                XAttribute x = this.Attribute(FormatXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.DisplayFormat)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.DisplayFormat), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(FormatXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FromBaseType {
            get {
                XAttribute x = this.Attribute(FromBaseTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FromBaseTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string HeaderImage {
            get {
                XAttribute x = this.Attribute(HeaderImageXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(HeaderImageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? Height {
            get {
                XAttribute x = this.Attribute(HeightXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(HeightXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Hidden {
            get {
                XAttribute x = this.Attribute(HiddenXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(HiddenXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string HTMLEncode {
            get {
                XAttribute x = this.Attribute(HTMLEncodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(HTMLEncodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.IMEMode? IMEMode {
            get {
                XAttribute x = this.Attribute(IMEModeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.IMEMode)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.IMEMode), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(IMEModeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Indexed {
            get {
                XAttribute x = this.Attribute(IndexedXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IndexedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string IsolateStyles {
            get {
                XAttribute x = this.Attribute(IsolateStylesXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IsolateStylesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string IsRelationship {
            get {
                XAttribute x = this.Attribute(IsRelationshipXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IsRelationshipXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string JoinColName {
            get {
                XAttribute x = this.Attribute(JoinColNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(JoinColNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string JoinType {
            get {
                XAttribute x = this.Attribute(JoinTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(JoinTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string LCID {
            get {
                XAttribute x = this.Attribute(LCIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(LCIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string LinkToItem {
            get {
                XAttribute x = this.Attribute(LinkToItemXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(LinkToItemXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.ListItemMenuType? LinkToItemAllowed {
            get {
                XAttribute x = this.Attribute(LinkToItemAllowedXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.ListItemMenuType)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.ListItemMenuType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(LinkToItemAllowedXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string List {
            get {
                XAttribute x = this.Attribute(ListXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ListXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Single? Max {
            get {
                XAttribute x = this.Attribute(MaxXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
            set {
                this.SetAttribute(MaxXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Min {
            get {
                XAttribute x = this.Attribute(MinXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(MinXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Mult {
            get {
                XAttribute x = this.Attribute(MultXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(MultXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string NegativeFormat {
            get {
                XAttribute x = this.Attribute(NegativeFormatXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NegativeFormatXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string NoCrawl {
            get {
                XAttribute x = this.Attribute(NoCrawlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NoCrawlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Node {
            get {
                XAttribute x = this.Attribute(NodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string NoEditFormBreak {
            get {
                XAttribute x = this.Attribute(NoEditFormBreakXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NoEditFormBreakXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? NumLines {
            get {
                XAttribute x = this.Attribute(NumLinesXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(NumLinesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Percentage {
            get {
                XAttribute x = this.Attribute(PercentageXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PercentageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string PIAttribute {
            get {
                XAttribute x = this.Attribute(PIAttributeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PIAttributeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string PITarget {
            get {
                XAttribute x = this.Attribute(PITargetXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PITargetXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string PrimaryPIAttribute {
            get {
                XAttribute x = this.Attribute(PrimaryPIAttributeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PrimaryPIAttributeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string PrimaryPITarget {
            get {
                XAttribute x = this.Attribute(PrimaryPITargetXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PrimaryPITargetXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Presence {
            get {
                XAttribute x = this.Attribute(PresenceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PresenceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string PrimaryKey {
            get {
                XAttribute x = this.Attribute(PrimaryKeyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PrimaryKeyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ReadOnly {
            get {
                XAttribute x = this.Attribute(ReadOnlyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ReadOnlyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ReadOnlyEnforced {
            get {
                XAttribute x = this.Attribute(ReadOnlyEnforcedXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ReadOnlyEnforcedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.DeleteBehaviorType? RelationshipDeleteBehavior {
            get {
                XAttribute x = this.Attribute(RelationshipDeleteBehaviorXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.DeleteBehaviorType)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.DeleteBehaviorType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(RelationshipDeleteBehaviorXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string RenderXMLUsingPattern {
            get {
                XAttribute x = this.Attribute(RenderXMLUsingPatternXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(RenderXMLUsingPatternXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Required {
            get {
                XAttribute x = this.Attribute(RequiredXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(RequiredXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string RestrictedMode {
            get {
                XAttribute x = this.Attribute(RestrictedModeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(RestrictedModeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ResultType {
            get {
                XAttribute x = this.Attribute(ResultTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ResultTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string RichTextMode {
            get {
                XAttribute x = this.Attribute(RichTextModeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(RichTextModeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string RichText {
            get {
                XAttribute x = this.Attribute(RichTextXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(RichTextXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Sealed {
            get {
                XAttribute x = this.Attribute(SealedXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SealedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SeperateLine {
            get {
                XAttribute x = this.Attribute(SeperateLineXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SeperateLineXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SetAs {
            get {
                XAttribute x = this.Attribute(SetAsXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SetAsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ShowAddressBookButton {
            get {
                XAttribute x = this.Attribute(ShowAddressBookButtonXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ShowAddressBookButtonXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ShowAlways {
            get {
                XAttribute x = this.Attribute(ShowAlwaysXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ShowAlwaysXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ShowField {
            get {
                XAttribute x = this.Attribute(ShowFieldXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ShowFieldXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ShowInDisplayForm {
            get {
                XAttribute x = this.Attribute(ShowInDisplayFormXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ShowInDisplayFormXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ShowInEditForm {
            get {
                XAttribute x = this.Attribute(ShowInEditFormXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ShowInEditFormXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ShowInFileDlg {
            get {
                XAttribute x = this.Attribute(ShowInFileDlgXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ShowInFileDlgXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ShowInListSettings {
            get {
                XAttribute x = this.Attribute(ShowInListSettingsXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ShowInListSettingsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ShowInNewForm {
            get {
                XAttribute x = this.Attribute(ShowInNewFormXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ShowInNewFormXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ShowInViewForms {
            get {
                XAttribute x = this.Attribute(ShowInViewFormsXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ShowInViewFormsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Sortable {
            get {
                XAttribute x = this.Attribute(SortableXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SortableXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string StorageTZ {
            get {
                XAttribute x = this.Attribute(StorageTZXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(StorageTZXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string StripWS {
            get {
                XAttribute x = this.Attribute(StripWSXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(StripWSXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SuppressNameDisplay {
            get {
                XAttribute x = this.Attribute(SuppressNameDisplayXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SuppressNameDisplayXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TextOnly {
            get {
                XAttribute x = this.Attribute(TextOnlyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TextOnlyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Title {
            get {
                XAttribute x = this.Attribute(TitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Type {
            get {
                XAttribute x = this.Attribute(TypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string UniqueId {
            get {
                XAttribute x = this.Attribute(UniqueIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(UniqueIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string UnlimitedLengthInDocumentLibrary {
            get {
                XAttribute x = this.Attribute(UnlimitedLengthInDocumentLibraryXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(UnlimitedLengthInDocumentLibraryXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string URLEncode {
            get {
                XAttribute x = this.Attribute(URLEncodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(URLEncodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string URLEncodeAsURL {
            get {
                XAttribute x = this.Attribute(URLEncodeAsURLXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(URLEncodeAsURLXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Version {
            get {
                XAttribute x = this.Attribute(VersionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(VersionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Viewable {
            get {
                XAttribute x = this.Attribute(ViewableXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ViewableXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string WikiLinking {
            get {
                XAttribute x = this.Attribute(WikiLinkingXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(WikiLinkingXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? Width {
            get {
                XAttribute x = this.Attribute(WidthXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(WidthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string WebId {
            get {
                XAttribute x = this.Attribute(WebIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(WebIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string XName {
            get {
                XAttribute x = this.Attribute(XNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ID1 {
            get {
                XAttribute x = this.Attribute(ID1XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ID1XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Group {
            get {
                XAttribute x = this.Attribute(GroupXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(GroupXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? MaxLength {
            get {
                XAttribute x = this.Attribute(MaxLengthXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(MaxLengthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SourceID {
            get {
                XAttribute x = this.Attribute(SourceIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SourceIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string StaticName {
            get {
                XAttribute x = this.Attribute(StaticNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(StaticNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? JoinRowOrdinal {
            get {
                XAttribute x = this.Attribute(JoinRowOrdinalXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(JoinRowOrdinalXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? RowOrdinal {
            get {
                XAttribute x = this.Attribute(RowOrdinalXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(RowOrdinalXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? RowOrdinal2 {
            get {
                XAttribute x = this.Attribute(RowOrdinal2XName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(RowOrdinal2XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ShowInVersionHistory {
            get {
                XAttribute x = this.Attribute(ShowInVersionHistoryXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ShowInVersionHistoryXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string PrependId {
            get {
                XAttribute x = this.Attribute(PrependIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PrependIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DisplaceOnUpgrade {
            get {
                XAttribute x = this.Attribute(DisplaceOnUpgradeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DisplaceOnUpgradeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string UserSelectionMode {
            get {
                XAttribute x = this.Attribute(UserSelectionModeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(UserSelectionModeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? UserSelectionScope {
            get {
                XAttribute x = this.Attribute(UserSelectionScopeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(UserSelectionScopeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FieldDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FieldRefsXName, typeof(FieldRefDefinitions));
            localElementDictionary.Add(DisplayPatternXName, typeof(CamlViewRoot));
            localElementDictionary.Add(DisplayBidiPatternXName, typeof(CamlViewRoot));
            localElementDictionary.Add(CHOICESXName, typeof(CHOICEDEFINITIONS));
            localElementDictionary.Add(MAPPINGSXName, typeof(MAPPINGDEFINITIONS));
            localElementDictionary.Add(DefaultXName, typeof(string));
            localElementDictionary.Add(FormulaXName, typeof(string));
            localElementDictionary.Add(FormulaDisplayNamesXName, typeof(string));
            localElementDictionary.Add(DefaultFormulaXName, typeof(string));
            localElementDictionary.Add(ValidationXName, typeof(ValidationDefinition));
            localElementDictionary.Add(CustomizationXName, typeof(CustomizationDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (MetaData?)
    /// </para>
    /// </summary>
    public partial class BaseListDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MetaDataXName = System.Xml.Linq.XName.Get("MetaData", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TitleXName = System.Xml.Linq.XName.Get("Title", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UrlXName = System.Xml.Linq.XName.Get("Url", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DefaultXName = System.Xml.Linq.XName.Get("Default", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WebImageWidthXName = System.Xml.Linq.XName.Get("WebImageWidth", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DisableAttachmentsXName = System.Xml.Linq.XName.Get("DisableAttachments", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EventSinkAssemblyXName = System.Xml.Linq.XName.Get("EventSinkAssembly", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EventSinkClassXName = System.Xml.Linq.XName.Get("EventSinkClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EventSinkDataXName = System.Xml.Linq.XName.Get("EventSinkData", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OrderedListXName = System.Xml.Linq.XName.Get("OrderedList", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PrivateListXName = System.Xml.Linq.XName.Get("PrivateList", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName QuickLaunchUrlXName = System.Xml.Linq.XName.Get("QuickLaunchUrl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RootWebOnlyXName = System.Xml.Linq.XName.Get("RootWebOnly", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ThumbnailSizeXName = System.Xml.Linq.XName.Get("ThumbnailSize", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypeXName = System.Xml.Linq.XName.Get("Type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName URLEncodeXName = System.Xml.Linq.XName.Get("URLEncode", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WebImageHeightXName = System.Xml.Linq.XName.Get("WebImageHeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IsApplicationListXName = System.Xml.Linq.XName.Get("IsApplicationList", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BaseListDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator BaseListDefinition(XElement xe) { return XTypedServices.ToXTypedElement<BaseListDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static BaseListDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(MetaDataXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (MetaData?)
        /// </para>
        /// </summary>
        public BaseListDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MetaData?)
        /// </para>
        /// </summary>
        public virtual ListMetaDataDefinition MetaData {
            get {
                XElement x = this.GetElement(MetaDataXName);
                return ((ListMetaDataDefinition)(x));
            }
            set {
                this.SetElement(MetaDataXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Title {
            get {
                XAttribute x = this.Attribute(TitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Url {
            get {
                XAttribute x = this.Attribute(UrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(UrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Default {
            get {
                XAttribute x = this.Attribute(DefaultXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DefaultXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int64? WebImageWidth {
            get {
                XAttribute x = this.Attribute(WebImageWidthXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<long>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
            }
            set {
                this.SetAttribute(WebImageWidthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DisableAttachments {
            get {
                XAttribute x = this.Attribute(DisableAttachmentsXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DisableAttachmentsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string EventSinkAssembly {
            get {
                XAttribute x = this.Attribute(EventSinkAssemblyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(EventSinkAssemblyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string EventSinkClass {
            get {
                XAttribute x = this.Attribute(EventSinkClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(EventSinkClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string EventSinkData {
            get {
                XAttribute x = this.Attribute(EventSinkDataXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(EventSinkDataXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string OrderedList {
            get {
                XAttribute x = this.Attribute(OrderedListXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(OrderedListXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string PrivateList {
            get {
                XAttribute x = this.Attribute(PrivateListXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PrivateListXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string QuickLaunchUrl {
            get {
                XAttribute x = this.Attribute(QuickLaunchUrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(QuickLaunchUrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string RootWebOnly {
            get {
                XAttribute x = this.Attribute(RootWebOnlyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(RootWebOnlyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? ThumbnailSize {
            get {
                XAttribute x = this.Attribute(ThumbnailSizeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(ThumbnailSizeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? Type {
            get {
                XAttribute x = this.Attribute(TypeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(TypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string URLEncode {
            get {
                XAttribute x = this.Attribute(URLEncodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(URLEncodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int64? WebImageHeight {
            get {
                XAttribute x = this.Attribute(WebImageHeightXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<long>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
            }
            set {
                this.SetAttribute(WebImageHeightXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string IsApplicationList {
            get {
                XAttribute x = this.Attribute(IsApplicationListXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IsApplicationListXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BaseListDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(MetaDataXName, typeof(ListMetaDataDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Field*)
    /// </para>
    /// </summary>
    public partial class FieldDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldXName = System.Xml.Linq.XName.Get("Field", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldDefinition> FieldField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RevisionXName = System.Xml.Linq.XName.Get("Revision", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FieldDefinitions", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FieldDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<FieldDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FieldDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FieldXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Field*)
        /// </para>
        /// </summary>
        public FieldDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Field*)
        /// </para>
        /// </summary>
        public virtual IList<FieldDefinition> Field {
            get {
                if ((this.FieldField == null)) {
                    this.FieldField = new XTypedList<FieldDefinition>(this, LinqToXsdTypeManager.Instance, FieldXName);
                }
                return this.FieldField;
            }
            set {
                if ((value == null)) {
                    this.FieldField = null;
                }
                else {
                    if ((this.FieldField == null)) {
                        this.FieldField = XTypedList<FieldDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldXName);
                    }
                    else {
                        XTypedServices.SetList<FieldDefinition>(this.FieldField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? Revision {
            get {
                XAttribute x = this.Attribute(RevisionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(RevisionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FieldDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FieldXName, typeof(FieldDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ListFormOpening?, ListFormButtons?, ListFormBody?, ListFormClosing?)
    /// </para>
    /// </summary>
    public partial class FormDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ListFormOpeningXName = System.Xml.Linq.XName.Get("ListFormOpening", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ListFormButtonsXName = System.Xml.Linq.XName.Get("ListFormButtons", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ListFormBodyXName = System.Xml.Linq.XName.Get("ListFormBody", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ListFormClosingXName = System.Xml.Linq.XName.Get("ListFormClosing", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PathXName = System.Xml.Linq.XName.Get("Path", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SetupPathXName = System.Xml.Linq.XName.Get("SetupPath", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UrlXName = System.Xml.Linq.XName.Get("Url", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MobileUrlXName = System.Xml.Linq.XName.Get("MobileUrl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypeXName = System.Xml.Linq.XName.Get("Type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UseLegacyFormXName = System.Xml.Linq.XName.Get("UseLegacyForm", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TemplateXName = System.Xml.Linq.XName.Get("Template", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WebPartZoneIDXName = System.Xml.Linq.XName.Get("WebPartZoneID", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FormDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator FormDefinition(XElement xe) { return XTypedServices.ToXTypedElement<FormDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FormDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ListFormOpening?, ListFormButtons?, ListFormBody?, ListFormClosing?)
        /// </para>
        /// </summary>
        public FormDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ListFormOpening?, ListFormButtons?, ListFormBody?, ListFormClosing?)
        /// </para>
        /// </summary>
        public virtual CamlViewRoot ListFormOpening {
            get {
                XElement x = this.GetElement(ListFormOpeningXName);
                return ((CamlViewRoot)(x));
            }
            set {
                this.SetElement(ListFormOpeningXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ListFormOpening?, ListFormButtons?, ListFormBody?, ListFormClosing?)
        /// </para>
        /// </summary>
        public virtual CamlViewRoot ListFormButtons {
            get {
                XElement x = this.GetElement(ListFormButtonsXName);
                return ((CamlViewRoot)(x));
            }
            set {
                this.SetElement(ListFormButtonsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ListFormOpening?, ListFormButtons?, ListFormBody?, ListFormClosing?)
        /// </para>
        /// </summary>
        public virtual CamlViewRoot ListFormBody {
            get {
                XElement x = this.GetElement(ListFormBodyXName);
                return ((CamlViewRoot)(x));
            }
            set {
                this.SetElement(ListFormBodyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ListFormOpening?, ListFormButtons?, ListFormBody?, ListFormClosing?)
        /// </para>
        /// </summary>
        public virtual CamlViewRoot ListFormClosing {
            get {
                XElement x = this.GetElement(ListFormClosingXName);
                return ((CamlViewRoot)(x));
            }
            set {
                this.SetElement(ListFormClosingXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Path {
            get {
                XAttribute x = this.Attribute(PathXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PathXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SetupPath {
            get {
                XAttribute x = this.Attribute(SetupPathXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SetupPathXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Url {
            get {
                XAttribute x = this.Attribute(UrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(UrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string MobileUrl {
            get {
                XAttribute x = this.Attribute(MobileUrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(MobileUrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Type {
            get {
                XAttribute x = this.Attribute(TypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string UseLegacyForm {
            get {
                XAttribute x = this.Attribute(UseLegacyFormXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(UseLegacyFormXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Template {
            get {
                XAttribute x = this.Attribute(TemplateXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TemplateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string WebPartZoneID {
            get {
                XAttribute x = this.Attribute(WebPartZoneIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(WebPartZoneIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FormDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ListFormOpeningXName, typeof(CamlViewRoot));
            localElementDictionary.Add(ListFormButtonsXName, typeof(CamlViewRoot));
            localElementDictionary.Add(ListFormBodyXName, typeof(CamlViewRoot));
            localElementDictionary.Add(ListFormClosingXName, typeof(CamlViewRoot));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class FormType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "DisplayForm",
                        "EditForm",
                        "NewForm",
                        "NewFormDialog",
                        ""}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private FormType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Form*)
    /// </para>
    /// </summary>
    public partial class ListFormSet : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FormXName = System.Xml.Linq.XName.Get("Form", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FormDefinition> FormField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ListFormSet", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ListFormSet(XElement xe) { return XTypedServices.ToXTypedElement<ListFormSet>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ListFormSet() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FormXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Form*)
        /// </para>
        /// </summary>
        public ListFormSet() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Form*)
        /// </para>
        /// </summary>
        public virtual IList<FormDefinition> Form {
            get {
                if ((this.FormField == null)) {
                    this.FormField = new XTypedList<FormDefinition>(this, LinqToXsdTypeManager.Instance, FormXName);
                }
                return this.FormField;
            }
            set {
                if ((value == null)) {
                    this.FormField = null;
                }
                else {
                    if ((this.FormField == null)) {
                        this.FormField = XTypedList<FormDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, FormXName);
                    }
                    else {
                        XTypedServices.SetList<FormDefinition>(this.FormField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ListFormSet>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FormXName, typeof(FormDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
    /// </para>
    /// </summary>
    public partial class ToolbarDefinition : global::Microsoft.Schemas.SharePoint.CamlViewRoot, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PositionXName = System.Xml.Linq.XName.Get("Position", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypeXName = System.Xml.Linq.XName.Get("Type", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ToolbarDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ToolbarDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ToolbarDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ToolbarDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(ColumnXName), new NamedContentModelEntity(Column2XName), new NamedContentModelEntity(CounterXName), new NamedContentModelEntity(CurrentRightsXName), new NamedContentModelEntity(FieldXName), new NamedContentModelEntity(FieldPrefixXName), new NamedContentModelEntity(FieldPropertyXName), new NamedContentModelEntity(FieldsXName), new NamedContentModelEntity(FieldSwitchXName), new NamedContentModelEntity(FilterLinkXName), new NamedContentModelEntity(GetFileExtensionXName), new NamedContentModelEntity(GetVarXName), new NamedContentModelEntity(HTMLXName), new NamedContentModelEntity(HttpHostXName), new NamedContentModelEntity(HttpPathXName), new NamedContentModelEntity(HttpVDirXName), new NamedContentModelEntity(IDXName), new NamedContentModelEntity(IfEqualXName), new NamedContentModelEntity(IfNegXName), new NamedContentModelEntity(IfNewXName), new NamedContentModelEntity(IfSubStringXName), new NamedContentModelEntity(LengthXName), new NamedContentModelEntity(LimitXName), new NamedContentModelEntity(ListXName), new NamedContentModelEntity(ListUrlXName), new NamedContentModelEntity(ListUrlDirXName), new NamedContentModelEntity(ListPropertyXName), new NamedContentModelEntity(LookupColumnXName), new NamedContentModelEntity(MapToAllXName), new NamedContentModelEntity(MapToIconXName), new NamedContentModelEntity(PageUrlXName), new NamedContentModelEntity(PropertyXName), new NamedContentModelEntity(ScriptQuoteXName), new NamedContentModelEntity(SelectionOptionsXName), new NamedContentModelEntity(ServerPropertyXName), new NamedContentModelEntity(SetVarXName), new NamedContentModelEntity(SwitchXName), new NamedContentModelEntity(ThreadStampXName), new NamedContentModelEntity(URLXName), new NamedContentModelEntity(UrlDirNameXName), new NamedContentModelEntity(UrlBaseNameXName), new NamedContentModelEntity(MeetingPropertyXName), new NamedContentModelEntity(ProjectPropertyXName), new NamedContentModelEntity(UserIDXName), new NamedContentModelEntity(FieldSortParamsXName), new NamedContentModelEntity(WebQueryInfoXName), new NamedContentModelEntity(IdentityXName), new NamedContentModelEntity(IfHasRightsXName), new NamedContentModelEntity(MapToControlXName), new NamedContentModelEntity(ForEachXName), new NamedContentModelEntity(ContentTypesXName), new NamedContentModelEntity(MapToContentTypeXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Column | Column2 | Counter | CurrentRights | Field | FieldPrefix | FieldProperty | Fields | FieldSwitch | FilterLink | GetFileExtension | GetVar | HTML | HttpHost | HttpPath | HttpVDir | ID | IfEqual | IfNeg | IfNew | IfSubString | Length | Limit | List | ListUrl | ListUrlDir | ListProperty | LookupColumn | MapToAll | MapToIcon | PageUrl | Property | ScriptQuote | SelectionOptions | ServerProperty | SetVar | Switch | ThreadStamp | URL | UrlDirName | UrlBaseName | MeetingProperty | ProjectProperty | UserID | FieldSortParams | WebQueryInfo | Identity | IfHasRights | MapToControl | ForEach | ContentTypes | MapToContentType)*)
        /// </para>
        /// </summary>
        public ToolbarDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.ToolbarPosition? Position {
            get {
                XAttribute x = this.Attribute(PositionXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.ToolbarPosition)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.ToolbarPosition), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(PositionXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.ToolbarType? Type {
            get {
                XAttribute x = this.Attribute(TypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.ToolbarType)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.ToolbarType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(TypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ToolbarDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ColumnXName, typeof(QueryColumnDefinition));
            localElementDictionary.Add(Column2XName, typeof(QueryColumnDefinition));
            localElementDictionary.Add(CounterXName, typeof(CounterDefinition));
            localElementDictionary.Add(CurrentRightsXName, typeof(EmptyElement));
            localElementDictionary.Add(FieldXName, typeof(FieldViewReferenceDefinition));
            localElementDictionary.Add(FieldPrefixXName, typeof(EmptyElement));
            localElementDictionary.Add(FieldPropertyXName, typeof(FieldPropertyDefinition));
            localElementDictionary.Add(FieldsXName, typeof(CamlViewElement));
            localElementDictionary.Add(FieldSwitchXName, typeof(SwitchDefinition));
            localElementDictionary.Add(FilterLinkXName, typeof(FilterLinkDefinition));
            localElementDictionary.Add(GetFileExtensionXName, typeof(XTypedElement));
            localElementDictionary.Add(GetVarXName, typeof(GetVarDefinition));
            localElementDictionary.Add(HTMLXName, typeof(HtmlContentDefinition));
            localElementDictionary.Add(HttpHostXName, typeof(HttpHostDefinition));
            localElementDictionary.Add(HttpPathXName, typeof(HttpPathDefinition));
            localElementDictionary.Add(HttpVDirXName, typeof(HttpVDirDefinition));
            localElementDictionary.Add(IDXName, typeof(EmptyElement));
            localElementDictionary.Add(IfEqualXName, typeof(IfEqualDefinition));
            localElementDictionary.Add(IfNegXName, typeof(IfNegDefinition));
            localElementDictionary.Add(IfNewXName, typeof(IfNewDefinition));
            localElementDictionary.Add(IfSubStringXName, typeof(IfSubStringDefinition));
            localElementDictionary.Add(LengthXName, typeof(XTypedElement));
            localElementDictionary.Add(LimitXName, typeof(LimitDefinition));
            localElementDictionary.Add(ListXName, typeof(EmptyElement));
            localElementDictionary.Add(ListUrlXName, typeof(EmptyElement));
            localElementDictionary.Add(ListUrlDirXName, typeof(HttpPathDefinition));
            localElementDictionary.Add(ListPropertyXName, typeof(ListPropertyDefinition));
            localElementDictionary.Add(LookupColumnXName, typeof(LookupColumnDefinition));
            localElementDictionary.Add(MapToAllXName, typeof(CamlViewElement));
            localElementDictionary.Add(MapToIconXName, typeof(CamlViewElement));
            localElementDictionary.Add(PageUrlXName, typeof(HtmlRenderingElement));
            localElementDictionary.Add(PropertyXName, typeof(FieldPropertyDefinition));
            localElementDictionary.Add(ScriptQuoteXName, typeof(ScriptQuoteDefinition));
            localElementDictionary.Add(SelectionOptionsXName, typeof(SelectOptionsDefinition));
            localElementDictionary.Add(ServerPropertyXName, typeof(ServerPropertyDefinition));
            localElementDictionary.Add(SetVarXName, typeof(SetVarDefinition));
            localElementDictionary.Add(SwitchXName, typeof(SwitchDefinition));
            localElementDictionary.Add(ThreadStampXName, typeof(ThreadStampDefinition));
            localElementDictionary.Add(URLXName, typeof(URLDefinition));
            localElementDictionary.Add(UrlDirNameXName, typeof(XTypedElement));
            localElementDictionary.Add(UrlBaseNameXName, typeof(UrlBaseNameDefinition));
            localElementDictionary.Add(MeetingPropertyXName, typeof(MeetingPropertyDefinition));
            localElementDictionary.Add(ProjectPropertyXName, typeof(ProjectPropertyDefinition));
            localElementDictionary.Add(UserIDXName, typeof(UserIDDefinition));
            localElementDictionary.Add(FieldSortParamsXName, typeof(HtmlRenderingElement));
            localElementDictionary.Add(WebQueryInfoXName, typeof(EmptyElement));
            localElementDictionary.Add(IdentityXName, typeof(EmptyElement));
            localElementDictionary.Add(IfHasRightsXName, typeof(IfHasRightsDefinition));
            localElementDictionary.Add(MapToControlXName, typeof(CamlViewElement));
            localElementDictionary.Add(ForEachXName, typeof(ForEachElement));
            localElementDictionary.Add(ContentTypesXName, typeof(CamlViewElement));
            localElementDictionary.Add(MapToContentTypeXName, typeof(CamlViewElement));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public enum ToolbarType {
        
        Standard,
        
        FreeForm,
        
        RelatedTasks,
        
        Freeform,
    }
    
    public sealed class ToolbarTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Standard",
                        "FreeForm",
                        "RelatedTasks",
                        "Freeform"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ToolbarTypeValidator() {
        }
    }
    
    public enum ToolbarPosition {
        
        After,
    }
    
    public sealed class ToolbarPositionValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "After"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ToolbarPositionValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PagedRowset?, Toolbar?, Query?, ViewFields?, Method?, GroupByHeader?, GroupByFooter?, ViewHeader?, ViewBody?, ViewFooter?, RowLimitExceeded?, ViewEmpty?, PagedRecurrenceRowset?, PagedClientCallbackRowset?, RowLimit?, ViewStyle?, ViewData?, Xsl?, XslLink?)
    /// </para>
    /// </summary>
    public partial class ViewDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PagedRowsetXName = System.Xml.Linq.XName.Get("PagedRowset", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolbarXName = System.Xml.Linq.XName.Get("Toolbar", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName QueryXName = System.Xml.Linq.XName.Get("Query", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ViewFieldsXName = System.Xml.Linq.XName.Get("ViewFields", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MethodXName = System.Xml.Linq.XName.Get("Method", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GroupByHeaderXName = System.Xml.Linq.XName.Get("GroupByHeader", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GroupByFooterXName = System.Xml.Linq.XName.Get("GroupByFooter", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ViewHeaderXName = System.Xml.Linq.XName.Get("ViewHeader", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ViewBodyXName = System.Xml.Linq.XName.Get("ViewBody", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ViewFooterXName = System.Xml.Linq.XName.Get("ViewFooter", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RowLimitExceededXName = System.Xml.Linq.XName.Get("RowLimitExceeded", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ViewEmptyXName = System.Xml.Linq.XName.Get("ViewEmpty", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PagedRecurrenceRowsetXName = System.Xml.Linq.XName.Get("PagedRecurrenceRowset", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PagedClientCallbackRowsetXName = System.Xml.Linq.XName.Get("PagedClientCallbackRowset", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RowLimitXName = System.Xml.Linq.XName.Get("RowLimit", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ViewStyleXName = System.Xml.Linq.XName.Get("ViewStyle", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ViewDataXName = System.Xml.Linq.XName.Get("ViewData", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName XslXName = System.Xml.Linq.XName.Get("Xsl", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName XslLinkXName = System.Xml.Linq.XName.Get("XslLink", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AggregateViewXName = System.Xml.Linq.XName.Get("AggregateView", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BaseViewIDXName = System.Xml.Linq.XName.Get("BaseViewID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DefaultViewXName = System.Xml.Linq.XName.Get("DefaultView", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DisplayNameXName = System.Xml.Linq.XName.Get("DisplayName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FailIfEmptyXName = System.Xml.Linq.XName.Get("FailIfEmpty", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FileDialogXName = System.Xml.Linq.XName.Get("FileDialog", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FPModifiedXName = System.Xml.Linq.XName.Get("FPModified", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HiddenXName = System.Xml.Linq.XName.Get("Hidden", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ListXName = System.Xml.Linq.XName.Get("List", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ContentTypeIDXName = System.Xml.Linq.XName.Get("ContentTypeID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OrderedViewXName = System.Xml.Linq.XName.Get("OrderedView", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DefaultViewForContentTypeXName = System.Xml.Linq.XName.Get("DefaultViewForContentType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IncludeRootFolderXName = System.Xml.Linq.XName.Get("IncludeRootFolder", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PageTypeXName = System.Xml.Linq.XName.Get("PageType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PathXName = System.Xml.Linq.XName.Get("Path", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ReadOnlyXName = System.Xml.Linq.XName.Get("ReadOnly", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RecurrenceRowsetXName = System.Xml.Linq.XName.Get("RecurrenceRowset", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RequiresClientIntegrationXName = System.Xml.Linq.XName.Get("RequiresClientIntegration", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RowLimit1XName = System.Xml.Linq.XName.Get("RowLimit", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ScopeXName = System.Xml.Linq.XName.Get("Scope", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ShowHeaderUIXName = System.Xml.Linq.XName.Get("ShowHeaderUI", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TabularViewXName = System.Xml.Linq.XName.Get("TabularView", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ThreadedXName = System.Xml.Linq.XName.Get("Threaded", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypeXName = System.Xml.Linq.XName.Get("Type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UrlXName = System.Xml.Linq.XName.Get("Url", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WebPartOrderXName = System.Xml.Linq.XName.Get("WebPartOrder", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WebPartZoneIDXName = System.Xml.Linq.XName.Get("WebPartZoneID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FreeFormXName = System.Xml.Linq.XName.Get("FreeForm", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageUrlXName = System.Xml.Linq.XName.Get("ImageUrl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SetupPathXName = System.Xml.Linq.XName.Get("SetupPath", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ModerationTypeXName = System.Xml.Linq.XName.Get("ModerationType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolbarTemplateXName = System.Xml.Linq.XName.Get("ToolbarTemplate", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MobileViewXName = System.Xml.Linq.XName.Get("MobileView", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MobileUrlXName = System.Xml.Linq.XName.Get("MobileUrl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MobileDefaultViewXName = System.Xml.Linq.XName.Get("MobileDefaultView", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MobileItemLimitXName = System.Xml.Linq.XName.Get("MobileItemLimit", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MobileSimpleViewFieldXName = System.Xml.Linq.XName.Get("MobileSimpleViewField", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ReqAuthXName = System.Xml.Linq.XName.Get("ReqAuth", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TargetTypeXName = System.Xml.Linq.XName.Get("TargetType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TargetIdXName = System.Xml.Linq.XName.Get("TargetId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CssStyleSheetXName = System.Xml.Linq.XName.Get("CssStyleSheet", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ViewDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator ViewDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ViewDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ViewDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PagedRowset?, Toolbar?, Query?, ViewFields?, Method?, GroupByHeader?, GroupByFooter?, ViewHeader?, ViewBody?, ViewFooter?, RowLimitExceeded?, ViewEmpty?, PagedRecurrenceRowset?, PagedClientCallbackRowset?, RowLimit?, ViewStyle?, ViewData?, Xsl?, XslLink?)
        /// </para>
        /// </summary>
        public ViewDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PagedRowset?, Toolbar?, Query?, ViewFields?, Method?, GroupByHeader?, GroupByFooter?, ViewHeader?, ViewBody?, ViewFooter?, RowLimitExceeded?, ViewEmpty?, PagedRecurrenceRowset?, PagedClientCallbackRowset?, RowLimit?, ViewStyle?, ViewData?, Xsl?, XslLink?)
        /// </para>
        /// </summary>
        public virtual CamlViewRoot PagedRowset {
            get {
                XElement x = this.GetElement(PagedRowsetXName);
                return ((CamlViewRoot)(x));
            }
            set {
                this.SetElement(PagedRowsetXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PagedRowset?, Toolbar?, Query?, ViewFields?, Method?, GroupByHeader?, GroupByFooter?, ViewHeader?, ViewBody?, ViewFooter?, RowLimitExceeded?, ViewEmpty?, PagedRecurrenceRowset?, PagedClientCallbackRowset?, RowLimit?, ViewStyle?, ViewData?, Xsl?, XslLink?)
        /// </para>
        /// </summary>
        public virtual ToolbarDefinition Toolbar {
            get {
                XElement x = this.GetElement(ToolbarXName);
                return ((ToolbarDefinition)(x));
            }
            set {
                this.SetElement(ToolbarXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PagedRowset?, Toolbar?, Query?, ViewFields?, Method?, GroupByHeader?, GroupByFooter?, ViewHeader?, ViewBody?, ViewFooter?, RowLimitExceeded?, ViewEmpty?, PagedRecurrenceRowset?, PagedClientCallbackRowset?, RowLimit?, ViewStyle?, ViewData?, Xsl?, XslLink?)
        /// </para>
        /// </summary>
        public virtual CamlQueryRoot Query {
            get {
                XElement x = this.GetElement(QueryXName);
                return ((CamlQueryRoot)(x));
            }
            set {
                this.SetElement(QueryXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PagedRowset?, Toolbar?, Query?, ViewFields?, Method?, GroupByHeader?, GroupByFooter?, ViewHeader?, ViewBody?, ViewFooter?, RowLimitExceeded?, ViewEmpty?, PagedRecurrenceRowset?, PagedClientCallbackRowset?, RowLimit?, ViewStyle?, ViewData?, Xsl?, XslLink?)
        /// </para>
        /// </summary>
        public virtual FieldRefDefinitions ViewFields {
            get {
                XElement x = this.GetElement(ViewFieldsXName);
                return ((FieldRefDefinitions)(x));
            }
            set {
                this.SetElement(ViewFieldsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PagedRowset?, Toolbar?, Query?, ViewFields?, Method?, GroupByHeader?, GroupByFooter?, ViewHeader?, ViewBody?, ViewFooter?, RowLimitExceeded?, ViewEmpty?, PagedRecurrenceRowset?, PagedClientCallbackRowset?, RowLimit?, ViewStyle?, ViewData?, Xsl?, XslLink?)
        /// </para>
        /// </summary>
        public virtual CamlBdcMethod Method {
            get {
                XElement x = this.GetElement(MethodXName);
                return ((CamlBdcMethod)(x));
            }
            set {
                this.SetElement(MethodXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PagedRowset?, Toolbar?, Query?, ViewFields?, Method?, GroupByHeader?, GroupByFooter?, ViewHeader?, ViewBody?, ViewFooter?, RowLimitExceeded?, ViewEmpty?, PagedRecurrenceRowset?, PagedClientCallbackRowset?, RowLimit?, ViewStyle?, ViewData?, Xsl?, XslLink?)
        /// </para>
        /// </summary>
        public virtual CamlViewRoot GroupByHeader {
            get {
                XElement x = this.GetElement(GroupByHeaderXName);
                return ((CamlViewRoot)(x));
            }
            set {
                this.SetElement(GroupByHeaderXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PagedRowset?, Toolbar?, Query?, ViewFields?, Method?, GroupByHeader?, GroupByFooter?, ViewHeader?, ViewBody?, ViewFooter?, RowLimitExceeded?, ViewEmpty?, PagedRecurrenceRowset?, PagedClientCallbackRowset?, RowLimit?, ViewStyle?, ViewData?, Xsl?, XslLink?)
        /// </para>
        /// </summary>
        public virtual CamlViewRoot GroupByFooter {
            get {
                XElement x = this.GetElement(GroupByFooterXName);
                return ((CamlViewRoot)(x));
            }
            set {
                this.SetElement(GroupByFooterXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PagedRowset?, Toolbar?, Query?, ViewFields?, Method?, GroupByHeader?, GroupByFooter?, ViewHeader?, ViewBody?, ViewFooter?, RowLimitExceeded?, ViewEmpty?, PagedRecurrenceRowset?, PagedClientCallbackRowset?, RowLimit?, ViewStyle?, ViewData?, Xsl?, XslLink?)
        /// </para>
        /// </summary>
        public virtual CamlViewRoot ViewHeader {
            get {
                XElement x = this.GetElement(ViewHeaderXName);
                return ((CamlViewRoot)(x));
            }
            set {
                this.SetElement(ViewHeaderXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PagedRowset?, Toolbar?, Query?, ViewFields?, Method?, GroupByHeader?, GroupByFooter?, ViewHeader?, ViewBody?, ViewFooter?, RowLimitExceeded?, ViewEmpty?, PagedRecurrenceRowset?, PagedClientCallbackRowset?, RowLimit?, ViewStyle?, ViewData?, Xsl?, XslLink?)
        /// </para>
        /// </summary>
        public virtual CamlViewRoot ViewBody {
            get {
                XElement x = this.GetElement(ViewBodyXName);
                return ((CamlViewRoot)(x));
            }
            set {
                this.SetElement(ViewBodyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PagedRowset?, Toolbar?, Query?, ViewFields?, Method?, GroupByHeader?, GroupByFooter?, ViewHeader?, ViewBody?, ViewFooter?, RowLimitExceeded?, ViewEmpty?, PagedRecurrenceRowset?, PagedClientCallbackRowset?, RowLimit?, ViewStyle?, ViewData?, Xsl?, XslLink?)
        /// </para>
        /// </summary>
        public virtual CamlViewRoot ViewFooter {
            get {
                XElement x = this.GetElement(ViewFooterXName);
                return ((CamlViewRoot)(x));
            }
            set {
                this.SetElement(ViewFooterXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PagedRowset?, Toolbar?, Query?, ViewFields?, Method?, GroupByHeader?, GroupByFooter?, ViewHeader?, ViewBody?, ViewFooter?, RowLimitExceeded?, ViewEmpty?, PagedRecurrenceRowset?, PagedClientCallbackRowset?, RowLimit?, ViewStyle?, ViewData?, Xsl?, XslLink?)
        /// </para>
        /// </summary>
        public virtual CamlViewRoot RowLimitExceeded {
            get {
                XElement x = this.GetElement(RowLimitExceededXName);
                return ((CamlViewRoot)(x));
            }
            set {
                this.SetElement(RowLimitExceededXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PagedRowset?, Toolbar?, Query?, ViewFields?, Method?, GroupByHeader?, GroupByFooter?, ViewHeader?, ViewBody?, ViewFooter?, RowLimitExceeded?, ViewEmpty?, PagedRecurrenceRowset?, PagedClientCallbackRowset?, RowLimit?, ViewStyle?, ViewData?, Xsl?, XslLink?)
        /// </para>
        /// </summary>
        public virtual CamlViewRoot ViewEmpty {
            get {
                XElement x = this.GetElement(ViewEmptyXName);
                return ((CamlViewRoot)(x));
            }
            set {
                this.SetElement(ViewEmptyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PagedRowset?, Toolbar?, Query?, ViewFields?, Method?, GroupByHeader?, GroupByFooter?, ViewHeader?, ViewBody?, ViewFooter?, RowLimitExceeded?, ViewEmpty?, PagedRecurrenceRowset?, PagedClientCallbackRowset?, RowLimit?, ViewStyle?, ViewData?, Xsl?, XslLink?)
        /// </para>
        /// </summary>
        public virtual CamlViewRoot PagedRecurrenceRowset {
            get {
                XElement x = this.GetElement(PagedRecurrenceRowsetXName);
                return ((CamlViewRoot)(x));
            }
            set {
                this.SetElement(PagedRecurrenceRowsetXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PagedRowset?, Toolbar?, Query?, ViewFields?, Method?, GroupByHeader?, GroupByFooter?, ViewHeader?, ViewBody?, ViewFooter?, RowLimitExceeded?, ViewEmpty?, PagedRecurrenceRowset?, PagedClientCallbackRowset?, RowLimit?, ViewStyle?, ViewData?, Xsl?, XslLink?)
        /// </para>
        /// </summary>
        public virtual CamlViewRoot PagedClientCallbackRowset {
            get {
                XElement x = this.GetElement(PagedClientCallbackRowsetXName);
                return ((CamlViewRoot)(x));
            }
            set {
                this.SetElement(PagedClientCallbackRowsetXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PagedRowset?, Toolbar?, Query?, ViewFields?, Method?, GroupByHeader?, GroupByFooter?, ViewHeader?, ViewBody?, ViewFooter?, RowLimitExceeded?, ViewEmpty?, PagedRecurrenceRowset?, PagedClientCallbackRowset?, RowLimit?, ViewStyle?, ViewData?, Xsl?, XslLink?)
        /// </para>
        /// </summary>
        public virtual RowLimitDefinition RowLimit {
            get {
                XElement x = this.GetElement(RowLimitXName);
                return ((RowLimitDefinition)(x));
            }
            set {
                this.SetElement(RowLimitXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PagedRowset?, Toolbar?, Query?, ViewFields?, Method?, GroupByHeader?, GroupByFooter?, ViewHeader?, ViewBody?, ViewFooter?, RowLimitExceeded?, ViewEmpty?, PagedRecurrenceRowset?, PagedClientCallbackRowset?, RowLimit?, ViewStyle?, ViewData?, Xsl?, XslLink?)
        /// </para>
        /// </summary>
        public virtual ViewStyleReference ViewStyle {
            get {
                XElement x = this.GetElement(ViewStyleXName);
                return ((ViewStyleReference)(x));
            }
            set {
                this.SetElement(ViewStyleXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PagedRowset?, Toolbar?, Query?, ViewFields?, Method?, GroupByHeader?, GroupByFooter?, ViewHeader?, ViewBody?, ViewFooter?, RowLimitExceeded?, ViewEmpty?, PagedRecurrenceRowset?, PagedClientCallbackRowset?, RowLimit?, ViewStyle?, ViewData?, Xsl?, XslLink?)
        /// </para>
        /// </summary>
        public virtual ViewDataFieldRefDefinitions ViewData {
            get {
                XElement x = this.GetElement(ViewDataXName);
                return ((ViewDataFieldRefDefinitions)(x));
            }
            set {
                this.SetElement(ViewDataXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PagedRowset?, Toolbar?, Query?, ViewFields?, Method?, GroupByHeader?, GroupByFooter?, ViewHeader?, ViewBody?, ViewFooter?, RowLimitExceeded?, ViewEmpty?, PagedRecurrenceRowset?, PagedClientCallbackRowset?, RowLimit?, ViewStyle?, ViewData?, Xsl?, XslLink?)
        /// </para>
        /// </summary>
        public virtual CamlViewRoot Xsl {
            get {
                XElement x = this.GetElement(XslXName);
                return ((CamlViewRoot)(x));
            }
            set {
                this.SetElement(XslXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PagedRowset?, Toolbar?, Query?, ViewFields?, Method?, GroupByHeader?, GroupByFooter?, ViewHeader?, ViewBody?, ViewFooter?, RowLimitExceeded?, ViewEmpty?, PagedRecurrenceRowset?, PagedClientCallbackRowset?, RowLimit?, ViewStyle?, ViewData?, Xsl?, XslLink?)
        /// </para>
        /// </summary>
        public virtual CamlViewRoot XslLink {
            get {
                XElement x = this.GetElement(XslLinkXName);
                return ((CamlViewRoot)(x));
            }
            set {
                this.SetElement(XslLinkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string AggregateView {
            get {
                XAttribute x = this.Attribute(AggregateViewXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AggregateViewXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? BaseViewID {
            get {
                XAttribute x = this.Attribute(BaseViewIDXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(BaseViewIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DefaultView {
            get {
                XAttribute x = this.Attribute(DefaultViewXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DefaultViewXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DisplayName {
            get {
                XAttribute x = this.Attribute(DisplayNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DisplayNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FailIfEmpty {
            get {
                XAttribute x = this.Attribute(FailIfEmptyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FailIfEmptyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FileDialog {
            get {
                XAttribute x = this.Attribute(FileDialogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FileDialogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FPModified {
            get {
                XAttribute x = this.Attribute(FPModifiedXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FPModifiedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Hidden {
            get {
                XAttribute x = this.Attribute(HiddenXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(HiddenXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? List {
            get {
                XAttribute x = this.Attribute(ListXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(ListXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ContentTypeID {
            get {
                XAttribute x = this.Attribute(ContentTypeIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ContentTypeIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string OrderedView {
            get {
                XAttribute x = this.Attribute(OrderedViewXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(OrderedViewXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DefaultViewForContentType {
            get {
                XAttribute x = this.Attribute(DefaultViewForContentTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DefaultViewForContentTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string IncludeRootFolder {
            get {
                XAttribute x = this.Attribute(IncludeRootFolderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IncludeRootFolderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string PageType {
            get {
                XAttribute x = this.Attribute(PageTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PageTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Path {
            get {
                XAttribute x = this.Attribute(PathXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PathXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ReadOnly {
            get {
                XAttribute x = this.Attribute(ReadOnlyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ReadOnlyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string RecurrenceRowset {
            get {
                XAttribute x = this.Attribute(RecurrenceRowsetXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(RecurrenceRowsetXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string RequiresClientIntegration {
            get {
                XAttribute x = this.Attribute(RequiresClientIntegrationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(RequiresClientIntegrationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? RowLimit1 {
            get {
                XAttribute x = this.Attribute(RowLimit1XName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(RowLimit1XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Scope {
            get {
                XAttribute x = this.Attribute(ScopeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ScopeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ShowHeaderUI {
            get {
                XAttribute x = this.Attribute(ShowHeaderUIXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ShowHeaderUIXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TabularView {
            get {
                XAttribute x = this.Attribute(TabularViewXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TabularViewXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Threaded {
            get {
                XAttribute x = this.Attribute(ThreadedXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ThreadedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Type {
            get {
                XAttribute x = this.Attribute(TypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Url {
            get {
                XAttribute x = this.Attribute(UrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(UrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? WebPartOrder {
            get {
                XAttribute x = this.Attribute(WebPartOrderXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(WebPartOrderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string WebPartZoneID {
            get {
                XAttribute x = this.Attribute(WebPartZoneIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(WebPartZoneIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FreeForm {
            get {
                XAttribute x = this.Attribute(FreeFormXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FreeFormXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ImageUrl {
            get {
                XAttribute x = this.Attribute(ImageUrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageUrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SetupPath {
            get {
                XAttribute x = this.Attribute(SetupPathXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SetupPathXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ModerationType {
            get {
                XAttribute x = this.Attribute(ModerationTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ModerationTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToolbarTemplate {
            get {
                XAttribute x = this.Attribute(ToolbarTemplateXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToolbarTemplateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string MobileView {
            get {
                XAttribute x = this.Attribute(MobileViewXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(MobileViewXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string MobileUrl {
            get {
                XAttribute x = this.Attribute(MobileUrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(MobileUrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string MobileDefaultView {
            get {
                XAttribute x = this.Attribute(MobileDefaultViewXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(MobileDefaultViewXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? MobileItemLimit {
            get {
                XAttribute x = this.Attribute(MobileItemLimitXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(MobileItemLimitXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string MobileSimpleViewField {
            get {
                XAttribute x = this.Attribute(MobileSimpleViewFieldXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(MobileSimpleViewFieldXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ReqAuth {
            get {
                XAttribute x = this.Attribute(ReqAuthXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ReqAuthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.ViewRegistrationType? TargetType {
            get {
                XAttribute x = this.Attribute(TargetTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.ViewRegistrationType)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.ViewRegistrationType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(TargetTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TargetId {
            get {
                XAttribute x = this.Attribute(TargetIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TargetIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CssStyleSheet {
            get {
                XAttribute x = this.Attribute(CssStyleSheetXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CssStyleSheetXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ViewDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PagedRowsetXName, typeof(CamlViewRoot));
            localElementDictionary.Add(ToolbarXName, typeof(ToolbarDefinition));
            localElementDictionary.Add(QueryXName, typeof(CamlQueryRoot));
            localElementDictionary.Add(ViewFieldsXName, typeof(FieldRefDefinitions));
            localElementDictionary.Add(MethodXName, typeof(CamlBdcMethod));
            localElementDictionary.Add(GroupByHeaderXName, typeof(CamlViewRoot));
            localElementDictionary.Add(GroupByFooterXName, typeof(CamlViewRoot));
            localElementDictionary.Add(ViewHeaderXName, typeof(CamlViewRoot));
            localElementDictionary.Add(ViewBodyXName, typeof(CamlViewRoot));
            localElementDictionary.Add(ViewFooterXName, typeof(CamlViewRoot));
            localElementDictionary.Add(RowLimitExceededXName, typeof(CamlViewRoot));
            localElementDictionary.Add(ViewEmptyXName, typeof(CamlViewRoot));
            localElementDictionary.Add(PagedRecurrenceRowsetXName, typeof(CamlViewRoot));
            localElementDictionary.Add(PagedClientCallbackRowsetXName, typeof(CamlViewRoot));
            localElementDictionary.Add(RowLimitXName, typeof(RowLimitDefinition));
            localElementDictionary.Add(ViewStyleXName, typeof(ViewStyleReference));
            localElementDictionary.Add(ViewDataXName, typeof(ViewDataFieldRefDefinitions));
            localElementDictionary.Add(XslXName, typeof(CamlViewRoot));
            localElementDictionary.Add(XslLinkXName, typeof(CamlViewRoot));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Property*)*)
    /// </para>
    /// </summary>
    public partial class ListDataSourceDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertyXName = System.Xml.Linq.XName.Get("Property", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PropertyValueAttributeDefinition> PropertyField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ListDataSourceDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ListDataSourceDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ListDataSourceDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ListDataSourceDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(PropertyXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Property*)*)
        /// </para>
        /// </summary>
        public ListDataSourceDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Property*)*)
        /// </para>
        /// </summary>
        public virtual IList<PropertyValueAttributeDefinition> Property {
            get {
                if ((this.PropertyField == null)) {
                    this.PropertyField = new XTypedList<PropertyValueAttributeDefinition>(this, LinqToXsdTypeManager.Instance, PropertyXName);
                }
                return this.PropertyField;
            }
            set {
                if ((value == null)) {
                    this.PropertyField = null;
                }
                else {
                    if ((this.PropertyField == null)) {
                        this.PropertyField = XTypedList<PropertyValueAttributeDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropertyXName);
                    }
                    else {
                        XTypedServices.SetList<PropertyValueAttributeDefinition>(this.PropertyField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ListDataSourceDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PropertyXName, typeof(PropertyValueAttributeDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class ListTemplateDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UniqueXName = System.Xml.Linq.XName.Get("Unique", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypeXName = System.Xml.Linq.XName.Get("Type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SecurityBitsXName = System.Xml.Linq.XName.Get("SecurityBits", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RootWebOnlyXName = System.Xml.Linq.XName.Get("RootWebOnly", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CatalogXName = System.Xml.Linq.XName.Get("Catalog", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DefaultXName = System.Xml.Linq.XName.Get("Default", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DisplayNameXName = System.Xml.Linq.XName.Get("DisplayName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DescriptionXName = System.Xml.Linq.XName.Get("Description", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DocumentTemplateXName = System.Xml.Linq.XName.Get("DocumentTemplate", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DontSaveInTemplateXName = System.Xml.Linq.XName.Get("DontSaveInTemplate", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AllowDeletionXName = System.Xml.Linq.XName.Get("AllowDeletion", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DisableAttachmentsXName = System.Xml.Linq.XName.Get("DisableAttachments", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EnableModerationXName = System.Xml.Linq.XName.Get("EnableModeration", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HiddenXName = System.Xml.Linq.XName.Get("Hidden", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HiddenListXName = System.Xml.Linq.XName.Get("HiddenList", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageXName = System.Xml.Linq.XName.Get("Image", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MustSaveRootFilesXName = System.Xml.Linq.XName.Get("MustSaveRootFiles", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OnQuickLaunchXName = System.Xml.Linq.XName.Get("OnQuickLaunch", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CacheSchemaXName = System.Xml.Linq.XName.Get("CacheSchema", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NoCrawlXName = System.Xml.Linq.XName.Get("NoCrawl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AllowEveryoneViewItemsXName = System.Xml.Linq.XName.Get("AllowEveryoneViewItems", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AlwaysIncludeContentXName = System.Xml.Linq.XName.Get("AlwaysIncludeContent", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PathXName = System.Xml.Linq.XName.Get("Path", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SyncTypeXName = System.Xml.Linq.XName.Get("SyncType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SetupPathXName = System.Xml.Linq.XName.Get("SetupPath", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BaseTypeXName = System.Xml.Linq.XName.Get("BaseType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EditPageXName = System.Xml.Linq.XName.Get("EditPage", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureIdXName = System.Xml.Linq.XName.Get("FeatureId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FolderCreationXName = System.Xml.Linq.XName.Get("FolderCreation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MultipleTypesXName = System.Xml.Linq.XName.Get("MultipleTypes", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DisallowContentTypesXName = System.Xml.Linq.XName.Get("DisallowContentTypes", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NewPageXName = System.Xml.Linq.XName.Get("NewPage", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SequenceXName = System.Xml.Linq.XName.Get("Sequence", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VersioningEnabledXName = System.Xml.Linq.XName.Get("VersioningEnabled", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CategoryXName = System.Xml.Linq.XName.Get("Category", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UseRootFolderForNavigationXName = System.Xml.Linq.XName.Get("UseRootFolderForNavigation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DocumentAsEnclosureXName = System.Xml.Linq.XName.Get("DocumentAsEnclosure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EnablePeopleSelectorXName = System.Xml.Linq.XName.Get("EnablePeopleSelector", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EnableResourceSelectorXName = System.Xml.Linq.XName.Get("EnableResourceSelector", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ListTemplateDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator ListTemplateDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ListTemplateDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ListTemplateDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Unique {
            get {
                XAttribute x = this.Attribute(UniqueXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(UniqueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? Type {
            get {
                XAttribute x = this.Attribute(TypeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(TypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SecurityBits {
            get {
                XAttribute x = this.Attribute(SecurityBitsXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SecurityBitsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string RootWebOnly {
            get {
                XAttribute x = this.Attribute(RootWebOnlyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(RootWebOnlyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Catalog {
            get {
                XAttribute x = this.Attribute(CatalogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CatalogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Default {
            get {
                XAttribute x = this.Attribute(DefaultXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DefaultXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DisplayName {
            get {
                XAttribute x = this.Attribute(DisplayNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DisplayNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Description {
            get {
                XAttribute x = this.Attribute(DescriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? DocumentTemplate {
            get {
                XAttribute x = this.Attribute(DocumentTemplateXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(DocumentTemplateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DontSaveInTemplate {
            get {
                XAttribute x = this.Attribute(DontSaveInTemplateXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DontSaveInTemplateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string AllowDeletion {
            get {
                XAttribute x = this.Attribute(AllowDeletionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AllowDeletionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DisableAttachments {
            get {
                XAttribute x = this.Attribute(DisableAttachmentsXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DisableAttachmentsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.TrueFalseMixed? EnableModeration {
            get {
                XAttribute x = this.Attribute(EnableModerationXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.TrueFalseMixed)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.TrueFalseMixed), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(EnableModerationXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Hidden {
            get {
                XAttribute x = this.Attribute(HiddenXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(HiddenXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string HiddenList {
            get {
                XAttribute x = this.Attribute(HiddenListXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(HiddenListXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Image {
            get {
                XAttribute x = this.Attribute(ImageXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string MustSaveRootFiles {
            get {
                XAttribute x = this.Attribute(MustSaveRootFilesXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(MustSaveRootFilesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string OnQuickLaunch {
            get {
                XAttribute x = this.Attribute(OnQuickLaunchXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(OnQuickLaunchXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CacheSchema {
            get {
                XAttribute x = this.Attribute(CacheSchemaXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CacheSchemaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string NoCrawl {
            get {
                XAttribute x = this.Attribute(NoCrawlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NoCrawlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string AllowEveryoneViewItems {
            get {
                XAttribute x = this.Attribute(AllowEveryoneViewItemsXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AllowEveryoneViewItemsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string AlwaysIncludeContent {
            get {
                XAttribute x = this.Attribute(AlwaysIncludeContentXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AlwaysIncludeContentXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Path {
            get {
                XAttribute x = this.Attribute(PathXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PathXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SyncType {
            get {
                XAttribute x = this.Attribute(SyncTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SyncTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SetupPath {
            get {
                XAttribute x = this.Attribute(SetupPathXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SetupPathXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string BaseType {
            get {
                XAttribute x = this.Attribute(BaseTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(BaseTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string EditPage {
            get {
                XAttribute x = this.Attribute(EditPageXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(EditPageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FeatureId {
            get {
                XAttribute x = this.Attribute(FeatureIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FeatureIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FolderCreation {
            get {
                XAttribute x = this.Attribute(FolderCreationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FolderCreationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string MultipleTypes {
            get {
                XAttribute x = this.Attribute(MultipleTypesXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(MultipleTypesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DisallowContentTypes {
            get {
                XAttribute x = this.Attribute(DisallowContentTypesXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DisallowContentTypesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string NewPage {
            get {
                XAttribute x = this.Attribute(NewPageXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NewPageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int64? Sequence {
            get {
                XAttribute x = this.Attribute(SequenceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<long>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
            }
            set {
                this.SetAttribute(SequenceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string VersioningEnabled {
            get {
                XAttribute x = this.Attribute(VersioningEnabledXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(VersioningEnabledXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Category {
            get {
                XAttribute x = this.Attribute(CategoryXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CategoryXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string UseRootFolderForNavigation {
            get {
                XAttribute x = this.Attribute(UseRootFolderForNavigationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(UseRootFolderForNavigationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DocumentAsEnclosure {
            get {
                XAttribute x = this.Attribute(DocumentAsEnclosureXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DocumentAsEnclosureXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string EnablePeopleSelector {
            get {
                XAttribute x = this.Attribute(EnablePeopleSelectorXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(EnablePeopleSelectorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string EnableResourceSelector {
            get {
                XAttribute x = this.Attribute(EnableResourceSelectorXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(EnableResourceSelectorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ListTemplateDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class WebTemplateDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AdjustHijriDaysXName = System.Xml.Linq.XName.Get("AdjustHijriDays", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AlternateCssUrlXName = System.Xml.Linq.XName.Get("AlternateCssUrl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AlternateHeaderXName = System.Xml.Linq.XName.Get("AlternateHeader", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BaseTemplateIDXName = System.Xml.Linq.XName.Get("BaseTemplateID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BaseTemplateNameXName = System.Xml.Linq.XName.Get("BaseTemplateName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BaseConfigurationIDXName = System.Xml.Linq.XName.Get("BaseConfigurationID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CalendarTypeXName = System.Xml.Linq.XName.Get("CalendarType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CollationXName = System.Xml.Linq.XName.Get("Collation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ContainsDefaultListsXName = System.Xml.Linq.XName.Get("ContainsDefaultLists", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CustomizedCssFilesXName = System.Xml.Linq.XName.Get("CustomizedCssFiles", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CustomJSUrlXName = System.Xml.Linq.XName.Get("CustomJSUrl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DescriptionXName = System.Xml.Linq.XName.Get("Description", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DisplayCategoryXName = System.Xml.Linq.XName.Get("DisplayCategory", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExcludeFromOfflineClientXName = System.Xml.Linq.XName.Get("ExcludeFromOfflineClient", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageUrlXName = System.Xml.Linq.XName.Get("ImageUrl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LocaleXName = System.Xml.Linq.XName.Get("Locale", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ParserEnabledXName = System.Xml.Linq.XName.Get("ParserEnabled", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PortalNameXName = System.Xml.Linq.XName.Get("PortalName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PortalUrlXName = System.Xml.Linq.XName.Get("PortalUrl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PresenceEnabledXName = System.Xml.Linq.XName.Get("PresenceEnabled", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProductVersionXName = System.Xml.Linq.XName.Get("ProductVersion", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName QuickLaunchEnabledXName = System.Xml.Linq.XName.Get("QuickLaunchEnabled", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SubwebXName = System.Xml.Linq.XName.Get("Subweb", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SyndicationEnabledXName = System.Xml.Linq.XName.Get("SyndicationEnabled", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Time24XName = System.Xml.Linq.XName.Get("Time24", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TimeZoneXName = System.Xml.Linq.XName.Get("TimeZone", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TitleXName = System.Xml.Linq.XName.Get("Title", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TreeViewEnabledXName = System.Xml.Linq.XName.Get("TreeViewEnabled", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UIVersionConfigurationEnabledXName = System.Xml.Linq.XName.Get("UIVersionConfigurationEnabled", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("WebTemplateDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator WebTemplateDefinition(XElement xe) { return XTypedServices.ToXTypedElement<WebTemplateDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public WebTemplateDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? AdjustHijriDays {
            get {
                XAttribute x = this.Attribute(AdjustHijriDaysXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(AdjustHijriDaysXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string AlternateCssUrl {
            get {
                XAttribute x = this.Attribute(AlternateCssUrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AlternateCssUrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string AlternateHeader {
            get {
                XAttribute x = this.Attribute(AlternateHeaderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AlternateHeaderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual int BaseTemplateID {
            get {
                XAttribute x = this.Attribute(BaseTemplateIDXName);
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(BaseTemplateIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string BaseTemplateName {
            get {
                XAttribute x = this.Attribute(BaseTemplateNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(BaseTemplateNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual int BaseConfigurationID {
            get {
                XAttribute x = this.Attribute(BaseConfigurationIDXName);
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(BaseConfigurationIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? CalendarType {
            get {
                XAttribute x = this.Attribute(CalendarTypeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(CalendarTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? Collation {
            get {
                XAttribute x = this.Attribute(CollationXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(CollationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ContainsDefaultLists {
            get {
                XAttribute x = this.Attribute(ContainsDefaultListsXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ContainsDefaultListsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CustomizedCssFiles {
            get {
                XAttribute x = this.Attribute(CustomizedCssFilesXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CustomizedCssFilesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CustomJSUrl {
            get {
                XAttribute x = this.Attribute(CustomJSUrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CustomJSUrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Description {
            get {
                XAttribute x = this.Attribute(DescriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DisplayCategory {
            get {
                XAttribute x = this.Attribute(DisplayCategoryXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DisplayCategoryXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ExcludeFromOfflineClient {
            get {
                XAttribute x = this.Attribute(ExcludeFromOfflineClientXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ExcludeFromOfflineClientXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ImageUrl {
            get {
                XAttribute x = this.Attribute(ImageUrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageUrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? Locale {
            get {
                XAttribute x = this.Attribute(LocaleXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(LocaleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ParserEnabled {
            get {
                XAttribute x = this.Attribute(ParserEnabledXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ParserEnabledXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string PortalName {
            get {
                XAttribute x = this.Attribute(PortalNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PortalNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string PortalUrl {
            get {
                XAttribute x = this.Attribute(PortalUrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PortalUrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string PresenceEnabled {
            get {
                XAttribute x = this.Attribute(PresenceEnabledXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PresenceEnabledXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? ProductVersion {
            get {
                XAttribute x = this.Attribute(ProductVersionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(ProductVersionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string QuickLaunchEnabled {
            get {
                XAttribute x = this.Attribute(QuickLaunchEnabledXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(QuickLaunchEnabledXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Subweb {
            get {
                XAttribute x = this.Attribute(SubwebXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SubwebXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SyndicationEnabled {
            get {
                XAttribute x = this.Attribute(SyndicationEnabledXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SyndicationEnabledXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Time24 {
            get {
                XAttribute x = this.Attribute(Time24XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(Time24XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? TimeZone {
            get {
                XAttribute x = this.Attribute(TimeZoneXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(TimeZoneXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Title {
            get {
                XAttribute x = this.Attribute(TitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TreeViewEnabled {
            get {
                XAttribute x = this.Attribute(TreeViewEnabledXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TreeViewEnabledXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string UIVersionConfigurationEnabled {
            get {
                XAttribute x = this.Attribute(UIVersionConfigurationEnabledXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(UIVersionConfigurationEnabledXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<WebTemplateDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class BaseType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "0",
                        "1",
                        "5",
                        "3",
                        "4"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private BaseType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ListTemplate*)
    /// </para>
    /// </summary>
    public partial class ListTemplateDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ListTemplateXName = System.Xml.Linq.XName.Get("ListTemplate", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ListTemplateDefinition> ListTemplateField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ListTemplateDefinitions", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ListTemplateDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<ListTemplateDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ListTemplateDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ListTemplateXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ListTemplate*)
        /// </para>
        /// </summary>
        public ListTemplateDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ListTemplate*)
        /// </para>
        /// </summary>
        public virtual IList<ListTemplateDefinition> ListTemplate {
            get {
                if ((this.ListTemplateField == null)) {
                    this.ListTemplateField = new XTypedList<ListTemplateDefinition>(this, LinqToXsdTypeManager.Instance, ListTemplateXName);
                }
                return this.ListTemplateField;
            }
            set {
                if ((value == null)) {
                    this.ListTemplateField = null;
                }
                else {
                    if ((this.ListTemplateField == null)) {
                        this.ListTemplateField = XTypedList<ListTemplateDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, ListTemplateXName);
                    }
                    else {
                        XTypedServices.SetList<ListTemplateDefinition>(this.ListTemplateField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ListTemplateDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ListTemplateXName, typeof(ListTemplateDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (DocumentTemplateFiles?)
    /// </para>
    /// </summary>
    public partial class DocumentTemplateDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DocumentTemplateFilesXName = System.Xml.Linq.XName.Get("DocumentTemplateFiles", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DisplayNameXName = System.Xml.Linq.XName.Get("DisplayName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName XMLFormXName = System.Xml.Linq.XName.Get("XMLForm", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypeXName = System.Xml.Linq.XName.Get("Type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PathXName = System.Xml.Linq.XName.Get("Path", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DescriptionXName = System.Xml.Linq.XName.Get("Description", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DefaultXName = System.Xml.Linq.XName.Get("Default", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DocumentTemplateDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DocumentTemplateDefinition(XElement xe) { return XTypedServices.ToXTypedElement<DocumentTemplateDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DocumentTemplateDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DocumentTemplateFilesXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (DocumentTemplateFiles?)
        /// </para>
        /// </summary>
        public DocumentTemplateDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DocumentTemplateFiles?)
        /// </para>
        /// </summary>
        public virtual DocumentTemplateFileDefinitions DocumentTemplateFiles {
            get {
                XElement x = this.GetElement(DocumentTemplateFilesXName);
                return ((DocumentTemplateFileDefinitions)(x));
            }
            set {
                this.SetElement(DocumentTemplateFilesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DisplayName {
            get {
                XAttribute x = this.Attribute(DisplayNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DisplayNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string XMLForm {
            get {
                XAttribute x = this.Attribute(XMLFormXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(XMLFormXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? Type {
            get {
                XAttribute x = this.Attribute(TypeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(TypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Path {
            get {
                XAttribute x = this.Attribute(PathXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PathXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Description {
            get {
                XAttribute x = this.Attribute(DescriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Default {
            get {
                XAttribute x = this.Attribute(DefaultXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DefaultXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DocumentTemplateDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(DocumentTemplateFilesXName, typeof(DocumentTemplateFileDefinitions));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (DocumentTemplate*)
    /// </para>
    /// </summary>
    public partial class DocumentTemplateDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DocumentTemplateXName = System.Xml.Linq.XName.Get("DocumentTemplate", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DocumentTemplateDefinition> DocumentTemplateField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DocumentTemplateDefinitions", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DocumentTemplateDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<DocumentTemplateDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DocumentTemplateDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DocumentTemplateXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (DocumentTemplate*)
        /// </para>
        /// </summary>
        public DocumentTemplateDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DocumentTemplate*)
        /// </para>
        /// </summary>
        public virtual IList<DocumentTemplateDefinition> DocumentTemplate {
            get {
                if ((this.DocumentTemplateField == null)) {
                    this.DocumentTemplateField = new XTypedList<DocumentTemplateDefinition>(this, LinqToXsdTypeManager.Instance, DocumentTemplateXName);
                }
                return this.DocumentTemplateField;
            }
            set {
                if ((value == null)) {
                    this.DocumentTemplateField = null;
                }
                else {
                    if ((this.DocumentTemplateField == null)) {
                        this.DocumentTemplateField = XTypedList<DocumentTemplateDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, DocumentTemplateXName);
                    }
                    else {
                        XTypedServices.SetList<DocumentTemplateDefinition>(this.DocumentTemplateField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DocumentTemplateDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(DocumentTemplateXName, typeof(DocumentTemplateDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class DocumentTemplateFileDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TargetNameXName = System.Xml.Linq.XName.Get("TargetName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DefaultXName = System.Xml.Linq.XName.Get("Default", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DocumentTemplateFileDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator DocumentTemplateFileDefinition(XElement xe) { return XTypedServices.ToXTypedElement<DocumentTemplateFileDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public DocumentTemplateFileDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TargetName {
            get {
                XAttribute x = this.Attribute(TargetNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TargetNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Default {
            get {
                XAttribute x = this.Attribute(DefaultXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DefaultXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DocumentTemplateFileDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (DocumentTemplateFile*)
    /// </para>
    /// </summary>
    public partial class DocumentTemplateFileDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DocumentTemplateFileXName = System.Xml.Linq.XName.Get("DocumentTemplateFile", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DocumentTemplateFileDefinition> DocumentTemplateFileField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DocumentTemplateFileDefinitions", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DocumentTemplateFileDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<DocumentTemplateFileDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DocumentTemplateFileDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DocumentTemplateFileXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (DocumentTemplateFile*)
        /// </para>
        /// </summary>
        public DocumentTemplateFileDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DocumentTemplateFile*)
        /// </para>
        /// </summary>
        public virtual IList<DocumentTemplateFileDefinition> DocumentTemplateFile {
            get {
                if ((this.DocumentTemplateFileField == null)) {
                    this.DocumentTemplateFileField = new XTypedList<DocumentTemplateFileDefinition>(this, LinqToXsdTypeManager.Instance, DocumentTemplateFileXName);
                }
                return this.DocumentTemplateFileField;
            }
            set {
                if ((value == null)) {
                    this.DocumentTemplateFileField = null;
                }
                else {
                    if ((this.DocumentTemplateFileField == null)) {
                        this.DocumentTemplateFileField = XTypedList<DocumentTemplateFileDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, DocumentTemplateFileXName);
                    }
                    else {
                        XTypedServices.SetList<DocumentTemplateFileDefinition>(this.DocumentTemplateFileField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DocumentTemplateFileDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(DocumentTemplateFileXName, typeof(DocumentTemplateFileDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (MetaData*)
    /// </para>
    /// </summary>
    public partial class BaseTypeDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MetaDataXName = System.Xml.Linq.XName.Get("MetaData", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ListMetaDataDefinition> MetaDataField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageXName = System.Xml.Linq.XName.Get("Image", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TitleXName = System.Xml.Linq.XName.Get("Title", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypeXName = System.Xml.Linq.XName.Get("Type", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BaseTypeDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator BaseTypeDefinition(XElement xe) { return XTypedServices.ToXTypedElement<BaseTypeDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static BaseTypeDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(MetaDataXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (MetaData*)
        /// </para>
        /// </summary>
        public BaseTypeDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (MetaData*)
        /// </para>
        /// </summary>
        public virtual IList<ListMetaDataDefinition> MetaData {
            get {
                if ((this.MetaDataField == null)) {
                    this.MetaDataField = new XTypedList<ListMetaDataDefinition>(this, LinqToXsdTypeManager.Instance, MetaDataXName);
                }
                return this.MetaDataField;
            }
            set {
                if ((value == null)) {
                    this.MetaDataField = null;
                }
                else {
                    if ((this.MetaDataField == null)) {
                        this.MetaDataField = XTypedList<ListMetaDataDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, MetaDataXName);
                    }
                    else {
                        XTypedServices.SetList<ListMetaDataDefinition>(this.MetaDataField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Image {
            get {
                XAttribute x = this.Attribute(ImageXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Title {
            get {
                XAttribute x = this.Attribute(TitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Type {
            get {
                XAttribute x = this.Attribute(TypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BaseTypeDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(MetaDataXName, typeof(ListMetaDataDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (BaseType*)
    /// </para>
    /// </summary>
    public partial class BaseTypeDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BaseTypeXName = System.Xml.Linq.XName.Get("BaseType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<BaseTypeDefinition> BaseTypeField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BaseTypeDefinitions", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator BaseTypeDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<BaseTypeDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static BaseTypeDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(BaseTypeXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (BaseType*)
        /// </para>
        /// </summary>
        public BaseTypeDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (BaseType*)
        /// </para>
        /// </summary>
        public virtual IList<BaseTypeDefinition> BaseType {
            get {
                if ((this.BaseTypeField == null)) {
                    this.BaseTypeField = new XTypedList<BaseTypeDefinition>(this, LinqToXsdTypeManager.Instance, BaseTypeXName);
                }
                return this.BaseTypeField;
            }
            set {
                if ((value == null)) {
                    this.BaseTypeField = null;
                }
                else {
                    if ((this.BaseTypeField == null)) {
                        this.BaseTypeField = XTypedList<BaseTypeDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, BaseTypeXName);
                    }
                    else {
                        XTypedServices.SetList<BaseTypeDefinition>(this.BaseTypeField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BaseTypeDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(BaseTypeXName, typeof(BaseTypeDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ExecuteUrl?, Lists?, Modules?, WebFeatures?, SiteFeatures?)
    /// </para>
    /// </summary>
    public partial class ConfigurationDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExecuteUrlXName = System.Xml.Linq.XName.Get("ExecuteUrl", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ListsXName = System.Xml.Linq.XName.Get("Lists", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ModulesXName = System.Xml.Linq.XName.Get("Modules", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WebFeaturesXName = System.Xml.Linq.XName.Get("WebFeatures", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SiteFeaturesXName = System.Xml.Linq.XName.Get("SiteFeatures", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DescriptionXName = System.Xml.Linq.XName.Get("Description", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HiddenXName = System.Xml.Linq.XName.Get("Hidden", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IDXName = System.Xml.Linq.XName.Get("ID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageUrlXName = System.Xml.Linq.XName.Get("ImageUrl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TitleXName = System.Xml.Linq.XName.Get("Title", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypeXName = System.Xml.Linq.XName.Get("Type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MasterUrlXName = System.Xml.Linq.XName.Get("MasterUrl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CustomMasterUrlXName = System.Xml.Linq.XName.Get("CustomMasterUrl", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ConfigurationDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator ConfigurationDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ConfigurationDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ConfigurationDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ExecuteUrl?, Lists?, Modules?, WebFeatures?, SiteFeatures?)
        /// </para>
        /// </summary>
        public ConfigurationDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ExecuteUrl?, Lists?, Modules?, WebFeatures?, SiteFeatures?)
        /// </para>
        /// </summary>
        public virtual ExecuteUrlDefinition ExecuteUrl {
            get {
                XElement x = this.GetElement(ExecuteUrlXName);
                return ((ExecuteUrlDefinition)(x));
            }
            set {
                this.SetElement(ExecuteUrlXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ExecuteUrl?, Lists?, Modules?, WebFeatures?, SiteFeatures?)
        /// </para>
        /// </summary>
        public virtual ListInstances Lists {
            get {
                XElement x = this.GetElement(ListsXName);
                return ((ListInstances)(x));
            }
            set {
                this.SetElement(ListsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ExecuteUrl?, Lists?, Modules?, WebFeatures?, SiteFeatures?)
        /// </para>
        /// </summary>
        public virtual ModuleDefinitions Modules {
            get {
                XElement x = this.GetElement(ModulesXName);
                return ((ModuleDefinitions)(x));
            }
            set {
                this.SetElement(ModulesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ExecuteUrl?, Lists?, Modules?, WebFeatures?, SiteFeatures?)
        /// </para>
        /// </summary>
        public virtual FeatureTemplateReferences WebFeatures {
            get {
                XElement x = this.GetElement(WebFeaturesXName);
                return ((FeatureTemplateReferences)(x));
            }
            set {
                this.SetElement(WebFeaturesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ExecuteUrl?, Lists?, Modules?, WebFeatures?, SiteFeatures?)
        /// </para>
        /// </summary>
        public virtual FeatureTemplateReferences SiteFeatures {
            get {
                XElement x = this.GetElement(SiteFeaturesXName);
                return ((FeatureTemplateReferences)(x));
            }
            set {
                this.SetElement(SiteFeaturesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Description {
            get {
                XAttribute x = this.Attribute(DescriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Hidden {
            get {
                XAttribute x = this.Attribute(HiddenXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(HiddenXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? ID {
            get {
                XAttribute x = this.Attribute(IDXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(IDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ImageUrl {
            get {
                XAttribute x = this.Attribute(ImageUrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageUrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Title {
            get {
                XAttribute x = this.Attribute(TitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Type {
            get {
                XAttribute x = this.Attribute(TypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string MasterUrl {
            get {
                XAttribute x = this.Attribute(MasterUrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(MasterUrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CustomMasterUrl {
            get {
                XAttribute x = this.Attribute(CustomMasterUrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CustomMasterUrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ConfigurationDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ExecuteUrlXName, typeof(ExecuteUrlDefinition));
            localElementDictionary.Add(ListsXName, typeof(ListInstances));
            localElementDictionary.Add(ModulesXName, typeof(ModuleDefinitions));
            localElementDictionary.Add(WebFeaturesXName, typeof(FeatureTemplateReferences));
            localElementDictionary.Add(SiteFeaturesXName, typeof(FeatureTemplateReferences));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Rows?)
    /// </para>
    /// </summary>
    public partial class DataDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RowsXName = System.Xml.Linq.XName.Get("Rows", "http://schemas.microsoft.com/sharepoint/");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DataDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DataDefinition(XElement xe) { return XTypedServices.ToXTypedElement<DataDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DataDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RowsXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Rows?)
        /// </para>
        /// </summary>
        public DataDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Rows?)
        /// </para>
        /// </summary>
        public virtual RowDefinitions Rows {
            get {
                XElement x = this.GetElement(RowsXName);
                return ((RowDefinitions)(x));
            }
            set {
                this.SetElement(RowsXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DataDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RowsXName, typeof(RowDefinitions));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (List*)
    /// </para>
    /// </summary>
    public partial class ListDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ListXName = System.Xml.Linq.XName.Get("List", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ListDefinition> ListField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ListDefinitions", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ListDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<ListDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ListDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ListXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (List*)
        /// </para>
        /// </summary>
        public ListDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (List*)
        /// </para>
        /// </summary>
        public virtual IList<ListDefinition> List {
            get {
                if ((this.ListField == null)) {
                    this.ListField = new XTypedList<ListDefinition>(this, LinqToXsdTypeManager.Instance, ListXName);
                }
                return this.ListField;
            }
            set {
                if ((value == null)) {
                    this.ListField = null;
                }
                else {
                    if ((this.ListField == null)) {
                        this.ListField = XTypedList<ListDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, ListXName);
                    }
                    else {
                        XTypedServices.SetList<ListDefinition>(this.ListField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ListDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ListXName, typeof(ListDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (File*)
    /// </para>
    /// </summary>
    public partial class ModuleDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FileXName = System.Xml.Linq.XName.Get("File", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FileDefinition> FileField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UrlXName = System.Xml.Linq.XName.Get("Url", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RootWebOnlyXName = System.Xml.Linq.XName.Get("RootWebOnly", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PathXName = System.Xml.Linq.XName.Get("Path", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ListXName = System.Xml.Linq.XName.Get("List", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IncludeFoldersXName = System.Xml.Linq.XName.Get("IncludeFolders", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SetupPathXName = System.Xml.Linq.XName.Get("SetupPath", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HyperlinkBaseUrlXName = System.Xml.Linq.XName.Get("HyperlinkBaseUrl", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ModuleDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ModuleDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ModuleDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ModuleDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FileXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (File*)
        /// </para>
        /// </summary>
        public ModuleDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (File*)
        /// </para>
        /// </summary>
        public virtual IList<FileDefinition> File {
            get {
                if ((this.FileField == null)) {
                    this.FileField = new XTypedList<FileDefinition>(this, LinqToXsdTypeManager.Instance, FileXName);
                }
                return this.FileField;
            }
            set {
                if ((value == null)) {
                    this.FileField = null;
                }
                else {
                    if ((this.FileField == null)) {
                        this.FileField = XTypedList<FileDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, FileXName);
                    }
                    else {
                        XTypedServices.SetList<FileDefinition>(this.FileField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Url {
            get {
                XAttribute x = this.Attribute(UrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(UrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string RootWebOnly {
            get {
                XAttribute x = this.Attribute(RootWebOnlyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(RootWebOnlyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Path {
            get {
                XAttribute x = this.Attribute(PathXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PathXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? List {
            get {
                XAttribute x = this.Attribute(ListXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(ListXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string IncludeFolders {
            get {
                XAttribute x = this.Attribute(IncludeFoldersXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IncludeFoldersXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SetupPath {
            get {
                XAttribute x = this.Attribute(SetupPathXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SetupPathXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string HyperlinkBaseUrl {
            get {
                XAttribute x = this.Attribute(HyperlinkBaseUrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(HyperlinkBaseUrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ModuleDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FileXName, typeof(FileDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((AllUsersWebPart* | View* | NavBarPage? | Property* | WebPartConnection* | BinarySerializedWebPart*)*)
    /// </para>
    /// </summary>
    public partial class FileDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AllUsersWebPartXName = System.Xml.Linq.XName.Get("AllUsersWebPart", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<WebPartDefinition> AllUsersWebPartField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ViewXName = System.Xml.Linq.XName.Get("View", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ViewWebPartDefinition> ViewField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NavBarPageXName = System.Xml.Linq.XName.Get("NavBarPage", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<NavBarPageDefinition> NavBarPageField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertyXName = System.Xml.Linq.XName.Get("Property", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PropertyValueAttributeDefinition> PropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WebPartConnectionXName = System.Xml.Linq.XName.Get("WebPartConnection", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<WebPartConnectionDefinition> WebPartConnectionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BinarySerializedWebPartXName = System.Xml.Linq.XName.Get("BinarySerializedWebPart", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<BinarySerializedWebPartDefinition> BinarySerializedWebPartField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IgnoreIfAlreadyExistsXName = System.Xml.Linq.XName.Get("IgnoreIfAlreadyExists", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NavBarHomeXName = System.Xml.Linq.XName.Get("NavBarHome", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PathXName = System.Xml.Linq.XName.Get("Path", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypeXName = System.Xml.Linq.XName.Get("Type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LevelXName = System.Xml.Linq.XName.Get("Level", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UrlXName = System.Xml.Linq.XName.Get("Url", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DoGUIDFixUpXName = System.Xml.Linq.XName.Get("DoGUIDFixUp", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DocumentTemplateForListXName = System.Xml.Linq.XName.Get("DocumentTemplateForList", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FileDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FileDefinition(XElement xe) { return XTypedServices.ToXTypedElement<FileDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FileDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(AllUsersWebPartXName), new NamedContentModelEntity(ViewXName), new NamedContentModelEntity(NavBarPageXName), new NamedContentModelEntity(PropertyXName), new NamedContentModelEntity(WebPartConnectionXName), new NamedContentModelEntity(BinarySerializedWebPartXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((AllUsersWebPart* | View* | NavBarPage? | Property* | WebPartConnection* | BinarySerializedWebPart*)*)
        /// </para>
        /// </summary>
        public FileDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((AllUsersWebPart* | View* | NavBarPage? | Property* | WebPartConnection* | BinarySerializedWebPart*)*)
        /// </para>
        /// </summary>
        public virtual IList<WebPartDefinition> AllUsersWebPart {
            get {
                if ((this.AllUsersWebPartField == null)) {
                    this.AllUsersWebPartField = new XTypedList<WebPartDefinition>(this, LinqToXsdTypeManager.Instance, AllUsersWebPartXName);
                }
                return this.AllUsersWebPartField;
            }
            set {
                if ((value == null)) {
                    this.AllUsersWebPartField = null;
                }
                else {
                    if ((this.AllUsersWebPartField == null)) {
                        this.AllUsersWebPartField = XTypedList<WebPartDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, AllUsersWebPartXName);
                    }
                    else {
                        XTypedServices.SetList<WebPartDefinition>(this.AllUsersWebPartField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((AllUsersWebPart* | View* | NavBarPage? | Property* | WebPartConnection* | BinarySerializedWebPart*)*)
        /// </para>
        /// </summary>
        public virtual IList<ViewWebPartDefinition> View {
            get {
                if ((this.ViewField == null)) {
                    this.ViewField = new XTypedList<ViewWebPartDefinition>(this, LinqToXsdTypeManager.Instance, ViewXName);
                }
                return this.ViewField;
            }
            set {
                if ((value == null)) {
                    this.ViewField = null;
                }
                else {
                    if ((this.ViewField == null)) {
                        this.ViewField = XTypedList<ViewWebPartDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, ViewXName);
                    }
                    else {
                        XTypedServices.SetList<ViewWebPartDefinition>(this.ViewField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((AllUsersWebPart* | View* | NavBarPage? | Property* | WebPartConnection* | BinarySerializedWebPart*)*)
        /// </para>
        /// </summary>
        public virtual IList<NavBarPageDefinition> NavBarPage {
            get {
                if ((this.NavBarPageField == null)) {
                    this.NavBarPageField = new XTypedList<NavBarPageDefinition>(this, LinqToXsdTypeManager.Instance, NavBarPageXName);
                }
                return this.NavBarPageField;
            }
            set {
                if ((value == null)) {
                    this.NavBarPageField = null;
                }
                else {
                    if ((this.NavBarPageField == null)) {
                        this.NavBarPageField = XTypedList<NavBarPageDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, NavBarPageXName);
                    }
                    else {
                        XTypedServices.SetList<NavBarPageDefinition>(this.NavBarPageField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((AllUsersWebPart* | View* | NavBarPage? | Property* | WebPartConnection* | BinarySerializedWebPart*)*)
        /// </para>
        /// </summary>
        public virtual IList<PropertyValueAttributeDefinition> Property {
            get {
                if ((this.PropertyField == null)) {
                    this.PropertyField = new XTypedList<PropertyValueAttributeDefinition>(this, LinqToXsdTypeManager.Instance, PropertyXName);
                }
                return this.PropertyField;
            }
            set {
                if ((value == null)) {
                    this.PropertyField = null;
                }
                else {
                    if ((this.PropertyField == null)) {
                        this.PropertyField = XTypedList<PropertyValueAttributeDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropertyXName);
                    }
                    else {
                        XTypedServices.SetList<PropertyValueAttributeDefinition>(this.PropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((AllUsersWebPart* | View* | NavBarPage? | Property* | WebPartConnection* | BinarySerializedWebPart*)*)
        /// </para>
        /// </summary>
        public virtual IList<WebPartConnectionDefinition> WebPartConnection {
            get {
                if ((this.WebPartConnectionField == null)) {
                    this.WebPartConnectionField = new XTypedList<WebPartConnectionDefinition>(this, LinqToXsdTypeManager.Instance, WebPartConnectionXName);
                }
                return this.WebPartConnectionField;
            }
            set {
                if ((value == null)) {
                    this.WebPartConnectionField = null;
                }
                else {
                    if ((this.WebPartConnectionField == null)) {
                        this.WebPartConnectionField = XTypedList<WebPartConnectionDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, WebPartConnectionXName);
                    }
                    else {
                        XTypedServices.SetList<WebPartConnectionDefinition>(this.WebPartConnectionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((AllUsersWebPart* | View* | NavBarPage? | Property* | WebPartConnection* | BinarySerializedWebPart*)*)
        /// </para>
        /// </summary>
        public virtual IList<BinarySerializedWebPartDefinition> BinarySerializedWebPart {
            get {
                if ((this.BinarySerializedWebPartField == null)) {
                    this.BinarySerializedWebPartField = new XTypedList<BinarySerializedWebPartDefinition>(this, LinqToXsdTypeManager.Instance, BinarySerializedWebPartXName);
                }
                return this.BinarySerializedWebPartField;
            }
            set {
                if ((value == null)) {
                    this.BinarySerializedWebPartField = null;
                }
                else {
                    if ((this.BinarySerializedWebPartField == null)) {
                        this.BinarySerializedWebPartField = XTypedList<BinarySerializedWebPartDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, BinarySerializedWebPartXName);
                    }
                    else {
                        XTypedServices.SetList<BinarySerializedWebPartDefinition>(this.BinarySerializedWebPartField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string IgnoreIfAlreadyExists {
            get {
                XAttribute x = this.Attribute(IgnoreIfAlreadyExistsXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IgnoreIfAlreadyExistsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.TrueFalseMixed? NavBarHome {
            get {
                XAttribute x = this.Attribute(NavBarHomeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.TrueFalseMixed)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.TrueFalseMixed), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(NavBarHomeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Path {
            get {
                XAttribute x = this.Attribute(PathXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PathXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.FileGhostType? Type {
            get {
                XAttribute x = this.Attribute(TypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.FileGhostType)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.FileGhostType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(TypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.FileLevelType? Level {
            get {
                XAttribute x = this.Attribute(LevelXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.FileLevelType)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.FileLevelType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(LevelXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Url {
            get {
                XAttribute x = this.Attribute(UrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(UrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DoGUIDFixUp {
            get {
                XAttribute x = this.Attribute(DoGUIDFixUpXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DoGUIDFixUpXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DocumentTemplateForList {
            get {
                XAttribute x = this.Attribute(DocumentTemplateForListXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DocumentTemplateForListXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FileDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AllUsersWebPartXName, typeof(WebPartDefinition));
            localElementDictionary.Add(ViewXName, typeof(ViewWebPartDefinition));
            localElementDictionary.Add(NavBarPageXName, typeof(NavBarPageDefinition));
            localElementDictionary.Add(PropertyXName, typeof(PropertyValueAttributeDefinition));
            localElementDictionary.Add(WebPartConnectionXName, typeof(WebPartConnectionDefinition));
            localElementDictionary.Add(BinarySerializedWebPartXName, typeof(BinarySerializedWebPartDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public enum FileGhostType {
        
        Ghostable,
        
        GhostableInLibrary,
    }
    
    public sealed class FileGhostTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Ghostable",
                        "GhostableInLibrary"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private FileGhostTypeValidator() {
        }
    }
    
    public enum FileLevelType {
        
        Draft,
    }
    
    public sealed class FileLevelTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Draft"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private FileLevelTypeValidator() {
        }
    }
    
    public partial class WebPartDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WebPartOrderXName = System.Xml.Linq.XName.Get("WebPartOrder", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WebPartZoneIDXName = System.Xml.Linq.XName.Get("WebPartZoneID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IDXName = System.Xml.Linq.XName.Get("ID", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("WebPartDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator WebPartDefinition(XElement xe) { return XTypedServices.ToXTypedElement<WebPartDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public WebPartDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? WebPartOrder {
            get {
                XAttribute x = this.Attribute(WebPartOrderXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(WebPartOrderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string WebPartZoneID {
            get {
                XAttribute x = this.Attribute(WebPartZoneIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(WebPartZoneIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ID {
            get {
                XAttribute x = this.Attribute(IDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<WebPartDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (BinarySerializedWebPart*)
    /// </para>
    /// </summary>
    public partial class ViewWebPartDefinition : global::Microsoft.Schemas.SharePoint.WebPartDefinition, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BinarySerializedWebPartXName = System.Xml.Linq.XName.Get("BinarySerializedWebPart", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<BinarySerializedWebPartDefinition> BinarySerializedWebPartField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AggregateViewXName = System.Xml.Linq.XName.Get("AggregateView", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BaseViewIDXName = System.Xml.Linq.XName.Get("BaseViewID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ContentTypeIDXName = System.Xml.Linq.XName.Get("ContentTypeID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DefaultViewXName = System.Xml.Linq.XName.Get("DefaultView", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DisplayNameXName = System.Xml.Linq.XName.Get("DisplayName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FailIfEmptyXName = System.Xml.Linq.XName.Get("FailIfEmpty", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FileDialogXName = System.Xml.Linq.XName.Get("FileDialog", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FPModifiedXName = System.Xml.Linq.XName.Get("FPModified", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FreeFormXName = System.Xml.Linq.XName.Get("FreeForm", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HiddenXName = System.Xml.Linq.XName.Get("Hidden", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ListXName = System.Xml.Linq.XName.Get("List", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OrderedViewXName = System.Xml.Linq.XName.Get("OrderedView", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PathXName = System.Xml.Linq.XName.Get("Path", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PageTypeXName = System.Xml.Linq.XName.Get("PageType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ReadOnlyXName = System.Xml.Linq.XName.Get("ReadOnly", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RecurrenceRowsetXName = System.Xml.Linq.XName.Get("RecurrenceRowset", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RowLimitXName = System.Xml.Linq.XName.Get("RowLimit", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ScopeXName = System.Xml.Linq.XName.Get("Scope", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ShowHeaderUIXName = System.Xml.Linq.XName.Get("ShowHeaderUI", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ThreadedXName = System.Xml.Linq.XName.Get("Threaded", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypeXName = System.Xml.Linq.XName.Get("Type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UrlXName = System.Xml.Linq.XName.Get("Url", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ViewWebPartDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ViewWebPartDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ViewWebPartDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ViewWebPartDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(BinarySerializedWebPartXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (BinarySerializedWebPart*)
        /// </para>
        /// </summary>
        public ViewWebPartDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (BinarySerializedWebPart*)
        /// </para>
        /// </summary>
        public virtual IList<BinarySerializedWebPartDefinition> BinarySerializedWebPart {
            get {
                if ((this.BinarySerializedWebPartField == null)) {
                    this.BinarySerializedWebPartField = new XTypedList<BinarySerializedWebPartDefinition>(this, LinqToXsdTypeManager.Instance, BinarySerializedWebPartXName);
                }
                return this.BinarySerializedWebPartField;
            }
            set {
                if ((value == null)) {
                    this.BinarySerializedWebPartField = null;
                }
                else {
                    if ((this.BinarySerializedWebPartField == null)) {
                        this.BinarySerializedWebPartField = XTypedList<BinarySerializedWebPartDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, BinarySerializedWebPartXName);
                    }
                    else {
                        XTypedServices.SetList<BinarySerializedWebPartDefinition>(this.BinarySerializedWebPartField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string AggregateView {
            get {
                XAttribute x = this.Attribute(AggregateViewXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AggregateViewXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? BaseViewID {
            get {
                XAttribute x = this.Attribute(BaseViewIDXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(BaseViewIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ContentTypeID {
            get {
                XAttribute x = this.Attribute(ContentTypeIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ContentTypeIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DefaultView {
            get {
                XAttribute x = this.Attribute(DefaultViewXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DefaultViewXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DisplayName {
            get {
                XAttribute x = this.Attribute(DisplayNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DisplayNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FailIfEmpty {
            get {
                XAttribute x = this.Attribute(FailIfEmptyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FailIfEmptyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FileDialog {
            get {
                XAttribute x = this.Attribute(FileDialogXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FileDialogXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FPModified {
            get {
                XAttribute x = this.Attribute(FPModifiedXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FPModifiedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FreeForm {
            get {
                XAttribute x = this.Attribute(FreeFormXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FreeFormXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Hidden {
            get {
                XAttribute x = this.Attribute(HiddenXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(HiddenXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string List {
            get {
                XAttribute x = this.Attribute(ListXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ListXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string OrderedView {
            get {
                XAttribute x = this.Attribute(OrderedViewXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(OrderedViewXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Path {
            get {
                XAttribute x = this.Attribute(PathXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PathXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string PageType {
            get {
                XAttribute x = this.Attribute(PageTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PageTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ReadOnly {
            get {
                XAttribute x = this.Attribute(ReadOnlyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ReadOnlyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string RecurrenceRowset {
            get {
                XAttribute x = this.Attribute(RecurrenceRowsetXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(RecurrenceRowsetXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? RowLimit {
            get {
                XAttribute x = this.Attribute(RowLimitXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(RowLimitXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Scope {
            get {
                XAttribute x = this.Attribute(ScopeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ScopeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ShowHeaderUI {
            get {
                XAttribute x = this.Attribute(ShowHeaderUIXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ShowHeaderUIXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Threaded {
            get {
                XAttribute x = this.Attribute(ThreadedXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ThreadedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.ViewPartType? Type {
            get {
                XAttribute x = this.Attribute(TypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.ViewPartType)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.ViewPartType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(TypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Url {
            get {
                XAttribute x = this.Attribute(UrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(UrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ViewWebPartDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(BinarySerializedWebPartXName, typeof(BinarySerializedWebPartDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (GUIDMap, WebPart+)
    /// </para>
    /// </summary>
    public partial class BinarySerializedWebPartDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GUIDMapXName = System.Xml.Linq.XName.Get("GUIDMap", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WebPartXName = System.Xml.Linq.XName.Get("WebPart", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<BinarySerializedWebPartBodyDefinition> WebPartField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BinarySerializedWebPartDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator BinarySerializedWebPartDefinition(XElement xe) { return XTypedServices.ToXTypedElement<BinarySerializedWebPartDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static BinarySerializedWebPartDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(GUIDMapXName), new NamedContentModelEntity(WebPartXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (GUIDMap, WebPart+)
        /// </para>
        /// </summary>
        public BinarySerializedWebPartDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (GUIDMap, WebPart+)
        /// </para>
        /// </summary>
        public virtual GUIDMapDefinition GUIDMap {
            get {
                XElement x = this.GetElement(GUIDMapXName);
                return ((GUIDMapDefinition)(x));
            }
            set {
                this.SetElement(GUIDMapXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GUIDMap, WebPart+)
        /// </para>
        /// </summary>
        public virtual IList<BinarySerializedWebPartBodyDefinition> WebPart {
            get {
                if ((this.WebPartField == null)) {
                    this.WebPartField = new XTypedList<BinarySerializedWebPartBodyDefinition>(this, LinqToXsdTypeManager.Instance, WebPartXName);
                }
                return this.WebPartField;
            }
            set {
                if ((value == null)) {
                    this.WebPartField = null;
                }
                else {
                    if ((this.WebPartField == null)) {
                        this.WebPartField = XTypedList<BinarySerializedWebPartBodyDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, WebPartXName);
                    }
                    else {
                        XTypedServices.SetList<BinarySerializedWebPartBodyDefinition>(this.WebPartField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BinarySerializedWebPartDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(GUIDMapXName, typeof(GUIDMapDefinition));
            localElementDictionary.Add(WebPartXName, typeof(BinarySerializedWebPartBodyDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (GUID*)
    /// </para>
    /// </summary>
    public partial class GUIDMapDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GUIDXName = System.Xml.Linq.XName.Get("GUID", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GUIDMapItemDefinition> GUIDField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GUIDMapDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GUIDMapDefinition(XElement xe) { return XTypedServices.ToXTypedElement<GUIDMapDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GUIDMapDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(GUIDXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (GUID*)
        /// </para>
        /// </summary>
        public GUIDMapDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GUID*)
        /// </para>
        /// </summary>
        public virtual IList<GUIDMapItemDefinition> GUID {
            get {
                if ((this.GUIDField == null)) {
                    this.GUIDField = new XTypedList<GUIDMapItemDefinition>(this, LinqToXsdTypeManager.Instance, GUIDXName);
                }
                return this.GUIDField;
            }
            set {
                if ((value == null)) {
                    this.GUIDField = null;
                }
                else {
                    if ((this.GUIDField == null)) {
                        this.GUIDField = XTypedList<GUIDMapItemDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, GUIDXName);
                    }
                    else {
                        XTypedServices.SetList<GUIDMapItemDefinition>(this.GUIDField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GUIDMapDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(GUIDXName, typeof(GUIDMapItemDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class BinarySerializedWebPartBodyDefinition : global::Microsoft.Schemas.SharePoint.WebPartDefinition, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ListXName = System.Xml.Linq.XName.Get("List", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypeXName = System.Xml.Linq.XName.Get("Type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FlagsXName = System.Xml.Linq.XName.Get("Flags", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DisplayNameXName = System.Xml.Linq.XName.Get("DisplayName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VersionXName = System.Xml.Linq.XName.Get("Version", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UrlXName = System.Xml.Linq.XName.Get("Url", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IsIncludedXName = System.Xml.Linq.XName.Get("IsIncluded", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FrameStateXName = System.Xml.Linq.XName.Get("FrameState", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WPTypeIdXName = System.Xml.Linq.XName.Get("WPTypeId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AssemblyXName = System.Xml.Linq.XName.Get("Assembly", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ClassXName = System.Xml.Linq.XName.Get("Class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SolutionIdXName = System.Xml.Linq.XName.Get("SolutionId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AllUsersXName = System.Xml.Linq.XName.Get("AllUsers", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PerUserXName = System.Xml.Linq.XName.Get("PerUser", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CacheXName = System.Xml.Linq.XName.Get("Cache", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SrcXName = System.Xml.Linq.XName.Get("Src", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ViewXName = System.Xml.Linq.XName.Get("View", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WebPartIdPropertyXName = System.Xml.Linq.XName.Get("WebPartIdProperty", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WebIdXName = System.Xml.Linq.XName.Get("WebId", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BinarySerializedWebPartBodyDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator BinarySerializedWebPartBodyDefinition(XElement xe) { return XTypedServices.ToXTypedElement<BinarySerializedWebPartBodyDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public BinarySerializedWebPartBodyDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string List {
            get {
                XAttribute x = this.Attribute(ListXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ListXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? Type {
            get {
                XAttribute x = this.Attribute(TypeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(TypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Flags {
            get {
                XAttribute x = this.Attribute(FlagsXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FlagsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DisplayName {
            get {
                XAttribute x = this.Attribute(DisplayNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DisplayNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Version {
            get {
                XAttribute x = this.Attribute(VersionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(VersionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Url {
            get {
                XAttribute x = this.Attribute(UrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(UrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string IsIncluded {
            get {
                XAttribute x = this.Attribute(IsIncludedXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IsIncludedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? FrameState {
            get {
                XAttribute x = this.Attribute(FrameStateXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(FrameStateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string WPTypeId {
            get {
                XAttribute x = this.Attribute(WPTypeIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(WPTypeIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Assembly {
            get {
                XAttribute x = this.Attribute(AssemblyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AssemblyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Class {
            get {
                XAttribute x = this.Attribute(ClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SolutionId {
            get {
                XAttribute x = this.Attribute(SolutionIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SolutionIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string AllUsers {
            get {
                XAttribute x = this.Attribute(AllUsersXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AllUsersXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string PerUser {
            get {
                XAttribute x = this.Attribute(PerUserXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PerUserXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Cache {
            get {
                XAttribute x = this.Attribute(CacheXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CacheXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Src {
            get {
                XAttribute x = this.Attribute(SrcXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SrcXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string View {
            get {
                XAttribute x = this.Attribute(ViewXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ViewXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string WebPartIdProperty {
            get {
                XAttribute x = this.Attribute(WebPartIdPropertyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(WebPartIdPropertyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string WebId {
            get {
                XAttribute x = this.Attribute(WebIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(WebIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BinarySerializedWebPartBodyDefinition>(this);
        }
    }
    
    public partial class GUIDMapItemDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ListUrlXName = System.Xml.Linq.XName.Get("ListUrl", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GUIDMapItemDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator GUIDMapItemDefinition(XElement xe) { return XTypedServices.ToXTypedElement<GUIDMapItemDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public GUIDMapItemDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ListUrl {
            get {
                XAttribute x = this.Attribute(ListUrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ListUrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GUIDMapItemDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum ViewPartType {
        
        HTML,
        
        Chart,
        
        CHART,
        
        Pivot,
        
        PIVOT,
        
        GANTT,
        
        GRID,
        
        CALENDAR,
    }
    
    public sealed class ViewPartTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "HTML",
                        "Chart",
                        "CHART",
                        "Pivot",
                        "PIVOT",
                        "GANTT",
                        "GRID",
                        "CALENDAR"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ViewPartTypeValidator() {
        }
    }
    
    public partial class NavBarPageDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PositionXName = System.Xml.Linq.XName.Get("Position", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IDXName = System.Xml.Linq.XName.Get("ID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("NavBarPageDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator NavBarPageDefinition(XElement xe) { return XTypedServices.ToXTypedElement<NavBarPageDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public NavBarPageDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Position {
            get {
                XAttribute x = this.Attribute(PositionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PositionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? ID {
            get {
                XAttribute x = this.Attribute(IDXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(IDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NavBarPageDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (WebPartTransformer?)
    /// </para>
    /// </summary>
    public partial class WebPartConnectionDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WebPartTransformerXName = System.Xml.Linq.XName.Get("WebPartTransformer", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IDXName = System.Xml.Linq.XName.Get("ID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConsumerIDXName = System.Xml.Linq.XName.Get("ConsumerID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProviderIDXName = System.Xml.Linq.XName.Get("ProviderID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConsumerConnectionPointIDXName = System.Xml.Linq.XName.Get("ConsumerConnectionPointID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProviderConnectionPointIDXName = System.Xml.Linq.XName.Get("ProviderConnectionPointID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TargetPageUrlXName = System.Xml.Linq.XName.Get("TargetPageUrl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CrossPageConnectionIDXName = System.Xml.Linq.XName.Get("CrossPageConnectionID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CrossPageSchemaXName = System.Xml.Linq.XName.Get("CrossPageSchema", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("WebPartConnectionDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator WebPartConnectionDefinition(XElement xe) { return XTypedServices.ToXTypedElement<WebPartConnectionDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static WebPartConnectionDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(WebPartTransformerXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (WebPartTransformer?)
        /// </para>
        /// </summary>
        public WebPartConnectionDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (WebPartTransformer?)
        /// </para>
        /// </summary>
        public virtual WebPartTransformerDefinition WebPartTransformer {
            get {
                XElement x = this.GetElement(WebPartTransformerXName);
                return ((WebPartTransformerDefinition)(x));
            }
            set {
                this.SetElement(WebPartTransformerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ID {
            get {
                XAttribute x = this.Attribute(IDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ConsumerID {
            get {
                XAttribute x = this.Attribute(ConsumerIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ConsumerIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ProviderID {
            get {
                XAttribute x = this.Attribute(ProviderIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ProviderIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ConsumerConnectionPointID {
            get {
                XAttribute x = this.Attribute(ConsumerConnectionPointIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ConsumerConnectionPointIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ProviderConnectionPointID {
            get {
                XAttribute x = this.Attribute(ProviderConnectionPointIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ProviderConnectionPointIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TargetPageUrl {
            get {
                XAttribute x = this.Attribute(TargetPageUrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TargetPageUrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CrossPageConnectionID {
            get {
                XAttribute x = this.Attribute(CrossPageConnectionIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CrossPageConnectionIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CrossPageSchema {
            get {
                XAttribute x = this.Attribute(CrossPageSchemaXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CrossPageSchemaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<WebPartConnectionDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(WebPartTransformerXName, typeof(WebPartTransformerDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class WebPartTransformerDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AssemblyXName = System.Xml.Linq.XName.Get("Assembly", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NamespaceXName = System.Xml.Linq.XName.Get("Namespace", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("WebPartTransformerDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator WebPartTransformerDefinition(XElement xe) { return XTypedServices.ToXTypedElement<WebPartTransformerDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public WebPartTransformerDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Assembly {
            get {
                XAttribute x = this.Attribute(AssemblyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AssemblyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Namespace {
            get {
                XAttribute x = this.Attribute(NamespaceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NamespaceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<WebPartTransformerDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Configuration*)
    /// </para>
    /// </summary>
    public partial class ConfigurationDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConfigurationXName = System.Xml.Linq.XName.Get("Configuration", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ConfigurationDefinition> ConfigurationField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ConfigurationDefinitions", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ConfigurationDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<ConfigurationDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ConfigurationDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ConfigurationXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Configuration*)
        /// </para>
        /// </summary>
        public ConfigurationDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Configuration*)
        /// </para>
        /// </summary>
        public virtual IList<ConfigurationDefinition> Configuration {
            get {
                if ((this.ConfigurationField == null)) {
                    this.ConfigurationField = new XTypedList<ConfigurationDefinition>(this, LinqToXsdTypeManager.Instance, ConfigurationXName);
                }
                return this.ConfigurationField;
            }
            set {
                if ((value == null)) {
                    this.ConfigurationField = null;
                }
                else {
                    if ((this.ConfigurationField == null)) {
                        this.ConfigurationField = XTypedList<ConfigurationDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, ConfigurationXName);
                    }
                    else {
                        XTypedServices.SetList<ConfigurationDefinition>(this.ConfigurationField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ConfigurationDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ConfigurationXName, typeof(ConfigurationDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Module*)
    /// </para>
    /// </summary>
    public partial class ModuleDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ModuleXName = System.Xml.Linq.XName.Get("Module", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ModuleDefinition> ModuleField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ModuleDefinitions", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ModuleDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<ModuleDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ModuleDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ModuleXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Module*)
        /// </para>
        /// </summary>
        public ModuleDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Module*)
        /// </para>
        /// </summary>
        public virtual IList<ModuleDefinition> Module {
            get {
                if ((this.ModuleField == null)) {
                    this.ModuleField = new XTypedList<ModuleDefinition>(this, LinqToXsdTypeManager.Instance, ModuleXName);
                }
                return this.ModuleField;
            }
            set {
                if ((value == null)) {
                    this.ModuleField = null;
                }
                else {
                    if ((this.ModuleField == null)) {
                        this.ModuleField = XTypedList<ModuleDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, ModuleXName);
                    }
                    else {
                        XTypedServices.SetList<ModuleDefinition>(this.ModuleField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ModuleDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ModuleXName, typeof(ModuleDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class ModuleReference : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ModuleReference", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator ModuleReference(XElement xe) { return XTypedServices.ToXTypedElement<ModuleReference>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ModuleReference() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ModuleReference>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Module*)
    /// </para>
    /// </summary>
    public partial class ModuleReferences : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ModuleXName = System.Xml.Linq.XName.Get("Module", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ModuleReference> ModuleField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ModuleReferences", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ModuleReferences(XElement xe) { return XTypedServices.ToXTypedElement<ModuleReferences>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ModuleReferences() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ModuleXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Module*)
        /// </para>
        /// </summary>
        public ModuleReferences() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Module*)
        /// </para>
        /// </summary>
        public virtual IList<ModuleReference> Module {
            get {
                if ((this.ModuleField == null)) {
                    this.ModuleField = new XTypedList<ModuleReference>(this, LinqToXsdTypeManager.Instance, ModuleXName);
                }
                return this.ModuleField;
            }
            set {
                if ((value == null)) {
                    this.ModuleField = null;
                }
                else {
                    if ((this.ModuleField == null)) {
                        this.ModuleField = XTypedList<ModuleReference>.Initialize(this, LinqToXsdTypeManager.Instance, value, ModuleXName);
                    }
                    else {
                        XTypedServices.SetList<ModuleReference>(this.ModuleField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ModuleReferences>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ModuleXName, typeof(ModuleReference));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (CHOICE*)
    /// </para>
    /// </summary>
    public partial class CHOICEDEFINITIONS : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CHOICEXName = System.Xml.Linq.XName.Get("CHOICE", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CHOICEDEFINITION> CHOICEField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CHOICEDEFINITIONS", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CHOICEDEFINITIONS(XElement xe) { return XTypedServices.ToXTypedElement<CHOICEDEFINITIONS>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CHOICEDEFINITIONS() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(CHOICEXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CHOICE*)
        /// </para>
        /// </summary>
        public CHOICEDEFINITIONS() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CHOICE*)
        /// </para>
        /// </summary>
        public virtual IList<CHOICEDEFINITION> CHOICE {
            get {
                if ((this.CHOICEField == null)) {
                    this.CHOICEField = new XTypedList<CHOICEDEFINITION>(this, LinqToXsdTypeManager.Instance, CHOICEXName);
                }
                return this.CHOICEField;
            }
            set {
                if ((value == null)) {
                    this.CHOICEField = null;
                }
                else {
                    if ((this.CHOICEField == null)) {
                        this.CHOICEField = XTypedList<CHOICEDEFINITION>.Initialize(this, LinqToXsdTypeManager.Instance, value, CHOICEXName);
                    }
                    else {
                        XTypedServices.SetList<CHOICEDEFINITION>(this.CHOICEField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CHOICEDEFINITIONS>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(CHOICEXName, typeof(CHOICEDEFINITION));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class CHOICEDEFINITION : XTypedElement, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CHOICEDEFINITION", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator CHOICEDEFINITION(XElement xe) { return XTypedServices.ToXTypedElement<CHOICEDEFINITION>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public CHOICEDEFINITION() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CHOICEDEFINITION>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (MAPPING*)
    /// </para>
    /// </summary>
    public partial class MAPPINGDEFINITIONS : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MAPPINGXName = System.Xml.Linq.XName.Get("MAPPING", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MAPPINGDEFINITION> MAPPINGField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("MAPPINGDEFINITIONS", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator MAPPINGDEFINITIONS(XElement xe) { return XTypedServices.ToXTypedElement<MAPPINGDEFINITIONS>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MAPPINGDEFINITIONS() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(MAPPINGXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (MAPPING*)
        /// </para>
        /// </summary>
        public MAPPINGDEFINITIONS() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (MAPPING*)
        /// </para>
        /// </summary>
        public virtual IList<MAPPINGDEFINITION> MAPPING {
            get {
                if ((this.MAPPINGField == null)) {
                    this.MAPPINGField = new XTypedList<MAPPINGDEFINITION>(this, LinqToXsdTypeManager.Instance, MAPPINGXName);
                }
                return this.MAPPINGField;
            }
            set {
                if ((value == null)) {
                    this.MAPPINGField = null;
                }
                else {
                    if ((this.MAPPINGField == null)) {
                        this.MAPPINGField = XTypedList<MAPPINGDEFINITION>.Initialize(this, LinqToXsdTypeManager.Instance, value, MAPPINGXName);
                    }
                    else {
                        XTypedServices.SetList<MAPPINGDEFINITION>(this.MAPPINGField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MAPPINGDEFINITIONS>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(MAPPINGXName, typeof(MAPPINGDEFINITION));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class MAPPINGDEFINITION : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ValueXName = System.Xml.Linq.XName.Get("Value", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("MAPPINGDEFINITION", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator MAPPINGDEFINITION(XElement xe) { return XTypedServices.ToXTypedElement<MAPPINGDEFINITION>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public MAPPINGDEFINITION() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Value {
            get {
                XAttribute x = this.Attribute(ValueXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MAPPINGDEFINITION>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Data?)
    /// </para>
    /// </summary>
    public partial class ListInstance : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DataXName = System.Xml.Linq.XName.Get("Data", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UrlXName = System.Xml.Linq.XName.Get("Url", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName QuickLaunchUrlXName = System.Xml.Linq.XName.Get("QuickLaunchUrl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypeXName = System.Xml.Linq.XName.Get("Type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TitleXName = System.Xml.Linq.XName.Get("Title", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureIdXName = System.Xml.Linq.XName.Get("FeatureId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EmailAliasXName = System.Xml.Linq.XName.Get("EmailAlias", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DescriptionXName = System.Xml.Linq.XName.Get("Description", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CustomSchemaXName = System.Xml.Linq.XName.Get("CustomSchema", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HyperlinkBaseUrlXName = System.Xml.Linq.XName.Get("HyperlinkBaseUrl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VersioningEnabledXName = System.Xml.Linq.XName.Get("VersioningEnabled", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EnableMinorVersionsXName = System.Xml.Linq.XName.Get("EnableMinorVersions", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EnableContentTypesXName = System.Xml.Linq.XName.Get("EnableContentTypes", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ForceCheckoutXName = System.Xml.Linq.XName.Get("ForceCheckout", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RootWebOnlyXName = System.Xml.Linq.XName.Get("RootWebOnly", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ListInstance", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ListInstance(XElement xe) { return XTypedServices.ToXTypedElement<ListInstance>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ListInstance() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DataXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Data?)
        /// </para>
        /// </summary>
        public ListInstance() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Data?)
        /// </para>
        /// </summary>
        public virtual DataDefinition Data {
            get {
                XElement x = this.GetElement(DataXName);
                return ((DataDefinition)(x));
            }
            set {
                this.SetElement(DataXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Url {
            get {
                XAttribute x = this.Attribute(UrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(UrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string QuickLaunchUrl {
            get {
                XAttribute x = this.Attribute(QuickLaunchUrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(QuickLaunchUrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? Type {
            get {
                XAttribute x = this.Attribute(TypeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(TypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Title {
            get {
                XAttribute x = this.Attribute(TitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FeatureId {
            get {
                XAttribute x = this.Attribute(FeatureIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FeatureIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string EmailAlias {
            get {
                XAttribute x = this.Attribute(EmailAliasXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(EmailAliasXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Description {
            get {
                XAttribute x = this.Attribute(DescriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CustomSchema {
            get {
                XAttribute x = this.Attribute(CustomSchemaXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CustomSchemaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string HyperlinkBaseUrl {
            get {
                XAttribute x = this.Attribute(HyperlinkBaseUrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(HyperlinkBaseUrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string VersioningEnabled {
            get {
                XAttribute x = this.Attribute(VersioningEnabledXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(VersioningEnabledXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string EnableMinorVersions {
            get {
                XAttribute x = this.Attribute(EnableMinorVersionsXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(EnableMinorVersionsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string EnableContentTypes {
            get {
                XAttribute x = this.Attribute(EnableContentTypesXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(EnableContentTypesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ForceCheckout {
            get {
                XAttribute x = this.Attribute(ForceCheckoutXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ForceCheckoutXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string RootWebOnly {
            get {
                XAttribute x = this.Attribute(RootWebOnlyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(RootWebOnlyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ListInstance>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(DataXName, typeof(DataDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (List*)
    /// </para>
    /// </summary>
    public partial class ListInstances : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ListXName = System.Xml.Linq.XName.Get("List", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ListInstance> ListField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ListInstances", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ListInstances(XElement xe) { return XTypedServices.ToXTypedElement<ListInstances>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ListInstances() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ListXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (List*)
        /// </para>
        /// </summary>
        public ListInstances() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (List*)
        /// </para>
        /// </summary>
        public virtual IList<ListInstance> List {
            get {
                if ((this.ListField == null)) {
                    this.ListField = new XTypedList<ListInstance>(this, LinqToXsdTypeManager.Instance, ListXName);
                }
                return this.ListField;
            }
            set {
                if ((value == null)) {
                    this.ListField = null;
                }
                else {
                    if ((this.ListField == null)) {
                        this.ListField = XTypedList<ListInstance>.Initialize(this, LinqToXsdTypeManager.Instance, value, ListXName);
                    }
                    else {
                        XTypedServices.SetList<ListInstance>(this.ListField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ListInstances>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ListXName, typeof(ListInstance));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Form*)
    /// </para>
    /// </summary>
    public partial class FormDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FormXName = System.Xml.Linq.XName.Get("Form", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FormDefinition> FormField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FormDefinitions", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FormDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<FormDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FormDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FormXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Form*)
        /// </para>
        /// </summary>
        public FormDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Form*)
        /// </para>
        /// </summary>
        public virtual IList<FormDefinition> Form {
            get {
                if ((this.FormField == null)) {
                    this.FormField = new XTypedList<FormDefinition>(this, LinqToXsdTypeManager.Instance, FormXName);
                }
                return this.FormField;
            }
            set {
                if ((value == null)) {
                    this.FormField = null;
                }
                else {
                    if ((this.FormField == null)) {
                        this.FormField = XTypedList<FormDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, FormXName);
                    }
                    else {
                        XTypedServices.SetList<FormDefinition>(this.FormField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FormDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FormXName, typeof(FormDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Forms)
    /// </para>
    /// </summary>
    public partial class ListMetaDataDefault : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FormsXName = System.Xml.Linq.XName.Get("Forms", "http://schemas.microsoft.com/sharepoint/");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ListMetaDataDefault", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ListMetaDataDefault(XElement xe) { return XTypedServices.ToXTypedElement<ListMetaDataDefault>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ListMetaDataDefault() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FormsXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Forms)
        /// </para>
        /// </summary>
        public ListMetaDataDefault() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Forms)
        /// </para>
        /// </summary>
        public virtual ListFormSet Forms {
            get {
                XElement x = this.GetElement(FormsXName);
                return ((ListFormSet)(x));
            }
            set {
                this.SetElement(FormsXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ListMetaDataDefault>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FormsXName, typeof(ListFormSet));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (View*)
    /// </para>
    /// </summary>
    public partial class ViewDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ViewXName = System.Xml.Linq.XName.Get("View", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ViewDefinition> ViewField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ViewDefinitions", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ViewDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<ViewDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ViewDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ViewXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (View*)
        /// </para>
        /// </summary>
        public ViewDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (View*)
        /// </para>
        /// </summary>
        public virtual IList<ViewDefinition> View {
            get {
                if ((this.ViewField == null)) {
                    this.ViewField = new XTypedList<ViewDefinition>(this, LinqToXsdTypeManager.Instance, ViewXName);
                }
                return this.ViewField;
            }
            set {
                if ((value == null)) {
                    this.ViewField = null;
                }
                else {
                    if ((this.ViewField == null)) {
                        this.ViewField = XTypedList<ViewDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, ViewXName);
                    }
                    else {
                        XTypedServices.SetList<ViewDefinition>(this.ViewField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ViewDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ViewXName, typeof(ViewDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class DwpFileDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LocationXName = System.Xml.Linq.XName.Get("Location", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FileNameXName = System.Xml.Linq.XName.Get("FileName", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DwpFileDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator DwpFileDefinition(XElement xe) { return XTypedServices.ToXTypedElement<DwpFileDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public DwpFileDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Location {
            get {
                XAttribute x = this.Attribute(LocationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(LocationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FileName {
            get {
                XAttribute x = this.Attribute(FileNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FileNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DwpFileDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (DwpFile+)
    /// </para>
    /// </summary>
    public partial class DwpFileDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DwpFileXName = System.Xml.Linq.XName.Get("DwpFile", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DwpFileDefinition> DwpFileField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DwpFileDefinitions", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DwpFileDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<DwpFileDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DwpFileDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DwpFileXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (DwpFile+)
        /// </para>
        /// </summary>
        public DwpFileDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DwpFile+)
        /// </para>
        /// </summary>
        public virtual IList<DwpFileDefinition> DwpFile {
            get {
                if ((this.DwpFileField == null)) {
                    this.DwpFileField = new XTypedList<DwpFileDefinition>(this, LinqToXsdTypeManager.Instance, DwpFileXName);
                }
                return this.DwpFileField;
            }
            set {
                if ((value == null)) {
                    this.DwpFileField = null;
                }
                else {
                    if ((this.DwpFileField == null)) {
                        this.DwpFileField = XTypedList<DwpFileDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, DwpFileXName);
                    }
                    else {
                        XTypedServices.SetList<DwpFileDefinition>(this.DwpFileField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DwpFileDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(DwpFileXName, typeof(DwpFileDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class ClassResourceDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LocationXName = System.Xml.Linq.XName.Get("Location", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FileNameXName = System.Xml.Linq.XName.Get("FileName", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ClassResourceDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator ClassResourceDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ClassResourceDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ClassResourceDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Location {
            get {
                XAttribute x = this.Attribute(LocationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(LocationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FileName {
            get {
                XAttribute x = this.Attribute(FileNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FileNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ClassResourceDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ClassResource*)
    /// </para>
    /// </summary>
    public partial class ClassResourceDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ClassResourceXName = System.Xml.Linq.XName.Get("ClassResource", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ClassResourceDefinition> ClassResourceField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ClassResourceDefinitions", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ClassResourceDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<ClassResourceDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ClassResourceDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ClassResourceXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ClassResource*)
        /// </para>
        /// </summary>
        public ClassResourceDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ClassResource*)
        /// </para>
        /// </summary>
        public virtual IList<ClassResourceDefinition> ClassResource {
            get {
                if ((this.ClassResourceField == null)) {
                    this.ClassResourceField = new XTypedList<ClassResourceDefinition>(this, LinqToXsdTypeManager.Instance, ClassResourceXName);
                }
                return this.ClassResourceField;
            }
            set {
                if ((value == null)) {
                    this.ClassResourceField = null;
                }
                else {
                    if ((this.ClassResourceField == null)) {
                        this.ClassResourceField = XTypedList<ClassResourceDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, ClassResourceXName);
                    }
                    else {
                        XTypedServices.SetList<ClassResourceDefinition>(this.ClassResourceField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ClassResourceDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ClassResourceXName, typeof(ClassResourceDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class BindingRedirectDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OldVersionXName = System.Xml.Linq.XName.Get("OldVersion", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BindingRedirectDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator BindingRedirectDefinition(XElement xe) { return XTypedServices.ToXTypedElement<BindingRedirectDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public BindingRedirectDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string OldVersion {
            get {
                XAttribute x = this.Attribute(OldVersionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(OldVersionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BindingRedirectDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (BindingRedirect*)
    /// </para>
    /// </summary>
    public partial class BindingRedirectDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BindingRedirectXName = System.Xml.Linq.XName.Get("BindingRedirect", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<BindingRedirectDefinition> BindingRedirectField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BindingRedirectDefinitions", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator BindingRedirectDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<BindingRedirectDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static BindingRedirectDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(BindingRedirectXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (BindingRedirect*)
        /// </para>
        /// </summary>
        public BindingRedirectDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (BindingRedirect*)
        /// </para>
        /// </summary>
        public virtual IList<BindingRedirectDefinition> BindingRedirect {
            get {
                if ((this.BindingRedirectField == null)) {
                    this.BindingRedirectField = new XTypedList<BindingRedirectDefinition>(this, LinqToXsdTypeManager.Instance, BindingRedirectXName);
                }
                return this.BindingRedirectField;
            }
            set {
                if ((value == null)) {
                    this.BindingRedirectField = null;
                }
                else {
                    if ((this.BindingRedirectField == null)) {
                        this.BindingRedirectField = XTypedList<BindingRedirectDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, BindingRedirectXName);
                    }
                    else {
                        XTypedServices.SetList<BindingRedirectDefinition>(this.BindingRedirectField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BindingRedirectDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(BindingRedirectXName, typeof(BindingRedirectDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class RowLimitDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PagedXName = System.Xml.Linq.XName.Get("Paged", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RowLimitDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator RowLimitDefinition(XElement xe) { return XTypedServices.ToXTypedElement<RowLimitDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public RowLimitDefinition() {
        }
        
        public virtual int TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Paged {
            get {
                XAttribute x = this.Attribute(PagedXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PagedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RowLimitDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ViewStyleReference : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IDXName = System.Xml.Linq.XName.Get("ID", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ViewStyleReference", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator ViewStyleReference(XElement xe) { return XTypedServices.ToXTypedElement<ViewStyleReference>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ViewStyleReference() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? ID {
            get {
                XAttribute x = this.Attribute(IDXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(IDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ViewStyleReference>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ElementManifests?, Properties?, ActivationDependencies?, UpgradeActions?)
    /// </para>
    /// </summary>
    public partial class FeatureDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ElementManifestsXName = System.Xml.Linq.XName.Get("ElementManifests", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertiesXName = System.Xml.Linq.XName.Get("Properties", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ActivationDependenciesXName = System.Xml.Linq.XName.Get("ActivationDependencies", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UpgradeActionsXName = System.Xml.Linq.XName.Get("UpgradeActions", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TitleXName = System.Xml.Linq.XName.Get("Title", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DescriptionXName = System.Xml.Linq.XName.Get("Description", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VersionXName = System.Xml.Linq.XName.Get("Version", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ScopeXName = System.Xml.Linq.XName.Get("Scope", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ReceiverAssemblyXName = System.Xml.Linq.XName.Get("ReceiverAssembly", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ReceiverClassXName = System.Xml.Linq.XName.Get("ReceiverClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CreatorXName = System.Xml.Linq.XName.Get("Creator", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DefaultResourceFileXName = System.Xml.Linq.XName.Get("DefaultResourceFile", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HiddenXName = System.Xml.Linq.XName.Get("Hidden", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SolutionIdXName = System.Xml.Linq.XName.Get("SolutionId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ActivateOnDefaultXName = System.Xml.Linq.XName.Get("ActivateOnDefault", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AutoActivateInCentralAdminXName = System.Xml.Linq.XName.Get("AutoActivateInCentralAdmin", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AlwaysForceInstallXName = System.Xml.Linq.XName.Get("AlwaysForceInstall", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RequireResourcesXName = System.Xml.Linq.XName.Get("RequireResources", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageUrlXName = System.Xml.Linq.XName.Get("ImageUrl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageUrlAltTextXName = System.Xml.Linq.XName.Get("ImageUrlAltText", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UIVersionXName = System.Xml.Linq.XName.Get("UIVersion", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FeatureDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator FeatureDefinition(XElement xe) { return XTypedServices.ToXTypedElement<FeatureDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FeatureDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ElementManifests?, Properties?, ActivationDependencies?, UpgradeActions?)
        /// </para>
        /// </summary>
        public FeatureDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ElementManifests?, Properties?, ActivationDependencies?, UpgradeActions?)
        /// </para>
        /// </summary>
        public virtual ElementManifestReferences ElementManifests {
            get {
                XElement x = this.GetElement(ElementManifestsXName);
                return ((ElementManifestReferences)(x));
            }
            set {
                this.SetElement(ElementManifestsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ElementManifests?, Properties?, ActivationDependencies?, UpgradeActions?)
        /// </para>
        /// </summary>
        public virtual FeaturePropertyDefinitions Properties {
            get {
                XElement x = this.GetElement(PropertiesXName);
                return ((FeaturePropertyDefinitions)(x));
            }
            set {
                this.SetElement(PropertiesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ElementManifests?, Properties?, ActivationDependencies?, UpgradeActions?)
        /// </para>
        /// </summary>
        public virtual FeatureActivationDependencyDefinitions ActivationDependencies {
            get {
                XElement x = this.GetElement(ActivationDependenciesXName);
                return ((FeatureActivationDependencyDefinitions)(x));
            }
            set {
                this.SetElement(ActivationDependenciesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ElementManifests?, Properties?, ActivationDependencies?, UpgradeActions?)
        /// </para>
        /// </summary>
        public virtual UpgradeActionsDefinition UpgradeActions {
            get {
                XElement x = this.GetElement(UpgradeActionsXName);
                return ((UpgradeActionsDefinition)(x));
            }
            set {
                this.SetElement(UpgradeActionsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Title {
            get {
                XAttribute x = this.Attribute(TitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Description {
            get {
                XAttribute x = this.Attribute(DescriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Version {
            get {
                XAttribute x = this.Attribute(VersionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(VersionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.FeatureScope Scope {
            get {
                XAttribute x = this.Attribute(ScopeXName);
                return ((Microsoft.Schemas.SharePoint.FeatureScope)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.FeatureScope), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ScopeXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ReceiverAssembly {
            get {
                XAttribute x = this.Attribute(ReceiverAssemblyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ReceiverAssemblyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ReceiverClass {
            get {
                XAttribute x = this.Attribute(ReceiverClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ReceiverClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Creator {
            get {
                XAttribute x = this.Attribute(CreatorXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CreatorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DefaultResourceFile {
            get {
                XAttribute x = this.Attribute(DefaultResourceFileXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DefaultResourceFileXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Hidden {
            get {
                XAttribute x = this.Attribute(HiddenXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(HiddenXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SolutionId {
            get {
                XAttribute x = this.Attribute(SolutionIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SolutionIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ActivateOnDefault {
            get {
                XAttribute x = this.Attribute(ActivateOnDefaultXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ActivateOnDefaultXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string AutoActivateInCentralAdmin {
            get {
                XAttribute x = this.Attribute(AutoActivateInCentralAdminXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AutoActivateInCentralAdminXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string AlwaysForceInstall {
            get {
                XAttribute x = this.Attribute(AlwaysForceInstallXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AlwaysForceInstallXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string RequireResources {
            get {
                XAttribute x = this.Attribute(RequireResourcesXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(RequireResourcesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ImageUrl {
            get {
                XAttribute x = this.Attribute(ImageUrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageUrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ImageUrlAltText {
            get {
                XAttribute x = this.Attribute(ImageUrlAltTextXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageUrlAltTextXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string UIVersion {
            get {
                XAttribute x = this.Attribute(UIVersionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(UIVersionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FeatureDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ElementManifestsXName, typeof(ElementManifestReferences));
            localElementDictionary.Add(PropertiesXName, typeof(FeaturePropertyDefinitions));
            localElementDictionary.Add(ActivationDependenciesXName, typeof(FeatureActivationDependencyDefinitions));
            localElementDictionary.Add(UpgradeActionsXName, typeof(UpgradeActionsDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class FeatureVersion {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d+\\.\\d+\\.\\d+\\.\\d+"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private FeatureVersion() {
        }
    }
    
    public enum FeatureScope {
        
        Farm,
        
        WebApplication,
        
        Site,
        
        Web,
    }
    
    public sealed class FeatureScopeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Farm",
                        "WebApplication",
                        "Site",
                        "Web"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private FeatureScopeValidator() {
        }
    }
    
    public partial class ElementManifestReference : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LocationXName = System.Xml.Linq.XName.Get("Location", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ElementManifestReference", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator ElementManifestReference(XElement xe) { return XTypedServices.ToXTypedElement<ElementManifestReference>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ElementManifestReference() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Location {
            get {
                XAttribute x = this.Attribute(LocationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(LocationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ElementManifestReference>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((ElementManifest* | ElementFile*)*)
    /// </para>
    /// </summary>
    public partial class ElementManifestReferences : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ElementManifestXName = System.Xml.Linq.XName.Get("ElementManifest", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ElementManifestReference> ElementManifestField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ElementFileXName = System.Xml.Linq.XName.Get("ElementFile", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ElementManifestReference> ElementFileField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ElementManifestReferences", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ElementManifestReferences(XElement xe) { return XTypedServices.ToXTypedElement<ElementManifestReferences>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ElementManifestReferences() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(ElementManifestXName), new NamedContentModelEntity(ElementFileXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((ElementManifest* | ElementFile*)*)
        /// </para>
        /// </summary>
        public ElementManifestReferences() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ElementManifest* | ElementFile*)*)
        /// </para>
        /// </summary>
        public virtual IList<ElementManifestReference> ElementManifest {
            get {
                if ((this.ElementManifestField == null)) {
                    this.ElementManifestField = new XTypedList<ElementManifestReference>(this, LinqToXsdTypeManager.Instance, ElementManifestXName);
                }
                return this.ElementManifestField;
            }
            set {
                if ((value == null)) {
                    this.ElementManifestField = null;
                }
                else {
                    if ((this.ElementManifestField == null)) {
                        this.ElementManifestField = XTypedList<ElementManifestReference>.Initialize(this, LinqToXsdTypeManager.Instance, value, ElementManifestXName);
                    }
                    else {
                        XTypedServices.SetList<ElementManifestReference>(this.ElementManifestField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ElementManifest* | ElementFile*)*)
        /// </para>
        /// </summary>
        public virtual IList<ElementManifestReference> ElementFile {
            get {
                if ((this.ElementFileField == null)) {
                    this.ElementFileField = new XTypedList<ElementManifestReference>(this, LinqToXsdTypeManager.Instance, ElementFileXName);
                }
                return this.ElementFileField;
            }
            set {
                if ((value == null)) {
                    this.ElementFileField = null;
                }
                else {
                    if ((this.ElementFileField == null)) {
                        this.ElementFileField = XTypedList<ElementManifestReference>.Initialize(this, LinqToXsdTypeManager.Instance, value, ElementFileXName);
                    }
                    else {
                        XTypedServices.SetList<ElementManifestReference>(this.ElementFileField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ElementManifestReferences>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ElementManifestXName, typeof(ElementManifestReference));
            localElementDictionary.Add(ElementFileXName, typeof(ElementManifestReference));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
    /// </para>
    /// </summary>
    public partial class ElementDefinitionCollection : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ContentTypeXName = System.Xml.Linq.XName.Get("ContentType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ContentTypeDefinition> ContentTypeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ContentTypeBindingXName = System.Xml.Linq.XName.Get("ContentTypeBinding", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ContentTypeBindingDefinition> ContentTypeBindingField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DocumentConverterXName = System.Xml.Linq.XName.Get("DocumentConverter", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DocumentConverterDefinition> DocumentConverterField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureSiteTemplateAssociationXName = System.Xml.Linq.XName.Get("FeatureSiteTemplateAssociation", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FeatureSiteTemplateAssociationDefinition> FeatureSiteTemplateAssociationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldXName = System.Xml.Linq.XName.Get("Field", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SharedFieldDefinition> FieldField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CustomActionXName = System.Xml.Linq.XName.Get("CustomAction", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CustomActionDefinition> CustomActionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CustomActionGroupXName = System.Xml.Linq.XName.Get("CustomActionGroup", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CustomActionGroupDefinition> CustomActionGroupField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HideCustomActionXName = System.Xml.Linq.XName.Get("HideCustomAction", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<HideCustomActionDefinition> HideCustomActionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ModuleXName = System.Xml.Linq.XName.Get("Module", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ModuleDefinition> ModuleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ListInstanceXName = System.Xml.Linq.XName.Get("ListInstance", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ListInstanceDefinition> ListInstanceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ListTemplateXName = System.Xml.Linq.XName.Get("ListTemplate", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ListTemplateDefinition> ListTemplateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ControlXName = System.Xml.Linq.XName.Get("Control", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DelegateControlDefinition> ControlField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ReceiversXName = System.Xml.Linq.XName.Get("Receivers", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ReceiverDefinitionCollection> ReceiversField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WorkflowXName = System.Xml.Linq.XName.Get("Workflow", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<WorkflowDefinition> WorkflowField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UserMigratorXName = System.Xml.Linq.XName.Get("UserMigrator", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserMigratorDefinition> UserMigratorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GroupMigratorXName = System.Xml.Linq.XName.Get("GroupMigrator", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GroupMigratorDefinition> GroupMigratorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WebPartAdderExtensionXName = System.Xml.Linq.XName.Get("WebPartAdderExtension", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<WebPartAdderExtensionDefinition> WebPartAdderExtensionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WebTemplateXName = System.Xml.Linq.XName.Get("WebTemplate", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<WebTemplateDefinition> WebTemplateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WorkflowAssociationXName = System.Xml.Linq.XName.Get("WorkflowAssociation", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<WorkflowAssociationDefinition> WorkflowAssociationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertyBagXName = System.Xml.Linq.XName.Get("PropertyBag", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PropertyBagDefinition> PropertyBagField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WorkflowActionsXName = System.Xml.Linq.XName.Get("WorkflowActions", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<WorkflowActionsDefinition> WorkflowActionsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ElementDefinitionCollection", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ElementDefinitionCollection(XElement xe) { return XTypedServices.ToXTypedElement<ElementDefinitionCollection>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ElementDefinitionCollection() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(ContentTypeXName), new NamedContentModelEntity(ContentTypeBindingXName), new NamedContentModelEntity(DocumentConverterXName), new NamedContentModelEntity(FeatureSiteTemplateAssociationXName), new NamedContentModelEntity(FieldXName), new NamedContentModelEntity(CustomActionXName), new NamedContentModelEntity(CustomActionGroupXName), new NamedContentModelEntity(HideCustomActionXName), new NamedContentModelEntity(ModuleXName), new NamedContentModelEntity(ListInstanceXName), new NamedContentModelEntity(ListTemplateXName), new NamedContentModelEntity(ControlXName), new NamedContentModelEntity(ReceiversXName), new NamedContentModelEntity(WorkflowXName), new NamedContentModelEntity(UserMigratorXName), new NamedContentModelEntity(GroupMigratorXName), new NamedContentModelEntity(WebPartAdderExtensionXName), new NamedContentModelEntity(WebTemplateXName), new NamedContentModelEntity(WorkflowAssociationXName), new NamedContentModelEntity(PropertyBagXName), new NamedContentModelEntity(WorkflowActionsXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public ElementDefinitionCollection() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public virtual IList<ContentTypeDefinition> ContentType {
            get {
                if ((this.ContentTypeField == null)) {
                    this.ContentTypeField = new XTypedList<ContentTypeDefinition>(this, LinqToXsdTypeManager.Instance, ContentTypeXName);
                }
                return this.ContentTypeField;
            }
            set {
                if ((value == null)) {
                    this.ContentTypeField = null;
                }
                else {
                    if ((this.ContentTypeField == null)) {
                        this.ContentTypeField = XTypedList<ContentTypeDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, ContentTypeXName);
                    }
                    else {
                        XTypedServices.SetList<ContentTypeDefinition>(this.ContentTypeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public virtual IList<ContentTypeBindingDefinition> ContentTypeBinding {
            get {
                if ((this.ContentTypeBindingField == null)) {
                    this.ContentTypeBindingField = new XTypedList<ContentTypeBindingDefinition>(this, LinqToXsdTypeManager.Instance, ContentTypeBindingXName);
                }
                return this.ContentTypeBindingField;
            }
            set {
                if ((value == null)) {
                    this.ContentTypeBindingField = null;
                }
                else {
                    if ((this.ContentTypeBindingField == null)) {
                        this.ContentTypeBindingField = XTypedList<ContentTypeBindingDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, ContentTypeBindingXName);
                    }
                    else {
                        XTypedServices.SetList<ContentTypeBindingDefinition>(this.ContentTypeBindingField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public virtual IList<DocumentConverterDefinition> DocumentConverter {
            get {
                if ((this.DocumentConverterField == null)) {
                    this.DocumentConverterField = new XTypedList<DocumentConverterDefinition>(this, LinqToXsdTypeManager.Instance, DocumentConverterXName);
                }
                return this.DocumentConverterField;
            }
            set {
                if ((value == null)) {
                    this.DocumentConverterField = null;
                }
                else {
                    if ((this.DocumentConverterField == null)) {
                        this.DocumentConverterField = XTypedList<DocumentConverterDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, DocumentConverterXName);
                    }
                    else {
                        XTypedServices.SetList<DocumentConverterDefinition>(this.DocumentConverterField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public virtual IList<FeatureSiteTemplateAssociationDefinition> FeatureSiteTemplateAssociation {
            get {
                if ((this.FeatureSiteTemplateAssociationField == null)) {
                    this.FeatureSiteTemplateAssociationField = new XTypedList<FeatureSiteTemplateAssociationDefinition>(this, LinqToXsdTypeManager.Instance, FeatureSiteTemplateAssociationXName);
                }
                return this.FeatureSiteTemplateAssociationField;
            }
            set {
                if ((value == null)) {
                    this.FeatureSiteTemplateAssociationField = null;
                }
                else {
                    if ((this.FeatureSiteTemplateAssociationField == null)) {
                        this.FeatureSiteTemplateAssociationField = XTypedList<FeatureSiteTemplateAssociationDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureSiteTemplateAssociationXName);
                    }
                    else {
                        XTypedServices.SetList<FeatureSiteTemplateAssociationDefinition>(this.FeatureSiteTemplateAssociationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public virtual IList<SharedFieldDefinition> Field {
            get {
                if ((this.FieldField == null)) {
                    this.FieldField = new XTypedList<SharedFieldDefinition>(this, LinqToXsdTypeManager.Instance, FieldXName);
                }
                return this.FieldField;
            }
            set {
                if ((value == null)) {
                    this.FieldField = null;
                }
                else {
                    if ((this.FieldField == null)) {
                        this.FieldField = XTypedList<SharedFieldDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldXName);
                    }
                    else {
                        XTypedServices.SetList<SharedFieldDefinition>(this.FieldField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public virtual IList<CustomActionDefinition> CustomAction {
            get {
                if ((this.CustomActionField == null)) {
                    this.CustomActionField = new XTypedList<CustomActionDefinition>(this, LinqToXsdTypeManager.Instance, CustomActionXName);
                }
                return this.CustomActionField;
            }
            set {
                if ((value == null)) {
                    this.CustomActionField = null;
                }
                else {
                    if ((this.CustomActionField == null)) {
                        this.CustomActionField = XTypedList<CustomActionDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, CustomActionXName);
                    }
                    else {
                        XTypedServices.SetList<CustomActionDefinition>(this.CustomActionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public virtual IList<CustomActionGroupDefinition> CustomActionGroup {
            get {
                if ((this.CustomActionGroupField == null)) {
                    this.CustomActionGroupField = new XTypedList<CustomActionGroupDefinition>(this, LinqToXsdTypeManager.Instance, CustomActionGroupXName);
                }
                return this.CustomActionGroupField;
            }
            set {
                if ((value == null)) {
                    this.CustomActionGroupField = null;
                }
                else {
                    if ((this.CustomActionGroupField == null)) {
                        this.CustomActionGroupField = XTypedList<CustomActionGroupDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, CustomActionGroupXName);
                    }
                    else {
                        XTypedServices.SetList<CustomActionGroupDefinition>(this.CustomActionGroupField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public virtual IList<HideCustomActionDefinition> HideCustomAction {
            get {
                if ((this.HideCustomActionField == null)) {
                    this.HideCustomActionField = new XTypedList<HideCustomActionDefinition>(this, LinqToXsdTypeManager.Instance, HideCustomActionXName);
                }
                return this.HideCustomActionField;
            }
            set {
                if ((value == null)) {
                    this.HideCustomActionField = null;
                }
                else {
                    if ((this.HideCustomActionField == null)) {
                        this.HideCustomActionField = XTypedList<HideCustomActionDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, HideCustomActionXName);
                    }
                    else {
                        XTypedServices.SetList<HideCustomActionDefinition>(this.HideCustomActionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public virtual IList<ModuleDefinition> Module {
            get {
                if ((this.ModuleField == null)) {
                    this.ModuleField = new XTypedList<ModuleDefinition>(this, LinqToXsdTypeManager.Instance, ModuleXName);
                }
                return this.ModuleField;
            }
            set {
                if ((value == null)) {
                    this.ModuleField = null;
                }
                else {
                    if ((this.ModuleField == null)) {
                        this.ModuleField = XTypedList<ModuleDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, ModuleXName);
                    }
                    else {
                        XTypedServices.SetList<ModuleDefinition>(this.ModuleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public virtual IList<ListInstanceDefinition> ListInstance {
            get {
                if ((this.ListInstanceField == null)) {
                    this.ListInstanceField = new XTypedList<ListInstanceDefinition>(this, LinqToXsdTypeManager.Instance, ListInstanceXName);
                }
                return this.ListInstanceField;
            }
            set {
                if ((value == null)) {
                    this.ListInstanceField = null;
                }
                else {
                    if ((this.ListInstanceField == null)) {
                        this.ListInstanceField = XTypedList<ListInstanceDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, ListInstanceXName);
                    }
                    else {
                        XTypedServices.SetList<ListInstanceDefinition>(this.ListInstanceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public virtual IList<ListTemplateDefinition> ListTemplate {
            get {
                if ((this.ListTemplateField == null)) {
                    this.ListTemplateField = new XTypedList<ListTemplateDefinition>(this, LinqToXsdTypeManager.Instance, ListTemplateXName);
                }
                return this.ListTemplateField;
            }
            set {
                if ((value == null)) {
                    this.ListTemplateField = null;
                }
                else {
                    if ((this.ListTemplateField == null)) {
                        this.ListTemplateField = XTypedList<ListTemplateDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, ListTemplateXName);
                    }
                    else {
                        XTypedServices.SetList<ListTemplateDefinition>(this.ListTemplateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public virtual IList<DelegateControlDefinition> Control {
            get {
                if ((this.ControlField == null)) {
                    this.ControlField = new XTypedList<DelegateControlDefinition>(this, LinqToXsdTypeManager.Instance, ControlXName);
                }
                return this.ControlField;
            }
            set {
                if ((value == null)) {
                    this.ControlField = null;
                }
                else {
                    if ((this.ControlField == null)) {
                        this.ControlField = XTypedList<DelegateControlDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, ControlXName);
                    }
                    else {
                        XTypedServices.SetList<DelegateControlDefinition>(this.ControlField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public virtual IList<ReceiverDefinitionCollection> Receivers {
            get {
                if ((this.ReceiversField == null)) {
                    this.ReceiversField = new XTypedList<ReceiverDefinitionCollection>(this, LinqToXsdTypeManager.Instance, ReceiversXName);
                }
                return this.ReceiversField;
            }
            set {
                if ((value == null)) {
                    this.ReceiversField = null;
                }
                else {
                    if ((this.ReceiversField == null)) {
                        this.ReceiversField = XTypedList<ReceiverDefinitionCollection>.Initialize(this, LinqToXsdTypeManager.Instance, value, ReceiversXName);
                    }
                    else {
                        XTypedServices.SetList<ReceiverDefinitionCollection>(this.ReceiversField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public virtual IList<WorkflowDefinition> Workflow {
            get {
                if ((this.WorkflowField == null)) {
                    this.WorkflowField = new XTypedList<WorkflowDefinition>(this, LinqToXsdTypeManager.Instance, WorkflowXName);
                }
                return this.WorkflowField;
            }
            set {
                if ((value == null)) {
                    this.WorkflowField = null;
                }
                else {
                    if ((this.WorkflowField == null)) {
                        this.WorkflowField = XTypedList<WorkflowDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, WorkflowXName);
                    }
                    else {
                        XTypedServices.SetList<WorkflowDefinition>(this.WorkflowField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public virtual IList<UserMigratorDefinition> UserMigrator {
            get {
                if ((this.UserMigratorField == null)) {
                    this.UserMigratorField = new XTypedList<UserMigratorDefinition>(this, LinqToXsdTypeManager.Instance, UserMigratorXName);
                }
                return this.UserMigratorField;
            }
            set {
                if ((value == null)) {
                    this.UserMigratorField = null;
                }
                else {
                    if ((this.UserMigratorField == null)) {
                        this.UserMigratorField = XTypedList<UserMigratorDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, UserMigratorXName);
                    }
                    else {
                        XTypedServices.SetList<UserMigratorDefinition>(this.UserMigratorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public virtual IList<GroupMigratorDefinition> GroupMigrator {
            get {
                if ((this.GroupMigratorField == null)) {
                    this.GroupMigratorField = new XTypedList<GroupMigratorDefinition>(this, LinqToXsdTypeManager.Instance, GroupMigratorXName);
                }
                return this.GroupMigratorField;
            }
            set {
                if ((value == null)) {
                    this.GroupMigratorField = null;
                }
                else {
                    if ((this.GroupMigratorField == null)) {
                        this.GroupMigratorField = XTypedList<GroupMigratorDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, GroupMigratorXName);
                    }
                    else {
                        XTypedServices.SetList<GroupMigratorDefinition>(this.GroupMigratorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public virtual IList<WebPartAdderExtensionDefinition> WebPartAdderExtension {
            get {
                if ((this.WebPartAdderExtensionField == null)) {
                    this.WebPartAdderExtensionField = new XTypedList<WebPartAdderExtensionDefinition>(this, LinqToXsdTypeManager.Instance, WebPartAdderExtensionXName);
                }
                return this.WebPartAdderExtensionField;
            }
            set {
                if ((value == null)) {
                    this.WebPartAdderExtensionField = null;
                }
                else {
                    if ((this.WebPartAdderExtensionField == null)) {
                        this.WebPartAdderExtensionField = XTypedList<WebPartAdderExtensionDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, WebPartAdderExtensionXName);
                    }
                    else {
                        XTypedServices.SetList<WebPartAdderExtensionDefinition>(this.WebPartAdderExtensionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public virtual IList<WebTemplateDefinition> WebTemplate {
            get {
                if ((this.WebTemplateField == null)) {
                    this.WebTemplateField = new XTypedList<WebTemplateDefinition>(this, LinqToXsdTypeManager.Instance, WebTemplateXName);
                }
                return this.WebTemplateField;
            }
            set {
                if ((value == null)) {
                    this.WebTemplateField = null;
                }
                else {
                    if ((this.WebTemplateField == null)) {
                        this.WebTemplateField = XTypedList<WebTemplateDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, WebTemplateXName);
                    }
                    else {
                        XTypedServices.SetList<WebTemplateDefinition>(this.WebTemplateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public virtual IList<WorkflowAssociationDefinition> WorkflowAssociation {
            get {
                if ((this.WorkflowAssociationField == null)) {
                    this.WorkflowAssociationField = new XTypedList<WorkflowAssociationDefinition>(this, LinqToXsdTypeManager.Instance, WorkflowAssociationXName);
                }
                return this.WorkflowAssociationField;
            }
            set {
                if ((value == null)) {
                    this.WorkflowAssociationField = null;
                }
                else {
                    if ((this.WorkflowAssociationField == null)) {
                        this.WorkflowAssociationField = XTypedList<WorkflowAssociationDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, WorkflowAssociationXName);
                    }
                    else {
                        XTypedServices.SetList<WorkflowAssociationDefinition>(this.WorkflowAssociationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public virtual IList<PropertyBagDefinition> PropertyBag {
            get {
                if ((this.PropertyBagField == null)) {
                    this.PropertyBagField = new XTypedList<PropertyBagDefinition>(this, LinqToXsdTypeManager.Instance, PropertyBagXName);
                }
                return this.PropertyBagField;
            }
            set {
                if ((value == null)) {
                    this.PropertyBagField = null;
                }
                else {
                    if ((this.PropertyBagField == null)) {
                        this.PropertyBagField = XTypedList<PropertyBagDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropertyBagXName);
                    }
                    else {
                        XTypedServices.SetList<PropertyBagDefinition>(this.PropertyBagField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public virtual IList<WorkflowActionsDefinition> WorkflowActions {
            get {
                if ((this.WorkflowActionsField == null)) {
                    this.WorkflowActionsField = new XTypedList<WorkflowActionsDefinition>(this, LinqToXsdTypeManager.Instance, WorkflowActionsXName);
                }
                return this.WorkflowActionsField;
            }
            set {
                if ((value == null)) {
                    this.WorkflowActionsField = null;
                }
                else {
                    if ((this.WorkflowActionsField == null)) {
                        this.WorkflowActionsField = XTypedList<WorkflowActionsDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, WorkflowActionsXName);
                    }
                    else {
                        XTypedServices.SetList<WorkflowActionsDefinition>(this.WorkflowActionsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ElementDefinitionCollection>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ContentTypeXName, typeof(ContentTypeDefinition));
            localElementDictionary.Add(ContentTypeBindingXName, typeof(ContentTypeBindingDefinition));
            localElementDictionary.Add(DocumentConverterXName, typeof(DocumentConverterDefinition));
            localElementDictionary.Add(FeatureSiteTemplateAssociationXName, typeof(FeatureSiteTemplateAssociationDefinition));
            localElementDictionary.Add(FieldXName, typeof(SharedFieldDefinition));
            localElementDictionary.Add(CustomActionXName, typeof(CustomActionDefinition));
            localElementDictionary.Add(CustomActionGroupXName, typeof(CustomActionGroupDefinition));
            localElementDictionary.Add(HideCustomActionXName, typeof(HideCustomActionDefinition));
            localElementDictionary.Add(ModuleXName, typeof(ModuleDefinition));
            localElementDictionary.Add(ListInstanceXName, typeof(ListInstanceDefinition));
            localElementDictionary.Add(ListTemplateXName, typeof(ListTemplateDefinition));
            localElementDictionary.Add(ControlXName, typeof(DelegateControlDefinition));
            localElementDictionary.Add(ReceiversXName, typeof(ReceiverDefinitionCollection));
            localElementDictionary.Add(WorkflowXName, typeof(WorkflowDefinition));
            localElementDictionary.Add(UserMigratorXName, typeof(UserMigratorDefinition));
            localElementDictionary.Add(GroupMigratorXName, typeof(GroupMigratorDefinition));
            localElementDictionary.Add(WebPartAdderExtensionXName, typeof(WebPartAdderExtensionDefinition));
            localElementDictionary.Add(WebTemplateXName, typeof(WebTemplateDefinition));
            localElementDictionary.Add(WorkflowAssociationXName, typeof(WorkflowAssociationDefinition));
            localElementDictionary.Add(PropertyBagXName, typeof(PropertyBagDefinition));
            localElementDictionary.Add(WorkflowActionsXName, typeof(WorkflowActionsDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Folder?, FieldRefs?, Forms?, XmlDocuments?, DocumentTemplate?)
    /// </para>
    /// </summary>
    public partial class ContentTypeDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FolderXName = System.Xml.Linq.XName.Get("Folder", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldRefsXName = System.Xml.Linq.XName.Get("FieldRefs", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FormsXName = System.Xml.Linq.XName.Get("Forms", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName XmlDocumentsXName = System.Xml.Linq.XName.Get("XmlDocuments", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DocumentTemplateXName = System.Xml.Linq.XName.Get("DocumentTemplate", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BaseTypeXName = System.Xml.Linq.XName.Get("BaseType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IDXName = System.Xml.Linq.XName.Get("ID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GroupXName = System.Xml.Linq.XName.Get("Group", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DocumentTemplate1XName = System.Xml.Linq.XName.Get("DocumentTemplate", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ResourceFolderXName = System.Xml.Linq.XName.Get("ResourceFolder", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ReadOnlyXName = System.Xml.Linq.XName.Get("ReadOnly", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HiddenXName = System.Xml.Linq.XName.Get("Hidden", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InheritsXName = System.Xml.Linq.XName.Get("Inherits", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DescriptionXName = System.Xml.Linq.XName.Get("Description", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SealedXName = System.Xml.Linq.XName.Get("Sealed", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName V2ListTemplateNameXName = System.Xml.Linq.XName.Get("V2ListTemplateName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VersionXName = System.Xml.Linq.XName.Get("Version", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureIdXName = System.Xml.Linq.XName.Get("FeatureId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProgIdXName = System.Xml.Linq.XName.Get("ProgId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RequireClientRenderingOnNewXName = System.Xml.Linq.XName.Get("RequireClientRenderingOnNew", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NewDocumentControlXName = System.Xml.Linq.XName.Get("NewDocumentControl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OverwriteXName = System.Xml.Linq.XName.Get("Overwrite", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PushDownChangedResourceFilesOnlyXName = System.Xml.Linq.XName.Get("PushDownChangedResourceFilesOnly", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ContentTypeDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator ContentTypeDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ContentTypeDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ContentTypeDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Folder?, FieldRefs?, Forms?, XmlDocuments?, DocumentTemplate?)
        /// </para>
        /// </summary>
        public ContentTypeDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Folder?, FieldRefs?, Forms?, XmlDocuments?, DocumentTemplate?)
        /// </para>
        /// </summary>
        public virtual CTFolderDefinition Folder {
            get {
                XElement x = this.GetElement(FolderXName);
                return ((CTFolderDefinition)(x));
            }
            set {
                this.SetElement(FolderXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Folder?, FieldRefs?, Forms?, XmlDocuments?, DocumentTemplate?)
        /// </para>
        /// </summary>
        public virtual CTFieldRefDefinitions FieldRefs {
            get {
                XElement x = this.GetElement(FieldRefsXName);
                return ((CTFieldRefDefinitions)(x));
            }
            set {
                this.SetElement(FieldRefsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Folder?, FieldRefs?, Forms?, XmlDocuments?, DocumentTemplate?)
        /// </para>
        /// </summary>
        public virtual FormDefinitions Forms {
            get {
                XElement x = this.GetElement(FormsXName);
                return ((FormDefinitions)(x));
            }
            set {
                this.SetElement(FormsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Folder?, FieldRefs?, Forms?, XmlDocuments?, DocumentTemplate?)
        /// </para>
        /// </summary>
        public virtual XmlDocumentDefinitionCollection XmlDocuments {
            get {
                XElement x = this.GetElement(XmlDocumentsXName);
                return ((XmlDocumentDefinitionCollection)(x));
            }
            set {
                this.SetElement(XmlDocumentsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Folder?, FieldRefs?, Forms?, XmlDocuments?, DocumentTemplate?)
        /// </para>
        /// </summary>
        public virtual ContentTypeDocumentTemplateDefinition DocumentTemplate {
            get {
                XElement x = this.GetElement(DocumentTemplateXName);
                return ((ContentTypeDocumentTemplateDefinition)(x));
            }
            set {
                this.SetElement(DocumentTemplateXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string BaseType {
            get {
                XAttribute x = this.Attribute(BaseTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(BaseTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ID {
            get {
                XAttribute x = this.Attribute(IDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Group {
            get {
                XAttribute x = this.Attribute(GroupXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(GroupXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DocumentTemplate1 {
            get {
                XAttribute x = this.Attribute(DocumentTemplate1XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DocumentTemplate1XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ResourceFolder {
            get {
                XAttribute x = this.Attribute(ResourceFolderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ResourceFolderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ReadOnly {
            get {
                XAttribute x = this.Attribute(ReadOnlyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ReadOnlyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Hidden {
            get {
                XAttribute x = this.Attribute(HiddenXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(HiddenXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Inherits {
            get {
                XAttribute x = this.Attribute(InheritsXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(InheritsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Description {
            get {
                XAttribute x = this.Attribute(DescriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Sealed {
            get {
                XAttribute x = this.Attribute(SealedXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SealedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string V2ListTemplateName {
            get {
                XAttribute x = this.Attribute(V2ListTemplateNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(V2ListTemplateNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int64? Version {
            get {
                XAttribute x = this.Attribute(VersionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<long>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
            }
            set {
                this.SetAttribute(VersionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FeatureId {
            get {
                XAttribute x = this.Attribute(FeatureIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FeatureIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ProgId {
            get {
                XAttribute x = this.Attribute(ProgIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ProgIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string RequireClientRenderingOnNew {
            get {
                XAttribute x = this.Attribute(RequireClientRenderingOnNewXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(RequireClientRenderingOnNewXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string NewDocumentControl {
            get {
                XAttribute x = this.Attribute(NewDocumentControlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NewDocumentControlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Overwrite {
            get {
                XAttribute x = this.Attribute(OverwriteXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(OverwriteXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string PushDownChangedResourceFilesOnly {
            get {
                XAttribute x = this.Attribute(PushDownChangedResourceFilesOnlyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PushDownChangedResourceFilesOnlyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ContentTypeDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FolderXName, typeof(CTFolderDefinition));
            localElementDictionary.Add(FieldRefsXName, typeof(CTFieldRefDefinitions));
            localElementDictionary.Add(FormsXName, typeof(FormDefinitions));
            localElementDictionary.Add(XmlDocumentsXName, typeof(XmlDocumentDefinitionCollection));
            localElementDictionary.Add(DocumentTemplateXName, typeof(ContentTypeDocumentTemplateDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class FeatureManifestReference : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LocationXName = System.Xml.Linq.XName.Get("Location", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FeatureManifestReference", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator FeatureManifestReference(XElement xe) { return XTypedServices.ToXTypedElement<FeatureManifestReference>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public FeatureManifestReference() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Location {
            get {
                XAttribute x = this.Attribute(LocationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(LocationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FeatureManifestReference>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class SolutionDependencyManifestReference : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SolutionIdXName = System.Xml.Linq.XName.Get("SolutionId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SolutionNameXName = System.Xml.Linq.XName.Get("SolutionName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SolutionTitleXName = System.Xml.Linq.XName.Get("SolutionTitle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SolutionUrlXName = System.Xml.Linq.XName.Get("SolutionUrl", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SolutionDependencyManifestReference", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator SolutionDependencyManifestReference(XElement xe) { return XTypedServices.ToXTypedElement<SolutionDependencyManifestReference>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public SolutionDependencyManifestReference() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string SolutionId {
            get {
                XAttribute x = this.Attribute(SolutionIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SolutionIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SolutionName {
            get {
                XAttribute x = this.Attribute(SolutionNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SolutionNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SolutionTitle {
            get {
                XAttribute x = this.Attribute(SolutionTitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SolutionTitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SolutionUrl {
            get {
                XAttribute x = this.Attribute(SolutionUrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SolutionUrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SolutionDependencyManifestReference>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (FeatureManifests?, SiteDefinitionManifests?, Assemblies?, TemplateFiles?, RootFiles?, ApplicationResourceFiles?, Resources?, DwpFiles?, CodeAccessSecurity?, ActivationDependencies?)
    /// </para>
    /// </summary>
    public partial class SolutionDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureManifestsXName = System.Xml.Linq.XName.Get("FeatureManifests", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SiteDefinitionManifestsXName = System.Xml.Linq.XName.Get("SiteDefinitionManifests", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AssembliesXName = System.Xml.Linq.XName.Get("Assemblies", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TemplateFilesXName = System.Xml.Linq.XName.Get("TemplateFiles", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RootFilesXName = System.Xml.Linq.XName.Get("RootFiles", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ApplicationResourceFilesXName = System.Xml.Linq.XName.Get("ApplicationResourceFiles", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ResourcesXName = System.Xml.Linq.XName.Get("Resources", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DwpFilesXName = System.Xml.Linq.XName.Get("DwpFiles", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CodeAccessSecurityXName = System.Xml.Linq.XName.Get("CodeAccessSecurity", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ActivationDependenciesXName = System.Xml.Linq.XName.Get("ActivationDependencies", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SolutionIdXName = System.Xml.Linq.XName.Get("SolutionId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SharePointProductVersionXName = System.Xml.Linq.XName.Get("SharePointProductVersion", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TitleXName = System.Xml.Linq.XName.Get("Title", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DescriptionXName = System.Xml.Linq.XName.Get("Description", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DeploymentServerTypeXName = System.Xml.Linq.XName.Get("DeploymentServerType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ResetWebServerXName = System.Xml.Linq.XName.Get("ResetWebServer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ResetWebServerModeOnUpgradeXName = System.Xml.Linq.XName.Get("ResetWebServerModeOnUpgrade", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SolutionDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator SolutionDefinition(XElement xe) { return XTypedServices.ToXTypedElement<SolutionDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SolutionDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (FeatureManifests?, SiteDefinitionManifests?, Assemblies?, TemplateFiles?, RootFiles?, ApplicationResourceFiles?, Resources?, DwpFiles?, CodeAccessSecurity?, ActivationDependencies?)
        /// </para>
        /// </summary>
        public SolutionDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FeatureManifests?, SiteDefinitionManifests?, Assemblies?, TemplateFiles?, RootFiles?, ApplicationResourceFiles?, Resources?, DwpFiles?, CodeAccessSecurity?, ActivationDependencies?)
        /// </para>
        /// </summary>
        public virtual FeatureFileReferences FeatureManifests {
            get {
                XElement x = this.GetElement(FeatureManifestsXName);
                return ((FeatureFileReferences)(x));
            }
            set {
                this.SetElement(FeatureManifestsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FeatureManifests?, SiteDefinitionManifests?, Assemblies?, TemplateFiles?, RootFiles?, ApplicationResourceFiles?, Resources?, DwpFiles?, CodeAccessSecurity?, ActivationDependencies?)
        /// </para>
        /// </summary>
        public virtual SiteDefinitionManifestReferences SiteDefinitionManifests {
            get {
                XElement x = this.GetElement(SiteDefinitionManifestsXName);
                return ((SiteDefinitionManifestReferences)(x));
            }
            set {
                this.SetElement(SiteDefinitionManifestsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FeatureManifests?, SiteDefinitionManifests?, Assemblies?, TemplateFiles?, RootFiles?, ApplicationResourceFiles?, Resources?, DwpFiles?, CodeAccessSecurity?, ActivationDependencies?)
        /// </para>
        /// </summary>
        public virtual AssemblyFileReferences Assemblies {
            get {
                XElement x = this.GetElement(AssembliesXName);
                return ((AssemblyFileReferences)(x));
            }
            set {
                this.SetElement(AssembliesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FeatureManifests?, SiteDefinitionManifests?, Assemblies?, TemplateFiles?, RootFiles?, ApplicationResourceFiles?, Resources?, DwpFiles?, CodeAccessSecurity?, ActivationDependencies?)
        /// </para>
        /// </summary>
        public virtual TemplateFileReferences TemplateFiles {
            get {
                XElement x = this.GetElement(TemplateFilesXName);
                return ((TemplateFileReferences)(x));
            }
            set {
                this.SetElement(TemplateFilesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FeatureManifests?, SiteDefinitionManifests?, Assemblies?, TemplateFiles?, RootFiles?, ApplicationResourceFiles?, Resources?, DwpFiles?, CodeAccessSecurity?, ActivationDependencies?)
        /// </para>
        /// </summary>
        public virtual RootFileReferences RootFiles {
            get {
                XElement x = this.GetElement(RootFilesXName);
                return ((RootFileReferences)(x));
            }
            set {
                this.SetElement(RootFilesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FeatureManifests?, SiteDefinitionManifests?, Assemblies?, TemplateFiles?, RootFiles?, ApplicationResourceFiles?, Resources?, DwpFiles?, CodeAccessSecurity?, ActivationDependencies?)
        /// </para>
        /// </summary>
        public virtual ApplicationResourceFileDefinitions ApplicationResourceFiles {
            get {
                XElement x = this.GetElement(ApplicationResourceFilesXName);
                return ((ApplicationResourceFileDefinitions)(x));
            }
            set {
                this.SetElement(ApplicationResourceFilesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FeatureManifests?, SiteDefinitionManifests?, Assemblies?, TemplateFiles?, RootFiles?, ApplicationResourceFiles?, Resources?, DwpFiles?, CodeAccessSecurity?, ActivationDependencies?)
        /// </para>
        /// </summary>
        public virtual ResourceDefinitions Resources {
            get {
                XElement x = this.GetElement(ResourcesXName);
                return ((ResourceDefinitions)(x));
            }
            set {
                this.SetElement(ResourcesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FeatureManifests?, SiteDefinitionManifests?, Assemblies?, TemplateFiles?, RootFiles?, ApplicationResourceFiles?, Resources?, DwpFiles?, CodeAccessSecurity?, ActivationDependencies?)
        /// </para>
        /// </summary>
        public virtual DwpFileDefinitions DwpFiles {
            get {
                XElement x = this.GetElement(DwpFilesXName);
                return ((DwpFileDefinitions)(x));
            }
            set {
                this.SetElement(DwpFilesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FeatureManifests?, SiteDefinitionManifests?, Assemblies?, TemplateFiles?, RootFiles?, ApplicationResourceFiles?, Resources?, DwpFiles?, CodeAccessSecurity?, ActivationDependencies?)
        /// </para>
        /// </summary>
        public virtual CodeAccessSecurityDefinition CodeAccessSecurity {
            get {
                XElement x = this.GetElement(CodeAccessSecurityXName);
                return ((CodeAccessSecurityDefinition)(x));
            }
            set {
                this.SetElement(CodeAccessSecurityXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FeatureManifests?, SiteDefinitionManifests?, Assemblies?, TemplateFiles?, RootFiles?, ApplicationResourceFiles?, Resources?, DwpFiles?, CodeAccessSecurity?, ActivationDependencies?)
        /// </para>
        /// </summary>
        public virtual SolutionDependencyReferences ActivationDependencies {
            get {
                XElement x = this.GetElement(ActivationDependenciesXName);
                return ((SolutionDependencyReferences)(x));
            }
            set {
                this.SetElement(ActivationDependenciesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SolutionId {
            get {
                XAttribute x = this.Attribute(SolutionIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SolutionIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SharePointProductVersion {
            get {
                XAttribute x = this.Attribute(SharePointProductVersionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SharePointProductVersionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Title {
            get {
                XAttribute x = this.Attribute(TitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Description {
            get {
                XAttribute x = this.Attribute(DescriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.DeploymentServerTypeAttr? DeploymentServerType {
            get {
                XAttribute x = this.Attribute(DeploymentServerTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.DeploymentServerTypeAttr)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.DeploymentServerTypeAttr), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(DeploymentServerTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ResetWebServer {
            get {
                XAttribute x = this.Attribute(ResetWebServerXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ResetWebServerXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.ResetWebServerModeOnUpgradeAttr? ResetWebServerModeOnUpgrade {
            get {
                XAttribute x = this.Attribute(ResetWebServerModeOnUpgradeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.ResetWebServerModeOnUpgradeAttr)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.ResetWebServerModeOnUpgradeAttr), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ResetWebServerModeOnUpgradeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SolutionDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureManifestsXName, typeof(FeatureFileReferences));
            localElementDictionary.Add(SiteDefinitionManifestsXName, typeof(SiteDefinitionManifestReferences));
            localElementDictionary.Add(AssembliesXName, typeof(AssemblyFileReferences));
            localElementDictionary.Add(TemplateFilesXName, typeof(TemplateFileReferences));
            localElementDictionary.Add(RootFilesXName, typeof(RootFileReferences));
            localElementDictionary.Add(ApplicationResourceFilesXName, typeof(ApplicationResourceFileDefinitions));
            localElementDictionary.Add(ResourcesXName, typeof(ResourceDefinitions));
            localElementDictionary.Add(DwpFilesXName, typeof(DwpFileDefinitions));
            localElementDictionary.Add(CodeAccessSecurityXName, typeof(CodeAccessSecurityDefinition));
            localElementDictionary.Add(ActivationDependenciesXName, typeof(SolutionDependencyReferences));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum DeploymentServerTypeAttr {
        
        ApplicationServer,
        
        WebFrontEnd,
    }
    
    public sealed class DeploymentServerTypeAttrValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "ApplicationServer",
                        "WebFrontEnd"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private DeploymentServerTypeAttrValidator() {
        }
    }
    
    public enum ResetWebServerModeOnUpgradeAttr {
        
        Recycle,
        
        StartStop,
    }
    
    public sealed class ResetWebServerModeOnUpgradeAttrValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Recycle",
                        "StartStop"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ResetWebServerModeOnUpgradeAttrValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (FeatureManifest+)
    /// </para>
    /// </summary>
    public partial class FeatureFileReferences : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureManifestXName = System.Xml.Linq.XName.Get("FeatureManifest", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FeatureManifestReference> FeatureManifestField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FeatureFileReferences", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FeatureFileReferences(XElement xe) { return XTypedServices.ToXTypedElement<FeatureFileReferences>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FeatureFileReferences() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FeatureManifestXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (FeatureManifest+)
        /// </para>
        /// </summary>
        public FeatureFileReferences() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (FeatureManifest+)
        /// </para>
        /// </summary>
        public virtual IList<FeatureManifestReference> FeatureManifest {
            get {
                if ((this.FeatureManifestField == null)) {
                    this.FeatureManifestField = new XTypedList<FeatureManifestReference>(this, LinqToXsdTypeManager.Instance, FeatureManifestXName);
                }
                return this.FeatureManifestField;
            }
            set {
                if ((value == null)) {
                    this.FeatureManifestField = null;
                }
                else {
                    if ((this.FeatureManifestField == null)) {
                        this.FeatureManifestField = XTypedList<FeatureManifestReference>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureManifestXName);
                    }
                    else {
                        XTypedServices.SetList<FeatureManifestReference>(this.FeatureManifestField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FeatureFileReferences>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureManifestXName, typeof(FeatureManifestReference));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ActivationDependency+)
    /// </para>
    /// </summary>
    public partial class SolutionDependencyReferences : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ActivationDependencyXName = System.Xml.Linq.XName.Get("ActivationDependency", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SolutionDependencyManifestReference> ActivationDependencyField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SolutionDependencyReferences", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SolutionDependencyReferences(XElement xe) { return XTypedServices.ToXTypedElement<SolutionDependencyReferences>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SolutionDependencyReferences() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ActivationDependencyXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ActivationDependency+)
        /// </para>
        /// </summary>
        public SolutionDependencyReferences() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ActivationDependency+)
        /// </para>
        /// </summary>
        public virtual IList<SolutionDependencyManifestReference> ActivationDependency {
            get {
                if ((this.ActivationDependencyField == null)) {
                    this.ActivationDependencyField = new XTypedList<SolutionDependencyManifestReference>(this, LinqToXsdTypeManager.Instance, ActivationDependencyXName);
                }
                return this.ActivationDependencyField;
            }
            set {
                if ((value == null)) {
                    this.ActivationDependencyField = null;
                }
                else {
                    if ((this.ActivationDependencyField == null)) {
                        this.ActivationDependencyField = XTypedList<SolutionDependencyManifestReference>.Initialize(this, LinqToXsdTypeManager.Instance, value, ActivationDependencyXName);
                    }
                    else {
                        XTypedServices.SetList<SolutionDependencyManifestReference>(this.ActivationDependencyField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SolutionDependencyReferences>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ActivationDependencyXName, typeof(SolutionDependencyManifestReference));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (SiteDefinitionManifest+)
    /// </para>
    /// </summary>
    public partial class SiteDefinitionManifestReferences : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SiteDefinitionManifestXName = System.Xml.Linq.XName.Get("SiteDefinitionManifest", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SiteDefinitionManifestFileReference> SiteDefinitionManifestField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SiteDefinitionManifestReferences", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SiteDefinitionManifestReferences(XElement xe) { return XTypedServices.ToXTypedElement<SiteDefinitionManifestReferences>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SiteDefinitionManifestReferences() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SiteDefinitionManifestXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SiteDefinitionManifest+)
        /// </para>
        /// </summary>
        public SiteDefinitionManifestReferences() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SiteDefinitionManifest+)
        /// </para>
        /// </summary>
        public virtual IList<SiteDefinitionManifestFileReference> SiteDefinitionManifest {
            get {
                if ((this.SiteDefinitionManifestField == null)) {
                    this.SiteDefinitionManifestField = new XTypedList<SiteDefinitionManifestFileReference>(this, LinqToXsdTypeManager.Instance, SiteDefinitionManifestXName);
                }
                return this.SiteDefinitionManifestField;
            }
            set {
                if ((value == null)) {
                    this.SiteDefinitionManifestField = null;
                }
                else {
                    if ((this.SiteDefinitionManifestField == null)) {
                        this.SiteDefinitionManifestField = XTypedList<SiteDefinitionManifestFileReference>.Initialize(this, LinqToXsdTypeManager.Instance, value, SiteDefinitionManifestXName);
                    }
                    else {
                        XTypedServices.SetList<SiteDefinitionManifestFileReference>(this.SiteDefinitionManifestField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SiteDefinitionManifestReferences>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SiteDefinitionManifestXName, typeof(SiteDefinitionManifestFileReference));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (WebTempFile+)
    /// </para>
    /// </summary>
    public partial class SiteDefinitionManifestFileReference : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WebTempFileXName = System.Xml.Linq.XName.Get("WebTempFile", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<WebTempFileDefinition> WebTempFileField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LocationXName = System.Xml.Linq.XName.Get("Location", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SiteDefinitionManifestFileReference", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SiteDefinitionManifestFileReference(XElement xe) { return XTypedServices.ToXTypedElement<SiteDefinitionManifestFileReference>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SiteDefinitionManifestFileReference() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(WebTempFileXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (WebTempFile+)
        /// </para>
        /// </summary>
        public SiteDefinitionManifestFileReference() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (WebTempFile+)
        /// </para>
        /// </summary>
        public virtual IList<WebTempFileDefinition> WebTempFile {
            get {
                if ((this.WebTempFileField == null)) {
                    this.WebTempFileField = new XTypedList<WebTempFileDefinition>(this, LinqToXsdTypeManager.Instance, WebTempFileXName);
                }
                return this.WebTempFileField;
            }
            set {
                if ((value == null)) {
                    this.WebTempFileField = null;
                }
                else {
                    if ((this.WebTempFileField == null)) {
                        this.WebTempFileField = XTypedList<WebTempFileDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, WebTempFileXName);
                    }
                    else {
                        XTypedServices.SetList<WebTempFileDefinition>(this.WebTempFileField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Location {
            get {
                XAttribute x = this.Attribute(LocationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(LocationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SiteDefinitionManifestFileReference>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(WebTempFileXName, typeof(WebTempFileDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Fields)
    /// </para>
    /// </summary>
    public partial class SharedFieldSetDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldsXName = System.Xml.Linq.XName.Get("Fields", "http://schemas.microsoft.com/sharepoint/");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SharedFieldSetDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SharedFieldSetDefinition(XElement xe) { return XTypedServices.ToXTypedElement<SharedFieldSetDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SharedFieldSetDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FieldsXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Fields)
        /// </para>
        /// </summary>
        public SharedFieldSetDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Fields)
        /// </para>
        /// </summary>
        public virtual SharedFieldDefinitions Fields {
            get {
                XElement x = this.GetElement(FieldsXName);
                return ((SharedFieldDefinitions)(x));
            }
            set {
                this.SetElement(FieldsXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SharedFieldSetDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FieldsXName, typeof(SharedFieldDefinitions));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Field+)
    /// </para>
    /// </summary>
    public partial class SharedFieldDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldXName = System.Xml.Linq.XName.Get("Field", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SharedFieldDefinition> FieldField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SharedFieldDefinitions", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SharedFieldDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<SharedFieldDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SharedFieldDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FieldXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Field+)
        /// </para>
        /// </summary>
        public SharedFieldDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Field+)
        /// </para>
        /// </summary>
        public virtual IList<SharedFieldDefinition> Field {
            get {
                if ((this.FieldField == null)) {
                    this.FieldField = new XTypedList<SharedFieldDefinition>(this, LinqToXsdTypeManager.Instance, FieldXName);
                }
                return this.FieldField;
            }
            set {
                if ((value == null)) {
                    this.FieldField = null;
                }
                else {
                    if ((this.FieldField == null)) {
                        this.FieldField = XTypedList<SharedFieldDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldXName);
                    }
                    else {
                        XTypedServices.SetList<SharedFieldDefinition>(this.FieldField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SharedFieldDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FieldXName, typeof(SharedFieldDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (CommandUIDefinitions?, CommandUIHandlers?)
    /// </para>
    /// </summary>
    public partial class CommandUIExtensionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandUIDefinitionsXName = System.Xml.Linq.XName.Get("CommandUIDefinitions", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandUIHandlersXName = System.Xml.Linq.XName.Get("CommandUIHandlers", "http://schemas.microsoft.com/sharepoint/");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CommandUIExtensionType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CommandUIExtensionType(XElement xe) { return XTypedServices.ToXTypedElement<CommandUIExtensionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CommandUIExtensionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(CommandUIDefinitionsXName), new NamedContentModelEntity(CommandUIHandlersXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CommandUIDefinitions?, CommandUIHandlers?)
        /// </para>
        /// </summary>
        public CommandUIExtensionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CommandUIDefinitions?, CommandUIHandlers?)
        /// </para>
        /// </summary>
        public virtual CommandUIDefinitionsType CommandUIDefinitions {
            get {
                XElement x = this.GetElement(CommandUIDefinitionsXName);
                return ((CommandUIDefinitionsType)(x));
            }
            set {
                this.SetElement(CommandUIDefinitionsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CommandUIDefinitions?, CommandUIHandlers?)
        /// </para>
        /// </summary>
        public virtual CommandUIHandlersType CommandUIHandlers {
            get {
                XElement x = this.GetElement(CommandUIHandlersXName);
                return ((CommandUIHandlersType)(x));
            }
            set {
                this.SetElement(CommandUIHandlersXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CommandUIExtensionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(CommandUIDefinitionsXName, typeof(CommandUIDefinitionsType));
            localElementDictionary.Add(CommandUIHandlersXName, typeof(CommandUIHandlersType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (CommandUIDefinition+)
    /// </para>
    /// </summary>
    public partial class CommandUIDefinitionsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandUIDefinitionXName = System.Xml.Linq.XName.Get("CommandUIDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CommandUIDefinitionType> CommandUIDefinitionField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CommandUIDefinitionsType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CommandUIDefinitionsType(XElement xe) { return XTypedServices.ToXTypedElement<CommandUIDefinitionsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CommandUIDefinitionsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(CommandUIDefinitionXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CommandUIDefinition+)
        /// </para>
        /// </summary>
        public CommandUIDefinitionsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CommandUIDefinition+)
        /// </para>
        /// </summary>
        public virtual IList<CommandUIDefinitionType> CommandUIDefinition {
            get {
                if ((this.CommandUIDefinitionField == null)) {
                    this.CommandUIDefinitionField = new XTypedList<CommandUIDefinitionType>(this, LinqToXsdTypeManager.Instance, CommandUIDefinitionXName);
                }
                return this.CommandUIDefinitionField;
            }
            set {
                if ((value == null)) {
                    this.CommandUIDefinitionField = null;
                }
                else {
                    if ((this.CommandUIDefinitionField == null)) {
                        this.CommandUIDefinitionField = XTypedList<CommandUIDefinitionType>.Initialize(this, LinqToXsdTypeManager.Instance, value, CommandUIDefinitionXName);
                    }
                    else {
                        XTypedServices.SetList<CommandUIDefinitionType>(this.CommandUIDefinitionField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CommandUIDefinitionsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(CommandUIDefinitionXName, typeof(CommandUIDefinitionType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (CommandUIHandler+)
    /// </para>
    /// </summary>
    public partial class CommandUIHandlersType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandUIHandlerXName = System.Xml.Linq.XName.Get("CommandUIHandler", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CommandUIHandlerType> CommandUIHandlerField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CommandUIHandlersType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CommandUIHandlersType(XElement xe) { return XTypedServices.ToXTypedElement<CommandUIHandlersType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CommandUIHandlersType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(CommandUIHandlerXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CommandUIHandler+)
        /// </para>
        /// </summary>
        public CommandUIHandlersType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CommandUIHandler+)
        /// </para>
        /// </summary>
        public virtual IList<CommandUIHandlerType> CommandUIHandler {
            get {
                if ((this.CommandUIHandlerField == null)) {
                    this.CommandUIHandlerField = new XTypedList<CommandUIHandlerType>(this, LinqToXsdTypeManager.Instance, CommandUIHandlerXName);
                }
                return this.CommandUIHandlerField;
            }
            set {
                if ((value == null)) {
                    this.CommandUIHandlerField = null;
                }
                else {
                    if ((this.CommandUIHandlerField == null)) {
                        this.CommandUIHandlerField = XTypedList<CommandUIHandlerType>.Initialize(this, LinqToXsdTypeManager.Instance, value, CommandUIHandlerXName);
                    }
                    else {
                        XTypedServices.SetList<CommandUIHandlerType>(this.CommandUIHandlerField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CommandUIHandlersType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(CommandUIHandlerXName, typeof(CommandUIHandlerType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class CommandUIHandlerType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandXName = System.Xml.Linq.XName.Get("Command", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandActionXName = System.Xml.Linq.XName.Get("CommandAction", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EnabledScriptXName = System.Xml.Linq.XName.Get("EnabledScript", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CommandUIHandlerType", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator CommandUIHandlerType(XElement xe) { return XTypedServices.ToXTypedElement<CommandUIHandlerType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public CommandUIHandlerType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Command {
            get {
                XAttribute x = this.Attribute(CommandXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string CommandAction {
            get {
                XAttribute x = this.Attribute(CommandActionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CommandActionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string EnabledScript {
            get {
                XAttribute x = this.Attribute(EnabledScriptXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(EnabledScriptXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CommandUIHandlerType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
    /// </para>
    /// </summary>
    public partial class CommandUIDefinitionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ButtonXName = System.Xml.Linq.XName.Get("Button", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CheckBoxXName = System.Xml.Linq.XName.Get("CheckBox", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ComboBoxXName = System.Xml.Linq.XName.Get("ComboBox", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ColorPickerXName = System.Xml.Linq.XName.Get("ColorPicker", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ContextualGroupXName = System.Xml.Linq.XName.Get("ContextualGroup", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ContextualTabsXName = System.Xml.Linq.XName.Get("ContextualTabs", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ControlsXName = System.Xml.Linq.XName.Get("Controls", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DropDownXName = System.Xml.Linq.XName.Get("DropDown", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FlyoutAnchorXName = System.Xml.Linq.XName.Get("FlyoutAnchor", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GalleryXName = System.Xml.Linq.XName.Get("Gallery", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GalleryButtonXName = System.Xml.Linq.XName.Get("GalleryButton", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GroupTemplateXName = System.Xml.Linq.XName.Get("GroupTemplate", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GroupXName = System.Xml.Linq.XName.Get("Group", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GroupsXName = System.Xml.Linq.XName.Get("Groups", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InsertTableXName = System.Xml.Linq.XName.Get("InsertTable", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LabelXName = System.Xml.Linq.XName.Get("Label", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MRUSplitButtonXName = System.Xml.Linq.XName.Get("MRUSplitButton", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MaxSizeXName = System.Xml.Linq.XName.Get("MaxSize", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MenuXName = System.Xml.Linq.XName.Get("Menu", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MenuSectionXName = System.Xml.Linq.XName.Get("MenuSection", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName QATXName = System.Xml.Linq.XName.Get("QAT", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RibbonXName = System.Xml.Linq.XName.Get("Ribbon", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ScaleXName = System.Xml.Linq.XName.Get("Scale", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ScalingXName = System.Xml.Linq.XName.Get("Scaling", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SpinnerXName = System.Xml.Linq.XName.Get("Spinner", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SplitButtonXName = System.Xml.Linq.XName.Get("SplitButton", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TabXName = System.Xml.Linq.XName.Get("Tab", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TabsXName = System.Xml.Linq.XName.Get("Tabs", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TextBoxXName = System.Xml.Linq.XName.Get("TextBox", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToggleButtonXName = System.Xml.Linq.XName.Get("ToggleButton", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LocationXName = System.Xml.Linq.XName.Get("Location", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CommandUIDefinitionType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CommandUIDefinitionType(XElement xe) { return XTypedServices.ToXTypedElement<CommandUIDefinitionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CommandUIDefinitionType() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ButtonXName), new NamedContentModelEntity(CheckBoxXName), new NamedContentModelEntity(ComboBoxXName), new NamedContentModelEntity(ColorPickerXName), new NamedContentModelEntity(ContextualGroupXName), new NamedContentModelEntity(ContextualTabsXName), new NamedContentModelEntity(ControlsXName), new NamedContentModelEntity(DropDownXName), new NamedContentModelEntity(FlyoutAnchorXName), new NamedContentModelEntity(GalleryXName), new NamedContentModelEntity(GalleryButtonXName), new NamedContentModelEntity(GroupTemplateXName), new NamedContentModelEntity(GroupXName), new NamedContentModelEntity(GroupsXName), new NamedContentModelEntity(InsertTableXName), new NamedContentModelEntity(LabelXName), new NamedContentModelEntity(MRUSplitButtonXName), new NamedContentModelEntity(MaxSizeXName), new NamedContentModelEntity(MenuXName), new NamedContentModelEntity(MenuSectionXName), new NamedContentModelEntity(QATXName), new NamedContentModelEntity(RibbonXName), new NamedContentModelEntity(ScaleXName), new NamedContentModelEntity(ScalingXName), new NamedContentModelEntity(SpinnerXName), new NamedContentModelEntity(SplitButtonXName), new NamedContentModelEntity(TabXName), new NamedContentModelEntity(TabsXName), new NamedContentModelEntity(TextBoxXName), new NamedContentModelEntity(ToggleButtonXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public CommandUIDefinitionType() {
        }
        
        public CommandUIDefinitionType(ButtonType Button) {
            this.Button = Button;
        }
        
        public CommandUIDefinitionType(CheckBoxType CheckBox) {
            this.CheckBox = CheckBox;
        }
        
        public CommandUIDefinitionType(ComboBoxType ComboBox) {
            this.ComboBox = ComboBox;
        }
        
        public CommandUIDefinitionType(ColorPickerType ColorPicker) {
            this.ColorPicker = ColorPicker;
        }
        
        public CommandUIDefinitionType(ContextualGroupType ContextualGroup) {
            this.ContextualGroup = ContextualGroup;
        }
        
        public CommandUIDefinitionType(ContextualTabsType ContextualTabs) {
            this.ContextualTabs = ContextualTabs;
        }
        
        public CommandUIDefinitionType(ControlsType Controls) {
            this.Controls = Controls;
        }
        
        public CommandUIDefinitionType(DropDownType DropDown) {
            this.DropDown = DropDown;
        }
        
        public CommandUIDefinitionType(FlyoutAnchorType FlyoutAnchor) {
            this.FlyoutAnchor = FlyoutAnchor;
        }
        
        public CommandUIDefinitionType(GalleryType Gallery) {
            this.Gallery = Gallery;
        }
        
        public CommandUIDefinitionType(GalleryButtonType GalleryButton) {
            this.GalleryButton = GalleryButton;
        }
        
        public CommandUIDefinitionType(GroupTemplateType GroupTemplate) {
            this.GroupTemplate = GroupTemplate;
        }
        
        public CommandUIDefinitionType(GroupType Group) {
            this.Group = Group;
        }
        
        public CommandUIDefinitionType(GroupsType Groups) {
            this.Groups = Groups;
        }
        
        public CommandUIDefinitionType(InsertTableType InsertTable) {
            this.InsertTable = InsertTable;
        }
        
        public CommandUIDefinitionType(LabelType Label) {
            this.Label = Label;
        }
        
        public CommandUIDefinitionType(MRUSplitButtonType MRUSplitButton) {
            this.MRUSplitButton = MRUSplitButton;
        }
        
        public CommandUIDefinitionType(MaxSizeType MaxSize) {
            this.MaxSize = MaxSize;
        }
        
        public CommandUIDefinitionType(MenuType Menu) {
            this.Menu = Menu;
        }
        
        public CommandUIDefinitionType(MenuSectionType MenuSection) {
            this.MenuSection = MenuSection;
        }
        
        public CommandUIDefinitionType(QATType QAT) {
            this.QAT = QAT;
        }
        
        public CommandUIDefinitionType(RibbonType Ribbon) {
            this.Ribbon = Ribbon;
        }
        
        public CommandUIDefinitionType(ScaleType Scale) {
            this.Scale = Scale;
        }
        
        public CommandUIDefinitionType(ScalingType Scaling) {
            this.Scaling = Scaling;
        }
        
        public CommandUIDefinitionType(SpinnerType Spinner) {
            this.Spinner = Spinner;
        }
        
        public CommandUIDefinitionType(SplitButtonType SplitButton) {
            this.SplitButton = SplitButton;
        }
        
        public CommandUIDefinitionType(TabType Tab) {
            this.Tab = Tab;
        }
        
        public CommandUIDefinitionType(TabsType Tabs) {
            this.Tabs = Tabs;
        }
        
        public CommandUIDefinitionType(TextBoxType TextBox) {
            this.TextBox = TextBox;
        }
        
        public CommandUIDefinitionType(ToggleButtonType ToggleButton) {
            this.ToggleButton = ToggleButton;
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public virtual ButtonType Button {
            get {
                XElement x = this.GetElement(ButtonXName);
                return ((ButtonType)(x));
            }
            set {
                this.SetElement(ButtonXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public virtual CheckBoxType CheckBox {
            get {
                XElement x = this.GetElement(CheckBoxXName);
                return ((CheckBoxType)(x));
            }
            set {
                this.SetElement(CheckBoxXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public virtual ComboBoxType ComboBox {
            get {
                XElement x = this.GetElement(ComboBoxXName);
                return ((ComboBoxType)(x));
            }
            set {
                this.SetElement(ComboBoxXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public virtual ColorPickerType ColorPicker {
            get {
                XElement x = this.GetElement(ColorPickerXName);
                return ((ColorPickerType)(x));
            }
            set {
                this.SetElement(ColorPickerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public virtual ContextualGroupType ContextualGroup {
            get {
                XElement x = this.GetElement(ContextualGroupXName);
                return ((ContextualGroupType)(x));
            }
            set {
                this.SetElement(ContextualGroupXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public virtual ContextualTabsType ContextualTabs {
            get {
                XElement x = this.GetElement(ContextualTabsXName);
                return ((ContextualTabsType)(x));
            }
            set {
                this.SetElement(ContextualTabsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public virtual ControlsType Controls {
            get {
                XElement x = this.GetElement(ControlsXName);
                return ((ControlsType)(x));
            }
            set {
                this.SetElement(ControlsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public virtual DropDownType DropDown {
            get {
                XElement x = this.GetElement(DropDownXName);
                return ((DropDownType)(x));
            }
            set {
                this.SetElement(DropDownXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public virtual FlyoutAnchorType FlyoutAnchor {
            get {
                XElement x = this.GetElement(FlyoutAnchorXName);
                return ((FlyoutAnchorType)(x));
            }
            set {
                this.SetElement(FlyoutAnchorXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public virtual GalleryType Gallery {
            get {
                XElement x = this.GetElement(GalleryXName);
                return ((GalleryType)(x));
            }
            set {
                this.SetElement(GalleryXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public virtual GalleryButtonType GalleryButton {
            get {
                XElement x = this.GetElement(GalleryButtonXName);
                return ((GalleryButtonType)(x));
            }
            set {
                this.SetElement(GalleryButtonXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public virtual GroupTemplateType GroupTemplate {
            get {
                XElement x = this.GetElement(GroupTemplateXName);
                return ((GroupTemplateType)(x));
            }
            set {
                this.SetElement(GroupTemplateXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public virtual GroupType Group {
            get {
                XElement x = this.GetElement(GroupXName);
                return ((GroupType)(x));
            }
            set {
                this.SetElement(GroupXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public virtual GroupsType Groups {
            get {
                XElement x = this.GetElement(GroupsXName);
                return ((GroupsType)(x));
            }
            set {
                this.SetElement(GroupsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public virtual InsertTableType InsertTable {
            get {
                XElement x = this.GetElement(InsertTableXName);
                return ((InsertTableType)(x));
            }
            set {
                this.SetElement(InsertTableXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public virtual LabelType Label {
            get {
                XElement x = this.GetElement(LabelXName);
                return ((LabelType)(x));
            }
            set {
                this.SetElement(LabelXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public virtual MRUSplitButtonType MRUSplitButton {
            get {
                XElement x = this.GetElement(MRUSplitButtonXName);
                return ((MRUSplitButtonType)(x));
            }
            set {
                this.SetElement(MRUSplitButtonXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public virtual MaxSizeType MaxSize {
            get {
                XElement x = this.GetElement(MaxSizeXName);
                return ((MaxSizeType)(x));
            }
            set {
                this.SetElement(MaxSizeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public virtual MenuType Menu {
            get {
                XElement x = this.GetElement(MenuXName);
                return ((MenuType)(x));
            }
            set {
                this.SetElement(MenuXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public virtual MenuSectionType MenuSection {
            get {
                XElement x = this.GetElement(MenuSectionXName);
                return ((MenuSectionType)(x));
            }
            set {
                this.SetElement(MenuSectionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public virtual QATType QAT {
            get {
                XElement x = this.GetElement(QATXName);
                return ((QATType)(x));
            }
            set {
                this.SetElement(QATXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public virtual RibbonType Ribbon {
            get {
                XElement x = this.GetElement(RibbonXName);
                return ((RibbonType)(x));
            }
            set {
                this.SetElement(RibbonXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public virtual ScaleType Scale {
            get {
                XElement x = this.GetElement(ScaleXName);
                return ((ScaleType)(x));
            }
            set {
                this.SetElement(ScaleXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public virtual ScalingType Scaling {
            get {
                XElement x = this.GetElement(ScalingXName);
                return ((ScalingType)(x));
            }
            set {
                this.SetElement(ScalingXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public virtual SpinnerType Spinner {
            get {
                XElement x = this.GetElement(SpinnerXName);
                return ((SpinnerType)(x));
            }
            set {
                this.SetElement(SpinnerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public virtual SplitButtonType SplitButton {
            get {
                XElement x = this.GetElement(SplitButtonXName);
                return ((SplitButtonType)(x));
            }
            set {
                this.SetElement(SplitButtonXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public virtual TabType Tab {
            get {
                XElement x = this.GetElement(TabXName);
                return ((TabType)(x));
            }
            set {
                this.SetElement(TabXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public virtual TabsType Tabs {
            get {
                XElement x = this.GetElement(TabsXName);
                return ((TabsType)(x));
            }
            set {
                this.SetElement(TabsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public virtual TextBoxType TextBox {
            get {
                XElement x = this.GetElement(TextBoxXName);
                return ((TextBoxType)(x));
            }
            set {
                this.SetElement(TextBoxXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Button | CheckBox | ComboBox | ColorPicker | ContextualGroup | ContextualTabs | Controls | DropDown | FlyoutAnchor | Gallery | GalleryButton | GroupTemplate | Group | Groups | InsertTable | Label | MRUSplitButton | MaxSize | Menu | MenuSection | QAT | Ribbon | Scale | Scaling | Spinner | SplitButton | Tab | Tabs | TextBox | ToggleButton)?
        /// </para>
        /// </summary>
        public virtual ToggleButtonType ToggleButton {
            get {
                XElement x = this.GetElement(ToggleButtonXName);
                return ((ToggleButtonType)(x));
            }
            set {
                this.SetElement(ToggleButtonXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Location {
            get {
                XAttribute x = this.Attribute(LocationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(LocationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CommandUIDefinitionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ButtonXName, typeof(ButtonType));
            localElementDictionary.Add(CheckBoxXName, typeof(CheckBoxType));
            localElementDictionary.Add(ComboBoxXName, typeof(ComboBoxType));
            localElementDictionary.Add(ColorPickerXName, typeof(ColorPickerType));
            localElementDictionary.Add(ContextualGroupXName, typeof(ContextualGroupType));
            localElementDictionary.Add(ContextualTabsXName, typeof(ContextualTabsType));
            localElementDictionary.Add(ControlsXName, typeof(ControlsType));
            localElementDictionary.Add(DropDownXName, typeof(DropDownType));
            localElementDictionary.Add(FlyoutAnchorXName, typeof(FlyoutAnchorType));
            localElementDictionary.Add(GalleryXName, typeof(GalleryType));
            localElementDictionary.Add(GalleryButtonXName, typeof(GalleryButtonType));
            localElementDictionary.Add(GroupTemplateXName, typeof(GroupTemplateType));
            localElementDictionary.Add(GroupXName, typeof(GroupType));
            localElementDictionary.Add(GroupsXName, typeof(GroupsType));
            localElementDictionary.Add(InsertTableXName, typeof(InsertTableType));
            localElementDictionary.Add(LabelXName, typeof(LabelType));
            localElementDictionary.Add(MRUSplitButtonXName, typeof(MRUSplitButtonType));
            localElementDictionary.Add(MaxSizeXName, typeof(MaxSizeType));
            localElementDictionary.Add(MenuXName, typeof(MenuType));
            localElementDictionary.Add(MenuSectionXName, typeof(MenuSectionType));
            localElementDictionary.Add(QATXName, typeof(QATType));
            localElementDictionary.Add(RibbonXName, typeof(RibbonType));
            localElementDictionary.Add(ScaleXName, typeof(ScaleType));
            localElementDictionary.Add(ScalingXName, typeof(ScalingType));
            localElementDictionary.Add(SpinnerXName, typeof(SpinnerType));
            localElementDictionary.Add(SplitButtonXName, typeof(SplitButtonType));
            localElementDictionary.Add(TabXName, typeof(TabType));
            localElementDictionary.Add(TabsXName, typeof(TabsType));
            localElementDictionary.Add(TextBoxXName, typeof(TextBoxType));
            localElementDictionary.Add(ToggleButtonXName, typeof(ToggleButtonType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (UrlAction?, CommandUIExtension?)
    /// </para>
    /// </summary>
    public partial class CustomActionDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UrlActionXName = System.Xml.Linq.XName.Get("UrlAction", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandUIExtensionXName = System.Xml.Linq.XName.Get("CommandUIExtension", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RequiredAdminXName = System.Xml.Linq.XName.Get("RequiredAdmin", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ControlAssemblyXName = System.Xml.Linq.XName.Get("ControlAssembly", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ControlClassXName = System.Xml.Linq.XName.Get("ControlClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ControlSrcXName = System.Xml.Linq.XName.Get("ControlSrc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DescriptionXName = System.Xml.Linq.XName.Get("Description", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GroupIdXName = System.Xml.Linq.XName.Get("GroupId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureIdXName = System.Xml.Linq.XName.Get("FeatureId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageUrlXName = System.Xml.Linq.XName.Get("ImageUrl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LocationXName = System.Xml.Linq.XName.Get("Location", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ScriptSrcXName = System.Xml.Linq.XName.Get("ScriptSrc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ScriptBlockXName = System.Xml.Linq.XName.Get("ScriptBlock", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RegistrationTypeXName = System.Xml.Linq.XName.Get("RegistrationType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RegistrationIdXName = System.Xml.Linq.XName.Get("RegistrationId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RequireSiteAdministratorXName = System.Xml.Linq.XName.Get("RequireSiteAdministrator", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RightsXName = System.Xml.Linq.XName.Get("Rights", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RootWebOnlyXName = System.Xml.Linq.XName.Get("RootWebOnly", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SequenceXName = System.Xml.Linq.XName.Get("Sequence", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ShowInListsXName = System.Xml.Linq.XName.Get("ShowInLists", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ShowInReadOnlyContentTypesXName = System.Xml.Linq.XName.Get("ShowInReadOnlyContentTypes", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ShowInSealedContentTypesXName = System.Xml.Linq.XName.Get("ShowInSealedContentTypes", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TitleXName = System.Xml.Linq.XName.Get("Title", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UIVersionXName = System.Xml.Linq.XName.Get("UIVersion", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CustomActionDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator CustomActionDefinition(XElement xe) { return XTypedServices.ToXTypedElement<CustomActionDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CustomActionDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (UrlAction?, CommandUIExtension?)
        /// </para>
        /// </summary>
        public CustomActionDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (UrlAction?, CommandUIExtension?)
        /// </para>
        /// </summary>
        public virtual UrlActionDefinition UrlAction {
            get {
                XElement x = this.GetElement(UrlActionXName);
                return ((UrlActionDefinition)(x));
            }
            set {
                this.SetElement(UrlActionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (UrlAction?, CommandUIExtension?)
        /// </para>
        /// </summary>
        public virtual CommandUIExtensionType CommandUIExtension {
            get {
                XElement x = this.GetElement(CommandUIExtensionXName);
                return ((CommandUIExtensionType)(x));
            }
            set {
                this.SetElement(CommandUIExtensionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.RequiredAdminType? RequiredAdmin {
            get {
                XAttribute x = this.Attribute(RequiredAdminXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.RequiredAdminType)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.RequiredAdminType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(RequiredAdminXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ControlAssembly {
            get {
                XAttribute x = this.Attribute(ControlAssemblyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ControlAssemblyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ControlClass {
            get {
                XAttribute x = this.Attribute(ControlClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ControlClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ControlSrc {
            get {
                XAttribute x = this.Attribute(ControlSrcXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ControlSrcXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Description {
            get {
                XAttribute x = this.Attribute(DescriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string GroupId {
            get {
                XAttribute x = this.Attribute(GroupIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(GroupIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FeatureId {
            get {
                XAttribute x = this.Attribute(FeatureIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FeatureIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ImageUrl {
            get {
                XAttribute x = this.Attribute(ImageUrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageUrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Location {
            get {
                XAttribute x = this.Attribute(LocationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(LocationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ScriptSrc {
            get {
                XAttribute x = this.Attribute(ScriptSrcXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ScriptSrcXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ScriptBlock {
            get {
                XAttribute x = this.Attribute(ScriptBlockXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ScriptBlockXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.CustomActionRegistrationType? RegistrationType {
            get {
                XAttribute x = this.Attribute(RegistrationTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.CustomActionRegistrationType)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.CustomActionRegistrationType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(RegistrationTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string RegistrationId {
            get {
                XAttribute x = this.Attribute(RegistrationIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(RegistrationIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string RequireSiteAdministrator {
            get {
                XAttribute x = this.Attribute(RequireSiteAdministratorXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(RequireSiteAdministratorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Rights {
            get {
                XAttribute x = this.Attribute(RightsXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(RightsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string RootWebOnly {
            get {
                XAttribute x = this.Attribute(RootWebOnlyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(RootWebOnlyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? Sequence {
            get {
                XAttribute x = this.Attribute(SequenceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(SequenceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ShowInLists {
            get {
                XAttribute x = this.Attribute(ShowInListsXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ShowInListsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ShowInReadOnlyContentTypes {
            get {
                XAttribute x = this.Attribute(ShowInReadOnlyContentTypesXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ShowInReadOnlyContentTypesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ShowInSealedContentTypes {
            get {
                XAttribute x = this.Attribute(ShowInSealedContentTypesXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ShowInSealedContentTypesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Title {
            get {
                XAttribute x = this.Attribute(TitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string UIVersion {
            get {
                XAttribute x = this.Attribute(UIVersionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(UIVersionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CustomActionDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(UrlActionXName, typeof(UrlActionDefinition));
            localElementDictionary.Add(CommandUIExtensionXName, typeof(CommandUIExtensionType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class HideCustomActionDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HideActionIdXName = System.Xml.Linq.XName.Get("HideActionId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LocationXName = System.Xml.Linq.XName.Get("Location", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GroupIdXName = System.Xml.Linq.XName.Get("GroupId", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("HideCustomActionDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator HideCustomActionDefinition(XElement xe) { return XTypedServices.ToXTypedElement<HideCustomActionDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public HideCustomActionDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string HideActionId {
            get {
                XAttribute x = this.Attribute(HideActionIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(HideActionIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Location {
            get {
                XAttribute x = this.Attribute(LocationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(LocationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string GroupId {
            get {
                XAttribute x = this.Attribute(GroupIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(GroupIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HideCustomActionDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class UrlActionDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UrlXName = System.Xml.Linq.XName.Get("Url", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("UrlActionDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator UrlActionDefinition(XElement xe) { return XTypedServices.ToXTypedElement<UrlActionDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public UrlActionDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Url {
            get {
                XAttribute x = this.Attribute(UrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(UrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UrlActionDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum CustomActionRegistrationType {
        
        List,
        
        ContentType,
        
        FileType,
        
        ProgId,
    }
    
    public sealed class CustomActionRegistrationTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "List",
                        "ContentType",
                        "FileType",
                        "ProgId"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private CustomActionRegistrationTypeValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (UrlAction?)
    /// </para>
    /// </summary>
    public partial class CustomActionGroupDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UrlActionXName = System.Xml.Linq.XName.Get("UrlAction", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SequenceXName = System.Xml.Linq.XName.Get("Sequence", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TitleXName = System.Xml.Linq.XName.Get("Title", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DescriptionXName = System.Xml.Linq.XName.Get("Description", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LocationXName = System.Xml.Linq.XName.Get("Location", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImageUrlXName = System.Xml.Linq.XName.Get("ImageUrl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RequiredAdminXName = System.Xml.Linq.XName.Get("RequiredAdmin", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CustomActionGroupDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CustomActionGroupDefinition(XElement xe) { return XTypedServices.ToXTypedElement<CustomActionGroupDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CustomActionGroupDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(UrlActionXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (UrlAction?)
        /// </para>
        /// </summary>
        public CustomActionGroupDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (UrlAction?)
        /// </para>
        /// </summary>
        public virtual UrlActionDefinition UrlAction {
            get {
                XElement x = this.GetElement(UrlActionXName);
                return ((UrlActionDefinition)(x));
            }
            set {
                this.SetElement(UrlActionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? Sequence {
            get {
                XAttribute x = this.Attribute(SequenceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(SequenceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Title {
            get {
                XAttribute x = this.Attribute(TitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Description {
            get {
                XAttribute x = this.Attribute(DescriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Location {
            get {
                XAttribute x = this.Attribute(LocationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(LocationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ImageUrl {
            get {
                XAttribute x = this.Attribute(ImageUrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ImageUrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.RequiredAdminType? RequiredAdmin {
            get {
                XAttribute x = this.Attribute(RequiredAdminXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.RequiredAdminType)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.RequiredAdminType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(RequiredAdminXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CustomActionGroupDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(UrlActionXName, typeof(UrlActionDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (CustomAction+)
    /// </para>
    /// </summary>
    public partial class CustomActionDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CustomActionXName = System.Xml.Linq.XName.Get("CustomAction", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CustomActionDefinition> CustomActionField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CustomActionDefinitions", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CustomActionDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<CustomActionDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CustomActionDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(CustomActionXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CustomAction+)
        /// </para>
        /// </summary>
        public CustomActionDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CustomAction+)
        /// </para>
        /// </summary>
        public virtual IList<CustomActionDefinition> CustomAction {
            get {
                if ((this.CustomActionField == null)) {
                    this.CustomActionField = new XTypedList<CustomActionDefinition>(this, LinqToXsdTypeManager.Instance, CustomActionXName);
                }
                return this.CustomActionField;
            }
            set {
                if ((value == null)) {
                    this.CustomActionField = null;
                }
                else {
                    if ((this.CustomActionField == null)) {
                        this.CustomActionField = XTypedList<CustomActionDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, CustomActionXName);
                    }
                    else {
                        XTypedServices.SetList<CustomActionDefinition>(this.CustomActionField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CustomActionDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(CustomActionXName, typeof(CustomActionDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class FeatureActivationDependencyDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureIdXName = System.Xml.Linq.XName.Get("FeatureId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MinimumVersionXName = System.Xml.Linq.XName.Get("MinimumVersion", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SolutionIdXName = System.Xml.Linq.XName.Get("SolutionId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SolutionTitleXName = System.Xml.Linq.XName.Get("SolutionTitle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SolutionNameXName = System.Xml.Linq.XName.Get("SolutionName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SolutionUrlXName = System.Xml.Linq.XName.Get("SolutionUrl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureTitleXName = System.Xml.Linq.XName.Get("FeatureTitle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureDescriptionXName = System.Xml.Linq.XName.Get("FeatureDescription", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FeatureActivationDependencyDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator FeatureActivationDependencyDefinition(XElement xe) { return XTypedServices.ToXTypedElement<FeatureActivationDependencyDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public FeatureActivationDependencyDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string FeatureId {
            get {
                XAttribute x = this.Attribute(FeatureIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FeatureIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string MinimumVersion {
            get {
                XAttribute x = this.Attribute(MinimumVersionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(MinimumVersionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SolutionId {
            get {
                XAttribute x = this.Attribute(SolutionIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SolutionIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SolutionTitle {
            get {
                XAttribute x = this.Attribute(SolutionTitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SolutionTitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SolutionName {
            get {
                XAttribute x = this.Attribute(SolutionNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SolutionNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SolutionUrl {
            get {
                XAttribute x = this.Attribute(SolutionUrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SolutionUrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FeatureTitle {
            get {
                XAttribute x = this.Attribute(FeatureTitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FeatureTitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FeatureDescription {
            get {
                XAttribute x = this.Attribute(FeatureDescriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FeatureDescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FeatureActivationDependencyDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ActivationDependency*)
    /// </para>
    /// </summary>
    public partial class FeatureActivationDependencyDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ActivationDependencyXName = System.Xml.Linq.XName.Get("ActivationDependency", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FeatureActivationDependencyDefinition> ActivationDependencyField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FeatureActivationDependencyDefinitions", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FeatureActivationDependencyDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<FeatureActivationDependencyDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FeatureActivationDependencyDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ActivationDependencyXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ActivationDependency*)
        /// </para>
        /// </summary>
        public FeatureActivationDependencyDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ActivationDependency*)
        /// </para>
        /// </summary>
        public virtual IList<FeatureActivationDependencyDefinition> ActivationDependency {
            get {
                if ((this.ActivationDependencyField == null)) {
                    this.ActivationDependencyField = new XTypedList<FeatureActivationDependencyDefinition>(this, LinqToXsdTypeManager.Instance, ActivationDependencyXName);
                }
                return this.ActivationDependencyField;
            }
            set {
                if ((value == null)) {
                    this.ActivationDependencyField = null;
                }
                else {
                    if ((this.ActivationDependencyField == null)) {
                        this.ActivationDependencyField = XTypedList<FeatureActivationDependencyDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, ActivationDependencyXName);
                    }
                    else {
                        XTypedServices.SetList<FeatureActivationDependencyDefinition>(this.ActivationDependencyField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FeatureActivationDependencyDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ActivationDependencyXName, typeof(FeatureActivationDependencyDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public enum RequiredAdminType {
        
        Delegated,
        
        Farm,
        
        Machine,
    }
    
    public sealed class RequiredAdminTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Delegated",
                        "Farm",
                        "Machine"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private RequiredAdminTypeValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (FieldRefs?, DisplayPattern?, DisplayBidiPattern?, CHOICES?, MAPPINGS?, Default?, Formula?, FormulaDisplayNames?, DefaultFormula?, Validation?, Customization?)
    /// </para>
    /// </summary>
    public partial class SharedFieldReference : global::Microsoft.Schemas.SharePoint.FieldDefinition, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SharedFieldReference", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator SharedFieldReference(XElement xe) { return XTypedServices.ToXTypedElement<SharedFieldReference>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SharedFieldReference() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (FieldRefs?, DisplayPattern?, DisplayBidiPattern?, CHOICES?, MAPPINGS?, Default?, Formula?, FormulaDisplayNames?, DefaultFormula?, Validation?, Customization?)
        /// </para>
        /// </summary>
        public SharedFieldReference() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SharedFieldReference>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FieldRefsXName, typeof(FieldRefDefinitions));
            localElementDictionary.Add(DisplayPatternXName, typeof(CamlViewRoot));
            localElementDictionary.Add(DisplayBidiPatternXName, typeof(CamlViewRoot));
            localElementDictionary.Add(CHOICESXName, typeof(CHOICEDEFINITIONS));
            localElementDictionary.Add(MAPPINGSXName, typeof(MAPPINGDEFINITIONS));
            localElementDictionary.Add(DefaultXName, typeof(string));
            localElementDictionary.Add(FormulaXName, typeof(string));
            localElementDictionary.Add(FormulaDisplayNamesXName, typeof(string));
            localElementDictionary.Add(DefaultFormulaXName, typeof(string));
            localElementDictionary.Add(ValidationXName, typeof(ValidationDefinition));
            localElementDictionary.Add(CustomizationXName, typeof(CustomizationDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Properties?)
    /// </para>
    /// </summary>
    public partial class FeatureTemplateReference : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertiesXName = System.Xml.Linq.XName.Get("Properties", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IDXName = System.Xml.Linq.XName.Get("ID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SourceVersionXName = System.Xml.Linq.XName.Get("SourceVersion", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FeatureTemplateReference", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FeatureTemplateReference(XElement xe) { return XTypedServices.ToXTypedElement<FeatureTemplateReference>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FeatureTemplateReference() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PropertiesXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Properties?)
        /// </para>
        /// </summary>
        public FeatureTemplateReference() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Properties?)
        /// </para>
        /// </summary>
        public virtual FeaturePropertyDefinitions Properties {
            get {
                XElement x = this.GetElement(PropertiesXName);
                return ((FeaturePropertyDefinitions)(x));
            }
            set {
                this.SetElement(PropertiesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string ID {
            get {
                XAttribute x = this.Attribute(IDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SourceVersion {
            get {
                XAttribute x = this.Attribute(SourceVersionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SourceVersionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FeatureTemplateReference>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PropertiesXName, typeof(FeaturePropertyDefinitions));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)
    /// </para>
    /// </summary>
    public partial class FeatureTemplateReferences : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FeatureTemplateReference> FeatureField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FeatureTemplateReferences", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FeatureTemplateReferences(XElement xe) { return XTypedServices.ToXTypedElement<FeatureTemplateReferences>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FeatureTemplateReferences() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)
        /// </para>
        /// </summary>
        public FeatureTemplateReferences() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)
        /// </para>
        /// </summary>
        public virtual IList<FeatureTemplateReference> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<FeatureTemplateReference>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<FeatureTemplateReference>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<FeatureTemplateReference>(this.FeatureField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FeatureTemplateReferences>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(FeatureTemplateReference));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((CustomUpgradeAction* | ApplyElementManifests* | AddContentTypeField* | MapFile*))*
    /// </para>
    /// </summary>
    public partial class VersionRangeDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CustomUpgradeActionXName = System.Xml.Linq.XName.Get("CustomUpgradeAction", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CustomUpgradeActionDefinition> CustomUpgradeActionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ApplyElementManifestsXName = System.Xml.Linq.XName.Get("ApplyElementManifests", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ElementManifestReferences> ApplyElementManifestsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AddContentTypeFieldXName = System.Xml.Linq.XName.Get("AddContentTypeField", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AddContentTypeFieldDefinition> AddContentTypeFieldField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MapFileXName = System.Xml.Linq.XName.Get("MapFile", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MapFileDefinition> MapFileField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BeginVersionXName = System.Xml.Linq.XName.Get("BeginVersion", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EndVersionXName = System.Xml.Linq.XName.Get("EndVersion", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("VersionRangeDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator VersionRangeDefinition(XElement xe) { return XTypedServices.ToXTypedElement<VersionRangeDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static VersionRangeDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(CustomUpgradeActionXName), new NamedContentModelEntity(ApplyElementManifestsXName), new NamedContentModelEntity(AddContentTypeFieldXName), new NamedContentModelEntity(MapFileXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((CustomUpgradeAction* | ApplyElementManifests* | AddContentTypeField* | MapFile*))*
        /// </para>
        /// </summary>
        public VersionRangeDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((CustomUpgradeAction* | ApplyElementManifests* | AddContentTypeField* | MapFile*))*
        /// </para>
        /// </summary>
        public virtual IList<CustomUpgradeActionDefinition> CustomUpgradeAction {
            get {
                if ((this.CustomUpgradeActionField == null)) {
                    this.CustomUpgradeActionField = new XTypedList<CustomUpgradeActionDefinition>(this, LinqToXsdTypeManager.Instance, CustomUpgradeActionXName);
                }
                return this.CustomUpgradeActionField;
            }
            set {
                if ((value == null)) {
                    this.CustomUpgradeActionField = null;
                }
                else {
                    if ((this.CustomUpgradeActionField == null)) {
                        this.CustomUpgradeActionField = XTypedList<CustomUpgradeActionDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, CustomUpgradeActionXName);
                    }
                    else {
                        XTypedServices.SetList<CustomUpgradeActionDefinition>(this.CustomUpgradeActionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((CustomUpgradeAction* | ApplyElementManifests* | AddContentTypeField* | MapFile*))*
        /// </para>
        /// </summary>
        public virtual IList<ElementManifestReferences> ApplyElementManifests {
            get {
                if ((this.ApplyElementManifestsField == null)) {
                    this.ApplyElementManifestsField = new XTypedList<ElementManifestReferences>(this, LinqToXsdTypeManager.Instance, ApplyElementManifestsXName);
                }
                return this.ApplyElementManifestsField;
            }
            set {
                if ((value == null)) {
                    this.ApplyElementManifestsField = null;
                }
                else {
                    if ((this.ApplyElementManifestsField == null)) {
                        this.ApplyElementManifestsField = XTypedList<ElementManifestReferences>.Initialize(this, LinqToXsdTypeManager.Instance, value, ApplyElementManifestsXName);
                    }
                    else {
                        XTypedServices.SetList<ElementManifestReferences>(this.ApplyElementManifestsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((CustomUpgradeAction* | ApplyElementManifests* | AddContentTypeField* | MapFile*))*
        /// </para>
        /// </summary>
        public virtual IList<AddContentTypeFieldDefinition> AddContentTypeField {
            get {
                if ((this.AddContentTypeFieldField == null)) {
                    this.AddContentTypeFieldField = new XTypedList<AddContentTypeFieldDefinition>(this, LinqToXsdTypeManager.Instance, AddContentTypeFieldXName);
                }
                return this.AddContentTypeFieldField;
            }
            set {
                if ((value == null)) {
                    this.AddContentTypeFieldField = null;
                }
                else {
                    if ((this.AddContentTypeFieldField == null)) {
                        this.AddContentTypeFieldField = XTypedList<AddContentTypeFieldDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, AddContentTypeFieldXName);
                    }
                    else {
                        XTypedServices.SetList<AddContentTypeFieldDefinition>(this.AddContentTypeFieldField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((CustomUpgradeAction* | ApplyElementManifests* | AddContentTypeField* | MapFile*))*
        /// </para>
        /// </summary>
        public virtual IList<MapFileDefinition> MapFile {
            get {
                if ((this.MapFileField == null)) {
                    this.MapFileField = new XTypedList<MapFileDefinition>(this, LinqToXsdTypeManager.Instance, MapFileXName);
                }
                return this.MapFileField;
            }
            set {
                if ((value == null)) {
                    this.MapFileField = null;
                }
                else {
                    if ((this.MapFileField == null)) {
                        this.MapFileField = XTypedList<MapFileDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, MapFileXName);
                    }
                    else {
                        XTypedServices.SetList<MapFileDefinition>(this.MapFileField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string BeginVersion {
            get {
                XAttribute x = this.Attribute(BeginVersionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(BeginVersionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string EndVersion {
            get {
                XAttribute x = this.Attribute(EndVersionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(EndVersionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<VersionRangeDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(CustomUpgradeActionXName, typeof(CustomUpgradeActionDefinition));
            localElementDictionary.Add(ApplyElementManifestsXName, typeof(ElementManifestReferences));
            localElementDictionary.Add(AddContentTypeFieldXName, typeof(AddContentTypeFieldDefinition));
            localElementDictionary.Add(MapFileXName, typeof(MapFileDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (VersionRange* | CustomUpgradeAction* | ApplyElementManifests* | AddContentTypeField* | MapFile*)*
    /// </para>
    /// </summary>
    public partial class UpgradeActionsDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VersionRangeXName = System.Xml.Linq.XName.Get("VersionRange", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<VersionRangeDefinition> VersionRangeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CustomUpgradeActionXName = System.Xml.Linq.XName.Get("CustomUpgradeAction", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CustomUpgradeActionDefinition> CustomUpgradeActionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ApplyElementManifestsXName = System.Xml.Linq.XName.Get("ApplyElementManifests", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ElementManifestReferences> ApplyElementManifestsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AddContentTypeFieldXName = System.Xml.Linq.XName.Get("AddContentTypeField", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AddContentTypeFieldDefinition> AddContentTypeFieldField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MapFileXName = System.Xml.Linq.XName.Get("MapFile", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MapFileDefinition> MapFileField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ReceiverAssemblyXName = System.Xml.Linq.XName.Get("ReceiverAssembly", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ReceiverClassXName = System.Xml.Linq.XName.Get("ReceiverClass", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("UpgradeActionsDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator UpgradeActionsDefinition(XElement xe) { return XTypedServices.ToXTypedElement<UpgradeActionsDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static UpgradeActionsDefinition() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(VersionRangeXName), new NamedContentModelEntity(CustomUpgradeActionXName), new NamedContentModelEntity(ApplyElementManifestsXName), new NamedContentModelEntity(AddContentTypeFieldXName), new NamedContentModelEntity(MapFileXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (VersionRange* | CustomUpgradeAction* | ApplyElementManifests* | AddContentTypeField* | MapFile*)*
        /// </para>
        /// </summary>
        public UpgradeActionsDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (VersionRange* | CustomUpgradeAction* | ApplyElementManifests* | AddContentTypeField* | MapFile*)*
        /// </para>
        /// </summary>
        public virtual IList<VersionRangeDefinition> VersionRange {
            get {
                if ((this.VersionRangeField == null)) {
                    this.VersionRangeField = new XTypedList<VersionRangeDefinition>(this, LinqToXsdTypeManager.Instance, VersionRangeXName);
                }
                return this.VersionRangeField;
            }
            set {
                if ((value == null)) {
                    this.VersionRangeField = null;
                }
                else {
                    if ((this.VersionRangeField == null)) {
                        this.VersionRangeField = XTypedList<VersionRangeDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, VersionRangeXName);
                    }
                    else {
                        XTypedServices.SetList<VersionRangeDefinition>(this.VersionRangeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (VersionRange* | CustomUpgradeAction* | ApplyElementManifests* | AddContentTypeField* | MapFile*)*
        /// </para>
        /// </summary>
        public virtual IList<CustomUpgradeActionDefinition> CustomUpgradeAction {
            get {
                if ((this.CustomUpgradeActionField == null)) {
                    this.CustomUpgradeActionField = new XTypedList<CustomUpgradeActionDefinition>(this, LinqToXsdTypeManager.Instance, CustomUpgradeActionXName);
                }
                return this.CustomUpgradeActionField;
            }
            set {
                if ((value == null)) {
                    this.CustomUpgradeActionField = null;
                }
                else {
                    if ((this.CustomUpgradeActionField == null)) {
                        this.CustomUpgradeActionField = XTypedList<CustomUpgradeActionDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, CustomUpgradeActionXName);
                    }
                    else {
                        XTypedServices.SetList<CustomUpgradeActionDefinition>(this.CustomUpgradeActionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (VersionRange* | CustomUpgradeAction* | ApplyElementManifests* | AddContentTypeField* | MapFile*)*
        /// </para>
        /// </summary>
        public virtual IList<ElementManifestReferences> ApplyElementManifests {
            get {
                if ((this.ApplyElementManifestsField == null)) {
                    this.ApplyElementManifestsField = new XTypedList<ElementManifestReferences>(this, LinqToXsdTypeManager.Instance, ApplyElementManifestsXName);
                }
                return this.ApplyElementManifestsField;
            }
            set {
                if ((value == null)) {
                    this.ApplyElementManifestsField = null;
                }
                else {
                    if ((this.ApplyElementManifestsField == null)) {
                        this.ApplyElementManifestsField = XTypedList<ElementManifestReferences>.Initialize(this, LinqToXsdTypeManager.Instance, value, ApplyElementManifestsXName);
                    }
                    else {
                        XTypedServices.SetList<ElementManifestReferences>(this.ApplyElementManifestsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (VersionRange* | CustomUpgradeAction* | ApplyElementManifests* | AddContentTypeField* | MapFile*)*
        /// </para>
        /// </summary>
        public virtual IList<AddContentTypeFieldDefinition> AddContentTypeField {
            get {
                if ((this.AddContentTypeFieldField == null)) {
                    this.AddContentTypeFieldField = new XTypedList<AddContentTypeFieldDefinition>(this, LinqToXsdTypeManager.Instance, AddContentTypeFieldXName);
                }
                return this.AddContentTypeFieldField;
            }
            set {
                if ((value == null)) {
                    this.AddContentTypeFieldField = null;
                }
                else {
                    if ((this.AddContentTypeFieldField == null)) {
                        this.AddContentTypeFieldField = XTypedList<AddContentTypeFieldDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, AddContentTypeFieldXName);
                    }
                    else {
                        XTypedServices.SetList<AddContentTypeFieldDefinition>(this.AddContentTypeFieldField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (VersionRange* | CustomUpgradeAction* | ApplyElementManifests* | AddContentTypeField* | MapFile*)*
        /// </para>
        /// </summary>
        public virtual IList<MapFileDefinition> MapFile {
            get {
                if ((this.MapFileField == null)) {
                    this.MapFileField = new XTypedList<MapFileDefinition>(this, LinqToXsdTypeManager.Instance, MapFileXName);
                }
                return this.MapFileField;
            }
            set {
                if ((value == null)) {
                    this.MapFileField = null;
                }
                else {
                    if ((this.MapFileField == null)) {
                        this.MapFileField = XTypedList<MapFileDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, MapFileXName);
                    }
                    else {
                        XTypedServices.SetList<MapFileDefinition>(this.MapFileField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ReceiverAssembly {
            get {
                XAttribute x = this.Attribute(ReceiverAssemblyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ReceiverAssemblyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ReceiverClass {
            get {
                XAttribute x = this.Attribute(ReceiverClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ReceiverClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UpgradeActionsDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(VersionRangeXName, typeof(VersionRangeDefinition));
            localElementDictionary.Add(CustomUpgradeActionXName, typeof(CustomUpgradeActionDefinition));
            localElementDictionary.Add(ApplyElementManifestsXName, typeof(ElementManifestReferences));
            localElementDictionary.Add(AddContentTypeFieldXName, typeof(AddContentTypeFieldDefinition));
            localElementDictionary.Add(MapFileXName, typeof(MapFileDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Parameters?)
    /// </para>
    /// </summary>
    public partial class CustomUpgradeActionDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ParametersXName = System.Xml.Linq.XName.Get("Parameters", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CustomUpgradeActionDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CustomUpgradeActionDefinition(XElement xe) { return XTypedServices.ToXTypedElement<CustomUpgradeActionDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CustomUpgradeActionDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ParametersXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Parameters?)
        /// </para>
        /// </summary>
        public CustomUpgradeActionDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Parameters?)
        /// </para>
        /// </summary>
        public virtual ParametersDefinition Parameters {
            get {
                XElement x = this.GetElement(ParametersXName);
                return ((ParametersDefinition)(x));
            }
            set {
                this.SetElement(ParametersXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CustomUpgradeActionDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ParametersXName, typeof(ParametersDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Parameter+)
    /// </para>
    /// </summary>
    public partial class ParametersDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ParameterXName = System.Xml.Linq.XName.Get("Parameter", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ParameterDefinition> ParameterField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ParametersDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ParametersDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ParametersDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ParametersDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ParameterXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Parameter+)
        /// </para>
        /// </summary>
        public ParametersDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Parameter+)
        /// </para>
        /// </summary>
        public virtual IList<ParameterDefinition> Parameter {
            get {
                if ((this.ParameterField == null)) {
                    this.ParameterField = new XTypedList<ParameterDefinition>(this, LinqToXsdTypeManager.Instance, ParameterXName);
                }
                return this.ParameterField;
            }
            set {
                if ((value == null)) {
                    this.ParameterField = null;
                }
                else {
                    if ((this.ParameterField == null)) {
                        this.ParameterField = XTypedList<ParameterDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, ParameterXName);
                    }
                    else {
                        XTypedServices.SetList<ParameterDefinition>(this.ParameterField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ParametersDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ParameterXName, typeof(ParameterDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class ParameterDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ParameterDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator ParameterDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ParameterDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ParameterDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ParameterDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class AddContentTypeFieldDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ContentTypeIdXName = System.Xml.Linq.XName.Get("ContentTypeId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldIdXName = System.Xml.Linq.XName.Get("FieldId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PushDownXName = System.Xml.Linq.XName.Get("PushDown", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AddContentTypeFieldDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator AddContentTypeFieldDefinition(XElement xe) { return XTypedServices.ToXTypedElement<AddContentTypeFieldDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public AddContentTypeFieldDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ContentTypeId {
            get {
                XAttribute x = this.Attribute(ContentTypeIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ContentTypeIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FieldId {
            get {
                XAttribute x = this.Attribute(FieldIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FieldIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string PushDown {
            get {
                XAttribute x = this.Attribute(PushDownXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PushDownXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AddContentTypeFieldDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class MapFileDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FromPathXName = System.Xml.Linq.XName.Get("FromPath", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToPathXName = System.Xml.Linq.XName.Get("ToPath", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("MapFileDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator MapFileDefinition(XElement xe) { return XTypedServices.ToXTypedElement<MapFileDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public MapFileDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FromPath {
            get {
                XAttribute x = this.Attribute(FromPathXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FromPathXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ToPath {
            get {
                XAttribute x = this.Attribute(ToPathXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToPathXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MapFileDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (RenderPattern*)
    /// </para>
    /// </summary>
    public partial class FieldTypeDefinition : global::Microsoft.Schemas.SharePoint.SubFieldTypeDefinition, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RenderPatternXName = System.Xml.Linq.XName.Get("RenderPattern", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RenderPatternDefinition> RenderPatternField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AssemblyXName = System.Xml.Linq.XName.Get("Assembly", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ClassXName = System.Xml.Linq.XName.Get("Class", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FieldTypeDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FieldTypeDefinition(XElement xe) { return XTypedServices.ToXTypedElement<FieldTypeDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FieldTypeDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RenderPatternXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (RenderPattern*)
        /// </para>
        /// </summary>
        public FieldTypeDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (RenderPattern*)
        /// </para>
        /// </summary>
        public virtual IList<RenderPatternDefinition> RenderPattern {
            get {
                if ((this.RenderPatternField == null)) {
                    this.RenderPatternField = new XTypedList<RenderPatternDefinition>(this, LinqToXsdTypeManager.Instance, RenderPatternXName);
                }
                return this.RenderPatternField;
            }
            set {
                if ((value == null)) {
                    this.RenderPatternField = null;
                }
                else {
                    if ((this.RenderPatternField == null)) {
                        this.RenderPatternField = XTypedList<RenderPatternDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, RenderPatternXName);
                    }
                    else {
                        XTypedServices.SetList<RenderPatternDefinition>(this.RenderPatternField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Assembly {
            get {
                XAttribute x = this.Attribute(AssemblyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AssemblyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Class {
            get {
                XAttribute x = this.Attribute(ClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FieldTypeDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RenderPatternXName, typeof(RenderPatternDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public enum RenderPatternName {
        
        DisplayBidiPattern,
        
        DisplayPattern,
        
        EditBidiPattern,
        
        EditPattern,
        
        HeaderBidiPattern,
        
        HeaderPattern,
        
        NewBidiPattern,
        
        NewPattern,
        
        PreviewDisplayPattern,
        
        PreviewNewPattern,
        
        PreviewEditPattern,
    }
    
    public sealed class RenderPatternNameValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "DisplayBidiPattern",
                        "DisplayPattern",
                        "EditBidiPattern",
                        "EditPattern",
                        "HeaderBidiPattern",
                        "HeaderPattern",
                        "NewBidiPattern",
                        "NewPattern",
                        "PreviewDisplayPattern",
                        "PreviewNewPattern",
                        "PreviewEditPattern"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private RenderPatternNameValidator() {
        }
    }
    
    public enum RenderPatternType {
        
        Boolean,
        
        Choice,
        
        Counter,
        
        Currency,
        
        DateTime,
        
        Integer,
        
        Lookup,
        
        Note,
        
        Number,
        
        Text,
        
        Threading,
        
        URL,
    }
    
    public sealed class RenderPatternTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Boolean",
                        "Choice",
                        "Counter",
                        "Currency",
                        "DateTime",
                        "Integer",
                        "Lookup",
                        "Note",
                        "Number",
                        "Text",
                        "Threading",
                        "URL"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private RenderPatternTypeValidator() {
        }
    }
    
    public partial class RenderPatternDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DisplayNameXName = System.Xml.Linq.XName.Get("DisplayName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypeXName = System.Xml.Linq.XName.Get("Type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TallXName = System.Xml.Linq.XName.Get("Tall", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImplementationXName = System.Xml.Linq.XName.Get("Implementation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ControlClassXName = System.Xml.Linq.XName.Get("ControlClass", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RenderPatternDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator RenderPatternDefinition(XElement xe) { return XTypedServices.ToXTypedElement<RenderPatternDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public RenderPatternDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DisplayName {
            get {
                XAttribute x = this.Attribute(DisplayNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DisplayNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.RenderPatternType? Type {
            get {
                XAttribute x = this.Attribute(TypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.RenderPatternType)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.RenderPatternType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(TypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.RenderPatternName? Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.RenderPatternName)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.RenderPatternName), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(NameXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Tall {
            get {
                XAttribute x = this.Attribute(TallXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TallXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.FieldControlImplementationType? Implementation {
            get {
                XAttribute x = this.Attribute(ImplementationXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.FieldControlImplementationType)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.FieldControlImplementationType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ImplementationXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ControlClass {
            get {
                XAttribute x = this.Attribute(ControlClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ControlClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RenderPatternDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class SubFieldTypeDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypeNameXName = System.Xml.Linq.XName.Get("TypeName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SqlTypeXName = System.Xml.Linq.XName.Get("SqlType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InternalTypeXName = System.Xml.Linq.XName.Get("InternalType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SortableXName = System.Xml.Linq.XName.Get("Sortable", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FilterableXName = System.Xml.Linq.XName.Get("Filterable", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HasValidationXName = System.Xml.Linq.XName.Get("HasValidation", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SubFieldTypeDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator SubFieldTypeDefinition(XElement xe) { return XTypedServices.ToXTypedElement<SubFieldTypeDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public SubFieldTypeDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TypeName {
            get {
                XAttribute x = this.Attribute(TypeNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TypeNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SqlType {
            get {
                XAttribute x = this.Attribute(SqlTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SqlTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string InternalType {
            get {
                XAttribute x = this.Attribute(InternalTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(InternalTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Sortable {
            get {
                XAttribute x = this.Attribute(SortableXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SortableXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Filterable {
            get {
                XAttribute x = this.Attribute(FilterableXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FilterableXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string HasValidation {
            get {
                XAttribute x = this.Attribute(HasValidationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(HasValidationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SubFieldTypeDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (SafeControls?, ClassResources?, BindingRedirects?)
    /// </para>
    /// </summary>
    public partial class AssemblyFileReference : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SafeControlsXName = System.Xml.Linq.XName.Get("SafeControls", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ClassResourcesXName = System.Xml.Linq.XName.Get("ClassResources", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BindingRedirectsXName = System.Xml.Linq.XName.Get("BindingRedirects", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LocationXName = System.Xml.Linq.XName.Get("Location", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DeploymentTargetXName = System.Xml.Linq.XName.Get("DeploymentTarget", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AssemblyFileReference", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator AssemblyFileReference(XElement xe) { return XTypedServices.ToXTypedElement<AssemblyFileReference>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AssemblyFileReference() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SafeControls?, ClassResources?, BindingRedirects?)
        /// </para>
        /// </summary>
        public AssemblyFileReference() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SafeControls?, ClassResources?, BindingRedirects?)
        /// </para>
        /// </summary>
        public virtual SafeControlDefinitions SafeControls {
            get {
                XElement x = this.GetElement(SafeControlsXName);
                return ((SafeControlDefinitions)(x));
            }
            set {
                this.SetElement(SafeControlsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SafeControls?, ClassResources?, BindingRedirects?)
        /// </para>
        /// </summary>
        public virtual ClassResourceDefinitions ClassResources {
            get {
                XElement x = this.GetElement(ClassResourcesXName);
                return ((ClassResourceDefinitions)(x));
            }
            set {
                this.SetElement(ClassResourcesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SafeControls?, ClassResources?, BindingRedirects?)
        /// </para>
        /// </summary>
        public virtual BindingRedirectDefinitions BindingRedirects {
            get {
                XElement x = this.GetElement(BindingRedirectsXName);
                return ((BindingRedirectDefinitions)(x));
            }
            set {
                this.SetElement(BindingRedirectsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Location {
            get {
                XAttribute x = this.Attribute(LocationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(LocationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.SolutionDeploymentTargetType? DeploymentTarget {
            get {
                XAttribute x = this.Attribute(DeploymentTargetXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.SolutionDeploymentTargetType)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.SolutionDeploymentTargetType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(DeploymentTargetXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AssemblyFileReference>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SafeControlsXName, typeof(SafeControlDefinitions));
            localElementDictionary.Add(ClassResourcesXName, typeof(ClassResourceDefinitions));
            localElementDictionary.Add(BindingRedirectsXName, typeof(BindingRedirectDefinitions));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Assembly+)
    /// </para>
    /// </summary>
    public partial class AssemblyFileReferences : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AssemblyXName = System.Xml.Linq.XName.Get("Assembly", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AssemblyFileReference> AssemblyField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AssemblyFileReferences", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AssemblyFileReferences(XElement xe) { return XTypedServices.ToXTypedElement<AssemblyFileReferences>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AssemblyFileReferences() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AssemblyXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Assembly+)
        /// </para>
        /// </summary>
        public AssemblyFileReferences() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Assembly+)
        /// </para>
        /// </summary>
        public virtual IList<AssemblyFileReference> Assembly {
            get {
                if ((this.AssemblyField == null)) {
                    this.AssemblyField = new XTypedList<AssemblyFileReference>(this, LinqToXsdTypeManager.Instance, AssemblyXName);
                }
                return this.AssemblyField;
            }
            set {
                if ((value == null)) {
                    this.AssemblyField = null;
                }
                else {
                    if ((this.AssemblyField == null)) {
                        this.AssemblyField = XTypedList<AssemblyFileReference>.Initialize(this, LinqToXsdTypeManager.Instance, value, AssemblyXName);
                    }
                    else {
                        XTypedServices.SetList<AssemblyFileReference>(this.AssemblyField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AssemblyFileReferences>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AssemblyXName, typeof(AssemblyFileReference));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class RootFileReference : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LocationXName = System.Xml.Linq.XName.Get("Location", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RootFileReference", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator RootFileReference(XElement xe) { return XTypedServices.ToXTypedElement<RootFileReference>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public RootFileReference() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Location {
            get {
                XAttribute x = this.Attribute(LocationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(LocationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RootFileReference>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (RootFile+)
    /// </para>
    /// </summary>
    public partial class RootFileReferences : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RootFileXName = System.Xml.Linq.XName.Get("RootFile", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RootFileReference> RootFileField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RootFileReferences", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RootFileReferences(XElement xe) { return XTypedServices.ToXTypedElement<RootFileReferences>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RootFileReferences() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RootFileXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (RootFile+)
        /// </para>
        /// </summary>
        public RootFileReferences() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (RootFile+)
        /// </para>
        /// </summary>
        public virtual IList<RootFileReference> RootFile {
            get {
                if ((this.RootFileField == null)) {
                    this.RootFileField = new XTypedList<RootFileReference>(this, LinqToXsdTypeManager.Instance, RootFileXName);
                }
                return this.RootFileField;
            }
            set {
                if ((value == null)) {
                    this.RootFileField = null;
                }
                else {
                    if ((this.RootFileField == null)) {
                        this.RootFileField = XTypedList<RootFileReference>.Initialize(this, LinqToXsdTypeManager.Instance, value, RootFileXName);
                    }
                    else {
                        XTypedServices.SetList<RootFileReference>(this.RootFileField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RootFileReferences>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RootFileXName, typeof(RootFileReference));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class TemplateFileReference : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LocationXName = System.Xml.Linq.XName.Get("Location", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TemplateFileReference", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator TemplateFileReference(XElement xe) { return XTypedServices.ToXTypedElement<TemplateFileReference>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public TemplateFileReference() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Location {
            get {
                XAttribute x = this.Attribute(LocationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(LocationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TemplateFileReference>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (TemplateFile+)
    /// </para>
    /// </summary>
    public partial class TemplateFileReferences : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TemplateFileXName = System.Xml.Linq.XName.Get("TemplateFile", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TemplateFileReference> TemplateFileField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TemplateFileReferences", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TemplateFileReferences(XElement xe) { return XTypedServices.ToXTypedElement<TemplateFileReferences>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TemplateFileReferences() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TemplateFileXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (TemplateFile+)
        /// </para>
        /// </summary>
        public TemplateFileReferences() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (TemplateFile+)
        /// </para>
        /// </summary>
        public virtual IList<TemplateFileReference> TemplateFile {
            get {
                if ((this.TemplateFileField == null)) {
                    this.TemplateFileField = new XTypedList<TemplateFileReference>(this, LinqToXsdTypeManager.Instance, TemplateFileXName);
                }
                return this.TemplateFileField;
            }
            set {
                if ((value == null)) {
                    this.TemplateFileField = null;
                }
                else {
                    if ((this.TemplateFileField == null)) {
                        this.TemplateFileField = XTypedList<TemplateFileReference>.Initialize(this, LinqToXsdTypeManager.Instance, value, TemplateFileXName);
                    }
                    else {
                        XTypedServices.SetList<TemplateFileReference>(this.TemplateFileField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TemplateFileReferences>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TemplateFileXName, typeof(TemplateFileReference));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PolicyItem*)
    /// </para>
    /// </summary>
    public partial class CodeAccessSecurityDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PolicyItemXName = System.Xml.Linq.XName.Get("PolicyItem", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PolicyItemDefinition> PolicyItemField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CodeAccessSecurityDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CodeAccessSecurityDefinition(XElement xe) { return XTypedServices.ToXTypedElement<CodeAccessSecurityDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CodeAccessSecurityDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PolicyItemXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PolicyItem*)
        /// </para>
        /// </summary>
        public CodeAccessSecurityDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (PolicyItem*)
        /// </para>
        /// </summary>
        public virtual IList<PolicyItemDefinition> PolicyItem {
            get {
                if ((this.PolicyItemField == null)) {
                    this.PolicyItemField = new XTypedList<PolicyItemDefinition>(this, LinqToXsdTypeManager.Instance, PolicyItemXName);
                }
                return this.PolicyItemField;
            }
            set {
                if ((value == null)) {
                    this.PolicyItemField = null;
                }
                else {
                    if ((this.PolicyItemField == null)) {
                        this.PolicyItemField = XTypedList<PolicyItemDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, PolicyItemXName);
                    }
                    else {
                        XTypedServices.SetList<PolicyItemDefinition>(this.PolicyItemField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CodeAccessSecurityDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PolicyItemXName, typeof(PolicyItemDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PermissionSet, Assemblies)
    /// </para>
    /// </summary>
    public partial class PolicyItemDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PermissionSetXName = System.Xml.Linq.XName.Get("PermissionSet", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AssembliesXName = System.Xml.Linq.XName.Get("Assemblies", "http://schemas.microsoft.com/sharepoint/");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PolicyItemDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator PolicyItemDefinition(XElement xe) { return XTypedServices.ToXTypedElement<PolicyItemDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PolicyItemDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PermissionSet, Assemblies)
        /// </para>
        /// </summary>
        public PolicyItemDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (PermissionSet, Assemblies)
        /// </para>
        /// </summary>
        public virtual PermissionSetDefinition PermissionSet {
            get {
                XElement x = this.GetElement(PermissionSetXName);
                return ((PermissionSetDefinition)(x));
            }
            set {
                this.SetElement(PermissionSetXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (PermissionSet, Assemblies)
        /// </para>
        /// </summary>
        public virtual PolicyAssembliesDefinition Assemblies {
            get {
                XElement x = this.GetElement(AssembliesXName);
                return ((PolicyAssembliesDefinition)(x));
            }
            set {
                this.SetElement(AssembliesXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PolicyItemDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PermissionSetXName, typeof(PermissionSetDefinition));
            localElementDictionary.Add(AssembliesXName, typeof(PolicyAssembliesDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (IPermission+)
    /// </para>
    /// </summary>
    public partial class PermissionSetDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IPermissionXName = System.Xml.Linq.XName.Get("IPermission", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<XTypedElement> IPermissionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @classXName = System.Xml.Linq.XName.Get("class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName versionXName = System.Xml.Linq.XName.Get("version", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DescriptionXName = System.Xml.Linq.XName.Get("Description", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PermissionSetDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PermissionSetDefinition(XElement xe) { return XTypedServices.ToXTypedElement<PermissionSetDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PermissionSetDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(IPermissionXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (IPermission+)
        /// </para>
        /// </summary>
        public PermissionSetDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (IPermission+)
        /// </para>
        /// </summary>
        public virtual IList<XTypedElement> IPermission {
            get {
                if ((this.IPermissionField == null)) {
                    this.IPermissionField = new XTypedList<XTypedElement>(this, LinqToXsdTypeManager.Instance, IPermissionXName);
                }
                return this.IPermissionField;
            }
            set {
                if ((value == null)) {
                    this.IPermissionField = null;
                }
                else {
                    if ((this.IPermissionField == null)) {
                        this.IPermissionField = XTypedList<XTypedElement>.Initialize(this, LinqToXsdTypeManager.Instance, value, IPermissionXName);
                    }
                    else {
                        XTypedServices.SetList<XTypedElement>(this.IPermissionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.PermssionSetClassAttr @class {
            get {
                XAttribute x = this.Attribute(@classXName);
                return ((Microsoft.Schemas.SharePoint.PermssionSetClassAttr)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.PermssionSetClassAttr), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(@classXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string version {
            get {
                XAttribute x = this.Attribute(versionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(versionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Description {
            get {
                XAttribute x = this.Attribute(DescriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PermissionSetDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(IPermissionXName, typeof(XTypedElement));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public enum PermssionSetClassAttr {
        
        NamedPermissionSet,
    }
    
    public sealed class PermssionSetClassAttrValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "NamedPermissionSet"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private PermssionSetClassAttrValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Assembly+)
    /// </para>
    /// </summary>
    public partial class PolicyAssembliesDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AssemblyXName = System.Xml.Linq.XName.Get("Assembly", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PolicyAssemblyDefinition> AssemblyField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PolicyAssembliesDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PolicyAssembliesDefinition(XElement xe) { return XTypedServices.ToXTypedElement<PolicyAssembliesDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PolicyAssembliesDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AssemblyXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Assembly+)
        /// </para>
        /// </summary>
        public PolicyAssembliesDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Assembly+)
        /// </para>
        /// </summary>
        public virtual IList<PolicyAssemblyDefinition> Assembly {
            get {
                if ((this.AssemblyField == null)) {
                    this.AssemblyField = new XTypedList<PolicyAssemblyDefinition>(this, LinqToXsdTypeManager.Instance, AssemblyXName);
                }
                return this.AssemblyField;
            }
            set {
                if ((value == null)) {
                    this.AssemblyField = null;
                }
                else {
                    if ((this.AssemblyField == null)) {
                        this.AssemblyField = XTypedList<PolicyAssemblyDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, AssemblyXName);
                    }
                    else {
                        XTypedServices.SetList<PolicyAssemblyDefinition>(this.AssemblyField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PolicyAssembliesDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AssemblyXName, typeof(PolicyAssemblyDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class PolicyAssemblyDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VersionXName = System.Xml.Linq.XName.Get("Version", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PublicKeyBlobXName = System.Xml.Linq.XName.Get("PublicKeyBlob", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PolicyAssemblyDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator PolicyAssemblyDefinition(XElement xe) { return XTypedServices.ToXTypedElement<PolicyAssemblyDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public PolicyAssemblyDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Version {
            get {
                XAttribute x = this.Attribute(VersionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(VersionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string PublicKeyBlob {
            get {
                XAttribute x = this.Attribute(PublicKeyBlobXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PublicKeyBlobXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PolicyAssemblyDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((ContentTypeFilter | FieldChangedFilter | FieldExpressionFilter))
    /// </para>
    /// </summary>
    public partial class ItemEventDefinition : global::Microsoft.Schemas.SharePoint.EventDefinition, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ContentTypeFilterXName = System.Xml.Linq.XName.Get("ContentTypeFilter", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldChangedFilterXName = System.Xml.Linq.XName.Get("FieldChangedFilter", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldExpressionFilterXName = System.Xml.Linq.XName.Get("FieldExpressionFilter", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ScopeXName = System.Xml.Linq.XName.Get("Scope", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EventTypeXName = System.Xml.Linq.XName.Get("EventType", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ItemEventDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ItemEventDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ItemEventDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ItemEventDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(ContentTypeFilterXName), new NamedContentModelEntity(FieldChangedFilterXName), new NamedContentModelEntity(FieldExpressionFilterXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((ContentTypeFilter | FieldChangedFilter | FieldExpressionFilter))
        /// </para>
        /// </summary>
        public ItemEventDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentTypeFilter | FieldChangedFilter | FieldExpressionFilter))
        /// </para>
        /// </summary>
        public virtual ContentTypeFilterDefinition ContentTypeFilter {
            get {
                XElement x = this.GetElement(ContentTypeFilterXName);
                return ((ContentTypeFilterDefinition)(x));
            }
            set {
                this.SetElement(ContentTypeFilterXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentTypeFilter | FieldChangedFilter | FieldExpressionFilter))
        /// </para>
        /// </summary>
        public virtual FieldChangedFilterDefinition FieldChangedFilter {
            get {
                XElement x = this.GetElement(FieldChangedFilterXName);
                return ((FieldChangedFilterDefinition)(x));
            }
            set {
                this.SetElement(FieldChangedFilterXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentTypeFilter | FieldChangedFilter | FieldExpressionFilter))
        /// </para>
        /// </summary>
        public virtual FieldRefDefinition FieldExpressionFilter {
            get {
                XElement x = this.GetElement(FieldExpressionFilterXName);
                return ((FieldRefDefinition)(x));
            }
            set {
                this.SetElement(FieldExpressionFilterXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.ItemEventScope? Scope {
            get {
                XAttribute x = this.Attribute(ScopeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.ItemEventScope)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.ItemEventScope), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ScopeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.ItemEventType? EventType {
            get {
                XAttribute x = this.Attribute(EventTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.ItemEventType)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.ItemEventType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(EventTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ItemEventDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ContentTypeFilterXName, typeof(ContentTypeFilterDefinition));
            localElementDictionary.Add(FieldChangedFilterXName, typeof(FieldChangedFilterDefinition));
            localElementDictionary.Add(FieldExpressionFilterXName, typeof(FieldRefDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public enum ItemEventScope {
        
        Web,
        
        List,
        
        ContentType,
    }
    
    public sealed class ItemEventScopeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Web",
                        "List",
                        "ContentType"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ItemEventScopeValidator() {
        }
    }
    
    public partial class EventDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ReceiverAssemblyXName = System.Xml.Linq.XName.Get("ReceiverAssembly", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ReceiverClassXName = System.Xml.Linq.XName.Get("ReceiverClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SequenceXName = System.Xml.Linq.XName.Get("Sequence", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ReceiverDataXName = System.Xml.Linq.XName.Get("ReceiverData", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EventDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator EventDefinition(XElement xe) { return XTypedServices.ToXTypedElement<EventDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public EventDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ReceiverAssembly {
            get {
                XAttribute x = this.Attribute(ReceiverAssemblyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ReceiverAssemblyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ReceiverClass {
            get {
                XAttribute x = this.Attribute(ReceiverClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ReceiverClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? Sequence {
            get {
                XAttribute x = this.Attribute(SequenceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(SequenceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ReceiverData {
            get {
                XAttribute x = this.Attribute(ReceiverDataXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ReceiverDataXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<EventDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum ItemEventType {
        
        ItemAdding,
        
        ItemAdded,
        
        ItemUpdating,
        
        ItemUpdated,
        
        ItemDeleting,
        
        ItemDeleted,
        
        ItemCheckingIn,
        
        ItemCheckedIn,
        
        ItemCheckingOut,
        
        ItemUncheckingIn,
        
        ItemUncheckingOut,
        
        ItemMoving,
        
        ItemMoved,
        
        ItemFileUpdating,
        
        ItemFileUpdated,
        
        ItemFileRenaming,
        
        ItemFileRenamed,
        
        ItemFileReceiving,
        
        ItemFileReceived,
        
        ItemAttachmentAdding,
        
        ItemAttachmentAdded,
        
        ItemAttachmentDeleting,
        
        ItemAttachmentDeleted,
    }
    
    public sealed class ItemEventTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "ItemAdding",
                        "ItemAdded",
                        "ItemUpdating",
                        "ItemUpdated",
                        "ItemDeleting",
                        "ItemDeleted",
                        "ItemCheckingIn",
                        "ItemCheckedIn",
                        "ItemCheckingOut",
                        "ItemUncheckingIn",
                        "ItemUncheckingOut",
                        "ItemMoving",
                        "ItemMoved",
                        "ItemFileUpdating",
                        "ItemFileUpdated",
                        "ItemFileRenaming",
                        "ItemFileRenamed",
                        "ItemFileReceiving",
                        "ItemFileReceived",
                        "ItemAttachmentAdding",
                        "ItemAttachmentAdded",
                        "ItemAttachmentDeleting",
                        "ItemAttachmentDeleted"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ItemEventTypeValidator() {
        }
    }
    
    public partial class ContentTypeFilterDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ContentTypeIdXName = System.Xml.Linq.XName.Get("ContentTypeId", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ContentTypeFilterDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator ContentTypeFilterDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ContentTypeFilterDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ContentTypeFilterDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ContentTypeId {
            get {
                XAttribute x = this.Attribute(ContentTypeIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ContentTypeIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ContentTypeFilterDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class FieldChangedFilterDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldIdXName = System.Xml.Linq.XName.Get("FieldId", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FieldChangedFilterDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator FieldChangedFilterDefinition(XElement xe) { return XTypedServices.ToXTypedElement<FieldChangedFilterDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public FieldChangedFilterDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FieldId {
            get {
                XAttribute x = this.Attribute(FieldIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FieldIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FieldChangedFilterDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class FieldExpressionFilterDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldIdXName = System.Xml.Linq.XName.Get("FieldId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExpressionXName = System.Xml.Linq.XName.Get("Expression", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldValueXName = System.Xml.Linq.XName.Get("FieldValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FieldExpressionFilterDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator FieldExpressionFilterDefinition(XElement xe) { return XTypedServices.ToXTypedElement<FieldExpressionFilterDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public FieldExpressionFilterDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FieldId {
            get {
                XAttribute x = this.Attribute(FieldIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FieldIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Expression {
            get {
                XAttribute x = this.Attribute(ExpressionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ExpressionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FieldValue {
            get {
                XAttribute x = this.Attribute(FieldValueXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FieldValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FieldExpressionFilterDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum FieldControlImplementationType {
        
        Caml,
        
        Control,
    }
    
    public sealed class FieldControlImplementationTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Caml",
                        "Control"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private FieldControlImplementationTypeValidator() {
        }
    }
    
    public sealed class TRUEFALSEorResource {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "TRUE",
                        "FALSE",
                        "true",
                        "false",
                        "$Resources:core,True_Unless_Jpn"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private TRUEFALSEorResource() {
        }
    }
    
    public partial class CTFieldRefDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DefaultValueXName = System.Xml.Linq.XName.Get("DefaultValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DescriptionXName = System.Xml.Linq.XName.Get("Description", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DisplayNameXName = System.Xml.Linq.XName.Get("DisplayName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FormatXName = System.Xml.Linq.XName.Get("Format", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FilterableXName = System.Xml.Linq.XName.Get("Filterable", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FilterableNoRecurrenceXName = System.Xml.Linq.XName.Get("FilterableNoRecurrence", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FromBaseTypeXName = System.Xml.Linq.XName.Get("FromBaseType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HiddenXName = System.Xml.Linq.XName.Get("Hidden", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IDXName = System.Xml.Linq.XName.Get("ID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LockedXName = System.Xml.Linq.XName.Get("Locked", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NodeXName = System.Xml.Linq.XName.Get("Node", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NumLinesXName = System.Xml.Linq.XName.Get("NumLines", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ReadOnlyXName = System.Xml.Linq.XName.Get("ReadOnly", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ReadOnlyClientXName = System.Xml.Linq.XName.Get("ReadOnlyClient", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RequiredXName = System.Xml.Linq.XName.Get("Required", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SealedXName = System.Xml.Linq.XName.Get("Sealed", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ShowInDisplayFormXName = System.Xml.Linq.XName.Get("ShowInDisplayForm", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ShowInEditFormXName = System.Xml.Linq.XName.Get("ShowInEditForm", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ShowInFileDlgXName = System.Xml.Linq.XName.Get("ShowInFileDlg", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ShowInListSettingsXName = System.Xml.Linq.XName.Get("ShowInListSettings", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ShowInNewFormXName = System.Xml.Linq.XName.Get("ShowInNewForm", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SortableXName = System.Xml.Linq.XName.Get("Sortable", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CustomizationXName = System.Xml.Linq.XName.Get("Customization", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PIAttributeXName = System.Xml.Linq.XName.Get("PIAttribute", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PITargetXName = System.Xml.Linq.XName.Get("PITarget", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PrimaryPIAttributeXName = System.Xml.Linq.XName.Get("PrimaryPIAttribute", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PrimaryPITargetXName = System.Xml.Linq.XName.Get("PrimaryPITarget", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AggregationXName = System.Xml.Linq.XName.Get("Aggregation", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CTFieldRefDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator CTFieldRefDefinition(XElement xe) { return XTypedServices.ToXTypedElement<CTFieldRefDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public CTFieldRefDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DefaultValue {
            get {
                XAttribute x = this.Attribute(DefaultValueXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DefaultValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Description {
            get {
                XAttribute x = this.Attribute(DescriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DisplayName {
            get {
                XAttribute x = this.Attribute(DisplayNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DisplayNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Format {
            get {
                XAttribute x = this.Attribute(FormatXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FormatXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Filterable {
            get {
                XAttribute x = this.Attribute(FilterableXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FilterableXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FilterableNoRecurrence {
            get {
                XAttribute x = this.Attribute(FilterableNoRecurrenceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FilterableNoRecurrenceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FromBaseType {
            get {
                XAttribute x = this.Attribute(FromBaseTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FromBaseTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Hidden {
            get {
                XAttribute x = this.Attribute(HiddenXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(HiddenXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ID {
            get {
                XAttribute x = this.Attribute(IDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Locked {
            get {
                XAttribute x = this.Attribute(LockedXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(LockedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Node {
            get {
                XAttribute x = this.Attribute(NodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int64? NumLines {
            get {
                XAttribute x = this.Attribute(NumLinesXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<long>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
            }
            set {
                this.SetAttribute(NumLinesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ReadOnly {
            get {
                XAttribute x = this.Attribute(ReadOnlyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ReadOnlyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ReadOnlyClient {
            get {
                XAttribute x = this.Attribute(ReadOnlyClientXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ReadOnlyClientXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Required {
            get {
                XAttribute x = this.Attribute(RequiredXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(RequiredXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Sealed {
            get {
                XAttribute x = this.Attribute(SealedXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SealedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ShowInDisplayForm {
            get {
                XAttribute x = this.Attribute(ShowInDisplayFormXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ShowInDisplayFormXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ShowInEditForm {
            get {
                XAttribute x = this.Attribute(ShowInEditFormXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ShowInEditFormXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ShowInFileDlg {
            get {
                XAttribute x = this.Attribute(ShowInFileDlgXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ShowInFileDlgXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ShowInListSettings {
            get {
                XAttribute x = this.Attribute(ShowInListSettingsXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ShowInListSettingsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ShowInNewForm {
            get {
                XAttribute x = this.Attribute(ShowInNewFormXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ShowInNewFormXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Sortable {
            get {
                XAttribute x = this.Attribute(SortableXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SortableXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Customization {
            get {
                XAttribute x = this.Attribute(CustomizationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CustomizationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string PIAttribute {
            get {
                XAttribute x = this.Attribute(PIAttributeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PIAttributeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string PITarget {
            get {
                XAttribute x = this.Attribute(PITargetXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PITargetXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string PrimaryPIAttribute {
            get {
                XAttribute x = this.Attribute(PrimaryPIAttributeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PrimaryPIAttributeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string PrimaryPITarget {
            get {
                XAttribute x = this.Attribute(PrimaryPITargetXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PrimaryPITargetXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Aggregation {
            get {
                XAttribute x = this.Attribute(AggregationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AggregationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CTFieldRefDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((FieldRef* | RemoveFieldRef* | DocumentTemplate)*)
    /// </para>
    /// </summary>
    public partial class CTFieldRefDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldRefXName = System.Xml.Linq.XName.Get("FieldRef", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CTFieldRefDefinition> FieldRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RemoveFieldRefXName = System.Xml.Linq.XName.Get("RemoveFieldRef", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CTFieldRefDefinition> RemoveFieldRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DocumentTemplateXName = System.Xml.Linq.XName.Get("DocumentTemplate", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> DocumentTemplateField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CTFieldRefDefinitions", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CTFieldRefDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<CTFieldRefDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CTFieldRefDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(FieldRefXName), new NamedContentModelEntity(RemoveFieldRefXName), new NamedContentModelEntity(DocumentTemplateXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((FieldRef* | RemoveFieldRef* | DocumentTemplate)*)
        /// </para>
        /// </summary>
        public CTFieldRefDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((FieldRef* | RemoveFieldRef* | DocumentTemplate)*)
        /// </para>
        /// </summary>
        public virtual IList<CTFieldRefDefinition> FieldRef {
            get {
                if ((this.FieldRefField == null)) {
                    this.FieldRefField = new XTypedList<CTFieldRefDefinition>(this, LinqToXsdTypeManager.Instance, FieldRefXName);
                }
                return this.FieldRefField;
            }
            set {
                if ((value == null)) {
                    this.FieldRefField = null;
                }
                else {
                    if ((this.FieldRefField == null)) {
                        this.FieldRefField = XTypedList<CTFieldRefDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldRefXName);
                    }
                    else {
                        XTypedServices.SetList<CTFieldRefDefinition>(this.FieldRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((FieldRef* | RemoveFieldRef* | DocumentTemplate)*)
        /// </para>
        /// </summary>
        public virtual IList<CTFieldRefDefinition> RemoveFieldRef {
            get {
                if ((this.RemoveFieldRefField == null)) {
                    this.RemoveFieldRefField = new XTypedList<CTFieldRefDefinition>(this, LinqToXsdTypeManager.Instance, RemoveFieldRefXName);
                }
                return this.RemoveFieldRefField;
            }
            set {
                if ((value == null)) {
                    this.RemoveFieldRefField = null;
                }
                else {
                    if ((this.RemoveFieldRefField == null)) {
                        this.RemoveFieldRefField = XTypedList<CTFieldRefDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, RemoveFieldRefXName);
                    }
                    else {
                        XTypedServices.SetList<CTFieldRefDefinition>(this.RemoveFieldRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((FieldRef* | RemoveFieldRef* | DocumentTemplate)*)
        /// </para>
        /// </summary>
        public virtual IList<string> DocumentTemplate {
            get {
                if ((this.DocumentTemplateField == null)) {
                    this.DocumentTemplateField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, DocumentTemplateXName);
                }
                return this.DocumentTemplateField;
            }
            set {
                if ((value == null)) {
                    this.DocumentTemplateField = null;
                }
                else {
                    if ((this.DocumentTemplateField == null)) {
                        this.DocumentTemplateField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, DocumentTemplateXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.DocumentTemplateField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CTFieldRefDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FieldRefXName, typeof(CTFieldRefDefinition));
            localElementDictionary.Add(RemoveFieldRefXName, typeof(CTFieldRefDefinition));
            localElementDictionary.Add(DocumentTemplateXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public enum ContentTypeItemStructure {
        
        ListItem,
        
        Document,
        
        Folder,
    }
    
    public sealed class ContentTypeItemStructureValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "ListItem",
                        "Document",
                        "Folder"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ContentTypeItemStructureValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (MetaData?)
    /// </para>
    /// </summary>
    public partial class ListDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MetaDataXName = System.Xml.Linq.XName.Get("MetaData", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TitleXName = System.Xml.Linq.XName.Get("Title", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UrlXName = System.Xml.Linq.XName.Get("Url", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DefaultXName = System.Xml.Linq.XName.Get("Default", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WebImageWidthXName = System.Xml.Linq.XName.Get("WebImageWidth", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EnableThumbnailsXName = System.Xml.Linq.XName.Get("EnableThumbnails", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EnableContentTypesXName = System.Xml.Linq.XName.Get("EnableContentTypes", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FolderCreationXName = System.Xml.Linq.XName.Get("FolderCreation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DisableAttachmentsXName = System.Xml.Linq.XName.Get("DisableAttachments", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EventSinkAssemblyXName = System.Xml.Linq.XName.Get("EventSinkAssembly", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EventSinkClassXName = System.Xml.Linq.XName.Get("EventSinkClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EventSinkDataXName = System.Xml.Linq.XName.Get("EventSinkData", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OrderedListXName = System.Xml.Linq.XName.Get("OrderedList", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ForceDefaultContentTypeXName = System.Xml.Linq.XName.Get("ForceDefaultContentType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PrivateListXName = System.Xml.Linq.XName.Get("PrivateList", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName QuickLaunchUrlXName = System.Xml.Linq.XName.Get("QuickLaunchUrl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RootWebOnlyXName = System.Xml.Linq.XName.Get("RootWebOnly", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ModeratedListXName = System.Xml.Linq.XName.Get("ModeratedList", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DraftVersionVisibilityXName = System.Xml.Linq.XName.Get("DraftVersionVisibility", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ThumbnailSizeXName = System.Xml.Linq.XName.Get("ThumbnailSize", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DefaultItemOpenXName = System.Xml.Linq.XName.Get("DefaultItemOpen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VersioningEnabledXName = System.Xml.Linq.XName.Get("VersioningEnabled", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EnableMinorVersionsXName = System.Xml.Linq.XName.Get("EnableMinorVersions", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ModerationTypeXName = System.Xml.Linq.XName.Get("ModerationType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypeXName = System.Xml.Linq.XName.Get("Type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName URLEncodeXName = System.Xml.Linq.XName.Get("URLEncode", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WebImageHeightXName = System.Xml.Linq.XName.Get("WebImageHeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BaseTypeXName = System.Xml.Linq.XName.Get("BaseType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DirectionXName = System.Xml.Linq.XName.Get("Direction", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ListDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ListDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ListDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ListDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(MetaDataXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (MetaData?)
        /// </para>
        /// </summary>
        public ListDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MetaData?)
        /// </para>
        /// </summary>
        public virtual ListMetaDataDefinition MetaData {
            get {
                XElement x = this.GetElement(MetaDataXName);
                return ((ListMetaDataDefinition)(x));
            }
            set {
                this.SetElement(MetaDataXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Title {
            get {
                XAttribute x = this.Attribute(TitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Url {
            get {
                XAttribute x = this.Attribute(UrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(UrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Default {
            get {
                XAttribute x = this.Attribute(DefaultXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DefaultXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int64? WebImageWidth {
            get {
                XAttribute x = this.Attribute(WebImageWidthXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<long>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
            }
            set {
                this.SetAttribute(WebImageWidthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string EnableThumbnails {
            get {
                XAttribute x = this.Attribute(EnableThumbnailsXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(EnableThumbnailsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string EnableContentTypes {
            get {
                XAttribute x = this.Attribute(EnableContentTypesXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(EnableContentTypesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FolderCreation {
            get {
                XAttribute x = this.Attribute(FolderCreationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FolderCreationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DisableAttachments {
            get {
                XAttribute x = this.Attribute(DisableAttachmentsXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DisableAttachmentsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string EventSinkAssembly {
            get {
                XAttribute x = this.Attribute(EventSinkAssemblyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(EventSinkAssemblyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string EventSinkClass {
            get {
                XAttribute x = this.Attribute(EventSinkClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(EventSinkClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string EventSinkData {
            get {
                XAttribute x = this.Attribute(EventSinkDataXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(EventSinkDataXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string OrderedList {
            get {
                XAttribute x = this.Attribute(OrderedListXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(OrderedListXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ForceDefaultContentType {
            get {
                XAttribute x = this.Attribute(ForceDefaultContentTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ForceDefaultContentTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string PrivateList {
            get {
                XAttribute x = this.Attribute(PrivateListXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(PrivateListXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string QuickLaunchUrl {
            get {
                XAttribute x = this.Attribute(QuickLaunchUrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(QuickLaunchUrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string RootWebOnly {
            get {
                XAttribute x = this.Attribute(RootWebOnlyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(RootWebOnlyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ModeratedList {
            get {
                XAttribute x = this.Attribute(ModeratedListXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ModeratedListXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? DraftVersionVisibility {
            get {
                XAttribute x = this.Attribute(DraftVersionVisibilityXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(DraftVersionVisibilityXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? ThumbnailSize {
            get {
                XAttribute x = this.Attribute(ThumbnailSizeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(ThumbnailSizeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? DefaultItemOpen {
            get {
                XAttribute x = this.Attribute(DefaultItemOpenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(DefaultItemOpenXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string VersioningEnabled {
            get {
                XAttribute x = this.Attribute(VersioningEnabledXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(VersioningEnabledXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string EnableMinorVersions {
            get {
                XAttribute x = this.Attribute(EnableMinorVersionsXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(EnableMinorVersionsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ModerationType {
            get {
                XAttribute x = this.Attribute(ModerationTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ModerationTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? Type {
            get {
                XAttribute x = this.Attribute(TypeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(TypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string URLEncode {
            get {
                XAttribute x = this.Attribute(URLEncodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(URLEncodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int64? WebImageHeight {
            get {
                XAttribute x = this.Attribute(WebImageHeightXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<long>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
            }
            set {
                this.SetAttribute(WebImageHeightXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? BaseType {
            get {
                XAttribute x = this.Attribute(BaseTypeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(BaseTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Direction {
            get {
                XAttribute x = this.Attribute(DirectionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DirectionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ListDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(MetaDataXName, typeof(ListMetaDataDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class ContentTypeLink : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ContentTypeLink", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator ContentTypeLink(XElement xe) { return XTypedServices.ToXTypedElement<ContentTypeLink>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ContentTypeLink() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ContentTypeLink>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ContentTypeLink*)
    /// </para>
    /// </summary>
    public partial class ContentTypeLinks : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ContentTypeLinkXName = System.Xml.Linq.XName.Get("ContentTypeLink", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ContentTypeLink> ContentTypeLinkField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ContentTypeLinks", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ContentTypeLinks(XElement xe) { return XTypedServices.ToXTypedElement<ContentTypeLinks>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ContentTypeLinks() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ContentTypeLinkXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ContentTypeLink*)
        /// </para>
        /// </summary>
        public ContentTypeLinks() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ContentTypeLink*)
        /// </para>
        /// </summary>
        public virtual IList<ContentTypeLink> ContentTypeLink {
            get {
                if ((this.ContentTypeLinkField == null)) {
                    this.ContentTypeLinkField = new XTypedList<ContentTypeLink>(this, LinqToXsdTypeManager.Instance, ContentTypeLinkXName);
                }
                return this.ContentTypeLinkField;
            }
            set {
                if ((value == null)) {
                    this.ContentTypeLinkField = null;
                }
                else {
                    if ((this.ContentTypeLinkField == null)) {
                        this.ContentTypeLinkField = XTypedList<ContentTypeLink>.Initialize(this, LinqToXsdTypeManager.Instance, value, ContentTypeLinkXName);
                    }
                    else {
                        XTypedServices.SetList<ContentTypeLink>(this.ContentTypeLinkField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ContentTypeLinks>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ContentTypeLinkXName, typeof(ContentTypeLink));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public enum ViewRegistrationType {
        
        List,
        
        ContentType,
    }
    
    public sealed class ViewRegistrationTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "List",
                        "ContentType"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ViewRegistrationTypeValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Property*)
    /// </para>
    /// </summary>
    public partial class FeaturePropertyDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertyXName = System.Xml.Linq.XName.Get("Property", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FeaturePropertyDefinition> PropertyField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FeaturePropertyDefinitions", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FeaturePropertyDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<FeaturePropertyDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FeaturePropertyDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PropertyXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Property*)
        /// </para>
        /// </summary>
        public FeaturePropertyDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property*)
        /// </para>
        /// </summary>
        public virtual IList<FeaturePropertyDefinition> Property {
            get {
                if ((this.PropertyField == null)) {
                    this.PropertyField = new XTypedList<FeaturePropertyDefinition>(this, LinqToXsdTypeManager.Instance, PropertyXName);
                }
                return this.PropertyField;
            }
            set {
                if ((value == null)) {
                    this.PropertyField = null;
                }
                else {
                    if ((this.PropertyField == null)) {
                        this.PropertyField = XTypedList<FeaturePropertyDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropertyXName);
                    }
                    else {
                        XTypedServices.SetList<FeaturePropertyDefinition>(this.PropertyField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FeaturePropertyDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PropertyXName, typeof(FeaturePropertyDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class FeaturePropertyDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KeyXName = System.Xml.Linq.XName.Get("Key", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ValueXName = System.Xml.Linq.XName.Get("Value", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FeaturePropertyDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator FeaturePropertyDefinition(XElement xe) { return XTypedServices.ToXTypedElement<FeaturePropertyDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public FeaturePropertyDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Key {
            get {
                XAttribute x = this.Attribute(KeyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(KeyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Value {
            get {
                XAttribute x = this.Attribute(ValueXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FeaturePropertyDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Fields?, Forms?, Default?, DefaultDescription?, Views?, Toolbar?, ContentTypes?, Validation?)
    /// </para>
    /// </summary>
    public partial class ListMetaDataDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldsXName = System.Xml.Linq.XName.Get("Fields", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FormsXName = System.Xml.Linq.XName.Get("Forms", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DefaultXName = System.Xml.Linq.XName.Get("Default", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DefaultDescriptionXName = System.Xml.Linq.XName.Get("DefaultDescription", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ViewsXName = System.Xml.Linq.XName.Get("Views", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToolbarXName = System.Xml.Linq.XName.Get("Toolbar", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ContentTypesXName = System.Xml.Linq.XName.Get("ContentTypes", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ValidationXName = System.Xml.Linq.XName.Get("Validation", "http://schemas.microsoft.com/sharepoint/");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ListMetaDataDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator ListMetaDataDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ListMetaDataDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ListMetaDataDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Fields?, Forms?, Default?, DefaultDescription?, Views?, Toolbar?, ContentTypes?, Validation?)
        /// </para>
        /// </summary>
        public ListMetaDataDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Fields?, Forms?, Default?, DefaultDescription?, Views?, Toolbar?, ContentTypes?, Validation?)
        /// </para>
        /// </summary>
        public virtual FieldDefinitions Fields {
            get {
                XElement x = this.GetElement(FieldsXName);
                return ((FieldDefinitions)(x));
            }
            set {
                this.SetElement(FieldsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Fields?, Forms?, Default?, DefaultDescription?, Views?, Toolbar?, ContentTypes?, Validation?)
        /// </para>
        /// </summary>
        public virtual ListFormSet Forms {
            get {
                XElement x = this.GetElement(FormsXName);
                return ((ListFormSet)(x));
            }
            set {
                this.SetElement(FormsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Fields?, Forms?, Default?, DefaultDescription?, Views?, Toolbar?, ContentTypes?, Validation?)
        /// </para>
        /// </summary>
        public virtual ListMetaDataDefault Default {
            get {
                XElement x = this.GetElement(DefaultXName);
                return ((ListMetaDataDefault)(x));
            }
            set {
                this.SetElement(DefaultXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Fields?, Forms?, Default?, DefaultDescription?, Views?, Toolbar?, ContentTypes?, Validation?)
        /// </para>
        /// </summary>
        public virtual string DefaultDescription {
            get {
                XElement x = this.GetElement(DefaultDescriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(DefaultDescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Fields?, Forms?, Default?, DefaultDescription?, Views?, Toolbar?, ContentTypes?, Validation?)
        /// </para>
        /// </summary>
        public virtual ViewDefinitions Views {
            get {
                XElement x = this.GetElement(ViewsXName);
                return ((ViewDefinitions)(x));
            }
            set {
                this.SetElement(ViewsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Fields?, Forms?, Default?, DefaultDescription?, Views?, Toolbar?, ContentTypes?, Validation?)
        /// </para>
        /// </summary>
        public virtual ToolbarDefinition Toolbar {
            get {
                XElement x = this.GetElement(ToolbarXName);
                return ((ToolbarDefinition)(x));
            }
            set {
                this.SetElement(ToolbarXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Fields?, Forms?, Default?, DefaultDescription?, Views?, Toolbar?, ContentTypes?, Validation?)
        /// </para>
        /// </summary>
        public virtual ContentTypeReferences ContentTypes {
            get {
                XElement x = this.GetElement(ContentTypesXName);
                return ((ContentTypeReferences)(x));
            }
            set {
                this.SetElement(ContentTypesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Fields?, Forms?, Default?, DefaultDescription?, Views?, Toolbar?, ContentTypes?, Validation?)
        /// </para>
        /// </summary>
        public virtual ValidationDefinition Validation {
            get {
                XElement x = this.GetElement(ValidationXName);
                return ((ValidationDefinition)(x));
            }
            set {
                this.SetElement(ValidationXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ListMetaDataDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FieldsXName, typeof(FieldDefinitions));
            localElementDictionary.Add(FormsXName, typeof(ListFormSet));
            localElementDictionary.Add(DefaultXName, typeof(ListMetaDataDefault));
            localElementDictionary.Add(DefaultDescriptionXName, typeof(string));
            localElementDictionary.Add(ViewsXName, typeof(ViewDefinitions));
            localElementDictionary.Add(ToolbarXName, typeof(ToolbarDefinition));
            localElementDictionary.Add(ContentTypesXName, typeof(ContentTypeReferences));
            localElementDictionary.Add(ValidationXName, typeof(ValidationDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (SafeControl+)
    /// </para>
    /// </summary>
    public partial class SafeControlDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SafeControlXName = System.Xml.Linq.XName.Get("SafeControl", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SafeControlDefinition> SafeControlField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SafeControlDefinitions", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SafeControlDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<SafeControlDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SafeControlDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SafeControlXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SafeControl+)
        /// </para>
        /// </summary>
        public SafeControlDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SafeControl+)
        /// </para>
        /// </summary>
        public virtual IList<SafeControlDefinition> SafeControl {
            get {
                if ((this.SafeControlField == null)) {
                    this.SafeControlField = new XTypedList<SafeControlDefinition>(this, LinqToXsdTypeManager.Instance, SafeControlXName);
                }
                return this.SafeControlField;
            }
            set {
                if ((value == null)) {
                    this.SafeControlField = null;
                }
                else {
                    if ((this.SafeControlField == null)) {
                        this.SafeControlField = XTypedList<SafeControlDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, SafeControlXName);
                    }
                    else {
                        XTypedServices.SetList<SafeControlDefinition>(this.SafeControlField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SafeControlDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SafeControlXName, typeof(SafeControlDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class SafeControlDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AssemblyXName = System.Xml.Linq.XName.Get("Assembly", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NamespaceXName = System.Xml.Linq.XName.Get("Namespace", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypeNameXName = System.Xml.Linq.XName.Get("TypeName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SafeXName = System.Xml.Linq.XName.Get("Safe", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SafeAgainstScriptXName = System.Xml.Linq.XName.Get("SafeAgainstScript", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SafeControlDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator SafeControlDefinition(XElement xe) { return XTypedServices.ToXTypedElement<SafeControlDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public SafeControlDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Assembly {
            get {
                XAttribute x = this.Attribute(AssemblyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AssemblyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Namespace {
            get {
                XAttribute x = this.Attribute(NamespaceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NamespaceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TypeName {
            get {
                XAttribute x = this.Attribute(TypeNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TypeNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.TrueFalseMixed? Safe {
            get {
                XAttribute x = this.Attribute(SafeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.TrueFalseMixed)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.TrueFalseMixed), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(SafeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.TrueFalseMixed? SafeAgainstScript {
            get {
                XAttribute x = this.Attribute(SafeAgainstScriptXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.TrueFalseMixed)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.TrueFalseMixed), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(SafeAgainstScriptXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SafeControlDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (XmlDocument+)
    /// </para>
    /// </summary>
    public partial class XmlDocumentDefinitionCollection : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName XmlDocumentXName = System.Xml.Linq.XName.Get("XmlDocument", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<XmlDocumentDefinition> XmlDocumentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("XmlDocumentDefinitionCollection", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator XmlDocumentDefinitionCollection(XElement xe) { return XTypedServices.ToXTypedElement<XmlDocumentDefinitionCollection>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static XmlDocumentDefinitionCollection() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XmlDocumentXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (XmlDocument+)
        /// </para>
        /// </summary>
        public XmlDocumentDefinitionCollection() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (XmlDocument+)
        /// </para>
        /// </summary>
        public virtual IList<XmlDocumentDefinition> XmlDocument {
            get {
                if ((this.XmlDocumentField == null)) {
                    this.XmlDocumentField = new XTypedList<XmlDocumentDefinition>(this, LinqToXsdTypeManager.Instance, XmlDocumentXName);
                }
                return this.XmlDocumentField;
            }
            set {
                if ((value == null)) {
                    this.XmlDocumentField = null;
                }
                else {
                    if ((this.XmlDocumentField == null)) {
                        this.XmlDocumentField = XTypedList<XmlDocumentDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, XmlDocumentXName);
                    }
                    else {
                        XTypedServices.SetList<XmlDocumentDefinition>(this.XmlDocumentField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<XmlDocumentDefinitionCollection>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XmlDocumentXName, typeof(XmlDocumentDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (any)
    /// </para>
    /// </summary>
    public partial class XmlDocumentDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NamespaceURIXName = System.Xml.Linq.XName.Get("NamespaceURI", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("XmlDocumentDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static FSM validationStates;
        
		public static explicit operator XmlDocumentDefinition(XElement xe) { return XTypedServices.ToXTypedElement<XmlDocumentDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static XmlDocumentDefinition() {
            InitFSM();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public XmlDocumentDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public virtual IEnumerable<XElement> Any {
            get {
                return this.GetWildCards(WildCard.DefaultWildCard);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string NamespaceURI {
            get {
                XAttribute x = this.Attribute(NamespaceURIXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NamespaceURIXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<XmlDocumentDefinition>(this);
        }
        
        FSM IXMetaData.GetValidationStates() {
            return validationStates;
        }
        
        private static void InitFSM() {
            Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
            transitions.Add(1, new Transitions(new SingleTransition(new WildCard("##any", "http://schemas.microsoft.com/sharepoint/"), 2)));
            validationStates = new FSM(1, new Set<int>(2), transitions);
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Property*)
    /// </para>
    /// </summary>
    public partial class DelegateControlDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertyXName = System.Xml.Linq.XName.Get("Property", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SimplePropertyDefinition> PropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SequenceXName = System.Xml.Linq.XName.Get("Sequence", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ControlAssemblyXName = System.Xml.Linq.XName.Get("ControlAssembly", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ControlClassXName = System.Xml.Linq.XName.Get("ControlClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ControlSrcXName = System.Xml.Linq.XName.Get("ControlSrc", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DelegateControlDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DelegateControlDefinition(XElement xe) { return XTypedServices.ToXTypedElement<DelegateControlDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DelegateControlDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PropertyXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Property*)
        /// </para>
        /// </summary>
        public DelegateControlDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property*)
        /// </para>
        /// </summary>
        public virtual IList<SimplePropertyDefinition> Property {
            get {
                if ((this.PropertyField == null)) {
                    this.PropertyField = new XTypedList<SimplePropertyDefinition>(this, LinqToXsdTypeManager.Instance, PropertyXName);
                }
                return this.PropertyField;
            }
            set {
                if ((value == null)) {
                    this.PropertyField = null;
                }
                else {
                    if ((this.PropertyField == null)) {
                        this.PropertyField = XTypedList<SimplePropertyDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropertyXName);
                    }
                    else {
                        XTypedServices.SetList<SimplePropertyDefinition>(this.PropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? Sequence {
            get {
                XAttribute x = this.Attribute(SequenceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(SequenceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ControlAssembly {
            get {
                XAttribute x = this.Attribute(ControlAssemblyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ControlAssemblyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ControlClass {
            get {
                XAttribute x = this.Attribute(ControlClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ControlClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ControlSrc {
            get {
                XAttribute x = this.Attribute(ControlSrcXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ControlSrcXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DelegateControlDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PropertyXName, typeof(SimplePropertyDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Receiver+)
    /// </para>
    /// </summary>
    public partial class ReceiverDefinitionCollection : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ReceiverXName = System.Xml.Linq.XName.Get("Receiver", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ReceiverDefinition> ReceiverField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ListTemplateIdXName = System.Xml.Linq.XName.Get("ListTemplateId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ListUrlXName = System.Xml.Linq.XName.Get("ListUrl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ListTemplateOwnerXName = System.Xml.Linq.XName.Get("ListTemplateOwner", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RootWebOnlyXName = System.Xml.Linq.XName.Get("RootWebOnly", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ScopeXName = System.Xml.Linq.XName.Get("Scope", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ReceiverDefinitionCollection", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ReceiverDefinitionCollection(XElement xe) { return XTypedServices.ToXTypedElement<ReceiverDefinitionCollection>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ReceiverDefinitionCollection() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ReceiverXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Receiver+)
        /// </para>
        /// </summary>
        public ReceiverDefinitionCollection() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Receiver+)
        /// </para>
        /// </summary>
        public virtual IList<ReceiverDefinition> Receiver {
            get {
                if ((this.ReceiverField == null)) {
                    this.ReceiverField = new XTypedList<ReceiverDefinition>(this, LinqToXsdTypeManager.Instance, ReceiverXName);
                }
                return this.ReceiverField;
            }
            set {
                if ((value == null)) {
                    this.ReceiverField = null;
                }
                else {
                    if ((this.ReceiverField == null)) {
                        this.ReceiverField = XTypedList<ReceiverDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, ReceiverXName);
                    }
                    else {
                        XTypedServices.SetList<ReceiverDefinition>(this.ReceiverField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? ListTemplateId {
            get {
                XAttribute x = this.Attribute(ListTemplateIdXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(ListTemplateIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ListUrl {
            get {
                XAttribute x = this.Attribute(ListUrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ListUrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ListTemplateOwner {
            get {
                XAttribute x = this.Attribute(ListTemplateOwnerXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ListTemplateOwnerXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string RootWebOnly {
            get {
                XAttribute x = this.Attribute(RootWebOnlyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(RootWebOnlyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.EventReceiverScope? Scope {
            get {
                XAttribute x = this.Attribute(ScopeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.EventReceiverScope)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.EventReceiverScope), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ScopeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ReceiverDefinitionCollection>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ReceiverXName, typeof(ReceiverDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Name?, Synchronization?, Type?, SequenceNumber?, Assembly?, Class?, Data?, Filter?, SolutionId?, SourceId?, SourceType?)
    /// </para>
    /// </summary>
    public partial class ReceiverDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SynchronizationXName = System.Xml.Linq.XName.Get("Synchronization", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypeXName = System.Xml.Linq.XName.Get("Type", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SequenceNumberXName = System.Xml.Linq.XName.Get("SequenceNumber", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AssemblyXName = System.Xml.Linq.XName.Get("Assembly", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ClassXName = System.Xml.Linq.XName.Get("Class", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DataXName = System.Xml.Linq.XName.Get("Data", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FilterXName = System.Xml.Linq.XName.Get("Filter", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SolutionIdXName = System.Xml.Linq.XName.Get("SolutionId", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SourceIdXName = System.Xml.Linq.XName.Get("SourceId", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SourceTypeXName = System.Xml.Linq.XName.Get("SourceType", "http://schemas.microsoft.com/sharepoint/");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ReceiverDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator ReceiverDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ReceiverDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ReceiverDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Name?, Synchronization?, Type?, SequenceNumber?, Assembly?, Class?, Data?, Filter?, SolutionId?, SourceId?, SourceType?)
        /// </para>
        /// </summary>
        public ReceiverDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name?, Synchronization?, Type?, SequenceNumber?, Assembly?, Class?, Data?, Filter?, SolutionId?, SourceId?, SourceType?)
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XElement x = this.GetElement(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name?, Synchronization?, Type?, SequenceNumber?, Assembly?, Class?, Data?, Filter?, SolutionId?, SourceId?, SourceType?)
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.EventReceiverSynchronization? Synchronization {
            get {
                XElement x = this.GetElement(SynchronizationXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.EventReceiverSynchronization)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.EventReceiverSynchronization), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                if (value == null) {
                    this.SetElement(SynchronizationXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(SynchronizationXName, value.ToString(), "Synchronization", global::Microsoft.Schemas.SharePoint.EventReceiverSynchronizationValidator.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name?, Synchronization?, Type?, SequenceNumber?, Assembly?, Class?, Data?, Filter?, SolutionId?, SourceId?, SourceType?)
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.EventReceiverType? Type {
            get {
                XElement x = this.GetElement(TypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Schemas.SharePoint.EventReceiverType)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.EventReceiverType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                if (value == null) {
                    this.SetElement(TypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(TypeXName, value.ToString(), "Type", global::Microsoft.Schemas.SharePoint.EventReceiverTypeValidator.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name?, Synchronization?, Type?, SequenceNumber?, Assembly?, Class?, Data?, Filter?, SolutionId?, SourceId?, SourceType?)
        /// </para>
        /// </summary>
        public virtual string SequenceNumber {
            get {
                XElement x = this.GetElement(SequenceNumberXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(SequenceNumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name?, Synchronization?, Type?, SequenceNumber?, Assembly?, Class?, Data?, Filter?, SolutionId?, SourceId?, SourceType?)
        /// </para>
        /// </summary>
        public virtual string Assembly {
            get {
                XElement x = this.GetElement(AssemblyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(AssemblyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name?, Synchronization?, Type?, SequenceNumber?, Assembly?, Class?, Data?, Filter?, SolutionId?, SourceId?, SourceType?)
        /// </para>
        /// </summary>
        public virtual string Class {
            get {
                XElement x = this.GetElement(ClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(ClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name?, Synchronization?, Type?, SequenceNumber?, Assembly?, Class?, Data?, Filter?, SolutionId?, SourceId?, SourceType?)
        /// </para>
        /// </summary>
        public virtual string Data {
            get {
                XElement x = this.GetElement(DataXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(DataXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name?, Synchronization?, Type?, SequenceNumber?, Assembly?, Class?, Data?, Filter?, SolutionId?, SourceId?, SourceType?)
        /// </para>
        /// </summary>
        public virtual string Filter {
            get {
                XElement x = this.GetElement(FilterXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(FilterXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name?, Synchronization?, Type?, SequenceNumber?, Assembly?, Class?, Data?, Filter?, SolutionId?, SourceId?, SourceType?)
        /// </para>
        /// </summary>
        public virtual string SolutionId {
            get {
                XElement x = this.GetElement(SolutionIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SolutionIdXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(SolutionIdXName, value, "SolutionId", global::Microsoft.Schemas.SharePoint.UniqueIdentifier.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name?, Synchronization?, Type?, SequenceNumber?, Assembly?, Class?, Data?, Filter?, SolutionId?, SourceId?, SourceType?)
        /// </para>
        /// </summary>
        public virtual string SourceId {
            get {
                XElement x = this.GetElement(SourceIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(SourceIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name?, Synchronization?, Type?, SequenceNumber?, Assembly?, Class?, Data?, Filter?, SolutionId?, SourceId?, SourceType?)
        /// </para>
        /// </summary>
        public virtual string SourceType {
            get {
                XElement x = this.GetElement(SourceTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(SourceTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ReceiverDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(NameXName, typeof(string));
            localElementDictionary.Add(SynchronizationXName, typeof(string));
            localElementDictionary.Add(TypeXName, typeof(string));
            localElementDictionary.Add(SequenceNumberXName, typeof(string));
            localElementDictionary.Add(AssemblyXName, typeof(string));
            localElementDictionary.Add(ClassXName, typeof(string));
            localElementDictionary.Add(DataXName, typeof(string));
            localElementDictionary.Add(FilterXName, typeof(string));
            localElementDictionary.Add(SolutionIdXName, typeof(string));
            localElementDictionary.Add(SourceIdXName, typeof(string));
            localElementDictionary.Add(SourceTypeXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class UserMigratorDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AssemblyXName = System.Xml.Linq.XName.Get("Assembly", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ClassXName = System.Xml.Linq.XName.Get("Class", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("UserMigratorDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator UserMigratorDefinition(XElement xe) { return XTypedServices.ToXTypedElement<UserMigratorDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public UserMigratorDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Assembly {
            get {
                XAttribute x = this.Attribute(AssemblyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AssemblyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Class {
            get {
                XAttribute x = this.Attribute(ClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UserMigratorDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class GroupMigratorDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AssemblyXName = System.Xml.Linq.XName.Get("Assembly", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ClassXName = System.Xml.Linq.XName.Get("Class", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GroupMigratorDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator GroupMigratorDefinition(XElement xe) { return XTypedServices.ToXTypedElement<GroupMigratorDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public GroupMigratorDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Assembly {
            get {
                XAttribute x = this.Attribute(AssemblyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AssemblyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Class {
            get {
                XAttribute x = this.Attribute(ClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GroupMigratorDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class SimplePropertyDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SimplePropertyDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator SimplePropertyDefinition(XElement xe) { return XTypedServices.ToXTypedElement<SimplePropertyDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public SimplePropertyDefinition() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SimplePropertyDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class WebPartAdderExtensionDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AssemblyXName = System.Xml.Linq.XName.Get("Assembly", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ClassXName = System.Xml.Linq.XName.Get("Class", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("WebPartAdderExtensionDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator WebPartAdderExtensionDefinition(XElement xe) { return XTypedServices.ToXTypedElement<WebPartAdderExtensionDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public WebPartAdderExtensionDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Assembly {
            get {
                XAttribute x = this.Attribute(AssemblyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AssemblyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Class {
            get {
                XAttribute x = this.Attribute(ClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<WebPartAdderExtensionDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class PropertyBagType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "int",
                        "string",
                        "DateTime"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private PropertyBagType() {
        }
    }
    
    public partial class PropertyValueAttributeDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ValueXName = System.Xml.Linq.XName.Get("Value", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypeXName = System.Xml.Linq.XName.Get("Type", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PropertyValueAttributeDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator PropertyValueAttributeDefinition(XElement xe) { return XTypedServices.ToXTypedElement<PropertyValueAttributeDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public PropertyValueAttributeDefinition() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Value {
            get {
                XAttribute x = this.Attribute(ValueXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Type {
            get {
                XAttribute x = this.Attribute(TypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PropertyValueAttributeDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ContentTypeDocumentTemplateDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TargetNameXName = System.Xml.Linq.XName.Get("TargetName", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ContentTypeDocumentTemplateDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator ContentTypeDocumentTemplateDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ContentTypeDocumentTemplateDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ContentTypeDocumentTemplateDefinition() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TargetName {
            get {
                XAttribute x = this.Attribute(TargetNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TargetNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ContentTypeDocumentTemplateDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Data? | DataSource?)
    /// </para>
    /// </summary>
    public partial class ListInstanceDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DataXName = System.Xml.Linq.XName.Get("Data", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DataSourceXName = System.Xml.Linq.XName.Get("DataSource", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DescriptionXName = System.Xml.Linq.XName.Get("Description", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureIdXName = System.Xml.Linq.XName.Get("FeatureId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TitleXName = System.Xml.Linq.XName.Get("Title", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OnQuickLaunchXName = System.Xml.Linq.XName.Get("OnQuickLaunch", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RootWebOnlyXName = System.Xml.Linq.XName.Get("RootWebOnly", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName QuickLaunchUrlXName = System.Xml.Linq.XName.Get("QuickLaunchUrl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DocumentTemplateXName = System.Xml.Linq.XName.Get("DocumentTemplate", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TemplateTypeXName = System.Xml.Linq.XName.Get("TemplateType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UrlXName = System.Xml.Linq.XName.Get("Url", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CustomSchemaXName = System.Xml.Linq.XName.Get("CustomSchema", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HyperlinkBaseUrlXName = System.Xml.Linq.XName.Get("HyperlinkBaseUrl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VersioningEnabledXName = System.Xml.Linq.XName.Get("VersioningEnabled", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HiddenXName = System.Xml.Linq.XName.Get("Hidden", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ListInstanceDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ListInstanceDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ListInstanceDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ListInstanceDefinition() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(DataXName), new NamedContentModelEntity(DataSourceXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Data? | DataSource?)
        /// </para>
        /// </summary>
        public ListInstanceDefinition() {
        }
        
        public ListInstanceDefinition(DataDefinition Data) {
            this.Data = Data;
        }
        
        public ListInstanceDefinition(ListDataSourceDefinition DataSource) {
            this.DataSource = DataSource;
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (Data? | DataSource?)
        /// </para>
        /// </summary>
        public virtual DataDefinition Data {
            get {
                XElement x = this.GetElement(DataXName);
                return ((DataDefinition)(x));
            }
            set {
                this.SetElement(DataXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (Data? | DataSource?)
        /// </para>
        /// </summary>
        public virtual ListDataSourceDefinition DataSource {
            get {
                XElement x = this.GetElement(DataSourceXName);
                return ((ListDataSourceDefinition)(x));
            }
            set {
                this.SetElement(DataSourceXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Description {
            get {
                XAttribute x = this.Attribute(DescriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FeatureId {
            get {
                XAttribute x = this.Attribute(FeatureIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FeatureIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Title {
            get {
                XAttribute x = this.Attribute(TitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string OnQuickLaunch {
            get {
                XAttribute x = this.Attribute(OnQuickLaunchXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(OnQuickLaunchXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string RootWebOnly {
            get {
                XAttribute x = this.Attribute(RootWebOnlyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(RootWebOnlyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string QuickLaunchUrl {
            get {
                XAttribute x = this.Attribute(QuickLaunchUrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(QuickLaunchUrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DocumentTemplate {
            get {
                XAttribute x = this.Attribute(DocumentTemplateXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DocumentTemplateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? TemplateType {
            get {
                XAttribute x = this.Attribute(TemplateTypeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(TemplateTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Url {
            get {
                XAttribute x = this.Attribute(UrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(UrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CustomSchema {
            get {
                XAttribute x = this.Attribute(CustomSchemaXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CustomSchemaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string HyperlinkBaseUrl {
            get {
                XAttribute x = this.Attribute(HyperlinkBaseUrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(HyperlinkBaseUrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string VersioningEnabled {
            get {
                XAttribute x = this.Attribute(VersioningEnabledXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(VersioningEnabledXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Hidden {
            get {
                XAttribute x = this.Attribute(HiddenXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(HiddenXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ListInstanceDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(DataXName, typeof(DataDefinition));
            localElementDictionary.Add(DataSourceXName, typeof(ListDataSourceDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public sealed class ListTemplateCategoryType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Libraries",
                        "Communications",
                        "Tracking",
                        "Custom Lists"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ListTemplateCategoryType() {
        }
    }
    
    public enum SolutionDeploymentTargetType {
        
        GlobalAssemblyCache,
        
        WebApplication,
    }
    
    public sealed class SolutionDeploymentTargetTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "GlobalAssemblyCache",
                        "WebApplication"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private SolutionDeploymentTargetTypeValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (any)
    /// </para>
    /// </summary>
    public partial class WorkflowMetadata : XTypedElement, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("WorkflowMetadata", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static FSM validationStates;
        
		public static explicit operator WorkflowMetadata(XElement xe) { return XTypedServices.ToXTypedElement<WorkflowMetadata>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static WorkflowMetadata() {
            InitFSM();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public WorkflowMetadata() {
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public virtual IEnumerable<XElement> Any {
            get {
                return this.GetWildCards(WildCard.DefaultWildCard);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<WorkflowMetadata>(this);
        }
        
        FSM IXMetaData.GetValidationStates() {
            return validationStates;
        }
        
        private static void InitFSM() {
            Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
            transitions.Add(1, new Transitions(new SingleTransition(new WildCard("##any", "http://schemas.microsoft.com/sharepoint/"), 1)));
            validationStates = new FSM(1, new Set<int>(1), transitions);
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (AssociationData?, MetaData?, Categories?)
    /// </para>
    /// </summary>
    public partial class WorkflowDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AssociationDataXName = System.Xml.Linq.XName.Get("AssociationData", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MetaDataXName = System.Xml.Linq.XName.Get("MetaData", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CategoriesXName = System.Xml.Linq.XName.Get("Categories", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TitleXName = System.Xml.Linq.XName.Get("Title", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CodeBesideAssemblyXName = System.Xml.Linq.XName.Get("CodeBesideAssembly", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CodeBesideClassXName = System.Xml.Linq.XName.Get("CodeBesideClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DescriptionXName = System.Xml.Linq.XName.Get("Description", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EngineClassXName = System.Xml.Linq.XName.Get("EngineClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EngineAssemblyXName = System.Xml.Linq.XName.Get("EngineAssembly", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AssociationUrlXName = System.Xml.Linq.XName.Get("AssociationUrl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InstantiationUrlXName = System.Xml.Linq.XName.Get("InstantiationUrl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ModificationUrlXName = System.Xml.Linq.XName.Get("ModificationUrl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StatusUrlXName = System.Xml.Linq.XName.Get("StatusUrl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TaskListContentTypeIdXName = System.Xml.Linq.XName.Get("TaskListContentTypeId", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("WorkflowDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator WorkflowDefinition(XElement xe) { return XTypedServices.ToXTypedElement<WorkflowDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static WorkflowDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (AssociationData?, MetaData?, Categories?)
        /// </para>
        /// </summary>
        public WorkflowDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AssociationData?, MetaData?, Categories?)
        /// </para>
        /// </summary>
        public virtual XTypedElement AssociationData {
            get {
                XElement x = this.GetElement(AssociationDataXName);
                return ((XTypedElement)(x));
            }
            set {
                this.SetElement(AssociationDataXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AssociationData?, MetaData?, Categories?)
        /// </para>
        /// </summary>
        public virtual WorkflowMetadata MetaData {
            get {
                XElement x = this.GetElement(MetaDataXName);
                return ((WorkflowMetadata)(x));
            }
            set {
                this.SetElement(MetaDataXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AssociationData?, MetaData?, Categories?)
        /// </para>
        /// </summary>
        public virtual XTypedElement Categories {
            get {
                XElement x = this.GetElement(CategoriesXName);
                return ((XTypedElement)(x));
            }
            set {
                this.SetElement(CategoriesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Title {
            get {
                XAttribute x = this.Attribute(TitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CodeBesideAssembly {
            get {
                XAttribute x = this.Attribute(CodeBesideAssemblyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CodeBesideAssemblyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CodeBesideClass {
            get {
                XAttribute x = this.Attribute(CodeBesideClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CodeBesideClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Description {
            get {
                XAttribute x = this.Attribute(DescriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string EngineClass {
            get {
                XAttribute x = this.Attribute(EngineClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(EngineClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string EngineAssembly {
            get {
                XAttribute x = this.Attribute(EngineAssemblyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(EngineAssemblyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string AssociationUrl {
            get {
                XAttribute x = this.Attribute(AssociationUrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AssociationUrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string InstantiationUrl {
            get {
                XAttribute x = this.Attribute(InstantiationUrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(InstantiationUrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ModificationUrl {
            get {
                XAttribute x = this.Attribute(ModificationUrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ModificationUrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string StatusUrl {
            get {
                XAttribute x = this.Attribute(StatusUrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(StatusUrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TaskListContentTypeId {
            get {
                XAttribute x = this.Attribute(TaskListContentTypeIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TaskListContentTypeIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<WorkflowDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AssociationDataXName, typeof(XTypedElement));
            localElementDictionary.Add(MetaDataXName, typeof(WorkflowMetadata));
            localElementDictionary.Add(CategoriesXName, typeof(XTypedElement));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class WebTempFileDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LocationXName = System.Xml.Linq.XName.Get("Location", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("WebTempFileDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator WebTempFileDefinition(XElement xe) { return XTypedServices.ToXTypedElement<WebTempFileDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public WebTempFileDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Location {
            get {
                XAttribute x = this.Attribute(LocationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(LocationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<WebTempFileDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((ApplicationResourceFile | App_GlobalResourceFile)+)
    /// </para>
    /// </summary>
    public partial class ApplicationResourceFileDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ApplicationResourceFileXName = System.Xml.Linq.XName.Get("ApplicationResourceFile", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ApplicationResourceFileDefinition> ApplicationResourceFileField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName App_GlobalResourceFileXName = System.Xml.Linq.XName.Get("App_GlobalResourceFile", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<App_GlobalResourceFileDefinition> App_GlobalResourceFileField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ApplicationResourceFileDefinitions", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ApplicationResourceFileDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<ApplicationResourceFileDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ApplicationResourceFileDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(ApplicationResourceFileXName), new NamedContentModelEntity(App_GlobalResourceFileXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((ApplicationResourceFile | App_GlobalResourceFile)+)
        /// </para>
        /// </summary>
        public ApplicationResourceFileDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ApplicationResourceFile | App_GlobalResourceFile)+)
        /// </para>
        /// </summary>
        public virtual IList<ApplicationResourceFileDefinition> ApplicationResourceFile {
            get {
                if ((this.ApplicationResourceFileField == null)) {
                    this.ApplicationResourceFileField = new XTypedList<ApplicationResourceFileDefinition>(this, LinqToXsdTypeManager.Instance, ApplicationResourceFileXName);
                }
                return this.ApplicationResourceFileField;
            }
            set {
                if ((value == null)) {
                    this.ApplicationResourceFileField = null;
                }
                else {
                    if ((this.ApplicationResourceFileField == null)) {
                        this.ApplicationResourceFileField = XTypedList<ApplicationResourceFileDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, ApplicationResourceFileXName);
                    }
                    else {
                        XTypedServices.SetList<ApplicationResourceFileDefinition>(this.ApplicationResourceFileField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ApplicationResourceFile | App_GlobalResourceFile)+)
        /// </para>
        /// </summary>
        public virtual IList<App_GlobalResourceFileDefinition> App_GlobalResourceFile {
            get {
                if ((this.App_GlobalResourceFileField == null)) {
                    this.App_GlobalResourceFileField = new XTypedList<App_GlobalResourceFileDefinition>(this, LinqToXsdTypeManager.Instance, App_GlobalResourceFileXName);
                }
                return this.App_GlobalResourceFileField;
            }
            set {
                if ((value == null)) {
                    this.App_GlobalResourceFileField = null;
                }
                else {
                    if ((this.App_GlobalResourceFileField == null)) {
                        this.App_GlobalResourceFileField = XTypedList<App_GlobalResourceFileDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, App_GlobalResourceFileXName);
                    }
                    else {
                        XTypedServices.SetList<App_GlobalResourceFileDefinition>(this.App_GlobalResourceFileField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ApplicationResourceFileDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ApplicationResourceFileXName, typeof(ApplicationResourceFileDefinition));
            localElementDictionary.Add(App_GlobalResourceFileXName, typeof(App_GlobalResourceFileDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class ApplicationResourceFileDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LocationXName = System.Xml.Linq.XName.Get("Location", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ApplicationResourceFileDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator ApplicationResourceFileDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ApplicationResourceFileDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ApplicationResourceFileDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Location {
            get {
                XAttribute x = this.Attribute(LocationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(LocationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ApplicationResourceFileDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class App_GlobalResourceFileDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LocationXName = System.Xml.Linq.XName.Get("Location", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("App_GlobalResourceFileDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator App_GlobalResourceFileDefinition(XElement xe) { return XTypedServices.ToXTypedElement<App_GlobalResourceFileDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public App_GlobalResourceFileDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Location {
            get {
                XAttribute x = this.Attribute(LocationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(LocationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<App_GlobalResourceFileDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ResourceDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LocationXName = System.Xml.Linq.XName.Get("Location", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ResourceDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator ResourceDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ResourceDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ResourceDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Location {
            get {
                XAttribute x = this.Attribute(LocationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(LocationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ResourceDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Resource+)
    /// </para>
    /// </summary>
    public partial class ResourceDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ResourceXName = System.Xml.Linq.XName.Get("Resource", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ResourceDefinition> ResourceField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ResourceDefinitions", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ResourceDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<ResourceDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ResourceDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ResourceXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Resource+)
        /// </para>
        /// </summary>
        public ResourceDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Resource+)
        /// </para>
        /// </summary>
        public virtual IList<ResourceDefinition> Resource {
            get {
                if ((this.ResourceField == null)) {
                    this.ResourceField = new XTypedList<ResourceDefinition>(this, LinqToXsdTypeManager.Instance, ResourceXName);
                }
                return this.ResourceField;
            }
            set {
                if ((value == null)) {
                    this.ResourceField = null;
                }
                else {
                    if ((this.ResourceField == null)) {
                        this.ResourceField = XTypedList<ResourceDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, ResourceXName);
                    }
                    else {
                        XTypedServices.SetList<ResourceDefinition>(this.ResourceField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ResourceDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ResourceXName, typeof(ResourceDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class DocumentConverterDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AppXName = System.Xml.Linq.XName.Get("App", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FromXName = System.Xml.Linq.XName.Get("From", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToXName = System.Xml.Linq.XName.Get("To", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConverterUIPageXName = System.Xml.Linq.XName.Get("ConverterUIPage", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConverterSpecificSettingsUIXName = System.Xml.Linq.XName.Get("ConverterSpecificSettingsUI", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConverterSettingsForContentTypeXName = System.Xml.Linq.XName.Get("ConverterSettingsForContentType", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DocumentConverterDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator DocumentConverterDefinition(XElement xe) { return XTypedServices.ToXTypedElement<DocumentConverterDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public DocumentConverterDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string App {
            get {
                XAttribute x = this.Attribute(AppXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AppXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string From {
            get {
                XAttribute x = this.Attribute(FromXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FromXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string To {
            get {
                XAttribute x = this.Attribute(ToXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ToXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ConverterUIPage {
            get {
                XAttribute x = this.Attribute(ConverterUIPageXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ConverterUIPageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ConverterSpecificSettingsUI {
            get {
                XAttribute x = this.Attribute(ConverterSpecificSettingsUIXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ConverterSpecificSettingsUIXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ConverterSettingsForContentType {
            get {
                XAttribute x = this.Attribute(ConverterSettingsForContentTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ConverterSettingsForContentTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DocumentConverterDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Property*)
    /// </para>
    /// </summary>
    public partial class FeatureSiteTemplateAssociationDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertyXName = System.Xml.Linq.XName.Get("Property", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FeaturePropertyDefinition> PropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TemplateNameXName = System.Xml.Linq.XName.Get("TemplateName", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FeatureSiteTemplateAssociationDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FeatureSiteTemplateAssociationDefinition(XElement xe) { return XTypedServices.ToXTypedElement<FeatureSiteTemplateAssociationDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FeatureSiteTemplateAssociationDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PropertyXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Property*)
        /// </para>
        /// </summary>
        public FeatureSiteTemplateAssociationDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property*)
        /// </para>
        /// </summary>
        public virtual IList<FeaturePropertyDefinition> Property {
            get {
                if ((this.PropertyField == null)) {
                    this.PropertyField = new XTypedList<FeaturePropertyDefinition>(this, LinqToXsdTypeManager.Instance, PropertyXName);
                }
                return this.PropertyField;
            }
            set {
                if ((value == null)) {
                    this.PropertyField = null;
                }
                else {
                    if ((this.PropertyField == null)) {
                        this.PropertyField = XTypedList<FeaturePropertyDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropertyXName);
                    }
                    else {
                        XTypedServices.SetList<FeaturePropertyDefinition>(this.PropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TemplateName {
            get {
                XAttribute x = this.Attribute(TemplateNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TemplateNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FeatureSiteTemplateAssociationDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PropertyXName, typeof(FeaturePropertyDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class ContentTypeBindingDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ContentTypeIdXName = System.Xml.Linq.XName.Get("ContentTypeId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ListUrlXName = System.Xml.Linq.XName.Get("ListUrl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RootWebOnlyXName = System.Xml.Linq.XName.Get("RootWebOnly", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ContentTypeBindingDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator ContentTypeBindingDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ContentTypeBindingDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ContentTypeBindingDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ContentTypeId {
            get {
                XAttribute x = this.Attribute(ContentTypeIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ContentTypeIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ListUrl {
            get {
                XAttribute x = this.Attribute(ListUrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ListUrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string RootWebOnly {
            get {
                XAttribute x = this.Attribute(RootWebOnlyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(RootWebOnlyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ContentTypeBindingDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class ContentTypeId {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private ContentTypeId() {
        }
    }
    
    public partial class ServerEmailFooterDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ServerEmailFooterDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator ServerEmailFooterDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ServerEmailFooterDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ServerEmailFooterDefinition() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ServerEmailFooterDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((ContentTypeRef | ContentType)*)
    /// </para>
    /// </summary>
    public partial class ContentTypeReferences : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ContentTypeRefXName = System.Xml.Linq.XName.Get("ContentTypeRef", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ContentTypeReference> ContentTypeRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ContentTypeXName = System.Xml.Linq.XName.Get("ContentType", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ContentTypeDefinition> ContentTypeField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ContentTypeReferences", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ContentTypeReferences(XElement xe) { return XTypedServices.ToXTypedElement<ContentTypeReferences>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ContentTypeReferences() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(ContentTypeRefXName), new NamedContentModelEntity(ContentTypeXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((ContentTypeRef | ContentType)*)
        /// </para>
        /// </summary>
        public ContentTypeReferences() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentTypeRef | ContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<ContentTypeReference> ContentTypeRef {
            get {
                if ((this.ContentTypeRefField == null)) {
                    this.ContentTypeRefField = new XTypedList<ContentTypeReference>(this, LinqToXsdTypeManager.Instance, ContentTypeRefXName);
                }
                return this.ContentTypeRefField;
            }
            set {
                if ((value == null)) {
                    this.ContentTypeRefField = null;
                }
                else {
                    if ((this.ContentTypeRefField == null)) {
                        this.ContentTypeRefField = XTypedList<ContentTypeReference>.Initialize(this, LinqToXsdTypeManager.Instance, value, ContentTypeRefXName);
                    }
                    else {
                        XTypedServices.SetList<ContentTypeReference>(this.ContentTypeRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentTypeRef | ContentType)*)
        /// </para>
        /// </summary>
        public virtual IList<ContentTypeDefinition> ContentType {
            get {
                if ((this.ContentTypeField == null)) {
                    this.ContentTypeField = new XTypedList<ContentTypeDefinition>(this, LinqToXsdTypeManager.Instance, ContentTypeXName);
                }
                return this.ContentTypeField;
            }
            set {
                if ((value == null)) {
                    this.ContentTypeField = null;
                }
                else {
                    if ((this.ContentTypeField == null)) {
                        this.ContentTypeField = XTypedList<ContentTypeDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, ContentTypeXName);
                    }
                    else {
                        XTypedServices.SetList<ContentTypeDefinition>(this.ContentTypeField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ContentTypeReferences>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ContentTypeRefXName, typeof(ContentTypeReference));
            localElementDictionary.Add(ContentTypeXName, typeof(ContentTypeDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Folder?)
    /// </para>
    /// </summary>
    public partial class ContentTypeReference : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FolderXName = System.Xml.Linq.XName.Get("Folder", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IDXName = System.Xml.Linq.XName.Get("ID", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ContentTypeReference", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ContentTypeReference(XElement xe) { return XTypedServices.ToXTypedElement<ContentTypeReference>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ContentTypeReference() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FolderXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Folder?)
        /// </para>
        /// </summary>
        public ContentTypeReference() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Folder?)
        /// </para>
        /// </summary>
        public virtual FolderReference Folder {
            get {
                XElement x = this.GetElement(FolderXName);
                return ((FolderReference)(x));
            }
            set {
                this.SetElement(FolderXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ID {
            get {
                XAttribute x = this.Attribute(IDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ContentTypeReference>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FolderXName, typeof(FolderReference));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class FolderReference : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TargetNameXName = System.Xml.Linq.XName.Get("TargetName", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FolderReference", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator FolderReference(XElement xe) { return XTypedServices.ToXTypedElement<FolderReference>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public FolderReference() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TargetName {
            get {
                XAttribute x = this.Attribute(TargetNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TargetNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FolderReference>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (FieldRefs?, DisplayPattern?, DisplayBidiPattern?, CHOICES?, MAPPINGS?, Default?, Formula?, FormulaDisplayNames?, DefaultFormula?, Validation?, Customization?)
    /// </para>
    /// </summary>
    public partial class SharedFieldDefinition : global::Microsoft.Schemas.SharePoint.FieldDefinition, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal new static readonly System.Xml.Linq.XName IDXName = System.Xml.Linq.XName.Get("ID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal new static readonly System.Xml.Linq.XName GroupXName = System.Xml.Linq.XName.Get("Group", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal new static readonly System.Xml.Linq.XName MaxLengthXName = System.Xml.Linq.XName.Get("MaxLength", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal new static readonly System.Xml.Linq.XName SourceIDXName = System.Xml.Linq.XName.Get("SourceID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal new static readonly System.Xml.Linq.XName StaticNameXName = System.Xml.Linq.XName.Get("StaticName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OverwriteXName = System.Xml.Linq.XName.Get("Overwrite", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OverwriteInChildScopesXName = System.Xml.Linq.XName.Get("OverwriteInChildScopes", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SharedFieldDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator SharedFieldDefinition(XElement xe) { return XTypedServices.ToXTypedElement<SharedFieldDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SharedFieldDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (FieldRefs?, DisplayPattern?, DisplayBidiPattern?, CHOICES?, MAPPINGS?, Default?, Formula?, FormulaDisplayNames?, DefaultFormula?, Validation?, Customization?)
        /// </para>
        /// </summary>
        public SharedFieldDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public new virtual string ID {
            get {
                XAttribute x = this.Attribute(IDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public new virtual string Group {
            get {
                XAttribute x = this.Attribute(GroupXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(GroupXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public new virtual System.Int32? MaxLength {
            get {
                XAttribute x = this.Attribute(MaxLengthXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(MaxLengthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public new virtual string SourceID {
            get {
                XAttribute x = this.Attribute(SourceIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(SourceIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public new virtual string StaticName {
            get {
                XAttribute x = this.Attribute(StaticNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(StaticNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Overwrite {
            get {
                XAttribute x = this.Attribute(OverwriteXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(OverwriteXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string OverwriteInChildScopes {
            get {
                XAttribute x = this.Attribute(OverwriteInChildScopesXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(OverwriteInChildScopesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SharedFieldDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FieldRefsXName, typeof(FieldRefDefinitions));
            localElementDictionary.Add(DisplayPatternXName, typeof(CamlViewRoot));
            localElementDictionary.Add(DisplayBidiPatternXName, typeof(CamlViewRoot));
            localElementDictionary.Add(CHOICESXName, typeof(CHOICEDEFINITIONS));
            localElementDictionary.Add(MAPPINGSXName, typeof(MAPPINGDEFINITIONS));
            localElementDictionary.Add(DefaultXName, typeof(string));
            localElementDictionary.Add(FormulaXName, typeof(string));
            localElementDictionary.Add(FormulaDisplayNamesXName, typeof(string));
            localElementDictionary.Add(DefaultFormulaXName, typeof(string));
            localElementDictionary.Add(ValidationXName, typeof(ValidationDefinition));
            localElementDictionary.Add(CustomizationXName, typeof(CustomizationDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ExecuteUrlDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UrlXName = System.Xml.Linq.XName.Get("Url", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ExecuteUrlDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator ExecuteUrlDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ExecuteUrlDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ExecuteUrlDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Url {
            get {
                XAttribute x = this.Attribute(UrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(UrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ExecuteUrlDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class FileDialogPostProcessorDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IDXName = System.Xml.Linq.XName.Get("ID", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FileDialogPostProcessorDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator FileDialogPostProcessorDefinition(XElement xe) { return XTypedServices.ToXTypedElement<FileDialogPostProcessorDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public FileDialogPostProcessorDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ID {
            get {
                XAttribute x = this.Attribute(IDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FileDialogPostProcessorDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ExternalSecurityProviderDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IDXName = System.Xml.Linq.XName.Get("ID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypeXName = System.Xml.Linq.XName.Get("Type", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ExternalSecurityProviderDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator ExternalSecurityProviderDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ExternalSecurityProviderDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ExternalSecurityProviderDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ID {
            get {
                XAttribute x = this.Attribute(IDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Type {
            get {
                XAttribute x = this.Attribute(TypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ExternalSecurityProviderDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ExternalSecurityProvider?, FileDialogPostProcessor?)
    /// </para>
    /// </summary>
    public partial class ComponentsDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExternalSecurityProviderXName = System.Xml.Linq.XName.Get("ExternalSecurityProvider", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FileDialogPostProcessorXName = System.Xml.Linq.XName.Get("FileDialogPostProcessor", "http://schemas.microsoft.com/sharepoint/");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ComponentsDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator ComponentsDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ComponentsDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ComponentsDefinition() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ExternalSecurityProvider?, FileDialogPostProcessor?)
        /// </para>
        /// </summary>
        public ComponentsDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ExternalSecurityProvider?, FileDialogPostProcessor?)
        /// </para>
        /// </summary>
        public virtual ExternalSecurityProviderDefinition ExternalSecurityProvider {
            get {
                XElement x = this.GetElement(ExternalSecurityProviderXName);
                return ((ExternalSecurityProviderDefinition)(x));
            }
            set {
                this.SetElement(ExternalSecurityProviderXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ExternalSecurityProvider?, FileDialogPostProcessor?)
        /// </para>
        /// </summary>
        public virtual FileDialogPostProcessorDefinition FileDialogPostProcessor {
            get {
                XElement x = this.GetElement(FileDialogPostProcessorXName);
                return ((FileDialogPostProcessorDefinition)(x));
            }
            set {
                this.SetElement(FileDialogPostProcessorXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ComponentsDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ExternalSecurityProviderXName, typeof(ExternalSecurityProviderDefinition));
            localElementDictionary.Add(FileDialogPostProcessorXName, typeof(FileDialogPostProcessorDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class CTFolderDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TargetNameXName = System.Xml.Linq.XName.Get("TargetName", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CTFolderDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator CTFolderDefinition(XElement xe) { return XTypedServices.ToXTypedElement<CTFolderDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public CTFolderDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TargetName {
            get {
                XAttribute x = this.Attribute(TargetNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TargetNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CTFolderDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ViewDataFieldRefDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypeXName = System.Xml.Linq.XName.Get("Type", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ViewDataFieldRefDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator ViewDataFieldRefDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ViewDataFieldRefDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ViewDataFieldRefDefinition() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Type {
            get {
                XAttribute x = this.Attribute(TypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ViewDataFieldRefDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (FieldRef*)
    /// </para>
    /// </summary>
    public partial class ViewDataFieldRefDefinitions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldRefXName = System.Xml.Linq.XName.Get("FieldRef", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ViewDataFieldRefDefinition> FieldRefField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ViewDataFieldRefDefinitions", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ViewDataFieldRefDefinitions(XElement xe) { return XTypedServices.ToXTypedElement<ViewDataFieldRefDefinitions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ViewDataFieldRefDefinitions() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FieldRefXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (FieldRef*)
        /// </para>
        /// </summary>
        public ViewDataFieldRefDefinitions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (FieldRef*)
        /// </para>
        /// </summary>
        public virtual IList<ViewDataFieldRefDefinition> FieldRef {
            get {
                if ((this.FieldRefField == null)) {
                    this.FieldRefField = new XTypedList<ViewDataFieldRefDefinition>(this, LinqToXsdTypeManager.Instance, FieldRefXName);
                }
                return this.FieldRefField;
            }
            set {
                if ((value == null)) {
                    this.FieldRefField = null;
                }
                else {
                    if ((this.FieldRefField == null)) {
                        this.FieldRefField = XTypedList<ViewDataFieldRefDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldRefXName);
                    }
                    else {
                        XTypedServices.SetList<ViewDataFieldRefDefinition>(this.FieldRefField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ViewDataFieldRefDefinitions>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FieldRefXName, typeof(ViewDataFieldRefDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class ValidationDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MessageXName = System.Xml.Linq.XName.Get("Message", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ScriptXName = System.Xml.Linq.XName.Get("Script", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ValidationDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator ValidationDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ValidationDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ValidationDefinition() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Message {
            get {
                XAttribute x = this.Attribute(MessageXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(MessageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Script {
            get {
                XAttribute x = this.Attribute(ScriptXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ScriptXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ValidationDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class WorkflowAssociationDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DescriptionXName = System.Xml.Linq.XName.Get("Description", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BaseTemplateIdXName = System.Xml.Linq.XName.Get("BaseTemplateId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ParentContentTypeXName = System.Xml.Linq.XName.Get("ParentContentType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ParentListXName = System.Xml.Linq.XName.Get("ParentList", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ParentWebXName = System.Xml.Linq.XName.Get("ParentWeb", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RootWebOnlyXName = System.Xml.Linq.XName.Get("RootWebOnly", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TaskListXName = System.Xml.Linq.XName.Get("TaskList", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TaskListTitleXName = System.Xml.Linq.XName.Get("TaskListTitle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HistoryListXName = System.Xml.Linq.XName.Get("HistoryList", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HistoryListTitleXName = System.Xml.Linq.XName.Get("HistoryListTitle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StatusColumnShownXName = System.Xml.Linq.XName.Get("StatusColumnShown", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InternalNameStatusFieldXName = System.Xml.Linq.XName.Get("InternalNameStatusField", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RequireManagePermissionXName = System.Xml.Linq.XName.Get("RequireManagePermission", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConfigurationXName = System.Xml.Linq.XName.Get("Configuration", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AssociationDataXName = System.Xml.Linq.XName.Get("AssociationData", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CategoryNameXName = System.Xml.Linq.XName.Get("CategoryName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ContentTypeNameXName = System.Xml.Linq.XName.Get("ContentTypeName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ContentTypeIdXName = System.Xml.Linq.XName.Get("ContentTypeId", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("WorkflowAssociationDefinition", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator WorkflowAssociationDefinition(XElement xe) { return XTypedServices.ToXTypedElement<WorkflowAssociationDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public WorkflowAssociationDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XAttribute x = this.Attribute(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(IdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XAttribute x = this.Attribute(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(NameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Description {
            get {
                XAttribute x = this.Attribute(DescriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string BaseTemplateId {
            get {
                XAttribute x = this.Attribute(BaseTemplateIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(BaseTemplateIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ParentContentType {
            get {
                XAttribute x = this.Attribute(ParentContentTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ParentContentTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ParentList {
            get {
                XAttribute x = this.Attribute(ParentListXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ParentListXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ParentWeb {
            get {
                XAttribute x = this.Attribute(ParentWebXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ParentWebXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string RootWebOnly {
            get {
                XAttribute x = this.Attribute(RootWebOnlyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(RootWebOnlyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TaskList {
            get {
                XAttribute x = this.Attribute(TaskListXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TaskListXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string TaskListTitle {
            get {
                XAttribute x = this.Attribute(TaskListTitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(TaskListTitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string HistoryList {
            get {
                XAttribute x = this.Attribute(HistoryListXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(HistoryListXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string HistoryListTitle {
            get {
                XAttribute x = this.Attribute(HistoryListTitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(HistoryListTitleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string StatusColumnShown {
            get {
                XAttribute x = this.Attribute(StatusColumnShownXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(StatusColumnShownXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string InternalNameStatusField {
            get {
                XAttribute x = this.Attribute(InternalNameStatusFieldXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(InternalNameStatusFieldXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string RequireManagePermission {
            get {
                XAttribute x = this.Attribute(RequireManagePermissionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(RequireManagePermissionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? Configuration {
            get {
                XAttribute x = this.Attribute(ConfigurationXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(ConfigurationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string AssociationData {
            get {
                XAttribute x = this.Attribute(AssociationDataXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(AssociationDataXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string CategoryName {
            get {
                XAttribute x = this.Attribute(CategoryNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(CategoryNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ContentTypeName {
            get {
                XAttribute x = this.Attribute(ContentTypeNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ContentTypeNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ContentTypeId {
            get {
                XAttribute x = this.Attribute(ContentTypeIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ContentTypeIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<WorkflowAssociationDefinition>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Property*)
    /// </para>
    /// </summary>
    public partial class PropertyBagDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertyXName = System.Xml.Linq.XName.Get("Property", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PropertyValueAttributeDefinition> PropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ItemIndexXName = System.Xml.Linq.XName.Get("ItemIndex", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UrlXName = System.Xml.Linq.XName.Get("Url", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ParentTypeXName = System.Xml.Linq.XName.Get("ParentType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RootWebOnlyXName = System.Xml.Linq.XName.Get("RootWebOnly", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HyperlinkBaseUrlXName = System.Xml.Linq.XName.Get("HyperlinkBaseUrl", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PropertyBagDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PropertyBagDefinition(XElement xe) { return XTypedServices.ToXTypedElement<PropertyBagDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PropertyBagDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PropertyXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Property*)
        /// </para>
        /// </summary>
        public PropertyBagDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property*)
        /// </para>
        /// </summary>
        public virtual IList<PropertyValueAttributeDefinition> Property {
            get {
                if ((this.PropertyField == null)) {
                    this.PropertyField = new XTypedList<PropertyValueAttributeDefinition>(this, LinqToXsdTypeManager.Instance, PropertyXName);
                }
                return this.PropertyField;
            }
            set {
                if ((value == null)) {
                    this.PropertyField = null;
                }
                else {
                    if ((this.PropertyField == null)) {
                        this.PropertyField = XTypedList<PropertyValueAttributeDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropertyXName);
                    }
                    else {
                        XTypedServices.SetList<PropertyValueAttributeDefinition>(this.PropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ItemIndex {
            get {
                XAttribute x = this.Attribute(ItemIndexXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ItemIndexXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Url {
            get {
                XAttribute x = this.Attribute(UrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(UrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.PropertyBagParentTypeDefinition ParentType {
            get {
                XAttribute x = this.Attribute(ParentTypeXName);
                return ((Microsoft.Schemas.SharePoint.PropertyBagParentTypeDefinition)(Enum.Parse(typeof(Microsoft.Schemas.SharePoint.PropertyBagParentTypeDefinition), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ParentTypeXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string RootWebOnly {
            get {
                XAttribute x = this.Attribute(RootWebOnlyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(RootWebOnlyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string HyperlinkBaseUrl {
            get {
                XAttribute x = this.Attribute(HyperlinkBaseUrlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(HyperlinkBaseUrlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PropertyBagDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PropertyXName, typeof(PropertyValueAttributeDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public enum PropertyBagParentTypeDefinition {
        
        Web,
        
        Folder,
        
        ListItem,
        
        File,
    }
    
    public sealed class PropertyBagParentTypeDefinitionValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Web",
                        "Folder",
                        "ListItem",
                        "File"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private PropertyBagParentTypeDefinitionValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Action*)
    /// </para>
    /// </summary>
    public partial class WorkflowActionsDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ActionXName = System.Xml.Linq.XName.Get("Action", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<actionType> ActionField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("WorkflowActionsDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator WorkflowActionsDefinition(XElement xe) { return XTypedServices.ToXTypedElement<WorkflowActionsDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static WorkflowActionsDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ActionXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Action*)
        /// </para>
        /// </summary>
        public WorkflowActionsDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Action*)
        /// </para>
        /// </summary>
        public virtual IList<actionType> Action {
            get {
                if ((this.ActionField == null)) {
                    this.ActionField = new XTypedList<actionType>(this, LinqToXsdTypeManager.Instance, ActionXName);
                }
                return this.ActionField;
            }
            set {
                if ((value == null)) {
                    this.ActionField = null;
                }
                else {
                    if ((this.ActionField == null)) {
                        this.ActionField = XTypedList<actionType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ActionXName);
                    }
                    else {
                        XTypedServices.SetList<actionType>(this.ActionField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<WorkflowActionsDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ActionXName, typeof(actionType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public sealed class UIVersion {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private UIVersion() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ArrayOfProperty+)
    /// </para>
    /// </summary>
    public partial class CustomizationDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ArrayOfPropertyXName = System.Xml.Linq.XName.Get("ArrayOfProperty", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ArrayOfPropertyDefinition> ArrayOfPropertyField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CustomizationDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CustomizationDefinition(XElement xe) { return XTypedServices.ToXTypedElement<CustomizationDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CustomizationDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ArrayOfPropertyXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ArrayOfProperty+)
        /// </para>
        /// </summary>
        public CustomizationDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ArrayOfProperty+)
        /// </para>
        /// </summary>
        public virtual IList<ArrayOfPropertyDefinition> ArrayOfProperty {
            get {
                if ((this.ArrayOfPropertyField == null)) {
                    this.ArrayOfPropertyField = new XTypedList<ArrayOfPropertyDefinition>(this, LinqToXsdTypeManager.Instance, ArrayOfPropertyXName);
                }
                return this.ArrayOfPropertyField;
            }
            set {
                if ((value == null)) {
                    this.ArrayOfPropertyField = null;
                }
                else {
                    if ((this.ArrayOfPropertyField == null)) {
                        this.ArrayOfPropertyField = XTypedList<ArrayOfPropertyDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, ArrayOfPropertyXName);
                    }
                    else {
                        XTypedServices.SetList<ArrayOfPropertyDefinition>(this.ArrayOfPropertyField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CustomizationDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ArrayOfPropertyXName, typeof(ArrayOfPropertyDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Property+)
    /// </para>
    /// </summary>
    public partial class ArrayOfPropertyDefinition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertyXName = System.Xml.Linq.XName.Get("Property", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PropertyDefinition> PropertyField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ArrayOfPropertyDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ArrayOfPropertyDefinition(XElement xe) { return XTypedServices.ToXTypedElement<ArrayOfPropertyDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ArrayOfPropertyDefinition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PropertyXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Property+)
        /// </para>
        /// </summary>
        public ArrayOfPropertyDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property+)
        /// </para>
        /// </summary>
        public virtual IList<PropertyDefinition> Property {
            get {
                if ((this.PropertyField == null)) {
                    this.PropertyField = new XTypedList<PropertyDefinition>(this, LinqToXsdTypeManager.Instance, PropertyXName);
                }
                return this.PropertyField;
            }
            set {
                if ((value == null)) {
                    this.PropertyField = null;
                }
                else {
                    if ((this.PropertyField == null)) {
                        this.PropertyField = XTypedList<PropertyDefinition>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropertyXName);
                    }
                    else {
                        XTypedServices.SetList<PropertyDefinition>(this.PropertyField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ArrayOfPropertyDefinition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PropertyXName, typeof(PropertyDefinition));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (any)
    /// </para>
    /// </summary>
    public partial class PropertyDefinition : XTypedElement, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PropertyDefinition", "http://schemas.microsoft.com/sharepoint/");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static FSM validationStates;
        
		public static explicit operator PropertyDefinition(XElement xe) { return XTypedServices.ToXTypedElement<PropertyDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PropertyDefinition() {
            InitFSM();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public PropertyDefinition() {
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public virtual IEnumerable<XElement> Any {
            get {
                return this.GetWildCards(WildCard.DefaultWildCard);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PropertyDefinition>(this);
        }
        
        FSM IXMetaData.GetValidationStates() {
            return validationStates;
        }
        
        private static void InitFSM() {
            Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
            transitions.Add(1, new Transitions(new SingleTransition(new WildCard("##any", "http://schemas.microsoft.com/sharepoint/"), 2)));
            transitions.Add(2, new Transitions(new SingleTransition(new WildCard("##any", "http://schemas.microsoft.com/sharepoint/"), 2)));
            validationStates = new FSM(1, new Set<int>(2), transitions);
        }
    }
    
    public partial class CommandUI : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private CommandUIType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CommandUI", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator CommandUI(XElement xe) { return XTypedServices.ToXTypedElement<CommandUI, CommandUIType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public CommandUI() {
            SetInnerType(new CommandUIType());
        }
        
        public CommandUI(CommandUIType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual CommandUIType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Ribbon? | QAT? | Jewel? | Templates?)+)
        /// </para>
        /// </summary>
        public virtual IList<RibbonType> Ribbon {
            get {
                return this.ContentField.Ribbon;
            }
            set {
                this.ContentField.Ribbon = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Ribbon? | QAT? | Jewel? | Templates?)+)
        /// </para>
        /// </summary>
        public virtual IList<QATType> QAT {
            get {
                return this.ContentField.QAT;
            }
            set {
                this.ContentField.QAT = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Ribbon? | QAT? | Jewel? | Templates?)+)
        /// </para>
        /// </summary>
        public virtual IList<JewelType> Jewel {
            get {
                return this.ContentField.Jewel;
            }
            set {
                this.ContentField.Jewel = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Ribbon? | QAT? | Jewel? | Templates?)+)
        /// </para>
        /// </summary>
        public virtual IList<TemplatesType> Templates {
            get {
                return this.ContentField.Templates;
            }
            set {
                this.ContentField.Templates = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static CommandUI Load(string xmlFile) {
            return XTypedServices.Load<CommandUI, CommandUIType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static CommandUI Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<CommandUI, CommandUIType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static CommandUI Parse(string xml) {
            return XTypedServices.Parse<CommandUI, CommandUIType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new CommandUI(((CommandUIType)(this.Content.Clone())));
        }
        
        private void SetInnerType(CommandUIType ContentField) {
            this.ContentField = ((CommandUIType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Feature : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private FeatureDefinition ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Feature", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator Feature(XElement xe) { return XTypedServices.ToXTypedElement<Feature, FeatureDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Feature() {
            SetInnerType(new FeatureDefinition());
        }
        
        public Feature(FeatureDefinition content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual FeatureDefinition Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ElementManifests?, Properties?, ActivationDependencies?, UpgradeActions?)
        /// </para>
        /// </summary>
        public virtual ElementManifestReferences ElementManifests {
            get {
                return this.ContentField.ElementManifests;
            }
            set {
                this.ContentField.ElementManifests = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ElementManifests?, Properties?, ActivationDependencies?, UpgradeActions?)
        /// </para>
        /// </summary>
        public virtual FeaturePropertyDefinitions Properties {
            get {
                return this.ContentField.Properties;
            }
            set {
                this.ContentField.Properties = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ElementManifests?, Properties?, ActivationDependencies?, UpgradeActions?)
        /// </para>
        /// </summary>
        public virtual FeatureActivationDependencyDefinitions ActivationDependencies {
            get {
                return this.ContentField.ActivationDependencies;
            }
            set {
                this.ContentField.ActivationDependencies = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ElementManifests?, Properties?, ActivationDependencies?, UpgradeActions?)
        /// </para>
        /// </summary>
        public virtual UpgradeActionsDefinition UpgradeActions {
            get {
                return this.ContentField.UpgradeActions;
            }
            set {
                this.ContentField.UpgradeActions = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                return this.ContentField.Id;
            }
            set {
                this.ContentField.Id = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Title {
            get {
                return this.ContentField.Title;
            }
            set {
                this.ContentField.Title = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Description {
            get {
                return this.ContentField.Description;
            }
            set {
                this.ContentField.Description = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Version {
            get {
                return this.ContentField.Version;
            }
            set {
                this.ContentField.Version = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.FeatureScope Scope {
            get {
                return this.ContentField.Scope;
            }
            set {
                this.ContentField.Scope = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ReceiverAssembly {
            get {
                return this.ContentField.ReceiverAssembly;
            }
            set {
                this.ContentField.ReceiverAssembly = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ReceiverClass {
            get {
                return this.ContentField.ReceiverClass;
            }
            set {
                this.ContentField.ReceiverClass = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Creator {
            get {
                return this.ContentField.Creator;
            }
            set {
                this.ContentField.Creator = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DefaultResourceFile {
            get {
                return this.ContentField.DefaultResourceFile;
            }
            set {
                this.ContentField.DefaultResourceFile = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Hidden {
            get {
                return this.ContentField.Hidden;
            }
            set {
                this.ContentField.Hidden = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SolutionId {
            get {
                return this.ContentField.SolutionId;
            }
            set {
                this.ContentField.SolutionId = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ActivateOnDefault {
            get {
                return this.ContentField.ActivateOnDefault;
            }
            set {
                this.ContentField.ActivateOnDefault = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string AutoActivateInCentralAdmin {
            get {
                return this.ContentField.AutoActivateInCentralAdmin;
            }
            set {
                this.ContentField.AutoActivateInCentralAdmin = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string AlwaysForceInstall {
            get {
                return this.ContentField.AlwaysForceInstall;
            }
            set {
                this.ContentField.AlwaysForceInstall = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string RequireResources {
            get {
                return this.ContentField.RequireResources;
            }
            set {
                this.ContentField.RequireResources = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ImageUrl {
            get {
                return this.ContentField.ImageUrl;
            }
            set {
                this.ContentField.ImageUrl = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ImageUrlAltText {
            get {
                return this.ContentField.ImageUrlAltText;
            }
            set {
                this.ContentField.ImageUrlAltText = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string UIVersion {
            get {
                return this.ContentField.UIVersion;
            }
            set {
                this.ContentField.UIVersion = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Feature Load(string xmlFile) {
            return XTypedServices.Load<Feature, FeatureDefinition>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Feature Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Feature, FeatureDefinition>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Feature Parse(string xml) {
            return XTypedServices.Parse<Feature, FeatureDefinition>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Feature(((FeatureDefinition)(this.Content.Clone())));
        }
        
        private void SetInnerType(FeatureDefinition ContentField) {
            this.ContentField = ((FeatureDefinition)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Elements : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ElementDefinitionCollection ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Elements", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator Elements(XElement xe) { return XTypedServices.ToXTypedElement<Elements, ElementDefinitionCollection>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Elements() {
            SetInnerType(new ElementDefinitionCollection());
        }
        
        public Elements(ElementDefinitionCollection content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual ElementDefinitionCollection Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public virtual IList<ContentTypeDefinition> ContentType {
            get {
                return this.ContentField.ContentType;
            }
            set {
                this.ContentField.ContentType = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public virtual IList<ContentTypeBindingDefinition> ContentTypeBinding {
            get {
                return this.ContentField.ContentTypeBinding;
            }
            set {
                this.ContentField.ContentTypeBinding = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public virtual IList<DocumentConverterDefinition> DocumentConverter {
            get {
                return this.ContentField.DocumentConverter;
            }
            set {
                this.ContentField.DocumentConverter = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public virtual IList<FeatureSiteTemplateAssociationDefinition> FeatureSiteTemplateAssociation {
            get {
                return this.ContentField.FeatureSiteTemplateAssociation;
            }
            set {
                this.ContentField.FeatureSiteTemplateAssociation = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public virtual IList<SharedFieldDefinition> Field {
            get {
                return this.ContentField.Field;
            }
            set {
                this.ContentField.Field = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public virtual IList<CustomActionDefinition> CustomAction {
            get {
                return this.ContentField.CustomAction;
            }
            set {
                this.ContentField.CustomAction = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public virtual IList<CustomActionGroupDefinition> CustomActionGroup {
            get {
                return this.ContentField.CustomActionGroup;
            }
            set {
                this.ContentField.CustomActionGroup = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public virtual IList<HideCustomActionDefinition> HideCustomAction {
            get {
                return this.ContentField.HideCustomAction;
            }
            set {
                this.ContentField.HideCustomAction = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public virtual IList<ModuleDefinition> Module {
            get {
                return this.ContentField.Module;
            }
            set {
                this.ContentField.Module = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public virtual IList<ListInstanceDefinition> ListInstance {
            get {
                return this.ContentField.ListInstance;
            }
            set {
                this.ContentField.ListInstance = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public virtual IList<ListTemplateDefinition> ListTemplate {
            get {
                return this.ContentField.ListTemplate;
            }
            set {
                this.ContentField.ListTemplate = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public virtual IList<DelegateControlDefinition> Control {
            get {
                return this.ContentField.Control;
            }
            set {
                this.ContentField.Control = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public virtual IList<ReceiverDefinitionCollection> Receivers {
            get {
                return this.ContentField.Receivers;
            }
            set {
                this.ContentField.Receivers = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public virtual IList<WorkflowDefinition> Workflow {
            get {
                return this.ContentField.Workflow;
            }
            set {
                this.ContentField.Workflow = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public virtual IList<UserMigratorDefinition> UserMigrator {
            get {
                return this.ContentField.UserMigrator;
            }
            set {
                this.ContentField.UserMigrator = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public virtual IList<GroupMigratorDefinition> GroupMigrator {
            get {
                return this.ContentField.GroupMigrator;
            }
            set {
                this.ContentField.GroupMigrator = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public virtual IList<WebPartAdderExtensionDefinition> WebPartAdderExtension {
            get {
                return this.ContentField.WebPartAdderExtension;
            }
            set {
                this.ContentField.WebPartAdderExtension = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public virtual IList<WebTemplateDefinition> WebTemplate {
            get {
                return this.ContentField.WebTemplate;
            }
            set {
                this.ContentField.WebTemplate = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public virtual IList<WorkflowAssociationDefinition> WorkflowAssociation {
            get {
                return this.ContentField.WorkflowAssociation;
            }
            set {
                this.ContentField.WorkflowAssociation = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public virtual IList<PropertyBagDefinition> PropertyBag {
            get {
                return this.ContentField.PropertyBag;
            }
            set {
                this.ContentField.PropertyBag = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ContentType | ContentTypeBinding | DocumentConverter | FeatureSiteTemplateAssociation | Field | CustomAction | CustomActionGroup | HideCustomAction | Module | ListInstance | ListTemplate | Control | Receivers | Workflow | UserMigrator | GroupMigrator | WebPartAdderExtension | WebTemplate | WorkflowAssociation | PropertyBag | WorkflowActions)*)
        /// </para>
        /// </summary>
        public virtual IList<WorkflowActionsDefinition> WorkflowActions {
            get {
                return this.ContentField.WorkflowActions;
            }
            set {
                this.ContentField.WorkflowActions = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                return this.ContentField.Id;
            }
            set {
                this.ContentField.Id = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Elements Load(string xmlFile) {
            return XTypedServices.Load<Elements, ElementDefinitionCollection>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Elements Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Elements, ElementDefinitionCollection>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Elements Parse(string xml) {
            return XTypedServices.Parse<Elements, ElementDefinitionCollection>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Elements(((ElementDefinitionCollection)(this.Content.Clone())));
        }
        
        private void SetInnerType(ElementDefinitionCollection ContentField) {
            this.ContentField = ((ElementDefinitionCollection)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Solution : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SolutionDefinition ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Solution", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator Solution(XElement xe) { return XTypedServices.ToXTypedElement<Solution, SolutionDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Solution() {
            SetInnerType(new SolutionDefinition());
        }
        
        public Solution(SolutionDefinition content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual SolutionDefinition Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FeatureManifests?, SiteDefinitionManifests?, Assemblies?, TemplateFiles?, RootFiles?, ApplicationResourceFiles?, Resources?, DwpFiles?, CodeAccessSecurity?, ActivationDependencies?)
        /// </para>
        /// </summary>
        public virtual FeatureFileReferences FeatureManifests {
            get {
                return this.ContentField.FeatureManifests;
            }
            set {
                this.ContentField.FeatureManifests = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FeatureManifests?, SiteDefinitionManifests?, Assemblies?, TemplateFiles?, RootFiles?, ApplicationResourceFiles?, Resources?, DwpFiles?, CodeAccessSecurity?, ActivationDependencies?)
        /// </para>
        /// </summary>
        public virtual SiteDefinitionManifestReferences SiteDefinitionManifests {
            get {
                return this.ContentField.SiteDefinitionManifests;
            }
            set {
                this.ContentField.SiteDefinitionManifests = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FeatureManifests?, SiteDefinitionManifests?, Assemblies?, TemplateFiles?, RootFiles?, ApplicationResourceFiles?, Resources?, DwpFiles?, CodeAccessSecurity?, ActivationDependencies?)
        /// </para>
        /// </summary>
        public virtual AssemblyFileReferences Assemblies {
            get {
                return this.ContentField.Assemblies;
            }
            set {
                this.ContentField.Assemblies = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FeatureManifests?, SiteDefinitionManifests?, Assemblies?, TemplateFiles?, RootFiles?, ApplicationResourceFiles?, Resources?, DwpFiles?, CodeAccessSecurity?, ActivationDependencies?)
        /// </para>
        /// </summary>
        public virtual TemplateFileReferences TemplateFiles {
            get {
                return this.ContentField.TemplateFiles;
            }
            set {
                this.ContentField.TemplateFiles = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FeatureManifests?, SiteDefinitionManifests?, Assemblies?, TemplateFiles?, RootFiles?, ApplicationResourceFiles?, Resources?, DwpFiles?, CodeAccessSecurity?, ActivationDependencies?)
        /// </para>
        /// </summary>
        public virtual RootFileReferences RootFiles {
            get {
                return this.ContentField.RootFiles;
            }
            set {
                this.ContentField.RootFiles = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FeatureManifests?, SiteDefinitionManifests?, Assemblies?, TemplateFiles?, RootFiles?, ApplicationResourceFiles?, Resources?, DwpFiles?, CodeAccessSecurity?, ActivationDependencies?)
        /// </para>
        /// </summary>
        public virtual ApplicationResourceFileDefinitions ApplicationResourceFiles {
            get {
                return this.ContentField.ApplicationResourceFiles;
            }
            set {
                this.ContentField.ApplicationResourceFiles = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FeatureManifests?, SiteDefinitionManifests?, Assemblies?, TemplateFiles?, RootFiles?, ApplicationResourceFiles?, Resources?, DwpFiles?, CodeAccessSecurity?, ActivationDependencies?)
        /// </para>
        /// </summary>
        public virtual ResourceDefinitions Resources {
            get {
                return this.ContentField.Resources;
            }
            set {
                this.ContentField.Resources = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FeatureManifests?, SiteDefinitionManifests?, Assemblies?, TemplateFiles?, RootFiles?, ApplicationResourceFiles?, Resources?, DwpFiles?, CodeAccessSecurity?, ActivationDependencies?)
        /// </para>
        /// </summary>
        public virtual DwpFileDefinitions DwpFiles {
            get {
                return this.ContentField.DwpFiles;
            }
            set {
                this.ContentField.DwpFiles = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FeatureManifests?, SiteDefinitionManifests?, Assemblies?, TemplateFiles?, RootFiles?, ApplicationResourceFiles?, Resources?, DwpFiles?, CodeAccessSecurity?, ActivationDependencies?)
        /// </para>
        /// </summary>
        public virtual CodeAccessSecurityDefinition CodeAccessSecurity {
            get {
                return this.ContentField.CodeAccessSecurity;
            }
            set {
                this.ContentField.CodeAccessSecurity = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FeatureManifests?, SiteDefinitionManifests?, Assemblies?, TemplateFiles?, RootFiles?, ApplicationResourceFiles?, Resources?, DwpFiles?, CodeAccessSecurity?, ActivationDependencies?)
        /// </para>
        /// </summary>
        public virtual SolutionDependencyReferences ActivationDependencies {
            get {
                return this.ContentField.ActivationDependencies;
            }
            set {
                this.ContentField.ActivationDependencies = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SolutionId {
            get {
                return this.ContentField.SolutionId;
            }
            set {
                this.ContentField.SolutionId = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SharePointProductVersion {
            get {
                return this.ContentField.SharePointProductVersion;
            }
            set {
                this.ContentField.SharePointProductVersion = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Title {
            get {
                return this.ContentField.Title;
            }
            set {
                this.ContentField.Title = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Description {
            get {
                return this.ContentField.Description;
            }
            set {
                this.ContentField.Description = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.DeploymentServerTypeAttr? DeploymentServerType {
            get {
                return this.ContentField.DeploymentServerType;
            }
            set {
                this.ContentField.DeploymentServerType = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ResetWebServer {
            get {
                return this.ContentField.ResetWebServer;
            }
            set {
                this.ContentField.ResetWebServer = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual Microsoft.Schemas.SharePoint.ResetWebServerModeOnUpgradeAttr? ResetWebServerModeOnUpgrade {
            get {
                return this.ContentField.ResetWebServerModeOnUpgrade;
            }
            set {
                this.ContentField.ResetWebServerModeOnUpgrade = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Solution Load(string xmlFile) {
            return XTypedServices.Load<Solution, SolutionDefinition>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Solution Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Solution, SolutionDefinition>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Solution Parse(string xml) {
            return XTypedServices.Parse<Solution, SolutionDefinition>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Solution(((SolutionDefinition)(this.Content.Clone())));
        }
        
        private void SetInnerType(SolutionDefinition ContentField) {
            this.ContentField = ((SolutionDefinition)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Project : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private SiteDefinition ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Project", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator Project(XElement xe) { return XTypedServices.ToXTypedElement<Project, SiteDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Project() {
            SetInnerType(new SiteDefinition());
        }
        
        public Project(SiteDefinition content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual SiteDefinition Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (NavBars, ListTemplates?, DocumentTemplates?, BaseTypes?, Configurations?, Modules?, Components?, ServerEmailFooter?)
        /// </para>
        /// </summary>
        public virtual NavBarDefinitions NavBars {
            get {
                return this.ContentField.NavBars;
            }
            set {
                this.ContentField.NavBars = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NavBars, ListTemplates?, DocumentTemplates?, BaseTypes?, Configurations?, Modules?, Components?, ServerEmailFooter?)
        /// </para>
        /// </summary>
        public virtual ListTemplateDefinitions ListTemplates {
            get {
                return this.ContentField.ListTemplates;
            }
            set {
                this.ContentField.ListTemplates = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NavBars, ListTemplates?, DocumentTemplates?, BaseTypes?, Configurations?, Modules?, Components?, ServerEmailFooter?)
        /// </para>
        /// </summary>
        public virtual DocumentTemplateDefinitions DocumentTemplates {
            get {
                return this.ContentField.DocumentTemplates;
            }
            set {
                this.ContentField.DocumentTemplates = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NavBars, ListTemplates?, DocumentTemplates?, BaseTypes?, Configurations?, Modules?, Components?, ServerEmailFooter?)
        /// </para>
        /// </summary>
        public virtual BaseTypeDefinitions BaseTypes {
            get {
                return this.ContentField.BaseTypes;
            }
            set {
                this.ContentField.BaseTypes = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NavBars, ListTemplates?, DocumentTemplates?, BaseTypes?, Configurations?, Modules?, Components?, ServerEmailFooter?)
        /// </para>
        /// </summary>
        public virtual ConfigurationDefinitions Configurations {
            get {
                return this.ContentField.Configurations;
            }
            set {
                this.ContentField.Configurations = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NavBars, ListTemplates?, DocumentTemplates?, BaseTypes?, Configurations?, Modules?, Components?, ServerEmailFooter?)
        /// </para>
        /// </summary>
        public virtual ModuleDefinitions Modules {
            get {
                return this.ContentField.Modules;
            }
            set {
                this.ContentField.Modules = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NavBars, ListTemplates?, DocumentTemplates?, BaseTypes?, Configurations?, Modules?, Components?, ServerEmailFooter?)
        /// </para>
        /// </summary>
        public virtual ComponentsDefinition Components {
            get {
                return this.ContentField.Components;
            }
            set {
                this.ContentField.Components = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NavBars, ListTemplates?, DocumentTemplates?, BaseTypes?, Configurations?, Modules?, Components?, ServerEmailFooter?)
        /// </para>
        /// </summary>
        public virtual ServerEmailFooterDefinition ServerEmailFooter {
            get {
                return this.ContentField.ServerEmailFooter;
            }
            set {
                this.ContentField.ServerEmailFooter = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Title {
            get {
                return this.ContentField.Title;
            }
            set {
                this.ContentField.Title = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ListDir {
            get {
                return this.ContentField.ListDir;
            }
            set {
                this.ContentField.ListDir = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string AlternateURL {
            get {
                return this.ContentField.AlternateURL;
            }
            set {
                this.ContentField.AlternateURL = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string AlternateCSS {
            get {
                return this.ContentField.AlternateCSS;
            }
            set {
                this.ContentField.AlternateCSS = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? Revision {
            get {
                return this.ContentField.Revision;
            }
            set {
                this.ContentField.Revision = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SiteLogoUrl {
            get {
                return this.ContentField.SiteLogoUrl;
            }
            set {
                this.ContentField.SiteLogoUrl = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string SiteLogoDescription {
            get {
                return this.ContentField.SiteLogoDescription;
            }
            set {
                this.ContentField.SiteLogoDescription = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DisableWebDesignFeatures {
            get {
                return this.ContentField.DisableWebDesignFeatures;
            }
            set {
                this.ContentField.DisableWebDesignFeatures = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Project Load(string xmlFile) {
            return XTypedServices.Load<Project, SiteDefinition>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Project Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Project, SiteDefinition>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Project Parse(string xml) {
            return XTypedServices.Parse<Project, SiteDefinition>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Project(((SiteDefinition)(this.Content.Clone())));
        }
        
        private void SetInnerType(SiteDefinition ContentField) {
            this.ContentField = ((SiteDefinition)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class List : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private ListDefinition ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("List", "http://schemas.microsoft.com/sharepoint/");
        
		public static explicit operator List(XElement xe) { return XTypedServices.ToXTypedElement<List, ListDefinition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public List() {
            SetInnerType(new ListDefinition());
        }
        
        public List(ListDefinition content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual ListDefinition Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MetaData?)
        /// </para>
        /// </summary>
        public virtual ListMetaDataDefinition MetaData {
            get {
                return this.ContentField.MetaData;
            }
            set {
                this.ContentField.MetaData = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                return this.ContentField.Id;
            }
            set {
                this.ContentField.Id = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                return this.ContentField.Name;
            }
            set {
                this.ContentField.Name = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Title {
            get {
                return this.ContentField.Title;
            }
            set {
                this.ContentField.Title = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Url {
            get {
                return this.ContentField.Url;
            }
            set {
                this.ContentField.Url = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Default {
            get {
                return this.ContentField.Default;
            }
            set {
                this.ContentField.Default = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int64? WebImageWidth {
            get {
                return this.ContentField.WebImageWidth;
            }
            set {
                this.ContentField.WebImageWidth = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string EnableThumbnails {
            get {
                return this.ContentField.EnableThumbnails;
            }
            set {
                this.ContentField.EnableThumbnails = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string EnableContentTypes {
            get {
                return this.ContentField.EnableContentTypes;
            }
            set {
                this.ContentField.EnableContentTypes = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string FolderCreation {
            get {
                return this.ContentField.FolderCreation;
            }
            set {
                this.ContentField.FolderCreation = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DisableAttachments {
            get {
                return this.ContentField.DisableAttachments;
            }
            set {
                this.ContentField.DisableAttachments = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string EventSinkAssembly {
            get {
                return this.ContentField.EventSinkAssembly;
            }
            set {
                this.ContentField.EventSinkAssembly = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string EventSinkClass {
            get {
                return this.ContentField.EventSinkClass;
            }
            set {
                this.ContentField.EventSinkClass = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string EventSinkData {
            get {
                return this.ContentField.EventSinkData;
            }
            set {
                this.ContentField.EventSinkData = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string OrderedList {
            get {
                return this.ContentField.OrderedList;
            }
            set {
                this.ContentField.OrderedList = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ForceDefaultContentType {
            get {
                return this.ContentField.ForceDefaultContentType;
            }
            set {
                this.ContentField.ForceDefaultContentType = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string PrivateList {
            get {
                return this.ContentField.PrivateList;
            }
            set {
                this.ContentField.PrivateList = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string QuickLaunchUrl {
            get {
                return this.ContentField.QuickLaunchUrl;
            }
            set {
                this.ContentField.QuickLaunchUrl = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string RootWebOnly {
            get {
                return this.ContentField.RootWebOnly;
            }
            set {
                this.ContentField.RootWebOnly = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ModeratedList {
            get {
                return this.ContentField.ModeratedList;
            }
            set {
                this.ContentField.ModeratedList = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? DraftVersionVisibility {
            get {
                return this.ContentField.DraftVersionVisibility;
            }
            set {
                this.ContentField.DraftVersionVisibility = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? ThumbnailSize {
            get {
                return this.ContentField.ThumbnailSize;
            }
            set {
                this.ContentField.ThumbnailSize = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? DefaultItemOpen {
            get {
                return this.ContentField.DefaultItemOpen;
            }
            set {
                this.ContentField.DefaultItemOpen = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string VersioningEnabled {
            get {
                return this.ContentField.VersioningEnabled;
            }
            set {
                this.ContentField.VersioningEnabled = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string EnableMinorVersions {
            get {
                return this.ContentField.EnableMinorVersions;
            }
            set {
                this.ContentField.EnableMinorVersions = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ModerationType {
            get {
                return this.ContentField.ModerationType;
            }
            set {
                this.ContentField.ModerationType = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? Type {
            get {
                return this.ContentField.Type;
            }
            set {
                this.ContentField.Type = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string URLEncode {
            get {
                return this.ContentField.URLEncode;
            }
            set {
                this.ContentField.URLEncode = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int64? WebImageHeight {
            get {
                return this.ContentField.WebImageHeight;
            }
            set {
                this.ContentField.WebImageHeight = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? BaseType {
            get {
                return this.ContentField.BaseType;
            }
            set {
                this.ContentField.BaseType = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Direction {
            get {
                return this.ContentField.Direction;
            }
            set {
                this.ContentField.Direction = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static List Load(string xmlFile) {
            return XTypedServices.Load<List, ListDefinition>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static List Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<List, ListDefinition>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static List Parse(string xml) {
            return XTypedServices.Parse<List, ListDefinition>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new List(((ListDefinition)(this.Content.Clone())));
        }
        
        private void SetInnerType(ListDefinition ContentField) {
            this.ContentField = ((ListDefinition)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> typeDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> elementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static Dictionary<System.Type, System.Type> wrapperDictionary = new Dictionary<System.Type, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
            BuildWrapperDictionary();
        }
        
        private LinqToXsdTypeManager() {
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return wrapperDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(System.Xml.Linq.XName.Get("CamlQueryRoot", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CamlQueryRoot));
            typeDictionary.Add(System.Xml.Linq.XName.Get("LogicalTestDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.LogicalTestDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("LogicalMultiTestDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.LogicalMultiTestDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("LogicalJoinDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.LogicalJoinDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FieldRefDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FieldRefDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ValueDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ValueDefinitions));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ValueDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ValueDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("LogicalNullDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.LogicalNullDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ExtendedLogicalJoinDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ExtendedLogicalJoinDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FieldRefDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FieldRefDefinitions));
            typeDictionary.Add(System.Xml.Linq.XName.Get("OrderByDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.OrderByDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RowDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.RowDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FieldDataDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FieldDataDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RowDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.RowDefinitions));
            typeDictionary.Add(System.Xml.Linq.XName.Get("EmptyQueryDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.EmptyQueryDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SimpleFieldRef", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.SimpleFieldRef));
            typeDictionary.Add(System.Xml.Linq.XName.Get("LookupColumnDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.LookupColumnDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("QueryColumnDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.QueryColumnDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("QueryGetVarDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.QueryGetVarDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("QueryListProperty", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.QueryListProperty));
            typeDictionary.Add(System.Xml.Linq.XName.Get("MembershipDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.MembershipDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GroupByDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.GroupByDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("UnlimitedLogicalTestDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.UnlimitedLogicalTestDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CamlViewRoot", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CamlViewRoot));
            typeDictionary.Add(System.Xml.Linq.XName.Get("HtmlRenderingElement", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.HtmlRenderingElement));
            typeDictionary.Add(System.Xml.Linq.XName.Get("HtmlDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.HtmlDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("HtmlContentDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.HtmlContentDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FieldRefViewDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FieldRefViewDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("BatchDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.BatchDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("MethodDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.MethodDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SetListDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.SetListDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SetVarDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.SetVarDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CamlViewElement", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CamlViewElement));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GetVarDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.GetVarDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SwitchDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.SwitchDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ExprDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ExprDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CaseDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CaseDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DefaultDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.DefaultDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ListPropertyDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ListPropertyDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FieldPropertyDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FieldPropertyDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FieldViewReferenceDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FieldViewReferenceDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("EmptyElement", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.EmptyElement));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ScriptQuoteDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ScriptQuoteDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ThreadStampDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ThreadStampDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SelectOptionsDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.SelectOptionsDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CounterDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CounterDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("IfEqualDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.IfEqualDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("IfNegDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.IfNegDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("IfSubStringDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.IfSubStringDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("LimitDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.LimitDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ColumnDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ColumnDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("URLDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.URLDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("UrlBaseNameDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.UrlBaseNameDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("HttpHostDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.HttpHostDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ServerPropertyDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ServerPropertyDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CamlBdcMethod", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CamlBdcMethod));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CamlBdcFilter", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CamlBdcFilter));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FilterLinkDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FilterLinkDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("IfNewDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.IfNewDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("MeetingPropertyDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.MeetingPropertyDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ProjectPropertyDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ProjectPropertyDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("UserIDDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.UserIDDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("HttpPathDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.HttpPathDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("HttpVDirDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.HttpVDirDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("IfHasRightsDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.IfHasRightsDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RightsChoiceDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.RightsChoiceDefinitions));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RightsGroupDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.RightsGroupDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ForEachElement", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ForEachElement));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ButtonType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ButtonType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CheckBoxType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CheckBoxType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ColorPickerType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ColorPickerType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ColorStylesType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ColorStylesType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ColorStyleType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ColorStyleType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ComboBoxType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ComboBoxType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CommandUIType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CommandUIType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ContextualGroupType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ContextualGroupType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ContextualTabsType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ContextualTabsType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ControlRefType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ControlRefType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ControlsType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ControlsType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DropDownType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.DropDownType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FlyoutAnchorType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FlyoutAnchorType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GalleryType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.GalleryType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GalleryButtonType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.GalleryButtonType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GroupTemplateType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.GroupTemplateType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GroupsType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.GroupsType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GroupType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.GroupType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("InsertTableType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.InsertTableType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("JewelType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.JewelType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("LabelType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.LabelType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("LayoutType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.LayoutType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("MaxSizeType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.MaxSizeType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("MenuType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.MenuType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("MenuSectionType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.MenuSectionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("MenuSectionControlsType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.MenuSectionControlsType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("MRUSplitButtonType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.MRUSplitButtonType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("LowScaleWarningType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.LowScaleWarningType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("OverflowAreaType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.OverflowAreaType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("OverflowSectionType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.OverflowSectionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("QATType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.QATType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RibbonTemplatesType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.RibbonTemplatesType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RibbonType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.RibbonType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RowType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.RowType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ScaleType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ScaleType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ScalingType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ScalingType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SectionType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.SectionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SpinnerType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.SpinnerType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SplitButtonType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.SplitButtonType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StripType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.StripType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TabType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.TabType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TabsType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.TabsType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TemplatesType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.TemplatesType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TextBoxType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.TextBoxType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ToggleButtonType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ToggleButtonType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("UnitType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.UnitType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("UnitAbbreviationType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.UnitAbbreviationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ruleDesignerType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ruleDesignerType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("defaultElementType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.defaultElementType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("parametersType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.parametersType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("dataSourcesType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.dataSourcesType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("dataSourceType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.dataSourceType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("actionType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.actionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SiteDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.SiteDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("NavBarDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.NavBarDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("NavBarLinkDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.NavBarLinkDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("NavBarDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.NavBarDefinitions));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FieldDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FieldDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("BaseListDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.BaseListDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FieldDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FieldDefinitions));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FormDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FormDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ListFormSet", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ListFormSet));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ToolbarDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ToolbarDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ViewDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ViewDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ListDataSourceDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ListDataSourceDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ListTemplateDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ListTemplateDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("WebTemplateDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.WebTemplateDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ListTemplateDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ListTemplateDefinitions));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DocumentTemplateDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.DocumentTemplateDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DocumentTemplateDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.DocumentTemplateDefinitions));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DocumentTemplateFileDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.DocumentTemplateFileDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DocumentTemplateFileDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.DocumentTemplateFileDefinitions));
            typeDictionary.Add(System.Xml.Linq.XName.Get("BaseTypeDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.BaseTypeDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("BaseTypeDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.BaseTypeDefinitions));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ConfigurationDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ConfigurationDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DataDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.DataDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ListDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ListDefinitions));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ModuleDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ModuleDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FileDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FileDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("WebPartDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.WebPartDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ViewWebPartDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ViewWebPartDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("BinarySerializedWebPartDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.BinarySerializedWebPartDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GUIDMapDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.GUIDMapDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("BinarySerializedWebPartBodyDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.BinarySerializedWebPartBodyDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GUIDMapItemDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.GUIDMapItemDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("NavBarPageDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.NavBarPageDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("WebPartConnectionDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.WebPartConnectionDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("WebPartTransformerDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.WebPartTransformerDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ConfigurationDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ConfigurationDefinitions));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ModuleDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ModuleDefinitions));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ModuleReference", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ModuleReference));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ModuleReferences", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ModuleReferences));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CHOICEDEFINITIONS", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CHOICEDEFINITIONS));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CHOICEDEFINITION", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CHOICEDEFINITION));
            typeDictionary.Add(System.Xml.Linq.XName.Get("MAPPINGDEFINITIONS", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.MAPPINGDEFINITIONS));
            typeDictionary.Add(System.Xml.Linq.XName.Get("MAPPINGDEFINITION", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.MAPPINGDEFINITION));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ListInstance", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ListInstance));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ListInstances", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ListInstances));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FormDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FormDefinitions));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ListMetaDataDefault", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ListMetaDataDefault));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ViewDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ViewDefinitions));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DwpFileDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.DwpFileDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DwpFileDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.DwpFileDefinitions));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ClassResourceDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ClassResourceDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ClassResourceDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ClassResourceDefinitions));
            typeDictionary.Add(System.Xml.Linq.XName.Get("BindingRedirectDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.BindingRedirectDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("BindingRedirectDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.BindingRedirectDefinitions));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RowLimitDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.RowLimitDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ViewStyleReference", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ViewStyleReference));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FeatureDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FeatureDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ElementManifestReference", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ElementManifestReference));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ElementManifestReferences", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ElementManifestReferences));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ElementDefinitionCollection", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ElementDefinitionCollection));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ContentTypeDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ContentTypeDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FeatureManifestReference", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FeatureManifestReference));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SolutionDependencyManifestReference", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.SolutionDependencyManifestReference));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SolutionDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.SolutionDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FeatureFileReferences", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FeatureFileReferences));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SolutionDependencyReferences", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.SolutionDependencyReferences));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SiteDefinitionManifestReferences", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.SiteDefinitionManifestReferences));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SiteDefinitionManifestFileReference", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.SiteDefinitionManifestFileReference));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SharedFieldSetDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.SharedFieldSetDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SharedFieldDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.SharedFieldDefinitions));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CommandUIExtensionType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CommandUIExtensionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CommandUIDefinitionsType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CommandUIDefinitionsType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CommandUIHandlersType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CommandUIHandlersType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CommandUIHandlerType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CommandUIHandlerType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CommandUIDefinitionType", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CommandUIDefinitionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CustomActionDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CustomActionDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("HideCustomActionDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.HideCustomActionDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("UrlActionDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.UrlActionDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CustomActionGroupDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CustomActionGroupDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CustomActionDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CustomActionDefinitions));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FeatureActivationDependencyDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FeatureActivationDependencyDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FeatureActivationDependencyDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FeatureActivationDependencyDefinitions));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SharedFieldReference", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.SharedFieldReference));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FeatureTemplateReference", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FeatureTemplateReference));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FeatureTemplateReferences", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FeatureTemplateReferences));
            typeDictionary.Add(System.Xml.Linq.XName.Get("VersionRangeDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.VersionRangeDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("UpgradeActionsDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.UpgradeActionsDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CustomUpgradeActionDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CustomUpgradeActionDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ParametersDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ParametersDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ParameterDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ParameterDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AddContentTypeFieldDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.AddContentTypeFieldDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("MapFileDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.MapFileDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FieldTypeDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FieldTypeDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RenderPatternDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.RenderPatternDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SubFieldTypeDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.SubFieldTypeDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AssemblyFileReference", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.AssemblyFileReference));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AssemblyFileReferences", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.AssemblyFileReferences));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RootFileReference", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.RootFileReference));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RootFileReferences", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.RootFileReferences));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TemplateFileReference", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.TemplateFileReference));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TemplateFileReferences", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.TemplateFileReferences));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CodeAccessSecurityDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CodeAccessSecurityDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PolicyItemDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.PolicyItemDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PermissionSetDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.PermissionSetDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PolicyAssembliesDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.PolicyAssembliesDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PolicyAssemblyDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.PolicyAssemblyDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ItemEventDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ItemEventDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("EventDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.EventDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ContentTypeFilterDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ContentTypeFilterDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FieldChangedFilterDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FieldChangedFilterDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FieldExpressionFilterDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FieldExpressionFilterDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CTFieldRefDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CTFieldRefDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CTFieldRefDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CTFieldRefDefinitions));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ListDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ListDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ContentTypeLink", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ContentTypeLink));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ContentTypeLinks", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ContentTypeLinks));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FeaturePropertyDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FeaturePropertyDefinitions));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FeaturePropertyDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FeaturePropertyDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ListMetaDataDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ListMetaDataDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SafeControlDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.SafeControlDefinitions));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SafeControlDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.SafeControlDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("XmlDocumentDefinitionCollection", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.XmlDocumentDefinitionCollection));
            typeDictionary.Add(System.Xml.Linq.XName.Get("XmlDocumentDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.XmlDocumentDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DelegateControlDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.DelegateControlDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ReceiverDefinitionCollection", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ReceiverDefinitionCollection));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ReceiverDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ReceiverDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("UserMigratorDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.UserMigratorDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GroupMigratorDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.GroupMigratorDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SimplePropertyDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.SimplePropertyDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("WebPartAdderExtensionDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.WebPartAdderExtensionDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PropertyValueAttributeDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.PropertyValueAttributeDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ContentTypeDocumentTemplateDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ContentTypeDocumentTemplateDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ListInstanceDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ListInstanceDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("WorkflowMetadata", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.WorkflowMetadata));
            typeDictionary.Add(System.Xml.Linq.XName.Get("WorkflowDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.WorkflowDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("WebTempFileDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.WebTempFileDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ApplicationResourceFileDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ApplicationResourceFileDefinitions));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ApplicationResourceFileDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ApplicationResourceFileDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("App_GlobalResourceFileDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.App_GlobalResourceFileDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ResourceDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ResourceDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ResourceDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ResourceDefinitions));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DocumentConverterDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.DocumentConverterDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FeatureSiteTemplateAssociationDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FeatureSiteTemplateAssociationDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ContentTypeBindingDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ContentTypeBindingDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ServerEmailFooterDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ServerEmailFooterDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ContentTypeReferences", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ContentTypeReferences));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ContentTypeReference", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ContentTypeReference));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FolderReference", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FolderReference));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SharedFieldDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.SharedFieldDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ExecuteUrlDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ExecuteUrlDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FileDialogPostProcessorDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.FileDialogPostProcessorDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ExternalSecurityProviderDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ExternalSecurityProviderDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ComponentsDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ComponentsDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CTFolderDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CTFolderDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ViewDataFieldRefDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ViewDataFieldRefDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ViewDataFieldRefDefinitions", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ViewDataFieldRefDefinitions));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ValidationDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ValidationDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("WorkflowAssociationDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.WorkflowAssociationDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PropertyBagDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.PropertyBagDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("WorkflowActionsDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.WorkflowActionsDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CustomizationDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CustomizationDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ArrayOfPropertyDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.ArrayOfPropertyDefinition));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PropertyDefinition", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.PropertyDefinition));
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(System.Xml.Linq.XName.Get("CommandUI", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.CommandUI));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Feature", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.Feature));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Elements", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.Elements));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Solution", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.Solution));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Project", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.Project));
            elementDictionary.Add(System.Xml.Linq.XName.Get("List", "http://schemas.microsoft.com/sharepoint/"), typeof(global::Microsoft.Schemas.SharePoint.List));
        }
        
        private static void BuildWrapperDictionary() {
            wrapperDictionary.Add(typeof(Microsoft.Schemas.SharePoint.CommandUI), typeof(global::Microsoft.Schemas.SharePoint.CommandUIType));
            wrapperDictionary.Add(typeof(Microsoft.Schemas.SharePoint.Feature), typeof(global::Microsoft.Schemas.SharePoint.FeatureDefinition));
            wrapperDictionary.Add(typeof(Microsoft.Schemas.SharePoint.Elements), typeof(global::Microsoft.Schemas.SharePoint.ElementDefinitionCollection));
            wrapperDictionary.Add(typeof(Microsoft.Schemas.SharePoint.Solution), typeof(global::Microsoft.Schemas.SharePoint.SolutionDefinition));
            wrapperDictionary.Add(typeof(Microsoft.Schemas.SharePoint.Project), typeof(global::Microsoft.Schemas.SharePoint.SiteDefinition));
            wrapperDictionary.Add(typeof(Microsoft.Schemas.SharePoint.List), typeof(global::Microsoft.Schemas.SharePoint.ListDefinition));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[System.Xml.Linq.XName.Get("CommandUI", "http://schemas.microsoft.com/sharepoint/")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public CommandUI CommandUI {  get {return rootObject as CommandUI; } }

		public Feature Feature {  get {return rootObject as Feature; } }

		public Elements Elements {  get {return rootObject as Elements; } }

		public Solution Solution {  get {return rootObject as Solution; } }

		public Project Project {  get {return rootObject as Project; } }

		public List List {  get {return rootObject as List; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(CommandUI root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Feature root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Elements root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Solution root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Project root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(List root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public global::Microsoft.Schemas.SharePoint.CommandUI CommandUI {  get {return rootObject as global::Microsoft.Schemas.SharePoint.CommandUI; } }

		public global::Microsoft.Schemas.SharePoint.Feature Feature {  get {return rootObject as global::Microsoft.Schemas.SharePoint.Feature; } }

		public global::Microsoft.Schemas.SharePoint.Elements Elements {  get {return rootObject as global::Microsoft.Schemas.SharePoint.Elements; } }

		public global::Microsoft.Schemas.SharePoint.Solution Solution {  get {return rootObject as global::Microsoft.Schemas.SharePoint.Solution; } }

		public global::Microsoft.Schemas.SharePoint.Project Project {  get {return rootObject as global::Microsoft.Schemas.SharePoint.Project; } }

		public global::Microsoft.Schemas.SharePoint.List List {  get {return rootObject as global::Microsoft.Schemas.SharePoint.List; } }
        
        private XRoot() {
        }
        
        public XRoot(global::Microsoft.Schemas.SharePoint.CommandUI root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Microsoft.Schemas.SharePoint.Feature root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Microsoft.Schemas.SharePoint.Elements root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Microsoft.Schemas.SharePoint.Solution root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Microsoft.Schemas.SharePoint.Project root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::Microsoft.Schemas.SharePoint.List root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
