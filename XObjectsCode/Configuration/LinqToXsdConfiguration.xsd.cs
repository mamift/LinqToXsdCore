//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Xml.Schema.Linq {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (CodeGeneration, Namespaces, NullableReferences?, Validation?, Transformation?)
    /// </para>
    /// </summary>
    internal partial class Configuration : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CodeGenerationXName = System.Xml.Linq.XName.Get("CodeGeneration", "http://www.microsoft.com/xml/schema/linq");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NamespacesXName = System.Xml.Linq.XName.Get("Namespaces", "http://www.microsoft.com/xml/schema/linq");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NullableReferencesXName = System.Xml.Linq.XName.Get("NullableReferences", "http://www.microsoft.com/xml/schema/linq");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ValidationXName = System.Xml.Linq.XName.Get("Validation", "http://www.microsoft.com/xml/schema/linq");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TransformationXName = System.Xml.Linq.XName.Get("Transformation", "http://www.microsoft.com/xml/schema/linq");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Configuration", "http://www.microsoft.com/xml/schema/linq");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Configuration(XElement xe) { return XTypedServices.ToXTypedElement<Configuration>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Configuration() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(CodeGenerationXName), new NamedContentModelEntity(NamespacesXName), new NamedContentModelEntity(NullableReferencesXName), new NamedContentModelEntity(ValidationXName), new NamedContentModelEntity(TransformationXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CodeGeneration, Namespaces, NullableReferences?, Validation?, Transformation?)
        /// </para>
        /// </summary>
        internal Configuration() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CodeGeneration, Namespaces, NullableReferences?, Validation?, Transformation?)
        /// </para>
        /// </summary>
        internal virtual CodeGeneration CodeGeneration {
            get {
                XElement x = this.GetElement(CodeGenerationXName);
                return ((CodeGeneration)(x));
            }
            set {
                this.SetElement(CodeGenerationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CodeGeneration, Namespaces, NullableReferences?, Validation?, Transformation?)
        /// </para>
        /// </summary>
        internal virtual Namespaces Namespaces {
            get {
                XElement x = this.GetElement(NamespacesXName);
                return ((Namespaces)(x));
            }
            set {
                this.SetElement(NamespacesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CodeGeneration, Namespaces, NullableReferences?, Validation?, Transformation?)
        /// </para>
        /// </summary>
        internal virtual NullableReferences NullableReferences {
            get {
                XElement x = this.GetElement(NullableReferencesXName);
                if ((x == null)) {
                    return null;
                }
                return ((NullableReferences)(x));
            }
            set {
                this.SetElement(NullableReferencesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CodeGeneration, Namespaces, NullableReferences?, Validation?, Transformation?)
        /// </para>
        /// </summary>
        internal virtual Validation Validation {
            get {
                XElement x = this.GetElement(ValidationXName);
                return ((Validation)(x));
            }
            set {
                this.SetElement(ValidationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (CodeGeneration, Namespaces, NullableReferences?, Validation?, Transformation?)
        /// </para>
        /// </summary>
        internal virtual Transformation Transformation {
            get {
                XElement x = this.GetElement(TransformationXName);
                return ((Transformation)(x));
            }
            set {
                this.SetElement(TransformationXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        internal void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        internal void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        internal void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        internal static Configuration Load(string xmlFile) {
            return XTypedServices.Load<Configuration>(xmlFile);
        }
        
        internal static Configuration Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Configuration>(xmlFile);
        }
        
        internal static Configuration Parse(string xml) {
            return XTypedServices.Parse<Configuration>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Configuration>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(CodeGenerationXName, typeof(CodeGeneration));
            localElementDictionary.Add(NamespacesXName, typeof(Namespaces));
            localElementDictionary.Add(NullableReferencesXName, typeof(NullableReferences));
            localElementDictionary.Add(ValidationXName, typeof(Validation));
            localElementDictionary.Add(TransformationXName, typeof(Transformation));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (UseDateOnly, UseTimeOnly, SplitCodeFiles)
    /// </para>
    /// </summary>
    internal partial class CodeGeneration : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UseDateOnlyXName = System.Xml.Linq.XName.Get("UseDateOnly", "http://www.microsoft.com/xml/schema/linq");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UseTimeOnlyXName = System.Xml.Linq.XName.Get("UseTimeOnly", "http://www.microsoft.com/xml/schema/linq");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SplitCodeFilesXName = System.Xml.Linq.XName.Get("SplitCodeFiles", "http://www.microsoft.com/xml/schema/linq");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CodeGeneration", "http://www.microsoft.com/xml/schema/linq");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CodeGeneration(XElement xe) { return XTypedServices.ToXTypedElement<CodeGeneration>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CodeGeneration() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(UseDateOnlyXName), new NamedContentModelEntity(UseTimeOnlyXName), new NamedContentModelEntity(SplitCodeFilesXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (UseDateOnly, UseTimeOnly, SplitCodeFiles)
        /// </para>
        /// </summary>
        internal CodeGeneration() {
        }
        
        /// <summary>
        /// <para>
        /// Generate .net 6 DateOnly type for xs:date
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (UseDateOnly, UseTimeOnly, SplitCodeFiles)
        /// </para>
        /// </summary>
        internal virtual bool UseDateOnly {
            get {
                XElement x = this.GetElement(UseDateOnlyXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(UseDateOnlyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Generate .net 6 TimeOnly type for xs:time
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (UseDateOnly, UseTimeOnly, SplitCodeFiles)
        /// </para>
        /// </summary>
        internal virtual bool UseTimeOnly {
            get {
                XElement x = this.GetElement(UseTimeOnlyXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(UseTimeOnlyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (UseDateOnly, UseTimeOnly, SplitCodeFiles)
        /// </para>
        /// </summary>
        internal virtual SplitCodeFiles SplitCodeFiles {
            get {
                XElement x = this.GetElement(SplitCodeFilesXName);
                return ((SplitCodeFiles)(x));
            }
            set {
                this.SetElement(SplitCodeFilesXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        internal void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        internal void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        internal void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        internal static CodeGeneration Load(string xmlFile) {
            return XTypedServices.Load<CodeGeneration>(xmlFile);
        }
        
        internal static CodeGeneration Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<CodeGeneration>(xmlFile);
        }
        
        internal static CodeGeneration Parse(string xml) {
            return XTypedServices.Parse<CodeGeneration>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CodeGeneration>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(UseDateOnlyXName, typeof(bool));
            localElementDictionary.Add(UseTimeOnlyXName, typeof(bool));
            localElementDictionary.Add(SplitCodeFilesXName, typeof(SplitCodeFiles));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Namespace+)
    /// </para>
    /// </summary>
    internal partial class Namespaces : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NamespaceXName = System.Xml.Linq.XName.Get("Namespace", "http://www.microsoft.com/xml/schema/linq");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Namespace> NamespaceField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Namespaces", "http://www.microsoft.com/xml/schema/linq");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Namespaces(XElement xe) { return XTypedServices.ToXTypedElement<Namespaces>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Namespaces() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(NamespaceXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Namespace+)
        /// </para>
        /// </summary>
        internal Namespaces() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Namespace+)
        /// </para>
        /// </summary>
        internal virtual IList<Namespace> Namespace {
            get {
                if ((this.NamespaceField == null)) {
                    this.NamespaceField = new XTypedList<Namespace>(this, LinqToXsdTypeManager.Instance, NamespaceXName);
                }
                return this.NamespaceField;
            }
            set {
                if ((value == null)) {
                    this.NamespaceField = null;
                }
                else {
                    if ((this.NamespaceField == null)) {
                        this.NamespaceField = XTypedList<Namespace>.Initialize(this, LinqToXsdTypeManager.Instance, value, NamespaceXName);
                    }
                    else {
                        XTypedServices.SetList<Namespace>(this.NamespaceField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        internal void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        internal void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        internal void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        internal static Namespaces Load(string xmlFile) {
            return XTypedServices.Load<Namespaces>(xmlFile);
        }
        
        internal static Namespaces Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Namespaces>(xmlFile);
        }
        
        internal static Namespaces Parse(string xml) {
            return XTypedServices.Parse<Namespaces>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Namespaces>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(NamespaceXName, typeof(Namespace));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    internal partial class Namespace : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ClrXName = System.Xml.Linq.XName.Get("Clr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchemaXName = System.Xml.Linq.XName.Get("Schema", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DefaultVisibilityXName = System.Xml.Linq.XName.Get("DefaultVisibility", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FileXName = System.Xml.Linq.XName.Get("File", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Namespace", "http://www.microsoft.com/xml/schema/linq");
        
		public static explicit operator Namespace(XElement xe) { return XTypedServices.ToXTypedElement<Namespace>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        internal Namespace() {
        }
        
        /// <summary>
        /// <para>
        /// The CLR namespace to contain the generated types under.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        internal virtual string Clr {
            get {
                XAttribute x = this.Attribute(ClrXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
            set {
                this.SetAttribute(ClrXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NCName).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The XML namespaces to map to CLR namepsace.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        internal virtual System.Uri Schema {
            get {
                XAttribute x = this.Attribute(SchemaXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(SchemaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// This changes the default visibility of the generated types. No value for this implies a default value of 'public'. The only other acceptable value is 'internal'.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        internal virtual string DefaultVisibility {
            get {
                XAttribute x = this.Attribute(DefaultVisibilityXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DefaultVisibilityXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Filename of C# generated file for this CLR namespace, when using SplitCodeFiles.By=Namespace.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        internal virtual string File {
            get {
                XAttribute x = this.Attribute(FileXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(FileXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        internal void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        internal void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        internal void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        internal static Namespace Load(string xmlFile) {
            return XTypedServices.Load<Namespace>(xmlFile);
        }
        
        internal static Namespace Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Namespace>(xmlFile);
        }
        
        internal static Namespace Parse(string xml) {
            return XTypedServices.Parse<Namespace>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Namespace>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (VerifyRequired)
    /// </para>
    /// </summary>
    internal partial class Validation : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VerifyRequiredXName = System.Xml.Linq.XName.Get("VerifyRequired", "http://www.microsoft.com/xml/schema/linq");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Validation", "http://www.microsoft.com/xml/schema/linq");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Validation(XElement xe) { return XTypedServices.ToXTypedElement<Validation>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Validation() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(VerifyRequiredXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (VerifyRequired)
        /// </para>
        /// </summary>
        internal Validation() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VerifyRequired)
        /// </para>
        /// </summary>
        internal virtual VerifyRequired VerifyRequired {
            get {
                XElement x = this.GetElement(VerifyRequiredXName);
                return ((VerifyRequired)(x));
            }
            set {
                this.SetElement(VerifyRequiredXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        internal void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        internal void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        internal void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        internal static Validation Load(string xmlFile) {
            return XTypedServices.Load<Validation>(xmlFile);
        }
        
        internal static Validation Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Validation>(xmlFile);
        }
        
        internal static Validation Parse(string xml) {
            return XTypedServices.Parse<Validation>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Validation>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(VerifyRequiredXName, typeof(VerifyRequired));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Deanonymize)
    /// </para>
    /// </summary>
    internal partial class Transformation : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DeanonymizeXName = System.Xml.Linq.XName.Get("Deanonymize", "http://www.microsoft.com/xml/schema/linq");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Transformation", "http://www.microsoft.com/xml/schema/linq");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Transformation(XElement xe) { return XTypedServices.ToXTypedElement<Transformation>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Transformation() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DeanonymizeXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Deanonymize)
        /// </para>
        /// </summary>
        internal Transformation() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Deanonymize)
        /// </para>
        /// </summary>
        internal virtual Deanonymize Deanonymize {
            get {
                XElement x = this.GetElement(DeanonymizeXName);
                return ((Deanonymize)(x));
            }
            set {
                this.SetElement(DeanonymizeXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        internal void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        internal void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        internal void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        internal static Transformation Load(string xmlFile) {
            return XTypedServices.Load<Transformation>(xmlFile);
        }
        
        internal static Transformation Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Transformation>(xmlFile);
        }
        
        internal static Transformation Parse(string xml) {
            return XTypedServices.Parse<Transformation>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Transformation>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(DeanonymizeXName, typeof(Deanonymize));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    internal partial class Deanonymize : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName strictXName = System.Xml.Linq.XName.Get("strict", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Deanonymize", "http://www.microsoft.com/xml/schema/linq");
        
		public static explicit operator Deanonymize(XElement xe) { return XTypedServices.ToXTypedElement<Deanonymize>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        internal Deanonymize() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        internal virtual System.Boolean? strict {
            get {
                XAttribute x = this.Attribute(strictXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(strictXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        internal void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        internal void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        internal void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        internal static Deanonymize Load(string xmlFile) {
            return XTypedServices.Load<Deanonymize>(xmlFile);
        }
        
        internal static Deanonymize Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Deanonymize>(xmlFile);
        }
        
        internal static Deanonymize Parse(string xml) {
            return XTypedServices.Parse<Deanonymize>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Deanonymize>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    internal partial class SplitCodeFiles : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ByXName = System.Xml.Linq.XName.Get("By", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SplitCodeFiles", "http://www.microsoft.com/xml/schema/linq");
        
		public static explicit operator SplitCodeFiles(XElement xe) { return XTypedServices.ToXTypedElement<SplitCodeFiles>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        internal SplitCodeFiles() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        internal virtual Xml.Schema.Linq.SplitCodeFiles.ByEnum? By {
            get {
                XAttribute x = this.Attribute(ByXName);
                if ((x == null)) {
                    return null;
                }
                return ((Xml.Schema.Linq.SplitCodeFiles.ByEnum)(Enum.Parse(typeof(Xml.Schema.Linq.SplitCodeFiles.ByEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(ByXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SplitCodeFiles>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        public enum ByEnum {
            
            Class,
            
            Namespace,
        }
    }
    
    internal partial class NullableReferences : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("NullableReferences", "http://www.microsoft.com/xml/schema/linq");
        
		public static explicit operator NullableReferences(XElement xe) { return XTypedServices.ToXTypedElement<NullableReferences>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        internal NullableReferences() {
        }
        
        internal NullableReferences(bool content) {
            this.TypedValue = content;
        }
        
        internal virtual bool TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        internal void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        internal void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        internal void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        internal static NullableReferences Load(string xmlFile) {
            return XTypedServices.Load<NullableReferences>(xmlFile);
        }
        
        internal static NullableReferences Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<NullableReferences>(xmlFile);
        }
        
        internal static NullableReferences Parse(string xml) {
            return XTypedServices.Parse<NullableReferences>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NullableReferences>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    internal partial class VerifyRequired : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("VerifyRequired", "http://www.microsoft.com/xml/schema/linq");
        
		public static explicit operator VerifyRequired(XElement xe) { return XTypedServices.ToXTypedElement<VerifyRequired>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        internal VerifyRequired() {
        }
        
        internal VerifyRequired(bool content) {
            this.TypedValue = content;
        }
        
        internal virtual bool TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        internal void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        internal void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        internal void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        internal static VerifyRequired Load(string xmlFile) {
            return XTypedServices.Load<VerifyRequired>(xmlFile);
        }
        
        internal static VerifyRequired Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<VerifyRequired>(xmlFile);
        }
        
        internal static VerifyRequired Parse(string xml) {
            return XTypedServices.Parse<VerifyRequired>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<VerifyRequired>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    internal class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> typeDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> elementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
        }
        
        private LinqToXsdTypeManager() {
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }
        
        internal static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(System.Xml.Linq.XName.Get("SplitCodeFiles", "http://www.microsoft.com/xml/schema/linq"), typeof(global::Xml.Schema.Linq.SplitCodeFiles));
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(System.Xml.Linq.XName.Get("Configuration", "http://www.microsoft.com/xml/schema/linq"), typeof(global::Xml.Schema.Linq.Configuration));
            elementDictionary.Add(System.Xml.Linq.XName.Get("CodeGeneration", "http://www.microsoft.com/xml/schema/linq"), typeof(global::Xml.Schema.Linq.CodeGeneration));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Namespaces", "http://www.microsoft.com/xml/schema/linq"), typeof(global::Xml.Schema.Linq.Namespaces));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Namespace", "http://www.microsoft.com/xml/schema/linq"), typeof(global::Xml.Schema.Linq.Namespace));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Validation", "http://www.microsoft.com/xml/schema/linq"), typeof(global::Xml.Schema.Linq.Validation));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Transformation", "http://www.microsoft.com/xml/schema/linq"), typeof(global::Xml.Schema.Linq.Transformation));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Deanonymize", "http://www.microsoft.com/xml/schema/linq"), typeof(global::Xml.Schema.Linq.Deanonymize));
            elementDictionary.Add(System.Xml.Linq.XName.Get("NullableReferences", "http://www.microsoft.com/xml/schema/linq"), typeof(global::Xml.Schema.Linq.NullableReferences));
            elementDictionary.Add(System.Xml.Linq.XName.Get("VerifyRequired", "http://www.microsoft.com/xml/schema/linq"), typeof(global::Xml.Schema.Linq.VerifyRequired));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        internal static System.Type GetRootType() {
            return elementDictionary[System.Xml.Linq.XName.Get("Configuration", "http://www.microsoft.com/xml/schema/linq")];
        }
    }
    
    internal partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		internal Configuration Configuration {  get {return rootObject as Configuration; } }

		internal CodeGeneration CodeGeneration {  get {return rootObject as CodeGeneration; } }

		internal Namespaces Namespaces {  get {return rootObject as Namespaces; } }

		internal Namespace Namespace {  get {return rootObject as Namespace; } }

		internal Validation Validation {  get {return rootObject as Validation; } }

		internal Transformation Transformation {  get {return rootObject as Transformation; } }

		internal Deanonymize Deanonymize {  get {return rootObject as Deanonymize; } }

		internal NullableReferences NullableReferences {  get {return rootObject as NullableReferences; } }

		internal VerifyRequired VerifyRequired {  get {return rootObject as VerifyRequired; } }
        
        private XRootNamespace() {
        }
        
        internal XRootNamespace(Configuration root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        internal XRootNamespace(CodeGeneration root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        internal XRootNamespace(Namespaces root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        internal XRootNamespace(Namespace root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        internal XRootNamespace(Validation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        internal XRootNamespace(Transformation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        internal XRootNamespace(Deanonymize root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        internal XRootNamespace(NullableReferences root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        internal XRootNamespace(VerifyRequired root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        internal virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        internal virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        internal static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        internal static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        internal static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        internal static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        internal static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        internal static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        internal static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        internal virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        internal virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        internal virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        internal virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        internal virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    internal partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		internal global::Xml.Schema.Linq.Configuration Configuration {  get {return rootObject as global::Xml.Schema.Linq.Configuration; } }

		internal global::Xml.Schema.Linq.CodeGeneration CodeGeneration {  get {return rootObject as global::Xml.Schema.Linq.CodeGeneration; } }

		internal global::Xml.Schema.Linq.Namespaces Namespaces {  get {return rootObject as global::Xml.Schema.Linq.Namespaces; } }

		internal global::Xml.Schema.Linq.Namespace Namespace {  get {return rootObject as global::Xml.Schema.Linq.Namespace; } }

		internal global::Xml.Schema.Linq.Validation Validation {  get {return rootObject as global::Xml.Schema.Linq.Validation; } }

		internal global::Xml.Schema.Linq.Transformation Transformation {  get {return rootObject as global::Xml.Schema.Linq.Transformation; } }

		internal global::Xml.Schema.Linq.Deanonymize Deanonymize {  get {return rootObject as global::Xml.Schema.Linq.Deanonymize; } }

		internal global::Xml.Schema.Linq.NullableReferences NullableReferences {  get {return rootObject as global::Xml.Schema.Linq.NullableReferences; } }

		internal global::Xml.Schema.Linq.VerifyRequired VerifyRequired {  get {return rootObject as global::Xml.Schema.Linq.VerifyRequired; } }
        
        private XRoot() {
        }
        
        internal XRoot(global::Xml.Schema.Linq.Configuration root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        internal XRoot(global::Xml.Schema.Linq.CodeGeneration root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        internal XRoot(global::Xml.Schema.Linq.Namespaces root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        internal XRoot(global::Xml.Schema.Linq.Namespace root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        internal XRoot(global::Xml.Schema.Linq.Validation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        internal XRoot(global::Xml.Schema.Linq.Transformation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        internal XRoot(global::Xml.Schema.Linq.Deanonymize root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        internal XRoot(global::Xml.Schema.Linq.NullableReferences root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        internal XRoot(global::Xml.Schema.Linq.VerifyRequired root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        internal virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        internal virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        internal static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        internal static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        internal static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        internal static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        internal static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        internal static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        internal static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        internal virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        internal virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        internal virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        internal virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        internal virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
