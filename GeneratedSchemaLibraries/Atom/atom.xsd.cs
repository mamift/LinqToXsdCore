//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AtomSyndication {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    
    /// <summary>
    /// <para>
    /// 
    ///                The Atom text construct is defined in section 3.1 of the format spec.
    ///            
    /// </para>
    /// <para>
    /// Regular expression: (any)
    /// </para>
    /// </summary>
    public partial class textType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @baseXName = System.Xml.Linq.XName.Get("base", "http://www.w3.org/XML/1998/namespace");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName langXName = System.Xml.Linq.XName.Get("lang", "http://www.w3.org/XML/1998/namespace");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("textType", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static FSM validationStates;
        
		public static explicit operator textType(XElement xe) { return XTypedServices.ToXTypedElement<textType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static textType() {
            InitFSM();
        }
        
        /// <summary>
        /// <para>
        /// 
        ///                The Atom text construct is defined in section 3.1 of the format spec.
        ///            
        /// </para>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public textType() {
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public virtual IEnumerable<XElement> Any {
            get {
                return this.GetWildCards(WildCard.DefaultWildCard);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual AtomSyndication.textType.TypeEnum? type {
            get {
                XAttribute x = this.Attribute(typeXName);
                if ((x == null)) {
                    return null;
                }
                return ((AtomSyndication.textType.TypeEnum)(Enum.Parse(typeof(AtomSyndication.textType.TypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype))));
            }
            set {
                this.SetAttribute(typeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri @base {
            get {
                XAttribute x = this.Attribute(@baseXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(@baseXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string lang {
            get {
                XAttribute x = this.Attribute(langXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language).Datatype);
            }
            set {
                this.SetAttribute(langXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<textType>(this);
        }
        
        FSM IXMetaData.GetValidationStates() {
            return validationStates;
        }
        
        private static void InitFSM() {
            Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
            transitions.Add(1, new Transitions(new SingleTransition(new WildCard("http://www.w3.org/1999/xhtml", "http://www.w3.org/2005/Atom"), 2)));
            validationStates = new FSM(1, new Set<int>(new int[] {
                            2,
                            1}), transitions);
        }
        
        public enum TypeEnum {
            
            text,
            
            html,
            
            xhtml,
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///                The Atom person construct is defined in section 3.2 of the format spec.
    ///            
    /// </para>
    /// <para>
    /// Regular expression: (name | uri? | email? | any)+
    /// </para>
    /// </summary>
    public partial class personType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> nameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uriXName = System.Xml.Linq.XName.Get("uri", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<uriType> uriField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName emailXName = System.Xml.Linq.XName.Get("email", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> emailField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @baseXName = System.Xml.Linq.XName.Get("base", "http://www.w3.org/XML/1998/namespace");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName langXName = System.Xml.Linq.XName.Get("lang", "http://www.w3.org/XML/1998/namespace");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("personType", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static FSM validationStates;
        
		public static explicit operator personType(XElement xe) { return XTypedServices.ToXTypedElement<personType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static personType() {
            BuildElementDictionary();
            InitFSM();
        }
        
        /// <summary>
        /// <para>
        /// 
        ///                The Atom person construct is defined in section 3.2 of the format spec.
        ///            
        /// </para>
        /// <para>
        /// Regular expression: (name | uri? | email? | any)+
        /// </para>
        /// </summary>
        public personType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (name | uri? | email? | any)+
        /// </para>
        /// </summary>
        public virtual IList<string> name {
            get {
                if ((this.nameField == null)) {
                    this.nameField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, nameXName);
                }
                return this.nameField;
            }
            set {
                if ((value == null)) {
                    this.nameField = null;
                }
                else {
                    if ((this.nameField == null)) {
                        this.nameField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, nameXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.nameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (name | uri? | email? | any)+
        /// </para>
        /// </summary>
        public virtual IList<uriType> uri {
            get {
                if ((this.uriField == null)) {
                    this.uriField = new XTypedList<uriType>(this, LinqToXsdTypeManager.Instance, uriXName);
                }
                return this.uriField;
            }
            set {
                if ((value == null)) {
                    this.uriField = null;
                }
                else {
                    if ((this.uriField == null)) {
                        this.uriField = XTypedList<uriType>.Initialize(this, LinqToXsdTypeManager.Instance, value, uriXName);
                    }
                    else {
                        XTypedServices.SetList<uriType>(this.uriField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (name | uri? | email? | any)+
        /// </para>
        /// </summary>
        public virtual IList<string> email {
            get {
                if ((this.emailField == null)) {
                    this.emailField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NormalizedString).Datatype, emailXName);
                }
                return this.emailField;
            }
            set {
                if ((value == null)) {
                    this.emailField = null;
                }
                else {
                    if ((this.emailField == null)) {
                        this.emailField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NormalizedString).Datatype, value, emailXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.emailField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (name | uri? | email? | any)+
        /// </para>
        /// </summary>
        public virtual IEnumerable<XElement> Any {
            get {
                return this.GetWildCards(WildCard.DefaultWildCard);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri @base {
            get {
                XAttribute x = this.Attribute(@baseXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(@baseXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string lang {
            get {
                XAttribute x = this.Attribute(langXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language).Datatype);
            }
            set {
                this.SetAttribute(langXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<personType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(nameXName, typeof(string));
            localElementDictionary.Add(uriXName, typeof(uriType));
            localElementDictionary.Add(emailXName, typeof(string));
        }
        
        FSM IXMetaData.GetValidationStates() {
            return validationStates;
        }
        
        private static void InitFSM() {
            Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
            transitions.Add(1, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("name", "http://www.w3.org/2005/Atom"), 2), new SingleTransition(System.Xml.Linq.XName.Get("uri", "http://www.w3.org/2005/Atom"), 4), new SingleTransition(System.Xml.Linq.XName.Get("email", "http://www.w3.org/2005/Atom"), 6), new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 8)));
            transitions.Add(2, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("name", "http://www.w3.org/2005/Atom"), 2), new SingleTransition(System.Xml.Linq.XName.Get("uri", "http://www.w3.org/2005/Atom"), 4), new SingleTransition(System.Xml.Linq.XName.Get("email", "http://www.w3.org/2005/Atom"), 6), new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 8)));
            transitions.Add(4, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("name", "http://www.w3.org/2005/Atom"), 2), new SingleTransition(System.Xml.Linq.XName.Get("uri", "http://www.w3.org/2005/Atom"), 4), new SingleTransition(System.Xml.Linq.XName.Get("email", "http://www.w3.org/2005/Atom"), 6), new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 8)));
            transitions.Add(6, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("name", "http://www.w3.org/2005/Atom"), 2), new SingleTransition(System.Xml.Linq.XName.Get("uri", "http://www.w3.org/2005/Atom"), 4), new SingleTransition(System.Xml.Linq.XName.Get("email", "http://www.w3.org/2005/Atom"), 6), new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 8)));
            transitions.Add(8, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("name", "http://www.w3.org/2005/Atom"), 2), new SingleTransition(System.Xml.Linq.XName.Get("uri", "http://www.w3.org/2005/Atom"), 4), new SingleTransition(System.Xml.Linq.XName.Get("email", "http://www.w3.org/2005/Atom"), 6), new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 8)));
            validationStates = new FSM(1, new Set<int>(new int[] {
                            2,
                            1,
                            4,
                            6,
                            8}), transitions);
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///                Schema definition for an email address.
    ///            
    /// </para>
    /// </summary>
    public sealed class emailType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NormalizedString), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\w+@(\\w+\\.)+\\w+"}, 0, XmlSchemaWhiteSpace.Replace));
        
        private emailType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///                The Atom feed construct is defined in section 4.1.1 of the format spec.
    ///            
    /// </para>
    /// <para>
    /// Regular expression: (author* | category* | contributor* | generator? | icon? | id | link* | logo? | rights? | subtitle? | title | updated | entry* | any)+
    /// </para>
    /// </summary>
    public partial class feedType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName authorXName = System.Xml.Linq.XName.Get("author", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<personType> authorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName categoryXName = System.Xml.Linq.XName.Get("category", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<categoryType> categoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName contributorXName = System.Xml.Linq.XName.Get("contributor", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<personType> contributorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName generatorXName = System.Xml.Linq.XName.Get("generator", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<generatorType> generatorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName iconXName = System.Xml.Linq.XName.Get("icon", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<iconType> iconField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<idType> idField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName linkXName = System.Xml.Linq.XName.Get("link", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkType> linkField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName logoXName = System.Xml.Linq.XName.Get("logo", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<logoType> logoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rightsXName = System.Xml.Linq.XName.Get("rights", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<textType> rightsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName subtitleXName = System.Xml.Linq.XName.Get("subtitle", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<textType> subtitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<textType> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName updatedXName = System.Xml.Linq.XName.Get("updated", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dateTimeType> updatedField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName entryXName = System.Xml.Linq.XName.Get("entry", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<entryType> entryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @baseXName = System.Xml.Linq.XName.Get("base", "http://www.w3.org/XML/1998/namespace");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName langXName = System.Xml.Linq.XName.Get("lang", "http://www.w3.org/XML/1998/namespace");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("feedType", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static FSM validationStates;
        
		public static explicit operator feedType(XElement xe) { return XTypedServices.ToXTypedElement<feedType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static feedType() {
            BuildElementDictionary();
            InitFSM();
        }
        
        /// <summary>
        /// <para>
        /// 
        ///                The Atom feed construct is defined in section 4.1.1 of the format spec.
        ///            
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | contributor* | generator? | icon? | id | link* | logo? | rights? | subtitle? | title | updated | entry* | any)+
        /// </para>
        /// </summary>
        public feedType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | contributor* | generator? | icon? | id | link* | logo? | rights? | subtitle? | title | updated | entry* | any)+
        /// </para>
        /// </summary>
        public virtual IList<personType> author {
            get {
                if ((this.authorField == null)) {
                    this.authorField = new XTypedList<personType>(this, LinqToXsdTypeManager.Instance, authorXName);
                }
                return this.authorField;
            }
            set {
                if ((value == null)) {
                    this.authorField = null;
                }
                else {
                    if ((this.authorField == null)) {
                        this.authorField = XTypedList<personType>.Initialize(this, LinqToXsdTypeManager.Instance, value, authorXName);
                    }
                    else {
                        XTypedServices.SetList<personType>(this.authorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | contributor* | generator? | icon? | id | link* | logo? | rights? | subtitle? | title | updated | entry* | any)+
        /// </para>
        /// </summary>
        public virtual IList<categoryType> category {
            get {
                if ((this.categoryField == null)) {
                    this.categoryField = new XTypedList<categoryType>(this, LinqToXsdTypeManager.Instance, categoryXName);
                }
                return this.categoryField;
            }
            set {
                if ((value == null)) {
                    this.categoryField = null;
                }
                else {
                    if ((this.categoryField == null)) {
                        this.categoryField = XTypedList<categoryType>.Initialize(this, LinqToXsdTypeManager.Instance, value, categoryXName);
                    }
                    else {
                        XTypedServices.SetList<categoryType>(this.categoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | contributor* | generator? | icon? | id | link* | logo? | rights? | subtitle? | title | updated | entry* | any)+
        /// </para>
        /// </summary>
        public virtual IList<personType> contributor {
            get {
                if ((this.contributorField == null)) {
                    this.contributorField = new XTypedList<personType>(this, LinqToXsdTypeManager.Instance, contributorXName);
                }
                return this.contributorField;
            }
            set {
                if ((value == null)) {
                    this.contributorField = null;
                }
                else {
                    if ((this.contributorField == null)) {
                        this.contributorField = XTypedList<personType>.Initialize(this, LinqToXsdTypeManager.Instance, value, contributorXName);
                    }
                    else {
                        XTypedServices.SetList<personType>(this.contributorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | contributor* | generator? | icon? | id | link* | logo? | rights? | subtitle? | title | updated | entry* | any)+
        /// </para>
        /// </summary>
        public virtual IList<generatorType> generator {
            get {
                if ((this.generatorField == null)) {
                    this.generatorField = new XTypedList<generatorType>(this, LinqToXsdTypeManager.Instance, generatorXName);
                }
                return this.generatorField;
            }
            set {
                if ((value == null)) {
                    this.generatorField = null;
                }
                else {
                    if ((this.generatorField == null)) {
                        this.generatorField = XTypedList<generatorType>.Initialize(this, LinqToXsdTypeManager.Instance, value, generatorXName);
                    }
                    else {
                        XTypedServices.SetList<generatorType>(this.generatorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | contributor* | generator? | icon? | id | link* | logo? | rights? | subtitle? | title | updated | entry* | any)+
        /// </para>
        /// </summary>
        public virtual IList<iconType> icon {
            get {
                if ((this.iconField == null)) {
                    this.iconField = new XTypedList<iconType>(this, LinqToXsdTypeManager.Instance, iconXName);
                }
                return this.iconField;
            }
            set {
                if ((value == null)) {
                    this.iconField = null;
                }
                else {
                    if ((this.iconField == null)) {
                        this.iconField = XTypedList<iconType>.Initialize(this, LinqToXsdTypeManager.Instance, value, iconXName);
                    }
                    else {
                        XTypedServices.SetList<iconType>(this.iconField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | contributor* | generator? | icon? | id | link* | logo? | rights? | subtitle? | title | updated | entry* | any)+
        /// </para>
        /// </summary>
        public virtual IList<idType> id {
            get {
                if ((this.idField == null)) {
                    this.idField = new XTypedList<idType>(this, LinqToXsdTypeManager.Instance, idXName);
                }
                return this.idField;
            }
            set {
                if ((value == null)) {
                    this.idField = null;
                }
                else {
                    if ((this.idField == null)) {
                        this.idField = XTypedList<idType>.Initialize(this, LinqToXsdTypeManager.Instance, value, idXName);
                    }
                    else {
                        XTypedServices.SetList<idType>(this.idField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | contributor* | generator? | icon? | id | link* | logo? | rights? | subtitle? | title | updated | entry* | any)+
        /// </para>
        /// </summary>
        public virtual IList<linkType> link {
            get {
                if ((this.linkField == null)) {
                    this.linkField = new XTypedList<linkType>(this, LinqToXsdTypeManager.Instance, linkXName);
                }
                return this.linkField;
            }
            set {
                if ((value == null)) {
                    this.linkField = null;
                }
                else {
                    if ((this.linkField == null)) {
                        this.linkField = XTypedList<linkType>.Initialize(this, LinqToXsdTypeManager.Instance, value, linkXName);
                    }
                    else {
                        XTypedServices.SetList<linkType>(this.linkField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | contributor* | generator? | icon? | id | link* | logo? | rights? | subtitle? | title | updated | entry* | any)+
        /// </para>
        /// </summary>
        public virtual IList<logoType> logo {
            get {
                if ((this.logoField == null)) {
                    this.logoField = new XTypedList<logoType>(this, LinqToXsdTypeManager.Instance, logoXName);
                }
                return this.logoField;
            }
            set {
                if ((value == null)) {
                    this.logoField = null;
                }
                else {
                    if ((this.logoField == null)) {
                        this.logoField = XTypedList<logoType>.Initialize(this, LinqToXsdTypeManager.Instance, value, logoXName);
                    }
                    else {
                        XTypedServices.SetList<logoType>(this.logoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | contributor* | generator? | icon? | id | link* | logo? | rights? | subtitle? | title | updated | entry* | any)+
        /// </para>
        /// </summary>
        public virtual IList<textType> rights {
            get {
                if ((this.rightsField == null)) {
                    this.rightsField = new XTypedList<textType>(this, LinqToXsdTypeManager.Instance, rightsXName);
                }
                return this.rightsField;
            }
            set {
                if ((value == null)) {
                    this.rightsField = null;
                }
                else {
                    if ((this.rightsField == null)) {
                        this.rightsField = XTypedList<textType>.Initialize(this, LinqToXsdTypeManager.Instance, value, rightsXName);
                    }
                    else {
                        XTypedServices.SetList<textType>(this.rightsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | contributor* | generator? | icon? | id | link* | logo? | rights? | subtitle? | title | updated | entry* | any)+
        /// </para>
        /// </summary>
        public virtual IList<textType> subtitle {
            get {
                if ((this.subtitleField == null)) {
                    this.subtitleField = new XTypedList<textType>(this, LinqToXsdTypeManager.Instance, subtitleXName);
                }
                return this.subtitleField;
            }
            set {
                if ((value == null)) {
                    this.subtitleField = null;
                }
                else {
                    if ((this.subtitleField == null)) {
                        this.subtitleField = XTypedList<textType>.Initialize(this, LinqToXsdTypeManager.Instance, value, subtitleXName);
                    }
                    else {
                        XTypedServices.SetList<textType>(this.subtitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | contributor* | generator? | icon? | id | link* | logo? | rights? | subtitle? | title | updated | entry* | any)+
        /// </para>
        /// </summary>
        public virtual IList<textType> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<textType>(this, LinqToXsdTypeManager.Instance, titleXName);
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<textType>.Initialize(this, LinqToXsdTypeManager.Instance, value, titleXName);
                    }
                    else {
                        XTypedServices.SetList<textType>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | contributor* | generator? | icon? | id | link* | logo? | rights? | subtitle? | title | updated | entry* | any)+
        /// </para>
        /// </summary>
        public virtual IList<dateTimeType> updated {
            get {
                if ((this.updatedField == null)) {
                    this.updatedField = new XTypedList<dateTimeType>(this, LinqToXsdTypeManager.Instance, updatedXName);
                }
                return this.updatedField;
            }
            set {
                if ((value == null)) {
                    this.updatedField = null;
                }
                else {
                    if ((this.updatedField == null)) {
                        this.updatedField = XTypedList<dateTimeType>.Initialize(this, LinqToXsdTypeManager.Instance, value, updatedXName);
                    }
                    else {
                        XTypedServices.SetList<dateTimeType>(this.updatedField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | contributor* | generator? | icon? | id | link* | logo? | rights? | subtitle? | title | updated | entry* | any)+
        /// </para>
        /// </summary>
        public virtual IList<entryType> entry {
            get {
                if ((this.entryField == null)) {
                    this.entryField = new XTypedList<entryType>(this, LinqToXsdTypeManager.Instance, entryXName);
                }
                return this.entryField;
            }
            set {
                if ((value == null)) {
                    this.entryField = null;
                }
                else {
                    if ((this.entryField == null)) {
                        this.entryField = XTypedList<entryType>.Initialize(this, LinqToXsdTypeManager.Instance, value, entryXName);
                    }
                    else {
                        XTypedServices.SetList<entryType>(this.entryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (author* | category* | contributor* | generator? | icon? | id | link* | logo? | rights? | subtitle? | title | updated | entry* | any)+
        /// </para>
        /// </summary>
        public virtual IEnumerable<XElement> Any {
            get {
                return this.GetWildCards(WildCard.DefaultWildCard);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri @base {
            get {
                XAttribute x = this.Attribute(@baseXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(@baseXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string lang {
            get {
                XAttribute x = this.Attribute(langXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language).Datatype);
            }
            set {
                this.SetAttribute(langXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<feedType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(authorXName, typeof(personType));
            localElementDictionary.Add(categoryXName, typeof(categoryType));
            localElementDictionary.Add(contributorXName, typeof(personType));
            localElementDictionary.Add(generatorXName, typeof(generatorType));
            localElementDictionary.Add(iconXName, typeof(iconType));
            localElementDictionary.Add(idXName, typeof(idType));
            localElementDictionary.Add(linkXName, typeof(linkType));
            localElementDictionary.Add(logoXName, typeof(logoType));
            localElementDictionary.Add(rightsXName, typeof(textType));
            localElementDictionary.Add(subtitleXName, typeof(textType));
            localElementDictionary.Add(titleXName, typeof(textType));
            localElementDictionary.Add(updatedXName, typeof(dateTimeType));
            localElementDictionary.Add(entryXName, typeof(entryType));
        }
        
        FSM IXMetaData.GetValidationStates() {
            return validationStates;
        }
        
        private static void InitFSM() {
            Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
            transitions.Add(1, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("author", "http://www.w3.org/2005/Atom"), 1), new SingleTransition(System.Xml.Linq.XName.Get("category", "http://www.w3.org/2005/Atom"), 3), new SingleTransition(System.Xml.Linq.XName.Get("contributor", "http://www.w3.org/2005/Atom"), 5), new SingleTransition(System.Xml.Linq.XName.Get("generator", "http://www.w3.org/2005/Atom"), 8), new SingleTransition(System.Xml.Linq.XName.Get("icon", "http://www.w3.org/2005/Atom"), 10), new SingleTransition(System.Xml.Linq.XName.Get("id", "http://www.w3.org/2005/Atom"), 12), new SingleTransition(System.Xml.Linq.XName.Get("link", "http://www.w3.org/2005/Atom"), 13), new SingleTransition(System.Xml.Linq.XName.Get("logo", "http://www.w3.org/2005/Atom"), 16), new SingleTransition(System.Xml.Linq.XName.Get("rights", "http://www.w3.org/2005/Atom"), 18), new SingleTransition(System.Xml.Linq.XName.Get("subtitle", "http://www.w3.org/2005/Atom"), 20), new SingleTransition(System.Xml.Linq.XName.Get("title", "http://www.w3.org/2005/Atom"), 22), new SingleTransition(System.Xml.Linq.XName.Get("updated", "http://www.w3.org/2005/Atom"), 24), new SingleTransition(System.Xml.Linq.XName.Get("entry", "http://www.w3.org/2005/Atom"), 25), new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 27)));
            transitions.Add(3, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("category", "http://www.w3.org/2005/Atom"), 3), new SingleTransition(System.Xml.Linq.XName.Get("author", "http://www.w3.org/2005/Atom"), 1), new SingleTransition(System.Xml.Linq.XName.Get("contributor", "http://www.w3.org/2005/Atom"), 5), new SingleTransition(System.Xml.Linq.XName.Get("generator", "http://www.w3.org/2005/Atom"), 8), new SingleTransition(System.Xml.Linq.XName.Get("icon", "http://www.w3.org/2005/Atom"), 10), new SingleTransition(System.Xml.Linq.XName.Get("id", "http://www.w3.org/2005/Atom"), 12), new SingleTransition(System.Xml.Linq.XName.Get("link", "http://www.w3.org/2005/Atom"), 13), new SingleTransition(System.Xml.Linq.XName.Get("logo", "http://www.w3.org/2005/Atom"), 16), new SingleTransition(System.Xml.Linq.XName.Get("rights", "http://www.w3.org/2005/Atom"), 18), new SingleTransition(System.Xml.Linq.XName.Get("subtitle", "http://www.w3.org/2005/Atom"), 20), new SingleTransition(System.Xml.Linq.XName.Get("title", "http://www.w3.org/2005/Atom"), 22), new SingleTransition(System.Xml.Linq.XName.Get("updated", "http://www.w3.org/2005/Atom"), 24), new SingleTransition(System.Xml.Linq.XName.Get("entry", "http://www.w3.org/2005/Atom"), 25), new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 27)));
            transitions.Add(5, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("contributor", "http://www.w3.org/2005/Atom"), 5), new SingleTransition(System.Xml.Linq.XName.Get("author", "http://www.w3.org/2005/Atom"), 1), new SingleTransition(System.Xml.Linq.XName.Get("category", "http://www.w3.org/2005/Atom"), 3), new SingleTransition(System.Xml.Linq.XName.Get("generator", "http://www.w3.org/2005/Atom"), 8), new SingleTransition(System.Xml.Linq.XName.Get("icon", "http://www.w3.org/2005/Atom"), 10), new SingleTransition(System.Xml.Linq.XName.Get("id", "http://www.w3.org/2005/Atom"), 12), new SingleTransition(System.Xml.Linq.XName.Get("link", "http://www.w3.org/2005/Atom"), 13), new SingleTransition(System.Xml.Linq.XName.Get("logo", "http://www.w3.org/2005/Atom"), 16), new SingleTransition(System.Xml.Linq.XName.Get("rights", "http://www.w3.org/2005/Atom"), 18), new SingleTransition(System.Xml.Linq.XName.Get("subtitle", "http://www.w3.org/2005/Atom"), 20), new SingleTransition(System.Xml.Linq.XName.Get("title", "http://www.w3.org/2005/Atom"), 22), new SingleTransition(System.Xml.Linq.XName.Get("updated", "http://www.w3.org/2005/Atom"), 24), new SingleTransition(System.Xml.Linq.XName.Get("entry", "http://www.w3.org/2005/Atom"), 25), new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 27)));
            transitions.Add(8, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("author", "http://www.w3.org/2005/Atom"), 8), new SingleTransition(System.Xml.Linq.XName.Get("category", "http://www.w3.org/2005/Atom"), 3), new SingleTransition(System.Xml.Linq.XName.Get("contributor", "http://www.w3.org/2005/Atom"), 5), new SingleTransition(System.Xml.Linq.XName.Get("generator", "http://www.w3.org/2005/Atom"), 8), new SingleTransition(System.Xml.Linq.XName.Get("icon", "http://www.w3.org/2005/Atom"), 10), new SingleTransition(System.Xml.Linq.XName.Get("id", "http://www.w3.org/2005/Atom"), 12), new SingleTransition(System.Xml.Linq.XName.Get("link", "http://www.w3.org/2005/Atom"), 13), new SingleTransition(System.Xml.Linq.XName.Get("logo", "http://www.w3.org/2005/Atom"), 16), new SingleTransition(System.Xml.Linq.XName.Get("rights", "http://www.w3.org/2005/Atom"), 18), new SingleTransition(System.Xml.Linq.XName.Get("subtitle", "http://www.w3.org/2005/Atom"), 20), new SingleTransition(System.Xml.Linq.XName.Get("title", "http://www.w3.org/2005/Atom"), 22), new SingleTransition(System.Xml.Linq.XName.Get("updated", "http://www.w3.org/2005/Atom"), 24), new SingleTransition(System.Xml.Linq.XName.Get("entry", "http://www.w3.org/2005/Atom"), 25), new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 27)));
            transitions.Add(10, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("author", "http://www.w3.org/2005/Atom"), 10), new SingleTransition(System.Xml.Linq.XName.Get("category", "http://www.w3.org/2005/Atom"), 3), new SingleTransition(System.Xml.Linq.XName.Get("contributor", "http://www.w3.org/2005/Atom"), 5), new SingleTransition(System.Xml.Linq.XName.Get("generator", "http://www.w3.org/2005/Atom"), 8), new SingleTransition(System.Xml.Linq.XName.Get("icon", "http://www.w3.org/2005/Atom"), 10), new SingleTransition(System.Xml.Linq.XName.Get("id", "http://www.w3.org/2005/Atom"), 12), new SingleTransition(System.Xml.Linq.XName.Get("link", "http://www.w3.org/2005/Atom"), 13), new SingleTransition(System.Xml.Linq.XName.Get("logo", "http://www.w3.org/2005/Atom"), 16), new SingleTransition(System.Xml.Linq.XName.Get("rights", "http://www.w3.org/2005/Atom"), 18), new SingleTransition(System.Xml.Linq.XName.Get("subtitle", "http://www.w3.org/2005/Atom"), 20), new SingleTransition(System.Xml.Linq.XName.Get("title", "http://www.w3.org/2005/Atom"), 22), new SingleTransition(System.Xml.Linq.XName.Get("updated", "http://www.w3.org/2005/Atom"), 24), new SingleTransition(System.Xml.Linq.XName.Get("entry", "http://www.w3.org/2005/Atom"), 25), new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 27)));
            transitions.Add(12, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("author", "http://www.w3.org/2005/Atom"), 12), new SingleTransition(System.Xml.Linq.XName.Get("category", "http://www.w3.org/2005/Atom"), 3), new SingleTransition(System.Xml.Linq.XName.Get("contributor", "http://www.w3.org/2005/Atom"), 5), new SingleTransition(System.Xml.Linq.XName.Get("generator", "http://www.w3.org/2005/Atom"), 8), new SingleTransition(System.Xml.Linq.XName.Get("icon", "http://www.w3.org/2005/Atom"), 10), new SingleTransition(System.Xml.Linq.XName.Get("id", "http://www.w3.org/2005/Atom"), 12), new SingleTransition(System.Xml.Linq.XName.Get("link", "http://www.w3.org/2005/Atom"), 13), new SingleTransition(System.Xml.Linq.XName.Get("logo", "http://www.w3.org/2005/Atom"), 16), new SingleTransition(System.Xml.Linq.XName.Get("rights", "http://www.w3.org/2005/Atom"), 18), new SingleTransition(System.Xml.Linq.XName.Get("subtitle", "http://www.w3.org/2005/Atom"), 20), new SingleTransition(System.Xml.Linq.XName.Get("title", "http://www.w3.org/2005/Atom"), 22), new SingleTransition(System.Xml.Linq.XName.Get("updated", "http://www.w3.org/2005/Atom"), 24), new SingleTransition(System.Xml.Linq.XName.Get("entry", "http://www.w3.org/2005/Atom"), 25), new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 27)));
            transitions.Add(13, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("link", "http://www.w3.org/2005/Atom"), 13), new SingleTransition(System.Xml.Linq.XName.Get("author", "http://www.w3.org/2005/Atom"), 1), new SingleTransition(System.Xml.Linq.XName.Get("category", "http://www.w3.org/2005/Atom"), 3), new SingleTransition(System.Xml.Linq.XName.Get("contributor", "http://www.w3.org/2005/Atom"), 5), new SingleTransition(System.Xml.Linq.XName.Get("generator", "http://www.w3.org/2005/Atom"), 8), new SingleTransition(System.Xml.Linq.XName.Get("icon", "http://www.w3.org/2005/Atom"), 10), new SingleTransition(System.Xml.Linq.XName.Get("id", "http://www.w3.org/2005/Atom"), 12), new SingleTransition(System.Xml.Linq.XName.Get("logo", "http://www.w3.org/2005/Atom"), 16), new SingleTransition(System.Xml.Linq.XName.Get("rights", "http://www.w3.org/2005/Atom"), 18), new SingleTransition(System.Xml.Linq.XName.Get("subtitle", "http://www.w3.org/2005/Atom"), 20), new SingleTransition(System.Xml.Linq.XName.Get("title", "http://www.w3.org/2005/Atom"), 22), new SingleTransition(System.Xml.Linq.XName.Get("updated", "http://www.w3.org/2005/Atom"), 24), new SingleTransition(System.Xml.Linq.XName.Get("entry", "http://www.w3.org/2005/Atom"), 25), new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 27)));
            transitions.Add(16, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("author", "http://www.w3.org/2005/Atom"), 16), new SingleTransition(System.Xml.Linq.XName.Get("category", "http://www.w3.org/2005/Atom"), 3), new SingleTransition(System.Xml.Linq.XName.Get("contributor", "http://www.w3.org/2005/Atom"), 5), new SingleTransition(System.Xml.Linq.XName.Get("generator", "http://www.w3.org/2005/Atom"), 8), new SingleTransition(System.Xml.Linq.XName.Get("icon", "http://www.w3.org/2005/Atom"), 10), new SingleTransition(System.Xml.Linq.XName.Get("id", "http://www.w3.org/2005/Atom"), 12), new SingleTransition(System.Xml.Linq.XName.Get("link", "http://www.w3.org/2005/Atom"), 13), new SingleTransition(System.Xml.Linq.XName.Get("logo", "http://www.w3.org/2005/Atom"), 16), new SingleTransition(System.Xml.Linq.XName.Get("rights", "http://www.w3.org/2005/Atom"), 18), new SingleTransition(System.Xml.Linq.XName.Get("subtitle", "http://www.w3.org/2005/Atom"), 20), new SingleTransition(System.Xml.Linq.XName.Get("title", "http://www.w3.org/2005/Atom"), 22), new SingleTransition(System.Xml.Linq.XName.Get("updated", "http://www.w3.org/2005/Atom"), 24), new SingleTransition(System.Xml.Linq.XName.Get("entry", "http://www.w3.org/2005/Atom"), 25), new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 27)));
            transitions.Add(18, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("author", "http://www.w3.org/2005/Atom"), 18), new SingleTransition(System.Xml.Linq.XName.Get("category", "http://www.w3.org/2005/Atom"), 3), new SingleTransition(System.Xml.Linq.XName.Get("contributor", "http://www.w3.org/2005/Atom"), 5), new SingleTransition(System.Xml.Linq.XName.Get("generator", "http://www.w3.org/2005/Atom"), 8), new SingleTransition(System.Xml.Linq.XName.Get("icon", "http://www.w3.org/2005/Atom"), 10), new SingleTransition(System.Xml.Linq.XName.Get("id", "http://www.w3.org/2005/Atom"), 12), new SingleTransition(System.Xml.Linq.XName.Get("link", "http://www.w3.org/2005/Atom"), 13), new SingleTransition(System.Xml.Linq.XName.Get("logo", "http://www.w3.org/2005/Atom"), 16), new SingleTransition(System.Xml.Linq.XName.Get("rights", "http://www.w3.org/2005/Atom"), 18), new SingleTransition(System.Xml.Linq.XName.Get("subtitle", "http://www.w3.org/2005/Atom"), 20), new SingleTransition(System.Xml.Linq.XName.Get("title", "http://www.w3.org/2005/Atom"), 22), new SingleTransition(System.Xml.Linq.XName.Get("updated", "http://www.w3.org/2005/Atom"), 24), new SingleTransition(System.Xml.Linq.XName.Get("entry", "http://www.w3.org/2005/Atom"), 25), new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 27)));
            transitions.Add(20, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("author", "http://www.w3.org/2005/Atom"), 20), new SingleTransition(System.Xml.Linq.XName.Get("category", "http://www.w3.org/2005/Atom"), 3), new SingleTransition(System.Xml.Linq.XName.Get("contributor", "http://www.w3.org/2005/Atom"), 5), new SingleTransition(System.Xml.Linq.XName.Get("generator", "http://www.w3.org/2005/Atom"), 8), new SingleTransition(System.Xml.Linq.XName.Get("icon", "http://www.w3.org/2005/Atom"), 10), new SingleTransition(System.Xml.Linq.XName.Get("id", "http://www.w3.org/2005/Atom"), 12), new SingleTransition(System.Xml.Linq.XName.Get("link", "http://www.w3.org/2005/Atom"), 13), new SingleTransition(System.Xml.Linq.XName.Get("logo", "http://www.w3.org/2005/Atom"), 16), new SingleTransition(System.Xml.Linq.XName.Get("rights", "http://www.w3.org/2005/Atom"), 18), new SingleTransition(System.Xml.Linq.XName.Get("subtitle", "http://www.w3.org/2005/Atom"), 20), new SingleTransition(System.Xml.Linq.XName.Get("title", "http://www.w3.org/2005/Atom"), 22), new SingleTransition(System.Xml.Linq.XName.Get("updated", "http://www.w3.org/2005/Atom"), 24), new SingleTransition(System.Xml.Linq.XName.Get("entry", "http://www.w3.org/2005/Atom"), 25), new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 27)));
            transitions.Add(22, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("author", "http://www.w3.org/2005/Atom"), 22), new SingleTransition(System.Xml.Linq.XName.Get("category", "http://www.w3.org/2005/Atom"), 3), new SingleTransition(System.Xml.Linq.XName.Get("contributor", "http://www.w3.org/2005/Atom"), 5), new SingleTransition(System.Xml.Linq.XName.Get("generator", "http://www.w3.org/2005/Atom"), 8), new SingleTransition(System.Xml.Linq.XName.Get("icon", "http://www.w3.org/2005/Atom"), 10), new SingleTransition(System.Xml.Linq.XName.Get("id", "http://www.w3.org/2005/Atom"), 12), new SingleTransition(System.Xml.Linq.XName.Get("link", "http://www.w3.org/2005/Atom"), 13), new SingleTransition(System.Xml.Linq.XName.Get("logo", "http://www.w3.org/2005/Atom"), 16), new SingleTransition(System.Xml.Linq.XName.Get("rights", "http://www.w3.org/2005/Atom"), 18), new SingleTransition(System.Xml.Linq.XName.Get("subtitle", "http://www.w3.org/2005/Atom"), 20), new SingleTransition(System.Xml.Linq.XName.Get("title", "http://www.w3.org/2005/Atom"), 22), new SingleTransition(System.Xml.Linq.XName.Get("updated", "http://www.w3.org/2005/Atom"), 24), new SingleTransition(System.Xml.Linq.XName.Get("entry", "http://www.w3.org/2005/Atom"), 25), new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 27)));
            transitions.Add(24, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("author", "http://www.w3.org/2005/Atom"), 24), new SingleTransition(System.Xml.Linq.XName.Get("category", "http://www.w3.org/2005/Atom"), 3), new SingleTransition(System.Xml.Linq.XName.Get("contributor", "http://www.w3.org/2005/Atom"), 5), new SingleTransition(System.Xml.Linq.XName.Get("generator", "http://www.w3.org/2005/Atom"), 8), new SingleTransition(System.Xml.Linq.XName.Get("icon", "http://www.w3.org/2005/Atom"), 10), new SingleTransition(System.Xml.Linq.XName.Get("id", "http://www.w3.org/2005/Atom"), 12), new SingleTransition(System.Xml.Linq.XName.Get("link", "http://www.w3.org/2005/Atom"), 13), new SingleTransition(System.Xml.Linq.XName.Get("logo", "http://www.w3.org/2005/Atom"), 16), new SingleTransition(System.Xml.Linq.XName.Get("rights", "http://www.w3.org/2005/Atom"), 18), new SingleTransition(System.Xml.Linq.XName.Get("subtitle", "http://www.w3.org/2005/Atom"), 20), new SingleTransition(System.Xml.Linq.XName.Get("title", "http://www.w3.org/2005/Atom"), 22), new SingleTransition(System.Xml.Linq.XName.Get("updated", "http://www.w3.org/2005/Atom"), 24), new SingleTransition(System.Xml.Linq.XName.Get("entry", "http://www.w3.org/2005/Atom"), 25), new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 27)));
            transitions.Add(25, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("entry", "http://www.w3.org/2005/Atom"), 25), new SingleTransition(System.Xml.Linq.XName.Get("author", "http://www.w3.org/2005/Atom"), 1), new SingleTransition(System.Xml.Linq.XName.Get("category", "http://www.w3.org/2005/Atom"), 3), new SingleTransition(System.Xml.Linq.XName.Get("contributor", "http://www.w3.org/2005/Atom"), 5), new SingleTransition(System.Xml.Linq.XName.Get("generator", "http://www.w3.org/2005/Atom"), 8), new SingleTransition(System.Xml.Linq.XName.Get("icon", "http://www.w3.org/2005/Atom"), 10), new SingleTransition(System.Xml.Linq.XName.Get("id", "http://www.w3.org/2005/Atom"), 12), new SingleTransition(System.Xml.Linq.XName.Get("link", "http://www.w3.org/2005/Atom"), 13), new SingleTransition(System.Xml.Linq.XName.Get("logo", "http://www.w3.org/2005/Atom"), 16), new SingleTransition(System.Xml.Linq.XName.Get("rights", "http://www.w3.org/2005/Atom"), 18), new SingleTransition(System.Xml.Linq.XName.Get("subtitle", "http://www.w3.org/2005/Atom"), 20), new SingleTransition(System.Xml.Linq.XName.Get("title", "http://www.w3.org/2005/Atom"), 22), new SingleTransition(System.Xml.Linq.XName.Get("updated", "http://www.w3.org/2005/Atom"), 24), new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 27)));
            transitions.Add(27, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("author", "http://www.w3.org/2005/Atom"), 1), new SingleTransition(System.Xml.Linq.XName.Get("category", "http://www.w3.org/2005/Atom"), 3), new SingleTransition(System.Xml.Linq.XName.Get("contributor", "http://www.w3.org/2005/Atom"), 5), new SingleTransition(System.Xml.Linq.XName.Get("generator", "http://www.w3.org/2005/Atom"), 8), new SingleTransition(System.Xml.Linq.XName.Get("icon", "http://www.w3.org/2005/Atom"), 10), new SingleTransition(System.Xml.Linq.XName.Get("id", "http://www.w3.org/2005/Atom"), 12), new SingleTransition(System.Xml.Linq.XName.Get("link", "http://www.w3.org/2005/Atom"), 13), new SingleTransition(System.Xml.Linq.XName.Get("logo", "http://www.w3.org/2005/Atom"), 16), new SingleTransition(System.Xml.Linq.XName.Get("rights", "http://www.w3.org/2005/Atom"), 18), new SingleTransition(System.Xml.Linq.XName.Get("subtitle", "http://www.w3.org/2005/Atom"), 20), new SingleTransition(System.Xml.Linq.XName.Get("title", "http://www.w3.org/2005/Atom"), 22), new SingleTransition(System.Xml.Linq.XName.Get("updated", "http://www.w3.org/2005/Atom"), 24), new SingleTransition(System.Xml.Linq.XName.Get("entry", "http://www.w3.org/2005/Atom"), 25), new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 27)));
            validationStates = new FSM(1, new Set<int>(new int[] {
                            1,
                            3,
                            5,
                            8,
                            10,
                            12,
                            13,
                            16,
                            18,
                            20,
                            22,
                            24,
                            25,
                            27}), transitions);
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///                The Atom entry construct is defined in section 4.1.2 of the format spec.
    ///            
    /// </para>
    /// <para>
    /// Regular expression: (author* | category* | content? | contributor* | id | link* | published? | rights? | source? | summary? | title | updated | any)+
    /// </para>
    /// </summary>
    public partial class entryType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName authorXName = System.Xml.Linq.XName.Get("author", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<personType> authorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName categoryXName = System.Xml.Linq.XName.Get("category", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<categoryType> categoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName contentXName = System.Xml.Linq.XName.Get("content", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<contentType> contentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName contributorXName = System.Xml.Linq.XName.Get("contributor", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<personType> contributorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<idType> idField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName linkXName = System.Xml.Linq.XName.Get("link", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkType> linkField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName publishedXName = System.Xml.Linq.XName.Get("published", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dateTimeType> publishedField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rightsXName = System.Xml.Linq.XName.Get("rights", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<textType> rightsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<textType> sourceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName summaryXName = System.Xml.Linq.XName.Get("summary", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<textType> summaryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<textType> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName updatedXName = System.Xml.Linq.XName.Get("updated", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dateTimeType> updatedField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @baseXName = System.Xml.Linq.XName.Get("base", "http://www.w3.org/XML/1998/namespace");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName langXName = System.Xml.Linq.XName.Get("lang", "http://www.w3.org/XML/1998/namespace");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("entryType", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static FSM validationStates;
        
		public static explicit operator entryType(XElement xe) { return XTypedServices.ToXTypedElement<entryType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static entryType() {
            BuildElementDictionary();
            InitFSM();
        }
        
        /// <summary>
        /// <para>
        /// 
        ///                The Atom entry construct is defined in section 4.1.2 of the format spec.
        ///            
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | content? | contributor* | id | link* | published? | rights? | source? | summary? | title | updated | any)+
        /// </para>
        /// </summary>
        public entryType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | content? | contributor* | id | link* | published? | rights? | source? | summary? | title | updated | any)+
        /// </para>
        /// </summary>
        public virtual IList<personType> author {
            get {
                if ((this.authorField == null)) {
                    this.authorField = new XTypedList<personType>(this, LinqToXsdTypeManager.Instance, authorXName);
                }
                return this.authorField;
            }
            set {
                if ((value == null)) {
                    this.authorField = null;
                }
                else {
                    if ((this.authorField == null)) {
                        this.authorField = XTypedList<personType>.Initialize(this, LinqToXsdTypeManager.Instance, value, authorXName);
                    }
                    else {
                        XTypedServices.SetList<personType>(this.authorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | content? | contributor* | id | link* | published? | rights? | source? | summary? | title | updated | any)+
        /// </para>
        /// </summary>
        public virtual IList<categoryType> category {
            get {
                if ((this.categoryField == null)) {
                    this.categoryField = new XTypedList<categoryType>(this, LinqToXsdTypeManager.Instance, categoryXName);
                }
                return this.categoryField;
            }
            set {
                if ((value == null)) {
                    this.categoryField = null;
                }
                else {
                    if ((this.categoryField == null)) {
                        this.categoryField = XTypedList<categoryType>.Initialize(this, LinqToXsdTypeManager.Instance, value, categoryXName);
                    }
                    else {
                        XTypedServices.SetList<categoryType>(this.categoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | content? | contributor* | id | link* | published? | rights? | source? | summary? | title | updated | any)+
        /// </para>
        /// </summary>
        public virtual IList<contentType> content {
            get {
                if ((this.contentField == null)) {
                    this.contentField = new XTypedList<contentType>(this, LinqToXsdTypeManager.Instance, contentXName);
                }
                return this.contentField;
            }
            set {
                if ((value == null)) {
                    this.contentField = null;
                }
                else {
                    if ((this.contentField == null)) {
                        this.contentField = XTypedList<contentType>.Initialize(this, LinqToXsdTypeManager.Instance, value, contentXName);
                    }
                    else {
                        XTypedServices.SetList<contentType>(this.contentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | content? | contributor* | id | link* | published? | rights? | source? | summary? | title | updated | any)+
        /// </para>
        /// </summary>
        public virtual IList<personType> contributor {
            get {
                if ((this.contributorField == null)) {
                    this.contributorField = new XTypedList<personType>(this, LinqToXsdTypeManager.Instance, contributorXName);
                }
                return this.contributorField;
            }
            set {
                if ((value == null)) {
                    this.contributorField = null;
                }
                else {
                    if ((this.contributorField == null)) {
                        this.contributorField = XTypedList<personType>.Initialize(this, LinqToXsdTypeManager.Instance, value, contributorXName);
                    }
                    else {
                        XTypedServices.SetList<personType>(this.contributorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | content? | contributor* | id | link* | published? | rights? | source? | summary? | title | updated | any)+
        /// </para>
        /// </summary>
        public virtual IList<idType> id {
            get {
                if ((this.idField == null)) {
                    this.idField = new XTypedList<idType>(this, LinqToXsdTypeManager.Instance, idXName);
                }
                return this.idField;
            }
            set {
                if ((value == null)) {
                    this.idField = null;
                }
                else {
                    if ((this.idField == null)) {
                        this.idField = XTypedList<idType>.Initialize(this, LinqToXsdTypeManager.Instance, value, idXName);
                    }
                    else {
                        XTypedServices.SetList<idType>(this.idField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | content? | contributor* | id | link* | published? | rights? | source? | summary? | title | updated | any)+
        /// </para>
        /// </summary>
        public virtual IList<linkType> link {
            get {
                if ((this.linkField == null)) {
                    this.linkField = new XTypedList<linkType>(this, LinqToXsdTypeManager.Instance, linkXName);
                }
                return this.linkField;
            }
            set {
                if ((value == null)) {
                    this.linkField = null;
                }
                else {
                    if ((this.linkField == null)) {
                        this.linkField = XTypedList<linkType>.Initialize(this, LinqToXsdTypeManager.Instance, value, linkXName);
                    }
                    else {
                        XTypedServices.SetList<linkType>(this.linkField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | content? | contributor* | id | link* | published? | rights? | source? | summary? | title | updated | any)+
        /// </para>
        /// </summary>
        public virtual IList<dateTimeType> published {
            get {
                if ((this.publishedField == null)) {
                    this.publishedField = new XTypedList<dateTimeType>(this, LinqToXsdTypeManager.Instance, publishedXName);
                }
                return this.publishedField;
            }
            set {
                if ((value == null)) {
                    this.publishedField = null;
                }
                else {
                    if ((this.publishedField == null)) {
                        this.publishedField = XTypedList<dateTimeType>.Initialize(this, LinqToXsdTypeManager.Instance, value, publishedXName);
                    }
                    else {
                        XTypedServices.SetList<dateTimeType>(this.publishedField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | content? | contributor* | id | link* | published? | rights? | source? | summary? | title | updated | any)+
        /// </para>
        /// </summary>
        public virtual IList<textType> rights {
            get {
                if ((this.rightsField == null)) {
                    this.rightsField = new XTypedList<textType>(this, LinqToXsdTypeManager.Instance, rightsXName);
                }
                return this.rightsField;
            }
            set {
                if ((value == null)) {
                    this.rightsField = null;
                }
                else {
                    if ((this.rightsField == null)) {
                        this.rightsField = XTypedList<textType>.Initialize(this, LinqToXsdTypeManager.Instance, value, rightsXName);
                    }
                    else {
                        XTypedServices.SetList<textType>(this.rightsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | content? | contributor* | id | link* | published? | rights? | source? | summary? | title | updated | any)+
        /// </para>
        /// </summary>
        public virtual IList<textType> source {
            get {
                if ((this.sourceField == null)) {
                    this.sourceField = new XTypedList<textType>(this, LinqToXsdTypeManager.Instance, sourceXName);
                }
                return this.sourceField;
            }
            set {
                if ((value == null)) {
                    this.sourceField = null;
                }
                else {
                    if ((this.sourceField == null)) {
                        this.sourceField = XTypedList<textType>.Initialize(this, LinqToXsdTypeManager.Instance, value, sourceXName);
                    }
                    else {
                        XTypedServices.SetList<textType>(this.sourceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | content? | contributor* | id | link* | published? | rights? | source? | summary? | title | updated | any)+
        /// </para>
        /// </summary>
        public virtual IList<textType> summary {
            get {
                if ((this.summaryField == null)) {
                    this.summaryField = new XTypedList<textType>(this, LinqToXsdTypeManager.Instance, summaryXName);
                }
                return this.summaryField;
            }
            set {
                if ((value == null)) {
                    this.summaryField = null;
                }
                else {
                    if ((this.summaryField == null)) {
                        this.summaryField = XTypedList<textType>.Initialize(this, LinqToXsdTypeManager.Instance, value, summaryXName);
                    }
                    else {
                        XTypedServices.SetList<textType>(this.summaryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | content? | contributor* | id | link* | published? | rights? | source? | summary? | title | updated | any)+
        /// </para>
        /// </summary>
        public virtual IList<textType> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<textType>(this, LinqToXsdTypeManager.Instance, titleXName);
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<textType>.Initialize(this, LinqToXsdTypeManager.Instance, value, titleXName);
                    }
                    else {
                        XTypedServices.SetList<textType>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | content? | contributor* | id | link* | published? | rights? | source? | summary? | title | updated | any)+
        /// </para>
        /// </summary>
        public virtual IList<dateTimeType> updated {
            get {
                if ((this.updatedField == null)) {
                    this.updatedField = new XTypedList<dateTimeType>(this, LinqToXsdTypeManager.Instance, updatedXName);
                }
                return this.updatedField;
            }
            set {
                if ((value == null)) {
                    this.updatedField = null;
                }
                else {
                    if ((this.updatedField == null)) {
                        this.updatedField = XTypedList<dateTimeType>.Initialize(this, LinqToXsdTypeManager.Instance, value, updatedXName);
                    }
                    else {
                        XTypedServices.SetList<dateTimeType>(this.updatedField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (author* | category* | content? | contributor* | id | link* | published? | rights? | source? | summary? | title | updated | any)+
        /// </para>
        /// </summary>
        public virtual IEnumerable<XElement> Any {
            get {
                return this.GetWildCards(WildCard.DefaultWildCard);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri @base {
            get {
                XAttribute x = this.Attribute(@baseXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(@baseXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string lang {
            get {
                XAttribute x = this.Attribute(langXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language).Datatype);
            }
            set {
                this.SetAttribute(langXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<entryType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(authorXName, typeof(personType));
            localElementDictionary.Add(categoryXName, typeof(categoryType));
            localElementDictionary.Add(contentXName, typeof(contentType));
            localElementDictionary.Add(contributorXName, typeof(personType));
            localElementDictionary.Add(idXName, typeof(idType));
            localElementDictionary.Add(linkXName, typeof(linkType));
            localElementDictionary.Add(publishedXName, typeof(dateTimeType));
            localElementDictionary.Add(rightsXName, typeof(textType));
            localElementDictionary.Add(sourceXName, typeof(textType));
            localElementDictionary.Add(summaryXName, typeof(textType));
            localElementDictionary.Add(titleXName, typeof(textType));
            localElementDictionary.Add(updatedXName, typeof(dateTimeType));
        }
        
        FSM IXMetaData.GetValidationStates() {
            return validationStates;
        }
        
        private static void InitFSM() {
            Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
            transitions.Add(1, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("author", "http://www.w3.org/2005/Atom"), 1), new SingleTransition(System.Xml.Linq.XName.Get("category", "http://www.w3.org/2005/Atom"), 3), new SingleTransition(System.Xml.Linq.XName.Get("content", "http://www.w3.org/2005/Atom"), 6), new SingleTransition(System.Xml.Linq.XName.Get("contributor", "http://www.w3.org/2005/Atom"), 7), new SingleTransition(System.Xml.Linq.XName.Get("id", "http://www.w3.org/2005/Atom"), 10), new SingleTransition(System.Xml.Linq.XName.Get("link", "http://www.w3.org/2005/Atom"), 11), new SingleTransition(System.Xml.Linq.XName.Get("published", "http://www.w3.org/2005/Atom"), 14), new SingleTransition(System.Xml.Linq.XName.Get("rights", "http://www.w3.org/2005/Atom"), 16), new SingleTransition(System.Xml.Linq.XName.Get("source", "http://www.w3.org/2005/Atom"), 18), new SingleTransition(System.Xml.Linq.XName.Get("summary", "http://www.w3.org/2005/Atom"), 20), new SingleTransition(System.Xml.Linq.XName.Get("title", "http://www.w3.org/2005/Atom"), 22), new SingleTransition(System.Xml.Linq.XName.Get("updated", "http://www.w3.org/2005/Atom"), 24), new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 25)));
            transitions.Add(3, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("category", "http://www.w3.org/2005/Atom"), 3), new SingleTransition(System.Xml.Linq.XName.Get("author", "http://www.w3.org/2005/Atom"), 1), new SingleTransition(System.Xml.Linq.XName.Get("content", "http://www.w3.org/2005/Atom"), 6), new SingleTransition(System.Xml.Linq.XName.Get("contributor", "http://www.w3.org/2005/Atom"), 7), new SingleTransition(System.Xml.Linq.XName.Get("id", "http://www.w3.org/2005/Atom"), 10), new SingleTransition(System.Xml.Linq.XName.Get("link", "http://www.w3.org/2005/Atom"), 11), new SingleTransition(System.Xml.Linq.XName.Get("published", "http://www.w3.org/2005/Atom"), 14), new SingleTransition(System.Xml.Linq.XName.Get("rights", "http://www.w3.org/2005/Atom"), 16), new SingleTransition(System.Xml.Linq.XName.Get("source", "http://www.w3.org/2005/Atom"), 18), new SingleTransition(System.Xml.Linq.XName.Get("summary", "http://www.w3.org/2005/Atom"), 20), new SingleTransition(System.Xml.Linq.XName.Get("title", "http://www.w3.org/2005/Atom"), 22), new SingleTransition(System.Xml.Linq.XName.Get("updated", "http://www.w3.org/2005/Atom"), 24), new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 25)));
            transitions.Add(6, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("author", "http://www.w3.org/2005/Atom"), 6), new SingleTransition(System.Xml.Linq.XName.Get("category", "http://www.w3.org/2005/Atom"), 3), new SingleTransition(System.Xml.Linq.XName.Get("content", "http://www.w3.org/2005/Atom"), 6), new SingleTransition(System.Xml.Linq.XName.Get("contributor", "http://www.w3.org/2005/Atom"), 7), new SingleTransition(System.Xml.Linq.XName.Get("id", "http://www.w3.org/2005/Atom"), 10), new SingleTransition(System.Xml.Linq.XName.Get("link", "http://www.w3.org/2005/Atom"), 11), new SingleTransition(System.Xml.Linq.XName.Get("published", "http://www.w3.org/2005/Atom"), 14), new SingleTransition(System.Xml.Linq.XName.Get("rights", "http://www.w3.org/2005/Atom"), 16), new SingleTransition(System.Xml.Linq.XName.Get("source", "http://www.w3.org/2005/Atom"), 18), new SingleTransition(System.Xml.Linq.XName.Get("summary", "http://www.w3.org/2005/Atom"), 20), new SingleTransition(System.Xml.Linq.XName.Get("title", "http://www.w3.org/2005/Atom"), 22), new SingleTransition(System.Xml.Linq.XName.Get("updated", "http://www.w3.org/2005/Atom"), 24), new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 25)));
            transitions.Add(7, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("contributor", "http://www.w3.org/2005/Atom"), 7), new SingleTransition(System.Xml.Linq.XName.Get("author", "http://www.w3.org/2005/Atom"), 1), new SingleTransition(System.Xml.Linq.XName.Get("category", "http://www.w3.org/2005/Atom"), 3), new SingleTransition(System.Xml.Linq.XName.Get("content", "http://www.w3.org/2005/Atom"), 6), new SingleTransition(System.Xml.Linq.XName.Get("id", "http://www.w3.org/2005/Atom"), 10), new SingleTransition(System.Xml.Linq.XName.Get("link", "http://www.w3.org/2005/Atom"), 11), new SingleTransition(System.Xml.Linq.XName.Get("published", "http://www.w3.org/2005/Atom"), 14), new SingleTransition(System.Xml.Linq.XName.Get("rights", "http://www.w3.org/2005/Atom"), 16), new SingleTransition(System.Xml.Linq.XName.Get("source", "http://www.w3.org/2005/Atom"), 18), new SingleTransition(System.Xml.Linq.XName.Get("summary", "http://www.w3.org/2005/Atom"), 20), new SingleTransition(System.Xml.Linq.XName.Get("title", "http://www.w3.org/2005/Atom"), 22), new SingleTransition(System.Xml.Linq.XName.Get("updated", "http://www.w3.org/2005/Atom"), 24), new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 25)));
            transitions.Add(10, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("author", "http://www.w3.org/2005/Atom"), 10), new SingleTransition(System.Xml.Linq.XName.Get("category", "http://www.w3.org/2005/Atom"), 3), new SingleTransition(System.Xml.Linq.XName.Get("content", "http://www.w3.org/2005/Atom"), 6), new SingleTransition(System.Xml.Linq.XName.Get("contributor", "http://www.w3.org/2005/Atom"), 7), new SingleTransition(System.Xml.Linq.XName.Get("id", "http://www.w3.org/2005/Atom"), 10), new SingleTransition(System.Xml.Linq.XName.Get("link", "http://www.w3.org/2005/Atom"), 11), new SingleTransition(System.Xml.Linq.XName.Get("published", "http://www.w3.org/2005/Atom"), 14), new SingleTransition(System.Xml.Linq.XName.Get("rights", "http://www.w3.org/2005/Atom"), 16), new SingleTransition(System.Xml.Linq.XName.Get("source", "http://www.w3.org/2005/Atom"), 18), new SingleTransition(System.Xml.Linq.XName.Get("summary", "http://www.w3.org/2005/Atom"), 20), new SingleTransition(System.Xml.Linq.XName.Get("title", "http://www.w3.org/2005/Atom"), 22), new SingleTransition(System.Xml.Linq.XName.Get("updated", "http://www.w3.org/2005/Atom"), 24), new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 25)));
            transitions.Add(11, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("link", "http://www.w3.org/2005/Atom"), 11), new SingleTransition(System.Xml.Linq.XName.Get("author", "http://www.w3.org/2005/Atom"), 1), new SingleTransition(System.Xml.Linq.XName.Get("category", "http://www.w3.org/2005/Atom"), 3), new SingleTransition(System.Xml.Linq.XName.Get("content", "http://www.w3.org/2005/Atom"), 6), new SingleTransition(System.Xml.Linq.XName.Get("contributor", "http://www.w3.org/2005/Atom"), 7), new SingleTransition(System.Xml.Linq.XName.Get("id", "http://www.w3.org/2005/Atom"), 10), new SingleTransition(System.Xml.Linq.XName.Get("published", "http://www.w3.org/2005/Atom"), 14), new SingleTransition(System.Xml.Linq.XName.Get("rights", "http://www.w3.org/2005/Atom"), 16), new SingleTransition(System.Xml.Linq.XName.Get("source", "http://www.w3.org/2005/Atom"), 18), new SingleTransition(System.Xml.Linq.XName.Get("summary", "http://www.w3.org/2005/Atom"), 20), new SingleTransition(System.Xml.Linq.XName.Get("title", "http://www.w3.org/2005/Atom"), 22), new SingleTransition(System.Xml.Linq.XName.Get("updated", "http://www.w3.org/2005/Atom"), 24), new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 25)));
            transitions.Add(14, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("author", "http://www.w3.org/2005/Atom"), 14), new SingleTransition(System.Xml.Linq.XName.Get("category", "http://www.w3.org/2005/Atom"), 3), new SingleTransition(System.Xml.Linq.XName.Get("content", "http://www.w3.org/2005/Atom"), 6), new SingleTransition(System.Xml.Linq.XName.Get("contributor", "http://www.w3.org/2005/Atom"), 7), new SingleTransition(System.Xml.Linq.XName.Get("id", "http://www.w3.org/2005/Atom"), 10), new SingleTransition(System.Xml.Linq.XName.Get("link", "http://www.w3.org/2005/Atom"), 11), new SingleTransition(System.Xml.Linq.XName.Get("published", "http://www.w3.org/2005/Atom"), 14), new SingleTransition(System.Xml.Linq.XName.Get("rights", "http://www.w3.org/2005/Atom"), 16), new SingleTransition(System.Xml.Linq.XName.Get("source", "http://www.w3.org/2005/Atom"), 18), new SingleTransition(System.Xml.Linq.XName.Get("summary", "http://www.w3.org/2005/Atom"), 20), new SingleTransition(System.Xml.Linq.XName.Get("title", "http://www.w3.org/2005/Atom"), 22), new SingleTransition(System.Xml.Linq.XName.Get("updated", "http://www.w3.org/2005/Atom"), 24), new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 25)));
            transitions.Add(16, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("author", "http://www.w3.org/2005/Atom"), 16), new SingleTransition(System.Xml.Linq.XName.Get("category", "http://www.w3.org/2005/Atom"), 3), new SingleTransition(System.Xml.Linq.XName.Get("content", "http://www.w3.org/2005/Atom"), 6), new SingleTransition(System.Xml.Linq.XName.Get("contributor", "http://www.w3.org/2005/Atom"), 7), new SingleTransition(System.Xml.Linq.XName.Get("id", "http://www.w3.org/2005/Atom"), 10), new SingleTransition(System.Xml.Linq.XName.Get("link", "http://www.w3.org/2005/Atom"), 11), new SingleTransition(System.Xml.Linq.XName.Get("published", "http://www.w3.org/2005/Atom"), 14), new SingleTransition(System.Xml.Linq.XName.Get("rights", "http://www.w3.org/2005/Atom"), 16), new SingleTransition(System.Xml.Linq.XName.Get("source", "http://www.w3.org/2005/Atom"), 18), new SingleTransition(System.Xml.Linq.XName.Get("summary", "http://www.w3.org/2005/Atom"), 20), new SingleTransition(System.Xml.Linq.XName.Get("title", "http://www.w3.org/2005/Atom"), 22), new SingleTransition(System.Xml.Linq.XName.Get("updated", "http://www.w3.org/2005/Atom"), 24), new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 25)));
            transitions.Add(18, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("author", "http://www.w3.org/2005/Atom"), 18), new SingleTransition(System.Xml.Linq.XName.Get("category", "http://www.w3.org/2005/Atom"), 3), new SingleTransition(System.Xml.Linq.XName.Get("content", "http://www.w3.org/2005/Atom"), 6), new SingleTransition(System.Xml.Linq.XName.Get("contributor", "http://www.w3.org/2005/Atom"), 7), new SingleTransition(System.Xml.Linq.XName.Get("id", "http://www.w3.org/2005/Atom"), 10), new SingleTransition(System.Xml.Linq.XName.Get("link", "http://www.w3.org/2005/Atom"), 11), new SingleTransition(System.Xml.Linq.XName.Get("published", "http://www.w3.org/2005/Atom"), 14), new SingleTransition(System.Xml.Linq.XName.Get("rights", "http://www.w3.org/2005/Atom"), 16), new SingleTransition(System.Xml.Linq.XName.Get("source", "http://www.w3.org/2005/Atom"), 18), new SingleTransition(System.Xml.Linq.XName.Get("summary", "http://www.w3.org/2005/Atom"), 20), new SingleTransition(System.Xml.Linq.XName.Get("title", "http://www.w3.org/2005/Atom"), 22), new SingleTransition(System.Xml.Linq.XName.Get("updated", "http://www.w3.org/2005/Atom"), 24), new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 25)));
            transitions.Add(20, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("author", "http://www.w3.org/2005/Atom"), 20), new SingleTransition(System.Xml.Linq.XName.Get("category", "http://www.w3.org/2005/Atom"), 3), new SingleTransition(System.Xml.Linq.XName.Get("content", "http://www.w3.org/2005/Atom"), 6), new SingleTransition(System.Xml.Linq.XName.Get("contributor", "http://www.w3.org/2005/Atom"), 7), new SingleTransition(System.Xml.Linq.XName.Get("id", "http://www.w3.org/2005/Atom"), 10), new SingleTransition(System.Xml.Linq.XName.Get("link", "http://www.w3.org/2005/Atom"), 11), new SingleTransition(System.Xml.Linq.XName.Get("published", "http://www.w3.org/2005/Atom"), 14), new SingleTransition(System.Xml.Linq.XName.Get("rights", "http://www.w3.org/2005/Atom"), 16), new SingleTransition(System.Xml.Linq.XName.Get("source", "http://www.w3.org/2005/Atom"), 18), new SingleTransition(System.Xml.Linq.XName.Get("summary", "http://www.w3.org/2005/Atom"), 20), new SingleTransition(System.Xml.Linq.XName.Get("title", "http://www.w3.org/2005/Atom"), 22), new SingleTransition(System.Xml.Linq.XName.Get("updated", "http://www.w3.org/2005/Atom"), 24), new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 25)));
            transitions.Add(22, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("author", "http://www.w3.org/2005/Atom"), 22), new SingleTransition(System.Xml.Linq.XName.Get("category", "http://www.w3.org/2005/Atom"), 3), new SingleTransition(System.Xml.Linq.XName.Get("content", "http://www.w3.org/2005/Atom"), 6), new SingleTransition(System.Xml.Linq.XName.Get("contributor", "http://www.w3.org/2005/Atom"), 7), new SingleTransition(System.Xml.Linq.XName.Get("id", "http://www.w3.org/2005/Atom"), 10), new SingleTransition(System.Xml.Linq.XName.Get("link", "http://www.w3.org/2005/Atom"), 11), new SingleTransition(System.Xml.Linq.XName.Get("published", "http://www.w3.org/2005/Atom"), 14), new SingleTransition(System.Xml.Linq.XName.Get("rights", "http://www.w3.org/2005/Atom"), 16), new SingleTransition(System.Xml.Linq.XName.Get("source", "http://www.w3.org/2005/Atom"), 18), new SingleTransition(System.Xml.Linq.XName.Get("summary", "http://www.w3.org/2005/Atom"), 20), new SingleTransition(System.Xml.Linq.XName.Get("title", "http://www.w3.org/2005/Atom"), 22), new SingleTransition(System.Xml.Linq.XName.Get("updated", "http://www.w3.org/2005/Atom"), 24), new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 25)));
            transitions.Add(24, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("author", "http://www.w3.org/2005/Atom"), 24), new SingleTransition(System.Xml.Linq.XName.Get("category", "http://www.w3.org/2005/Atom"), 3), new SingleTransition(System.Xml.Linq.XName.Get("content", "http://www.w3.org/2005/Atom"), 6), new SingleTransition(System.Xml.Linq.XName.Get("contributor", "http://www.w3.org/2005/Atom"), 7), new SingleTransition(System.Xml.Linq.XName.Get("id", "http://www.w3.org/2005/Atom"), 10), new SingleTransition(System.Xml.Linq.XName.Get("link", "http://www.w3.org/2005/Atom"), 11), new SingleTransition(System.Xml.Linq.XName.Get("published", "http://www.w3.org/2005/Atom"), 14), new SingleTransition(System.Xml.Linq.XName.Get("rights", "http://www.w3.org/2005/Atom"), 16), new SingleTransition(System.Xml.Linq.XName.Get("source", "http://www.w3.org/2005/Atom"), 18), new SingleTransition(System.Xml.Linq.XName.Get("summary", "http://www.w3.org/2005/Atom"), 20), new SingleTransition(System.Xml.Linq.XName.Get("title", "http://www.w3.org/2005/Atom"), 22), new SingleTransition(System.Xml.Linq.XName.Get("updated", "http://www.w3.org/2005/Atom"), 24), new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 25)));
            transitions.Add(25, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("author", "http://www.w3.org/2005/Atom"), 1), new SingleTransition(System.Xml.Linq.XName.Get("category", "http://www.w3.org/2005/Atom"), 3), new SingleTransition(System.Xml.Linq.XName.Get("content", "http://www.w3.org/2005/Atom"), 6), new SingleTransition(System.Xml.Linq.XName.Get("contributor", "http://www.w3.org/2005/Atom"), 7), new SingleTransition(System.Xml.Linq.XName.Get("id", "http://www.w3.org/2005/Atom"), 10), new SingleTransition(System.Xml.Linq.XName.Get("link", "http://www.w3.org/2005/Atom"), 11), new SingleTransition(System.Xml.Linq.XName.Get("published", "http://www.w3.org/2005/Atom"), 14), new SingleTransition(System.Xml.Linq.XName.Get("rights", "http://www.w3.org/2005/Atom"), 16), new SingleTransition(System.Xml.Linq.XName.Get("source", "http://www.w3.org/2005/Atom"), 18), new SingleTransition(System.Xml.Linq.XName.Get("summary", "http://www.w3.org/2005/Atom"), 20), new SingleTransition(System.Xml.Linq.XName.Get("title", "http://www.w3.org/2005/Atom"), 22), new SingleTransition(System.Xml.Linq.XName.Get("updated", "http://www.w3.org/2005/Atom"), 24), new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 25)));
            validationStates = new FSM(1, new Set<int>(new int[] {
                            1,
                            3,
                            6,
                            7,
                            10,
                            11,
                            14,
                            16,
                            18,
                            20,
                            22,
                            24,
                            25}), transitions);
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///                The Atom content construct is defined in section 4.1.3 of the format spec.
    ///            
    /// </para>
    /// <para>
    /// Regular expression: (any)
    /// </para>
    /// </summary>
    public partial class contentType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName srcXName = System.Xml.Linq.XName.Get("src", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @baseXName = System.Xml.Linq.XName.Get("base", "http://www.w3.org/XML/1998/namespace");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName langXName = System.Xml.Linq.XName.Get("lang", "http://www.w3.org/XML/1998/namespace");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("contentType", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static FSM validationStates;
        
		public static explicit operator contentType(XElement xe) { return XTypedServices.ToXTypedElement<contentType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static contentType() {
            InitFSM();
        }
        
        /// <summary>
        /// <para>
        /// 
        ///                The Atom content construct is defined in section 4.1.3 of the format spec.
        ///            
        /// </para>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public contentType() {
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public virtual IEnumerable<XElement> Any {
            get {
                return this.GetWildCards(WildCard.DefaultWildCard);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri src {
            get {
                XAttribute x = this.Attribute(srcXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(srcXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri @base {
            get {
                XAttribute x = this.Attribute(@baseXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(@baseXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string lang {
            get {
                XAttribute x = this.Attribute(langXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language).Datatype);
            }
            set {
                this.SetAttribute(langXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<contentType>(this);
        }
        
        FSM IXMetaData.GetValidationStates() {
            return validationStates;
        }
        
        private static void InitFSM() {
            Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
            transitions.Add(1, new Transitions(new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 1)));
            validationStates = new FSM(1, new Set<int>(1), transitions);
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///                The Atom cagegory construct is defined in section 4.2.2 of the format spec.
    ///            
    /// </para>
    /// </summary>
    public partial class categoryType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName termXName = System.Xml.Linq.XName.Get("term", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName schemeXName = System.Xml.Linq.XName.Get("scheme", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName labelXName = System.Xml.Linq.XName.Get("label", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @baseXName = System.Xml.Linq.XName.Get("base", "http://www.w3.org/XML/1998/namespace");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName langXName = System.Xml.Linq.XName.Get("lang", "http://www.w3.org/XML/1998/namespace");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("categoryType", "http://www.w3.org/2005/Atom");
        
		public static explicit operator categoryType(XElement xe) { return XTypedServices.ToXTypedElement<categoryType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// 
        ///                The Atom cagegory construct is defined in section 4.2.2 of the format spec.
        ///            
        /// </para>
        /// </summary>
        public categoryType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string term {
            get {
                XAttribute x = this.Attribute(termXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(termXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri scheme {
            get {
                XAttribute x = this.Attribute(schemeXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(schemeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(labelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(labelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri @base {
            get {
                XAttribute x = this.Attribute(@baseXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(@baseXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string lang {
            get {
                XAttribute x = this.Attribute(langXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language).Datatype);
            }
            set {
                this.SetAttribute(langXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<categoryType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///                The Atom generator element is defined in section 4.2.4 of the format spec.
    ///            
    /// </para>
    /// </summary>
    public partial class generatorType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uriXName = System.Xml.Linq.XName.Get("uri", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName versionXName = System.Xml.Linq.XName.Get("version", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @baseXName = System.Xml.Linq.XName.Get("base", "http://www.w3.org/XML/1998/namespace");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName langXName = System.Xml.Linq.XName.Get("lang", "http://www.w3.org/XML/1998/namespace");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("generatorType", "http://www.w3.org/2005/Atom");
        
		public static explicit operator generatorType(XElement xe) { return XTypedServices.ToXTypedElement<generatorType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// 
        ///                The Atom generator element is defined in section 4.2.4 of the format spec.
        ///            
        /// </para>
        /// </summary>
        public generatorType() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri uri {
            get {
                XAttribute x = this.Attribute(uriXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(uriXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string version {
            get {
                XAttribute x = this.Attribute(versionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(versionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri @base {
            get {
                XAttribute x = this.Attribute(@baseXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(@baseXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string lang {
            get {
                XAttribute x = this.Attribute(langXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language).Datatype);
            }
            set {
                this.SetAttribute(langXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<generatorType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///                The Atom icon construct is defined in section 4.2.5 of the format spec.
    ///            
    /// </para>
    /// </summary>
    public partial class iconType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @baseXName = System.Xml.Linq.XName.Get("base", "http://www.w3.org/XML/1998/namespace");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName langXName = System.Xml.Linq.XName.Get("lang", "http://www.w3.org/XML/1998/namespace");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("iconType", "http://www.w3.org/2005/Atom");
        
		public static explicit operator iconType(XElement xe) { return XTypedServices.ToXTypedElement<iconType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// 
        ///                The Atom icon construct is defined in section 4.2.5 of the format spec.
        ///            
        /// </para>
        /// </summary>
        public iconType() {
        }
        
        public virtual System.Uri TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri @base {
            get {
                XAttribute x = this.Attribute(@baseXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(@baseXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string lang {
            get {
                XAttribute x = this.Attribute(langXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language).Datatype);
            }
            set {
                this.SetAttribute(langXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<iconType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///                The Atom id construct is defined in section 4.2.6 of the format spec.
    ///            
    /// </para>
    /// </summary>
    public partial class idType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @baseXName = System.Xml.Linq.XName.Get("base", "http://www.w3.org/XML/1998/namespace");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName langXName = System.Xml.Linq.XName.Get("lang", "http://www.w3.org/XML/1998/namespace");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("idType", "http://www.w3.org/2005/Atom");
        
		public static explicit operator idType(XElement xe) { return XTypedServices.ToXTypedElement<idType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// 
        ///                The Atom id construct is defined in section 4.2.6 of the format spec.
        ///            
        /// </para>
        /// </summary>
        public idType() {
        }
        
        public virtual System.Uri TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri @base {
            get {
                XAttribute x = this.Attribute(@baseXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(@baseXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string lang {
            get {
                XAttribute x = this.Attribute(langXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language).Datatype);
            }
            set {
                this.SetAttribute(langXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<idType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///                The Atom link construct is defined in section 3.4 of the format spec.
    ///            
    /// </para>
    /// </summary>
    public partial class linkType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName hrefXName = System.Xml.Linq.XName.Get("href", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName relXName = System.Xml.Linq.XName.Get("rel", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName hreflangXName = System.Xml.Linq.XName.Get("hreflang", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lengthXName = System.Xml.Linq.XName.Get("length", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @baseXName = System.Xml.Linq.XName.Get("base", "http://www.w3.org/XML/1998/namespace");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName langXName = System.Xml.Linq.XName.Get("lang", "http://www.w3.org/XML/1998/namespace");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("linkType", "http://www.w3.org/2005/Atom");
        
		public static explicit operator linkType(XElement xe) { return XTypedServices.ToXTypedElement<linkType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// 
        ///                The Atom link construct is defined in section 3.4 of the format spec.
        ///            
        /// </para>
        /// </summary>
        public linkType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual System.Uri href {
            get {
                XAttribute x = this.Attribute(hrefXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(hrefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string rel {
            get {
                XAttribute x = this.Attribute(relXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(relXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string hreflang {
            get {
                XAttribute x = this.Attribute(hreflangXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
            set {
                this.SetAttribute(hreflangXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.NmToken).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title {
            get {
                XAttribute x = this.Attribute(titleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(titleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? length {
            get {
                XAttribute x = this.Attribute(lengthXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(lengthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri @base {
            get {
                XAttribute x = this.Attribute(@baseXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(@baseXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string lang {
            get {
                XAttribute x = this.Attribute(langXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language).Datatype);
            }
            set {
                this.SetAttribute(langXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<linkType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///                The Atom logo construct is defined in section 4.2.8 of the format spec.
    ///            
    /// </para>
    /// </summary>
    public partial class logoType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @baseXName = System.Xml.Linq.XName.Get("base", "http://www.w3.org/XML/1998/namespace");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName langXName = System.Xml.Linq.XName.Get("lang", "http://www.w3.org/XML/1998/namespace");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("logoType", "http://www.w3.org/2005/Atom");
        
		public static explicit operator logoType(XElement xe) { return XTypedServices.ToXTypedElement<logoType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// 
        ///                The Atom logo construct is defined in section 4.2.8 of the format spec.
        ///            
        /// </para>
        /// </summary>
        public logoType() {
        }
        
        public virtual System.Uri TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri @base {
            get {
                XAttribute x = this.Attribute(@baseXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(@baseXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string lang {
            get {
                XAttribute x = this.Attribute(langXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language).Datatype);
            }
            set {
                this.SetAttribute(langXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<logoType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///                The Atom source construct is defined in section 4.2.11 of the format spec.
    ///            
    /// </para>
    /// <para>
    /// Regular expression: (author* | category* | contributor* | generator? | icon? | id? | link* | logo? | rights? | subtitle? | title? | updated? | any)+
    /// </para>
    /// </summary>
    public partial class sourceType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName authorXName = System.Xml.Linq.XName.Get("author", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<personType> authorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName categoryXName = System.Xml.Linq.XName.Get("category", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<categoryType> categoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName contributorXName = System.Xml.Linq.XName.Get("contributor", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<personType> contributorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName generatorXName = System.Xml.Linq.XName.Get("generator", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<generatorType> generatorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName iconXName = System.Xml.Linq.XName.Get("icon", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<iconType> iconField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<idType> idField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName linkXName = System.Xml.Linq.XName.Get("link", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<linkType> linkField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName logoXName = System.Xml.Linq.XName.Get("logo", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<logoType> logoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rightsXName = System.Xml.Linq.XName.Get("rights", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<textType> rightsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName subtitleXName = System.Xml.Linq.XName.Get("subtitle", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<textType> subtitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<textType> titleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName updatedXName = System.Xml.Linq.XName.Get("updated", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<dateTimeType> updatedField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @baseXName = System.Xml.Linq.XName.Get("base", "http://www.w3.org/XML/1998/namespace");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName langXName = System.Xml.Linq.XName.Get("lang", "http://www.w3.org/XML/1998/namespace");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("sourceType", "http://www.w3.org/2005/Atom");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static FSM validationStates;
        
		public static explicit operator sourceType(XElement xe) { return XTypedServices.ToXTypedElement<sourceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static sourceType() {
            BuildElementDictionary();
            InitFSM();
        }
        
        /// <summary>
        /// <para>
        /// 
        ///                The Atom source construct is defined in section 4.2.11 of the format spec.
        ///            
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | contributor* | generator? | icon? | id? | link* | logo? | rights? | subtitle? | title? | updated? | any)+
        /// </para>
        /// </summary>
        public sourceType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | contributor* | generator? | icon? | id? | link* | logo? | rights? | subtitle? | title? | updated? | any)+
        /// </para>
        /// </summary>
        public virtual IList<personType> author {
            get {
                if ((this.authorField == null)) {
                    this.authorField = new XTypedList<personType>(this, LinqToXsdTypeManager.Instance, authorXName);
                }
                return this.authorField;
            }
            set {
                if ((value == null)) {
                    this.authorField = null;
                }
                else {
                    if ((this.authorField == null)) {
                        this.authorField = XTypedList<personType>.Initialize(this, LinqToXsdTypeManager.Instance, value, authorXName);
                    }
                    else {
                        XTypedServices.SetList<personType>(this.authorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | contributor* | generator? | icon? | id? | link* | logo? | rights? | subtitle? | title? | updated? | any)+
        /// </para>
        /// </summary>
        public virtual IList<categoryType> category {
            get {
                if ((this.categoryField == null)) {
                    this.categoryField = new XTypedList<categoryType>(this, LinqToXsdTypeManager.Instance, categoryXName);
                }
                return this.categoryField;
            }
            set {
                if ((value == null)) {
                    this.categoryField = null;
                }
                else {
                    if ((this.categoryField == null)) {
                        this.categoryField = XTypedList<categoryType>.Initialize(this, LinqToXsdTypeManager.Instance, value, categoryXName);
                    }
                    else {
                        XTypedServices.SetList<categoryType>(this.categoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | contributor* | generator? | icon? | id? | link* | logo? | rights? | subtitle? | title? | updated? | any)+
        /// </para>
        /// </summary>
        public virtual IList<personType> contributor {
            get {
                if ((this.contributorField == null)) {
                    this.contributorField = new XTypedList<personType>(this, LinqToXsdTypeManager.Instance, contributorXName);
                }
                return this.contributorField;
            }
            set {
                if ((value == null)) {
                    this.contributorField = null;
                }
                else {
                    if ((this.contributorField == null)) {
                        this.contributorField = XTypedList<personType>.Initialize(this, LinqToXsdTypeManager.Instance, value, contributorXName);
                    }
                    else {
                        XTypedServices.SetList<personType>(this.contributorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | contributor* | generator? | icon? | id? | link* | logo? | rights? | subtitle? | title? | updated? | any)+
        /// </para>
        /// </summary>
        public virtual IList<generatorType> generator {
            get {
                if ((this.generatorField == null)) {
                    this.generatorField = new XTypedList<generatorType>(this, LinqToXsdTypeManager.Instance, generatorXName);
                }
                return this.generatorField;
            }
            set {
                if ((value == null)) {
                    this.generatorField = null;
                }
                else {
                    if ((this.generatorField == null)) {
                        this.generatorField = XTypedList<generatorType>.Initialize(this, LinqToXsdTypeManager.Instance, value, generatorXName);
                    }
                    else {
                        XTypedServices.SetList<generatorType>(this.generatorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | contributor* | generator? | icon? | id? | link* | logo? | rights? | subtitle? | title? | updated? | any)+
        /// </para>
        /// </summary>
        public virtual IList<iconType> icon {
            get {
                if ((this.iconField == null)) {
                    this.iconField = new XTypedList<iconType>(this, LinqToXsdTypeManager.Instance, iconXName);
                }
                return this.iconField;
            }
            set {
                if ((value == null)) {
                    this.iconField = null;
                }
                else {
                    if ((this.iconField == null)) {
                        this.iconField = XTypedList<iconType>.Initialize(this, LinqToXsdTypeManager.Instance, value, iconXName);
                    }
                    else {
                        XTypedServices.SetList<iconType>(this.iconField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | contributor* | generator? | icon? | id? | link* | logo? | rights? | subtitle? | title? | updated? | any)+
        /// </para>
        /// </summary>
        public virtual IList<idType> id {
            get {
                if ((this.idField == null)) {
                    this.idField = new XTypedList<idType>(this, LinqToXsdTypeManager.Instance, idXName);
                }
                return this.idField;
            }
            set {
                if ((value == null)) {
                    this.idField = null;
                }
                else {
                    if ((this.idField == null)) {
                        this.idField = XTypedList<idType>.Initialize(this, LinqToXsdTypeManager.Instance, value, idXName);
                    }
                    else {
                        XTypedServices.SetList<idType>(this.idField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | contributor* | generator? | icon? | id? | link* | logo? | rights? | subtitle? | title? | updated? | any)+
        /// </para>
        /// </summary>
        public virtual IList<linkType> link {
            get {
                if ((this.linkField == null)) {
                    this.linkField = new XTypedList<linkType>(this, LinqToXsdTypeManager.Instance, linkXName);
                }
                return this.linkField;
            }
            set {
                if ((value == null)) {
                    this.linkField = null;
                }
                else {
                    if ((this.linkField == null)) {
                        this.linkField = XTypedList<linkType>.Initialize(this, LinqToXsdTypeManager.Instance, value, linkXName);
                    }
                    else {
                        XTypedServices.SetList<linkType>(this.linkField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | contributor* | generator? | icon? | id? | link* | logo? | rights? | subtitle? | title? | updated? | any)+
        /// </para>
        /// </summary>
        public virtual IList<logoType> logo {
            get {
                if ((this.logoField == null)) {
                    this.logoField = new XTypedList<logoType>(this, LinqToXsdTypeManager.Instance, logoXName);
                }
                return this.logoField;
            }
            set {
                if ((value == null)) {
                    this.logoField = null;
                }
                else {
                    if ((this.logoField == null)) {
                        this.logoField = XTypedList<logoType>.Initialize(this, LinqToXsdTypeManager.Instance, value, logoXName);
                    }
                    else {
                        XTypedServices.SetList<logoType>(this.logoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | contributor* | generator? | icon? | id? | link* | logo? | rights? | subtitle? | title? | updated? | any)+
        /// </para>
        /// </summary>
        public virtual IList<textType> rights {
            get {
                if ((this.rightsField == null)) {
                    this.rightsField = new XTypedList<textType>(this, LinqToXsdTypeManager.Instance, rightsXName);
                }
                return this.rightsField;
            }
            set {
                if ((value == null)) {
                    this.rightsField = null;
                }
                else {
                    if ((this.rightsField == null)) {
                        this.rightsField = XTypedList<textType>.Initialize(this, LinqToXsdTypeManager.Instance, value, rightsXName);
                    }
                    else {
                        XTypedServices.SetList<textType>(this.rightsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | contributor* | generator? | icon? | id? | link* | logo? | rights? | subtitle? | title? | updated? | any)+
        /// </para>
        /// </summary>
        public virtual IList<textType> subtitle {
            get {
                if ((this.subtitleField == null)) {
                    this.subtitleField = new XTypedList<textType>(this, LinqToXsdTypeManager.Instance, subtitleXName);
                }
                return this.subtitleField;
            }
            set {
                if ((value == null)) {
                    this.subtitleField = null;
                }
                else {
                    if ((this.subtitleField == null)) {
                        this.subtitleField = XTypedList<textType>.Initialize(this, LinqToXsdTypeManager.Instance, value, subtitleXName);
                    }
                    else {
                        XTypedServices.SetList<textType>(this.subtitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | contributor* | generator? | icon? | id? | link* | logo? | rights? | subtitle? | title? | updated? | any)+
        /// </para>
        /// </summary>
        public virtual IList<textType> title {
            get {
                if ((this.titleField == null)) {
                    this.titleField = new XTypedList<textType>(this, LinqToXsdTypeManager.Instance, titleXName);
                }
                return this.titleField;
            }
            set {
                if ((value == null)) {
                    this.titleField = null;
                }
                else {
                    if ((this.titleField == null)) {
                        this.titleField = XTypedList<textType>.Initialize(this, LinqToXsdTypeManager.Instance, value, titleXName);
                    }
                    else {
                        XTypedServices.SetList<textType>(this.titleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | contributor* | generator? | icon? | id? | link* | logo? | rights? | subtitle? | title? | updated? | any)+
        /// </para>
        /// </summary>
        public virtual IList<dateTimeType> updated {
            get {
                if ((this.updatedField == null)) {
                    this.updatedField = new XTypedList<dateTimeType>(this, LinqToXsdTypeManager.Instance, updatedXName);
                }
                return this.updatedField;
            }
            set {
                if ((value == null)) {
                    this.updatedField = null;
                }
                else {
                    if ((this.updatedField == null)) {
                        this.updatedField = XTypedList<dateTimeType>.Initialize(this, LinqToXsdTypeManager.Instance, value, updatedXName);
                    }
                    else {
                        XTypedServices.SetList<dateTimeType>(this.updatedField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (author* | category* | contributor* | generator? | icon? | id? | link* | logo? | rights? | subtitle? | title? | updated? | any)+
        /// </para>
        /// </summary>
        public virtual IEnumerable<XElement> Any {
            get {
                return this.GetWildCards(WildCard.DefaultWildCard);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri @base {
            get {
                XAttribute x = this.Attribute(@baseXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(@baseXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string lang {
            get {
                XAttribute x = this.Attribute(langXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language).Datatype);
            }
            set {
                this.SetAttribute(langXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<sourceType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(authorXName, typeof(personType));
            localElementDictionary.Add(categoryXName, typeof(categoryType));
            localElementDictionary.Add(contributorXName, typeof(personType));
            localElementDictionary.Add(generatorXName, typeof(generatorType));
            localElementDictionary.Add(iconXName, typeof(iconType));
            localElementDictionary.Add(idXName, typeof(idType));
            localElementDictionary.Add(linkXName, typeof(linkType));
            localElementDictionary.Add(logoXName, typeof(logoType));
            localElementDictionary.Add(rightsXName, typeof(textType));
            localElementDictionary.Add(subtitleXName, typeof(textType));
            localElementDictionary.Add(titleXName, typeof(textType));
            localElementDictionary.Add(updatedXName, typeof(dateTimeType));
        }
        
        FSM IXMetaData.GetValidationStates() {
            return validationStates;
        }
        
        private static void InitFSM() {
            Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
            transitions.Add(1, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("author", "http://www.w3.org/2005/Atom"), 1), new SingleTransition(System.Xml.Linq.XName.Get("category", "http://www.w3.org/2005/Atom"), 3), new SingleTransition(System.Xml.Linq.XName.Get("contributor", "http://www.w3.org/2005/Atom"), 5), new SingleTransition(System.Xml.Linq.XName.Get("generator", "http://www.w3.org/2005/Atom"), 8), new SingleTransition(System.Xml.Linq.XName.Get("icon", "http://www.w3.org/2005/Atom"), 10), new SingleTransition(System.Xml.Linq.XName.Get("id", "http://www.w3.org/2005/Atom"), 12), new SingleTransition(System.Xml.Linq.XName.Get("link", "http://www.w3.org/2005/Atom"), 13), new SingleTransition(System.Xml.Linq.XName.Get("logo", "http://www.w3.org/2005/Atom"), 16), new SingleTransition(System.Xml.Linq.XName.Get("rights", "http://www.w3.org/2005/Atom"), 18), new SingleTransition(System.Xml.Linq.XName.Get("subtitle", "http://www.w3.org/2005/Atom"), 20), new SingleTransition(System.Xml.Linq.XName.Get("title", "http://www.w3.org/2005/Atom"), 22), new SingleTransition(System.Xml.Linq.XName.Get("updated", "http://www.w3.org/2005/Atom"), 24), new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 25)));
            transitions.Add(3, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("category", "http://www.w3.org/2005/Atom"), 3), new SingleTransition(System.Xml.Linq.XName.Get("author", "http://www.w3.org/2005/Atom"), 1), new SingleTransition(System.Xml.Linq.XName.Get("contributor", "http://www.w3.org/2005/Atom"), 5), new SingleTransition(System.Xml.Linq.XName.Get("generator", "http://www.w3.org/2005/Atom"), 8), new SingleTransition(System.Xml.Linq.XName.Get("icon", "http://www.w3.org/2005/Atom"), 10), new SingleTransition(System.Xml.Linq.XName.Get("id", "http://www.w3.org/2005/Atom"), 12), new SingleTransition(System.Xml.Linq.XName.Get("link", "http://www.w3.org/2005/Atom"), 13), new SingleTransition(System.Xml.Linq.XName.Get("logo", "http://www.w3.org/2005/Atom"), 16), new SingleTransition(System.Xml.Linq.XName.Get("rights", "http://www.w3.org/2005/Atom"), 18), new SingleTransition(System.Xml.Linq.XName.Get("subtitle", "http://www.w3.org/2005/Atom"), 20), new SingleTransition(System.Xml.Linq.XName.Get("title", "http://www.w3.org/2005/Atom"), 22), new SingleTransition(System.Xml.Linq.XName.Get("updated", "http://www.w3.org/2005/Atom"), 24), new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 25)));
            transitions.Add(5, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("contributor", "http://www.w3.org/2005/Atom"), 5), new SingleTransition(System.Xml.Linq.XName.Get("author", "http://www.w3.org/2005/Atom"), 1), new SingleTransition(System.Xml.Linq.XName.Get("category", "http://www.w3.org/2005/Atom"), 3), new SingleTransition(System.Xml.Linq.XName.Get("generator", "http://www.w3.org/2005/Atom"), 8), new SingleTransition(System.Xml.Linq.XName.Get("icon", "http://www.w3.org/2005/Atom"), 10), new SingleTransition(System.Xml.Linq.XName.Get("id", "http://www.w3.org/2005/Atom"), 12), new SingleTransition(System.Xml.Linq.XName.Get("link", "http://www.w3.org/2005/Atom"), 13), new SingleTransition(System.Xml.Linq.XName.Get("logo", "http://www.w3.org/2005/Atom"), 16), new SingleTransition(System.Xml.Linq.XName.Get("rights", "http://www.w3.org/2005/Atom"), 18), new SingleTransition(System.Xml.Linq.XName.Get("subtitle", "http://www.w3.org/2005/Atom"), 20), new SingleTransition(System.Xml.Linq.XName.Get("title", "http://www.w3.org/2005/Atom"), 22), new SingleTransition(System.Xml.Linq.XName.Get("updated", "http://www.w3.org/2005/Atom"), 24), new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 25)));
            transitions.Add(8, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("author", "http://www.w3.org/2005/Atom"), 8), new SingleTransition(System.Xml.Linq.XName.Get("category", "http://www.w3.org/2005/Atom"), 3), new SingleTransition(System.Xml.Linq.XName.Get("contributor", "http://www.w3.org/2005/Atom"), 5), new SingleTransition(System.Xml.Linq.XName.Get("generator", "http://www.w3.org/2005/Atom"), 8), new SingleTransition(System.Xml.Linq.XName.Get("icon", "http://www.w3.org/2005/Atom"), 10), new SingleTransition(System.Xml.Linq.XName.Get("id", "http://www.w3.org/2005/Atom"), 12), new SingleTransition(System.Xml.Linq.XName.Get("link", "http://www.w3.org/2005/Atom"), 13), new SingleTransition(System.Xml.Linq.XName.Get("logo", "http://www.w3.org/2005/Atom"), 16), new SingleTransition(System.Xml.Linq.XName.Get("rights", "http://www.w3.org/2005/Atom"), 18), new SingleTransition(System.Xml.Linq.XName.Get("subtitle", "http://www.w3.org/2005/Atom"), 20), new SingleTransition(System.Xml.Linq.XName.Get("title", "http://www.w3.org/2005/Atom"), 22), new SingleTransition(System.Xml.Linq.XName.Get("updated", "http://www.w3.org/2005/Atom"), 24), new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 25)));
            transitions.Add(10, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("author", "http://www.w3.org/2005/Atom"), 10), new SingleTransition(System.Xml.Linq.XName.Get("category", "http://www.w3.org/2005/Atom"), 3), new SingleTransition(System.Xml.Linq.XName.Get("contributor", "http://www.w3.org/2005/Atom"), 5), new SingleTransition(System.Xml.Linq.XName.Get("generator", "http://www.w3.org/2005/Atom"), 8), new SingleTransition(System.Xml.Linq.XName.Get("icon", "http://www.w3.org/2005/Atom"), 10), new SingleTransition(System.Xml.Linq.XName.Get("id", "http://www.w3.org/2005/Atom"), 12), new SingleTransition(System.Xml.Linq.XName.Get("link", "http://www.w3.org/2005/Atom"), 13), new SingleTransition(System.Xml.Linq.XName.Get("logo", "http://www.w3.org/2005/Atom"), 16), new SingleTransition(System.Xml.Linq.XName.Get("rights", "http://www.w3.org/2005/Atom"), 18), new SingleTransition(System.Xml.Linq.XName.Get("subtitle", "http://www.w3.org/2005/Atom"), 20), new SingleTransition(System.Xml.Linq.XName.Get("title", "http://www.w3.org/2005/Atom"), 22), new SingleTransition(System.Xml.Linq.XName.Get("updated", "http://www.w3.org/2005/Atom"), 24), new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 25)));
            transitions.Add(12, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("author", "http://www.w3.org/2005/Atom"), 12), new SingleTransition(System.Xml.Linq.XName.Get("category", "http://www.w3.org/2005/Atom"), 3), new SingleTransition(System.Xml.Linq.XName.Get("contributor", "http://www.w3.org/2005/Atom"), 5), new SingleTransition(System.Xml.Linq.XName.Get("generator", "http://www.w3.org/2005/Atom"), 8), new SingleTransition(System.Xml.Linq.XName.Get("icon", "http://www.w3.org/2005/Atom"), 10), new SingleTransition(System.Xml.Linq.XName.Get("id", "http://www.w3.org/2005/Atom"), 12), new SingleTransition(System.Xml.Linq.XName.Get("link", "http://www.w3.org/2005/Atom"), 13), new SingleTransition(System.Xml.Linq.XName.Get("logo", "http://www.w3.org/2005/Atom"), 16), new SingleTransition(System.Xml.Linq.XName.Get("rights", "http://www.w3.org/2005/Atom"), 18), new SingleTransition(System.Xml.Linq.XName.Get("subtitle", "http://www.w3.org/2005/Atom"), 20), new SingleTransition(System.Xml.Linq.XName.Get("title", "http://www.w3.org/2005/Atom"), 22), new SingleTransition(System.Xml.Linq.XName.Get("updated", "http://www.w3.org/2005/Atom"), 24), new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 25)));
            transitions.Add(13, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("link", "http://www.w3.org/2005/Atom"), 13), new SingleTransition(System.Xml.Linq.XName.Get("author", "http://www.w3.org/2005/Atom"), 1), new SingleTransition(System.Xml.Linq.XName.Get("category", "http://www.w3.org/2005/Atom"), 3), new SingleTransition(System.Xml.Linq.XName.Get("contributor", "http://www.w3.org/2005/Atom"), 5), new SingleTransition(System.Xml.Linq.XName.Get("generator", "http://www.w3.org/2005/Atom"), 8), new SingleTransition(System.Xml.Linq.XName.Get("icon", "http://www.w3.org/2005/Atom"), 10), new SingleTransition(System.Xml.Linq.XName.Get("id", "http://www.w3.org/2005/Atom"), 12), new SingleTransition(System.Xml.Linq.XName.Get("logo", "http://www.w3.org/2005/Atom"), 16), new SingleTransition(System.Xml.Linq.XName.Get("rights", "http://www.w3.org/2005/Atom"), 18), new SingleTransition(System.Xml.Linq.XName.Get("subtitle", "http://www.w3.org/2005/Atom"), 20), new SingleTransition(System.Xml.Linq.XName.Get("title", "http://www.w3.org/2005/Atom"), 22), new SingleTransition(System.Xml.Linq.XName.Get("updated", "http://www.w3.org/2005/Atom"), 24), new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 25)));
            transitions.Add(16, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("author", "http://www.w3.org/2005/Atom"), 16), new SingleTransition(System.Xml.Linq.XName.Get("category", "http://www.w3.org/2005/Atom"), 3), new SingleTransition(System.Xml.Linq.XName.Get("contributor", "http://www.w3.org/2005/Atom"), 5), new SingleTransition(System.Xml.Linq.XName.Get("generator", "http://www.w3.org/2005/Atom"), 8), new SingleTransition(System.Xml.Linq.XName.Get("icon", "http://www.w3.org/2005/Atom"), 10), new SingleTransition(System.Xml.Linq.XName.Get("id", "http://www.w3.org/2005/Atom"), 12), new SingleTransition(System.Xml.Linq.XName.Get("link", "http://www.w3.org/2005/Atom"), 13), new SingleTransition(System.Xml.Linq.XName.Get("logo", "http://www.w3.org/2005/Atom"), 16), new SingleTransition(System.Xml.Linq.XName.Get("rights", "http://www.w3.org/2005/Atom"), 18), new SingleTransition(System.Xml.Linq.XName.Get("subtitle", "http://www.w3.org/2005/Atom"), 20), new SingleTransition(System.Xml.Linq.XName.Get("title", "http://www.w3.org/2005/Atom"), 22), new SingleTransition(System.Xml.Linq.XName.Get("updated", "http://www.w3.org/2005/Atom"), 24), new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 25)));
            transitions.Add(18, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("author", "http://www.w3.org/2005/Atom"), 18), new SingleTransition(System.Xml.Linq.XName.Get("category", "http://www.w3.org/2005/Atom"), 3), new SingleTransition(System.Xml.Linq.XName.Get("contributor", "http://www.w3.org/2005/Atom"), 5), new SingleTransition(System.Xml.Linq.XName.Get("generator", "http://www.w3.org/2005/Atom"), 8), new SingleTransition(System.Xml.Linq.XName.Get("icon", "http://www.w3.org/2005/Atom"), 10), new SingleTransition(System.Xml.Linq.XName.Get("id", "http://www.w3.org/2005/Atom"), 12), new SingleTransition(System.Xml.Linq.XName.Get("link", "http://www.w3.org/2005/Atom"), 13), new SingleTransition(System.Xml.Linq.XName.Get("logo", "http://www.w3.org/2005/Atom"), 16), new SingleTransition(System.Xml.Linq.XName.Get("rights", "http://www.w3.org/2005/Atom"), 18), new SingleTransition(System.Xml.Linq.XName.Get("subtitle", "http://www.w3.org/2005/Atom"), 20), new SingleTransition(System.Xml.Linq.XName.Get("title", "http://www.w3.org/2005/Atom"), 22), new SingleTransition(System.Xml.Linq.XName.Get("updated", "http://www.w3.org/2005/Atom"), 24), new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 25)));
            transitions.Add(20, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("author", "http://www.w3.org/2005/Atom"), 20), new SingleTransition(System.Xml.Linq.XName.Get("category", "http://www.w3.org/2005/Atom"), 3), new SingleTransition(System.Xml.Linq.XName.Get("contributor", "http://www.w3.org/2005/Atom"), 5), new SingleTransition(System.Xml.Linq.XName.Get("generator", "http://www.w3.org/2005/Atom"), 8), new SingleTransition(System.Xml.Linq.XName.Get("icon", "http://www.w3.org/2005/Atom"), 10), new SingleTransition(System.Xml.Linq.XName.Get("id", "http://www.w3.org/2005/Atom"), 12), new SingleTransition(System.Xml.Linq.XName.Get("link", "http://www.w3.org/2005/Atom"), 13), new SingleTransition(System.Xml.Linq.XName.Get("logo", "http://www.w3.org/2005/Atom"), 16), new SingleTransition(System.Xml.Linq.XName.Get("rights", "http://www.w3.org/2005/Atom"), 18), new SingleTransition(System.Xml.Linq.XName.Get("subtitle", "http://www.w3.org/2005/Atom"), 20), new SingleTransition(System.Xml.Linq.XName.Get("title", "http://www.w3.org/2005/Atom"), 22), new SingleTransition(System.Xml.Linq.XName.Get("updated", "http://www.w3.org/2005/Atom"), 24), new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 25)));
            transitions.Add(22, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("author", "http://www.w3.org/2005/Atom"), 22), new SingleTransition(System.Xml.Linq.XName.Get("category", "http://www.w3.org/2005/Atom"), 3), new SingleTransition(System.Xml.Linq.XName.Get("contributor", "http://www.w3.org/2005/Atom"), 5), new SingleTransition(System.Xml.Linq.XName.Get("generator", "http://www.w3.org/2005/Atom"), 8), new SingleTransition(System.Xml.Linq.XName.Get("icon", "http://www.w3.org/2005/Atom"), 10), new SingleTransition(System.Xml.Linq.XName.Get("id", "http://www.w3.org/2005/Atom"), 12), new SingleTransition(System.Xml.Linq.XName.Get("link", "http://www.w3.org/2005/Atom"), 13), new SingleTransition(System.Xml.Linq.XName.Get("logo", "http://www.w3.org/2005/Atom"), 16), new SingleTransition(System.Xml.Linq.XName.Get("rights", "http://www.w3.org/2005/Atom"), 18), new SingleTransition(System.Xml.Linq.XName.Get("subtitle", "http://www.w3.org/2005/Atom"), 20), new SingleTransition(System.Xml.Linq.XName.Get("title", "http://www.w3.org/2005/Atom"), 22), new SingleTransition(System.Xml.Linq.XName.Get("updated", "http://www.w3.org/2005/Atom"), 24), new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 25)));
            transitions.Add(24, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("author", "http://www.w3.org/2005/Atom"), 24), new SingleTransition(System.Xml.Linq.XName.Get("category", "http://www.w3.org/2005/Atom"), 3), new SingleTransition(System.Xml.Linq.XName.Get("contributor", "http://www.w3.org/2005/Atom"), 5), new SingleTransition(System.Xml.Linq.XName.Get("generator", "http://www.w3.org/2005/Atom"), 8), new SingleTransition(System.Xml.Linq.XName.Get("icon", "http://www.w3.org/2005/Atom"), 10), new SingleTransition(System.Xml.Linq.XName.Get("id", "http://www.w3.org/2005/Atom"), 12), new SingleTransition(System.Xml.Linq.XName.Get("link", "http://www.w3.org/2005/Atom"), 13), new SingleTransition(System.Xml.Linq.XName.Get("logo", "http://www.w3.org/2005/Atom"), 16), new SingleTransition(System.Xml.Linq.XName.Get("rights", "http://www.w3.org/2005/Atom"), 18), new SingleTransition(System.Xml.Linq.XName.Get("subtitle", "http://www.w3.org/2005/Atom"), 20), new SingleTransition(System.Xml.Linq.XName.Get("title", "http://www.w3.org/2005/Atom"), 22), new SingleTransition(System.Xml.Linq.XName.Get("updated", "http://www.w3.org/2005/Atom"), 24), new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 25)));
            transitions.Add(25, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("author", "http://www.w3.org/2005/Atom"), 1), new SingleTransition(System.Xml.Linq.XName.Get("category", "http://www.w3.org/2005/Atom"), 3), new SingleTransition(System.Xml.Linq.XName.Get("contributor", "http://www.w3.org/2005/Atom"), 5), new SingleTransition(System.Xml.Linq.XName.Get("generator", "http://www.w3.org/2005/Atom"), 8), new SingleTransition(System.Xml.Linq.XName.Get("icon", "http://www.w3.org/2005/Atom"), 10), new SingleTransition(System.Xml.Linq.XName.Get("id", "http://www.w3.org/2005/Atom"), 12), new SingleTransition(System.Xml.Linq.XName.Get("link", "http://www.w3.org/2005/Atom"), 13), new SingleTransition(System.Xml.Linq.XName.Get("logo", "http://www.w3.org/2005/Atom"), 16), new SingleTransition(System.Xml.Linq.XName.Get("rights", "http://www.w3.org/2005/Atom"), 18), new SingleTransition(System.Xml.Linq.XName.Get("subtitle", "http://www.w3.org/2005/Atom"), 20), new SingleTransition(System.Xml.Linq.XName.Get("title", "http://www.w3.org/2005/Atom"), 22), new SingleTransition(System.Xml.Linq.XName.Get("updated", "http://www.w3.org/2005/Atom"), 24), new SingleTransition(new WildCard("##other", "http://www.w3.org/2005/Atom"), 25)));
            validationStates = new FSM(1, new Set<int>(new int[] {
                            1,
                            3,
                            5,
                            8,
                            10,
                            12,
                            13,
                            16,
                            18,
                            20,
                            22,
                            24,
                            25}), transitions);
        }
    }
    
    public partial class uriType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @baseXName = System.Xml.Linq.XName.Get("base", "http://www.w3.org/XML/1998/namespace");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName langXName = System.Xml.Linq.XName.Get("lang", "http://www.w3.org/XML/1998/namespace");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("uriType", "http://www.w3.org/2005/Atom");
        
		public static explicit operator uriType(XElement xe) { return XTypedServices.ToXTypedElement<uriType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public uriType() {
        }
        
        public virtual System.Uri TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri @base {
            get {
                XAttribute x = this.Attribute(@baseXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(@baseXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string lang {
            get {
                XAttribute x = this.Attribute(langXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language).Datatype);
            }
            set {
                this.SetAttribute(langXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<uriType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class dateTimeType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @baseXName = System.Xml.Linq.XName.Get("base", "http://www.w3.org/XML/1998/namespace");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName langXName = System.Xml.Linq.XName.Get("lang", "http://www.w3.org/XML/1998/namespace");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("dateTimeType", "http://www.w3.org/2005/Atom");
        
		public static explicit operator dateTimeType(XElement xe) { return XTypedServices.ToXTypedElement<dateTimeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public dateTimeType() {
        }
        
        public virtual System.DateTime TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri @base {
            get {
                XAttribute x = this.Attribute(@baseXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(@baseXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string lang {
            get {
                XAttribute x = this.Attribute(langXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language).Datatype);
            }
            set {
                this.SetAttribute(langXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Language).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<dateTimeType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///                The Atom feed construct is defined in section 4.1.1 of the format spec.
    ///            
    /// </para>
    /// </summary>
    public partial class feed : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private feedType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("feed", "http://www.w3.org/2005/Atom");
        
		public static explicit operator feed(XElement xe) { return XTypedServices.ToXTypedElement<feed, feedType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// 
        ///                The Atom feed construct is defined in section 4.1.1 of the format spec.
        ///            
        /// </para>
        /// </summary>
        public feed() {
            SetInnerType(new feedType());
        }
        
        /// <summary>
        /// <para>
        /// 
        ///                The Atom feed construct is defined in section 4.1.1 of the format spec.
        ///            
        /// </para>
        /// </summary>
        public feed(feedType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual feedType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | contributor* | generator? | icon? | id | link* | logo? | rights? | subtitle? | title | updated | entry* | any)+
        /// </para>
        /// </summary>
        public virtual IList<personType> author {
            get {
                return this.ContentField.author;
            }
            set {
                this.ContentField.author = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | contributor* | generator? | icon? | id | link* | logo? | rights? | subtitle? | title | updated | entry* | any)+
        /// </para>
        /// </summary>
        public virtual IList<categoryType> category {
            get {
                return this.ContentField.category;
            }
            set {
                this.ContentField.category = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | contributor* | generator? | icon? | id | link* | logo? | rights? | subtitle? | title | updated | entry* | any)+
        /// </para>
        /// </summary>
        public virtual IList<personType> contributor {
            get {
                return this.ContentField.contributor;
            }
            set {
                this.ContentField.contributor = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | contributor* | generator? | icon? | id | link* | logo? | rights? | subtitle? | title | updated | entry* | any)+
        /// </para>
        /// </summary>
        public virtual IList<generatorType> generator {
            get {
                return this.ContentField.generator;
            }
            set {
                this.ContentField.generator = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | contributor* | generator? | icon? | id | link* | logo? | rights? | subtitle? | title | updated | entry* | any)+
        /// </para>
        /// </summary>
        public virtual IList<iconType> icon {
            get {
                return this.ContentField.icon;
            }
            set {
                this.ContentField.icon = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | contributor* | generator? | icon? | id | link* | logo? | rights? | subtitle? | title | updated | entry* | any)+
        /// </para>
        /// </summary>
        public virtual IList<idType> id {
            get {
                return this.ContentField.id;
            }
            set {
                this.ContentField.id = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | contributor* | generator? | icon? | id | link* | logo? | rights? | subtitle? | title | updated | entry* | any)+
        /// </para>
        /// </summary>
        public virtual IList<linkType> link {
            get {
                return this.ContentField.link;
            }
            set {
                this.ContentField.link = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | contributor* | generator? | icon? | id | link* | logo? | rights? | subtitle? | title | updated | entry* | any)+
        /// </para>
        /// </summary>
        public virtual IList<logoType> logo {
            get {
                return this.ContentField.logo;
            }
            set {
                this.ContentField.logo = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | contributor* | generator? | icon? | id | link* | logo? | rights? | subtitle? | title | updated | entry* | any)+
        /// </para>
        /// </summary>
        public virtual IList<textType> rights {
            get {
                return this.ContentField.rights;
            }
            set {
                this.ContentField.rights = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | contributor* | generator? | icon? | id | link* | logo? | rights? | subtitle? | title | updated | entry* | any)+
        /// </para>
        /// </summary>
        public virtual IList<textType> subtitle {
            get {
                return this.ContentField.subtitle;
            }
            set {
                this.ContentField.subtitle = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | contributor* | generator? | icon? | id | link* | logo? | rights? | subtitle? | title | updated | entry* | any)+
        /// </para>
        /// </summary>
        public virtual IList<textType> title {
            get {
                return this.ContentField.title;
            }
            set {
                this.ContentField.title = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | contributor* | generator? | icon? | id | link* | logo? | rights? | subtitle? | title | updated | entry* | any)+
        /// </para>
        /// </summary>
        public virtual IList<dateTimeType> updated {
            get {
                return this.ContentField.updated;
            }
            set {
                this.ContentField.updated = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | contributor* | generator? | icon? | id | link* | logo? | rights? | subtitle? | title | updated | entry* | any)+
        /// </para>
        /// </summary>
        public virtual IList<entryType> entry {
            get {
                return this.ContentField.entry;
            }
            set {
                this.ContentField.entry = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (author* | category* | contributor* | generator? | icon? | id | link* | logo? | rights? | subtitle? | title | updated | entry* | any)+
        /// </para>
        /// </summary>
        public virtual IEnumerable<XElement> Any {
            get {
                return this.ContentField.Any;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri @base {
            get {
                return this.ContentField.@base;
            }
            set {
                this.ContentField.@base = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string lang {
            get {
                return this.ContentField.lang;
            }
            set {
                this.ContentField.lang = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static feed Load(string xmlFile) {
            return XTypedServices.Load<feed, feedType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static feed Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<feed, feedType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static feed Parse(string xml) {
            return XTypedServices.Parse<feed, feedType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new feed(((feedType)(this.Content.Clone())));
        }
        
        private void SetInnerType(feedType ContentField) {
            this.ContentField = ((feedType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// 
    ///                The Atom entry construct is defined in section 4.1.2 of the format spec.
    ///            
    /// </para>
    /// </summary>
    public partial class entry : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private entryType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("entry", "http://www.w3.org/2005/Atom");
        
		public static explicit operator entry(XElement xe) { return XTypedServices.ToXTypedElement<entry, entryType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// 
        ///                The Atom entry construct is defined in section 4.1.2 of the format spec.
        ///            
        /// </para>
        /// </summary>
        public entry() {
            SetInnerType(new entryType());
        }
        
        /// <summary>
        /// <para>
        /// 
        ///                The Atom entry construct is defined in section 4.1.2 of the format spec.
        ///            
        /// </para>
        /// </summary>
        public entry(entryType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual entryType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | content? | contributor* | id | link* | published? | rights? | source? | summary? | title | updated | any)+
        /// </para>
        /// </summary>
        public virtual IList<personType> author {
            get {
                return this.ContentField.author;
            }
            set {
                this.ContentField.author = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | content? | contributor* | id | link* | published? | rights? | source? | summary? | title | updated | any)+
        /// </para>
        /// </summary>
        public virtual IList<categoryType> category {
            get {
                return this.ContentField.category;
            }
            set {
                this.ContentField.category = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | content? | contributor* | id | link* | published? | rights? | source? | summary? | title | updated | any)+
        /// </para>
        /// </summary>
        public virtual IList<contentType> content {
            get {
                return this.ContentField.content;
            }
            set {
                this.ContentField.content = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | content? | contributor* | id | link* | published? | rights? | source? | summary? | title | updated | any)+
        /// </para>
        /// </summary>
        public virtual IList<personType> contributor {
            get {
                return this.ContentField.contributor;
            }
            set {
                this.ContentField.contributor = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | content? | contributor* | id | link* | published? | rights? | source? | summary? | title | updated | any)+
        /// </para>
        /// </summary>
        public virtual IList<idType> id {
            get {
                return this.ContentField.id;
            }
            set {
                this.ContentField.id = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | content? | contributor* | id | link* | published? | rights? | source? | summary? | title | updated | any)+
        /// </para>
        /// </summary>
        public virtual IList<linkType> link {
            get {
                return this.ContentField.link;
            }
            set {
                this.ContentField.link = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | content? | contributor* | id | link* | published? | rights? | source? | summary? | title | updated | any)+
        /// </para>
        /// </summary>
        public virtual IList<dateTimeType> published {
            get {
                return this.ContentField.published;
            }
            set {
                this.ContentField.published = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | content? | contributor* | id | link* | published? | rights? | source? | summary? | title | updated | any)+
        /// </para>
        /// </summary>
        public virtual IList<textType> rights {
            get {
                return this.ContentField.rights;
            }
            set {
                this.ContentField.rights = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | content? | contributor* | id | link* | published? | rights? | source? | summary? | title | updated | any)+
        /// </para>
        /// </summary>
        public virtual IList<textType> source {
            get {
                return this.ContentField.source;
            }
            set {
                this.ContentField.source = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | content? | contributor* | id | link* | published? | rights? | source? | summary? | title | updated | any)+
        /// </para>
        /// </summary>
        public virtual IList<textType> summary {
            get {
                return this.ContentField.summary;
            }
            set {
                this.ContentField.summary = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | content? | contributor* | id | link* | published? | rights? | source? | summary? | title | updated | any)+
        /// </para>
        /// </summary>
        public virtual IList<textType> title {
            get {
                return this.ContentField.title;
            }
            set {
                this.ContentField.title = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (author* | category* | content? | contributor* | id | link* | published? | rights? | source? | summary? | title | updated | any)+
        /// </para>
        /// </summary>
        public virtual IList<dateTimeType> updated {
            get {
                return this.ContentField.updated;
            }
            set {
                this.ContentField.updated = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (author* | category* | content? | contributor* | id | link* | published? | rights? | source? | summary? | title | updated | any)+
        /// </para>
        /// </summary>
        public virtual IEnumerable<XElement> Any {
            get {
                return this.ContentField.Any;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri @base {
            get {
                return this.ContentField.@base;
            }
            set {
                this.ContentField.@base = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string lang {
            get {
                return this.ContentField.lang;
            }
            set {
                this.ContentField.lang = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static entry Load(string xmlFile) {
            return XTypedServices.Load<entry, entryType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static entry Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<entry, entryType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static entry Parse(string xml) {
            return XTypedServices.Parse<entry, entryType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new entry(((entryType)(this.Content.Clone())));
        }
        
        private void SetInnerType(entryType ContentField) {
            this.ContentField = ((entryType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> typeDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> elementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static Dictionary<System.Type, System.Type> wrapperDictionary = new Dictionary<System.Type, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
            BuildWrapperDictionary();
        }
        
        private LinqToXsdTypeManager() {
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return wrapperDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(System.Xml.Linq.XName.Get("textType", "http://www.w3.org/2005/Atom"), typeof(global::AtomSyndication.textType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("personType", "http://www.w3.org/2005/Atom"), typeof(global::AtomSyndication.personType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("feedType", "http://www.w3.org/2005/Atom"), typeof(global::AtomSyndication.feedType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("entryType", "http://www.w3.org/2005/Atom"), typeof(global::AtomSyndication.entryType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("contentType", "http://www.w3.org/2005/Atom"), typeof(global::AtomSyndication.contentType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("categoryType", "http://www.w3.org/2005/Atom"), typeof(global::AtomSyndication.categoryType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("generatorType", "http://www.w3.org/2005/Atom"), typeof(global::AtomSyndication.generatorType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("iconType", "http://www.w3.org/2005/Atom"), typeof(global::AtomSyndication.iconType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("idType", "http://www.w3.org/2005/Atom"), typeof(global::AtomSyndication.idType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("linkType", "http://www.w3.org/2005/Atom"), typeof(global::AtomSyndication.linkType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("logoType", "http://www.w3.org/2005/Atom"), typeof(global::AtomSyndication.logoType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("sourceType", "http://www.w3.org/2005/Atom"), typeof(global::AtomSyndication.sourceType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("uriType", "http://www.w3.org/2005/Atom"), typeof(global::AtomSyndication.uriType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("dateTimeType", "http://www.w3.org/2005/Atom"), typeof(global::AtomSyndication.dateTimeType));
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(System.Xml.Linq.XName.Get("feed", "http://www.w3.org/2005/Atom"), typeof(global::AtomSyndication.feed));
            elementDictionary.Add(System.Xml.Linq.XName.Get("entry", "http://www.w3.org/2005/Atom"), typeof(global::AtomSyndication.entry));
        }
        
        private static void BuildWrapperDictionary() {
            wrapperDictionary.Add(typeof(AtomSyndication.feed), typeof(global::AtomSyndication.feedType));
            wrapperDictionary.Add(typeof(AtomSyndication.entry), typeof(global::AtomSyndication.entryType));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[System.Xml.Linq.XName.Get("feed", "http://www.w3.org/2005/Atom")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public feed feed {  get {return rootObject as feed; } }

		public entry entry {  get {return rootObject as entry; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(feed root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(entry root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public global::AtomSyndication.feed feed {  get {return rootObject as global::AtomSyndication.feed; } }

		public global::AtomSyndication.entry entry {  get {return rootObject as global::AtomSyndication.entry; } }
        
        private XRoot() {
        }
        
        public XRoot(global::AtomSyndication.feed root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::AtomSyndication.entry root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
