//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace sbml.org.enzymeml.version1 {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (doi, url)
    /// </para>
    /// </summary>
    public partial class references : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName doiXName = System.Xml.Linq.XName.Get("doi", "http://sbml.org/enzymeml/version1");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName urlXName = System.Xml.Linq.XName.Get("url", "http://sbml.org/enzymeml/version1");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("references", "http://sbml.org/enzymeml/version1");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator references(XElement xe) { return XTypedServices.ToXTypedElement<references>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static references() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(doiXName), new NamedContentModelEntity(urlXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (doi, url)
        /// </para>
        /// </summary>
        public references() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (doi, url)
        /// </para>
        /// </summary>
        public virtual string doi {
            get {
                XElement x = this.GetElement(doiXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(doiXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (doi, url)
        /// </para>
        /// </summary>
        public virtual string url {
            get {
                XElement x = this.GetElement(urlXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(urlXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static references Load(string xmlFile) {
            return XTypedServices.Load<references>(xmlFile);
        }
        
        public static references Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<references>(xmlFile);
        }
        
        public static references Parse(string xml) {
            return XTypedServices.Parse<references>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<references>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(doiXName, typeof(string));
            localElementDictionary.Add(urlXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (sequence, organism)
    /// </para>
    /// </summary>
    public partial class protein : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sequenceXName = System.Xml.Linq.XName.Get("sequence", "http://sbml.org/enzymeml/version1");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName organismXName = System.Xml.Linq.XName.Get("organism", "http://sbml.org/enzymeml/version1");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("protein", "http://sbml.org/enzymeml/version1");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator protein(XElement xe) { return XTypedServices.ToXTypedElement<protein>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static protein() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(sequenceXName), new NamedContentModelEntity(organismXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (sequence, organism)
        /// </para>
        /// </summary>
        public protein() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (sequence, organism)
        /// </para>
        /// </summary>
        public virtual string sequence {
            get {
                XElement x = this.GetElement(sequenceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(sequenceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (sequence, organism)
        /// </para>
        /// </summary>
        public virtual string organism {
            get {
                XElement x = this.GetElement(organismXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(organismXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static protein Load(string xmlFile) {
            return XTypedServices.Load<protein>(xmlFile);
        }
        
        public static protein Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<protein>(xmlFile);
        }
        
        public static protein Parse(string xml) {
            return XTypedServices.Parse<protein>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<protein>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(sequenceXName, typeof(string));
            localElementDictionary.Add(organismXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (inchi, smiles)
    /// </para>
    /// </summary>
    public partial class reactant : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName inchiXName = System.Xml.Linq.XName.Get("inchi", "http://sbml.org/enzymeml/version1");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName smilesXName = System.Xml.Linq.XName.Get("smiles", "http://sbml.org/enzymeml/version1");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("reactant", "http://sbml.org/enzymeml/version1");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator reactant(XElement xe) { return XTypedServices.ToXTypedElement<reactant>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static reactant() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(inchiXName), new NamedContentModelEntity(smilesXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (inchi, smiles)
        /// </para>
        /// </summary>
        public reactant() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (inchi, smiles)
        /// </para>
        /// </summary>
        public virtual inchiLocalType inchi {
            get {
                XElement x = this.GetElement(inchiXName);
                return ((inchiLocalType)(x));
            }
            set {
                this.SetElement(inchiXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (inchi, smiles)
        /// </para>
        /// </summary>
        public virtual smilesLocalType smiles {
            get {
                XElement x = this.GetElement(smilesXName);
                return ((smilesLocalType)(x));
            }
            set {
                this.SetElement(smilesXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static reactant Load(string xmlFile) {
            return XTypedServices.Load<reactant>(xmlFile);
        }
        
        public static reactant Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<reactant>(xmlFile);
        }
        
        public static reactant Parse(string xml) {
            return XTypedServices.Parse<reactant>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<reactant>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(inchiXName, typeof(inchiLocalType));
            localElementDictionary.Add(smilesXName, typeof(smilesLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class inchiLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName inchiXName = System.Xml.Linq.XName.Get("inchi", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("inchi", "http://sbml.org/enzymeml/version1");
            
		public static explicit operator inchiLocalType(XElement xe) { return XTypedServices.ToXTypedElement<inchiLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public inchiLocalType() {
            }
            
            public virtual string TypedValue {
                get {
                    XElement x = this.Untyped;
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public virtual string inchi {
                get {
                    XAttribute x = this.Attribute(inchiXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(inchiXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<inchiLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
        
        public partial class smilesLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName smilesXName = System.Xml.Linq.XName.Get("smiles", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("smiles", "http://sbml.org/enzymeml/version1");
            
		public static explicit operator smilesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<smilesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public smilesLocalType() {
            }
            
            public virtual string TypedValue {
                get {
                    XElement x = this.Untyped;
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public virtual string smiles {
                get {
                    XAttribute x = this.Attribute(smilesXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(smilesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<smilesLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (listOfFormats, listOfFiles, listOfMeasurements)
    /// </para>
    /// </summary>
    public partial class data : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listOfFormatsXName = System.Xml.Linq.XName.Get("listOfFormats", "http://sbml.org/enzymeml/version1");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listOfFilesXName = System.Xml.Linq.XName.Get("listOfFiles", "http://sbml.org/enzymeml/version1");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName listOfMeasurementsXName = System.Xml.Linq.XName.Get("listOfMeasurements", "http://sbml.org/enzymeml/version1");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("data", "http://sbml.org/enzymeml/version1");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator data(XElement xe) { return XTypedServices.ToXTypedElement<data>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static data() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(listOfFormatsXName), new NamedContentModelEntity(listOfFilesXName), new NamedContentModelEntity(listOfMeasurementsXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (listOfFormats, listOfFiles, listOfMeasurements)
        /// </para>
        /// </summary>
        public data() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (listOfFormats, listOfFiles, listOfMeasurements)
        /// </para>
        /// </summary>
        public virtual listOfFormatsLocalType listOfFormats {
            get {
                XElement x = this.GetElement(listOfFormatsXName);
                return ((listOfFormatsLocalType)(x));
            }
            set {
                this.SetElement(listOfFormatsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (listOfFormats, listOfFiles, listOfMeasurements)
        /// </para>
        /// </summary>
        public virtual listOfFilesLocalType listOfFiles {
            get {
                XElement x = this.GetElement(listOfFilesXName);
                return ((listOfFilesLocalType)(x));
            }
            set {
                this.SetElement(listOfFilesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (listOfFormats, listOfFiles, listOfMeasurements)
        /// </para>
        /// </summary>
        public virtual listOfMeasurementsLocalType listOfMeasurements {
            get {
                XElement x = this.GetElement(listOfMeasurementsXName);
                return ((listOfMeasurementsLocalType)(x));
            }
            set {
                this.SetElement(listOfMeasurementsXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static data Load(string xmlFile) {
            return XTypedServices.Load<data>(xmlFile);
        }
        
        public static data Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<data>(xmlFile);
        }
        
        public static data Parse(string xml) {
            return XTypedServices.Parse<data>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<data>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(listOfFormatsXName, typeof(listOfFormatsLocalType));
            localElementDictionary.Add(listOfFilesXName, typeof(listOfFilesLocalType));
            localElementDictionary.Add(listOfMeasurementsXName, typeof(listOfMeasurementsLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (format)
        /// </para>
        /// </summary>
        public partial class listOfFormatsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName formatXName = System.Xml.Linq.XName.Get("format", "http://sbml.org/enzymeml/version1");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("listOfFormats", "http://sbml.org/enzymeml/version1");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator listOfFormatsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<listOfFormatsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static listOfFormatsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(formatXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (format)
            /// </para>
            /// </summary>
            public listOfFormatsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (format)
            /// </para>
            /// </summary>
            public virtual formatLocalType format {
                get {
                    XElement x = this.GetElement(formatXName);
                    return ((formatLocalType)(x));
                }
                set {
                    this.SetElement(formatXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<listOfFormatsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(formatXName, typeof(formatLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (column*)
            /// </para>
            /// </summary>
            public partial class formatLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName columnXName = System.Xml.Linq.XName.Get("column", "http://sbml.org/enzymeml/version1");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<columnLocalType> columnField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("format", "http://sbml.org/enzymeml/version1");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator formatLocalType(XElement xe) { return XTypedServices.ToXTypedElement<formatLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static formatLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(columnXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (column*)
                /// </para>
                /// </summary>
                public formatLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (column*)
                /// </para>
                /// </summary>
                public virtual IList<sbml.org.enzymeml.version1.data.listOfFormatsLocalType.formatLocalType.columnLocalType> column {
                    get {
                        if ((this.columnField == null)) {
                            this.columnField = new XTypedList<columnLocalType>(this, LinqToXsdTypeManager.Instance, columnXName);
                        }
                        return this.columnField;
                    }
                    set {
                        if ((value == null)) {
                            this.columnField = null;
                        }
                        else {
                            if ((this.columnField == null)) {
                                this.columnField = XTypedList<columnLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, columnXName);
                            }
                            else {
                                XTypedServices.SetList<columnLocalType>(this.columnField, value);
                            }
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public virtual string id {
                    get {
                        XAttribute x = this.Attribute(idXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<formatLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(columnXName, typeof(columnLocalType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                public partial class columnLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName unitXName = System.Xml.Linq.XName.Get("unit", "");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName indexXName = System.Xml.Linq.XName.Get("index", "");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName replicaXName = System.Xml.Linq.XName.Get("replica", "");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName speciesXName = System.Xml.Linq.XName.Get("species", "");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName initConcIDXName = System.Xml.Linq.XName.Get("initConcID", "");
                    
                    private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("column", "http://sbml.org/enzymeml/version1");
                    
		public static explicit operator columnLocalType(XElement xe) { return XTypedServices.ToXTypedElement<columnLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    public columnLocalType() {
                    }
                    
                    public virtual string TypedValue {
                        get {
                            XElement x = this.Untyped;
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// </summary>
                    public virtual string type {
                        get {
                            XAttribute x = this.Attribute(typeXName);
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// </summary>
                    public virtual string unit {
                        get {
                            XAttribute x = this.Attribute(unitXName);
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetAttribute(unitXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// </summary>
                    public virtual System.SByte? index {
                        get {
                            XAttribute x = this.Attribute(indexXName);
                            if ((x == null)) {
                                return null;
                            }
                            return XTypedServices.ParseValue<sbyte>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                        }
                        set {
                            this.SetAttribute(indexXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// </summary>
                    public virtual string replica {
                        get {
                            XAttribute x = this.Attribute(replicaXName);
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetAttribute(replicaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// </summary>
                    public virtual string species {
                        get {
                            XAttribute x = this.Attribute(speciesXName);
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetAttribute(speciesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// </summary>
                    public virtual string initConcID {
                        get {
                            XAttribute x = this.Attribute(initConcIDXName);
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetAttribute(initConcIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    System.Xml.Linq.XName IXMetaData.SchemaName {
                        get {
                            return xName;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<columnLocalType>(this);
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return ContentModelEntity.Default;
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (file)
        /// </para>
        /// </summary>
        public partial class listOfFilesLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName fileXName = System.Xml.Linq.XName.Get("file", "http://sbml.org/enzymeml/version1");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("listOfFiles", "http://sbml.org/enzymeml/version1");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator listOfFilesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<listOfFilesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static listOfFilesLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(fileXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (file)
            /// </para>
            /// </summary>
            public listOfFilesLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (file)
            /// </para>
            /// </summary>
            public virtual fileLocalType file {
                get {
                    XElement x = this.GetElement(fileXName);
                    return ((fileLocalType)(x));
                }
                set {
                    this.SetElement(fileXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<listOfFilesLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(fileXName, typeof(fileLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            public partial class fileLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName fileXName = System.Xml.Linq.XName.Get("file", "");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName formatXName = System.Xml.Linq.XName.Get("format", "");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("file", "http://sbml.org/enzymeml/version1");
                
		public static explicit operator fileLocalType(XElement xe) { return XTypedServices.ToXTypedElement<fileLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public fileLocalType() {
                }
                
                public virtual string TypedValue {
                    get {
                        XElement x = this.Untyped;
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public virtual string file {
                    get {
                        XAttribute x = this.Attribute(fileXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(fileXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public virtual string format {
                    get {
                        XAttribute x = this.Attribute(formatXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(formatXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public virtual string id {
                    get {
                        XAttribute x = this.Attribute(idXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<fileLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (measurement)
        /// </para>
        /// </summary>
        public partial class listOfMeasurementsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName measurementXName = System.Xml.Linq.XName.Get("measurement", "http://sbml.org/enzymeml/version1");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("listOfMeasurements", "http://sbml.org/enzymeml/version1");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator listOfMeasurementsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<listOfMeasurementsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static listOfMeasurementsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(measurementXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (measurement)
            /// </para>
            /// </summary>
            public listOfMeasurementsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (measurement)
            /// </para>
            /// </summary>
            public virtual measurementLocalType measurement {
                get {
                    XElement x = this.GetElement(measurementXName);
                    return ((measurementLocalType)(x));
                }
                set {
                    this.SetElement(measurementXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<listOfMeasurementsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(measurementXName, typeof(measurementLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            public partial class measurementLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName fileXName = System.Xml.Linq.XName.Get("file", "");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("measurement", "http://sbml.org/enzymeml/version1");
                
		public static explicit operator measurementLocalType(XElement xe) { return XTypedServices.ToXTypedElement<measurementLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public measurementLocalType() {
                }
                
                public virtual string TypedValue {
                    get {
                        XElement x = this.Untyped;
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public virtual string file {
                    get {
                        XAttribute x = this.Attribute(fileXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(fileXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public virtual string id {
                    get {
                        XAttribute x = this.Attribute(idXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public virtual string name {
                    get {
                        XAttribute x = this.Attribute(nameXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<measurementLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (conditions, replicas)
    /// </para>
    /// </summary>
    public partial class reaction : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName conditionsXName = System.Xml.Linq.XName.Get("conditions", "http://sbml.org/enzymeml/version1");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName replicasXName = System.Xml.Linq.XName.Get("replicas", "http://sbml.org/enzymeml/version1");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("reaction", "http://sbml.org/enzymeml/version1");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator reaction(XElement xe) { return XTypedServices.ToXTypedElement<reaction>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static reaction() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(conditionsXName), new NamedContentModelEntity(replicasXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (conditions, replicas)
        /// </para>
        /// </summary>
        public reaction() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (conditions, replicas)
        /// </para>
        /// </summary>
        public virtual conditionsLocalType conditions {
            get {
                XElement x = this.GetElement(conditionsXName);
                return ((conditionsLocalType)(x));
            }
            set {
                this.SetElement(conditionsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (conditions, replicas)
        /// </para>
        /// </summary>
        public virtual replicasLocalType replicas {
            get {
                XElement x = this.GetElement(replicasXName);
                return ((replicasLocalType)(x));
            }
            set {
                this.SetElement(replicasXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static reaction Load(string xmlFile) {
            return XTypedServices.Load<reaction>(xmlFile);
        }
        
        public static reaction Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<reaction>(xmlFile);
        }
        
        public static reaction Parse(string xml) {
            return XTypedServices.Parse<reaction>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<reaction>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(conditionsXName, typeof(conditionsLocalType));
            localElementDictionary.Add(replicasXName, typeof(replicasLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (temperature, ph)
        /// </para>
        /// </summary>
        public partial class conditionsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName temperatureXName = System.Xml.Linq.XName.Get("temperature", "http://sbml.org/enzymeml/version1");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName phXName = System.Xml.Linq.XName.Get("ph", "http://sbml.org/enzymeml/version1");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("conditions", "http://sbml.org/enzymeml/version1");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator conditionsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<conditionsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static conditionsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(temperatureXName), new NamedContentModelEntity(phXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (temperature, ph)
            /// </para>
            /// </summary>
            public conditionsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (temperature, ph)
            /// </para>
            /// </summary>
            public virtual temperatureLocalType temperature {
                get {
                    XElement x = this.GetElement(temperatureXName);
                    return ((temperatureLocalType)(x));
                }
                set {
                    this.SetElement(temperatureXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (temperature, ph)
            /// </para>
            /// </summary>
            public virtual phLocalType ph {
                get {
                    XElement x = this.GetElement(phXName);
                    return ((phLocalType)(x));
                }
                set {
                    this.SetElement(phXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<conditionsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(temperatureXName, typeof(temperatureLocalType));
                localElementDictionary.Add(phXName, typeof(phLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            public partial class temperatureLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName valueXName = System.Xml.Linq.XName.Get("value", "");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName unitXName = System.Xml.Linq.XName.Get("unit", "");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("temperature", "http://sbml.org/enzymeml/version1");
                
		public static explicit operator temperatureLocalType(XElement xe) { return XTypedServices.ToXTypedElement<temperatureLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public temperatureLocalType() {
                }
                
                public virtual string TypedValue {
                    get {
                        XElement x = this.Untyped;
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public virtual System.Single? value {
                    get {
                        XAttribute x = this.Attribute(valueXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                    set {
                        this.SetAttribute(valueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public virtual string unit {
                    get {
                        XAttribute x = this.Attribute(unitXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(unitXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<temperatureLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
            
            public partial class phLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName valueXName = System.Xml.Linq.XName.Get("value", "");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ph", "http://sbml.org/enzymeml/version1");
                
		public static explicit operator phLocalType(XElement xe) { return XTypedServices.ToXTypedElement<phLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public phLocalType() {
                }
                
                public virtual string TypedValue {
                    get {
                        XElement x = this.Untyped;
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public virtual System.Single? value {
                    get {
                        XAttribute x = this.Attribute(valueXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                    set {
                        this.SetAttribute(valueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<phLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (replica*)
        /// </para>
        /// </summary>
        public partial class replicasLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName replicaXName = System.Xml.Linq.XName.Get("replica", "http://sbml.org/enzymeml/version1");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<replicaLocalType> replicaField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("replicas", "http://sbml.org/enzymeml/version1");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator replicasLocalType(XElement xe) { return XTypedServices.ToXTypedElement<replicasLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static replicasLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(replicaXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (replica*)
            /// </para>
            /// </summary>
            public replicasLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (replica*)
            /// </para>
            /// </summary>
            public virtual IList<sbml.org.enzymeml.version1.reaction.replicasLocalType.replicaLocalType> replica {
                get {
                    if ((this.replicaField == null)) {
                        this.replicaField = new XTypedList<replicaLocalType>(this, LinqToXsdTypeManager.Instance, replicaXName);
                    }
                    return this.replicaField;
                }
                set {
                    if ((value == null)) {
                        this.replicaField = null;
                    }
                    else {
                        if ((this.replicaField == null)) {
                            this.replicaField = XTypedList<replicaLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, replicaXName);
                        }
                        else {
                            XTypedServices.SetList<replicaLocalType>(this.replicaField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<replicasLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(replicaXName, typeof(replicaLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            public partial class replicaLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName measurementXName = System.Xml.Linq.XName.Get("measurement", "");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName replicaXName = System.Xml.Linq.XName.Get("replica", "");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("replica", "http://sbml.org/enzymeml/version1");
                
		public static explicit operator replicaLocalType(XElement xe) { return XTypedServices.ToXTypedElement<replicaLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                public replicaLocalType() {
                }
                
                public virtual string TypedValue {
                    get {
                        XElement x = this.Untyped;
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public virtual string measurement {
                    get {
                        XAttribute x = this.Attribute(measurementXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(measurementXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// </summary>
                public virtual string replica {
                    get {
                        XAttribute x = this.Attribute(replicaXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetAttribute(replicaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<replicaLocalType>(this);
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return ContentModelEntity.Default;
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (initConc*)
    /// </para>
    /// </summary>
    public partial class initConcs : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName initConcXName = System.Xml.Linq.XName.Get("initConc", "http://sbml.org/enzymeml/version1");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<initConcLocalType> initConcField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("initConcs", "http://sbml.org/enzymeml/version1");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator initConcs(XElement xe) { return XTypedServices.ToXTypedElement<initConcs>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static initConcs() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(initConcXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (initConc*)
        /// </para>
        /// </summary>
        public initConcs() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (initConc*)
        /// </para>
        /// </summary>
        public virtual IList<sbml.org.enzymeml.version1.initConcs.initConcLocalType> initConc {
            get {
                if ((this.initConcField == null)) {
                    this.initConcField = new XTypedList<initConcLocalType>(this, LinqToXsdTypeManager.Instance, initConcXName);
                }
                return this.initConcField;
            }
            set {
                if ((value == null)) {
                    this.initConcField = null;
                }
                else {
                    if ((this.initConcField == null)) {
                        this.initConcField = XTypedList<initConcLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, initConcXName);
                    }
                    else {
                        XTypedServices.SetList<initConcLocalType>(this.initConcField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static initConcs Load(string xmlFile) {
            return XTypedServices.Load<initConcs>(xmlFile);
        }
        
        public static initConcs Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<initConcs>(xmlFile);
        }
        
        public static initConcs Parse(string xml) {
            return XTypedServices.Parse<initConcs>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<initConcs>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(initConcXName, typeof(initConcLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        public partial class initConcLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName valueXName = System.Xml.Linq.XName.Get("value", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName unitXName = System.Xml.Linq.XName.Get("unit", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("initConc", "http://sbml.org/enzymeml/version1");
            
		public static explicit operator initConcLocalType(XElement xe) { return XTypedServices.ToXTypedElement<initConcLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            public initConcLocalType() {
            }
            
            public virtual string TypedValue {
                get {
                    XElement x = this.Untyped;
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public virtual string id {
                get {
                    XAttribute x = this.Attribute(idXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public virtual System.Single? value {
                get {
                    XAttribute x = this.Attribute(valueXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
                set {
                    this.SetAttribute(valueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// </summary>
            public virtual string unit {
                get {
                    XAttribute x = this.Attribute(unitXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetAttribute(unitXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<initConcLocalType>(this);
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return ContentModelEntity.Default;
            }
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> elementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildElementDictionary();
        }
        
        private LinqToXsdTypeManager() {
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return XTypedServices.EmptyDictionary;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(System.Xml.Linq.XName.Get("references", "http://sbml.org/enzymeml/version1"), typeof(global::sbml.org.enzymeml.version1.references));
            elementDictionary.Add(System.Xml.Linq.XName.Get("protein", "http://sbml.org/enzymeml/version1"), typeof(global::sbml.org.enzymeml.version1.protein));
            elementDictionary.Add(System.Xml.Linq.XName.Get("reactant", "http://sbml.org/enzymeml/version1"), typeof(global::sbml.org.enzymeml.version1.reactant));
            elementDictionary.Add(System.Xml.Linq.XName.Get("data", "http://sbml.org/enzymeml/version1"), typeof(global::sbml.org.enzymeml.version1.data));
            elementDictionary.Add(System.Xml.Linq.XName.Get("reaction", "http://sbml.org/enzymeml/version1"), typeof(global::sbml.org.enzymeml.version1.reaction));
            elementDictionary.Add(System.Xml.Linq.XName.Get("initConcs", "http://sbml.org/enzymeml/version1"), typeof(global::sbml.org.enzymeml.version1.initConcs));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[System.Xml.Linq.XName.Get("references", "http://sbml.org/enzymeml/version1")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public references references {  get {return rootObject as references; } }

		public protein protein {  get {return rootObject as protein; } }

		public reactant reactant {  get {return rootObject as reactant; } }

		public data data {  get {return rootObject as data; } }

		public reaction reaction {  get {return rootObject as reaction; } }

		public initConcs initConcs {  get {return rootObject as initConcs; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(references root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(protein root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(reactant root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(data root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(reaction root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(initConcs root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public global::sbml.org.enzymeml.version1.references references {  get {return rootObject as global::sbml.org.enzymeml.version1.references; } }

		public global::sbml.org.enzymeml.version1.protein protein {  get {return rootObject as global::sbml.org.enzymeml.version1.protein; } }

		public global::sbml.org.enzymeml.version1.reactant reactant {  get {return rootObject as global::sbml.org.enzymeml.version1.reactant; } }

		public global::sbml.org.enzymeml.version1.data data {  get {return rootObject as global::sbml.org.enzymeml.version1.data; } }

		public global::sbml.org.enzymeml.version1.reaction reaction {  get {return rootObject as global::sbml.org.enzymeml.version1.reaction; } }

		public global::sbml.org.enzymeml.version1.initConcs initConcs {  get {return rootObject as global::sbml.org.enzymeml.version1.initConcs; } }
        
        private XRoot() {
        }
        
        public XRoot(global::sbml.org.enzymeml.version1.references root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::sbml.org.enzymeml.version1.protein root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::sbml.org.enzymeml.version1.reactant root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::sbml.org.enzymeml.version1.data root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::sbml.org.enzymeml.version1.reaction root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::sbml.org.enzymeml.version1.initConcs root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
