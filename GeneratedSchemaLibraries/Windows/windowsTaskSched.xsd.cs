//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Windows.Mit.Task {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    
    public sealed class nonEmptyString {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(2)), null, 0, 0, null, null, 0, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private nonEmptyString() {
        }
    }
    
    public sealed class pathType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 260, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private pathType() {
        }
    }
    
    public sealed class versionType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d+(\\.\\d+){1,3}"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private versionType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (RegistrationInfo?, Triggers?, Settings?, Data?, Principals?, Actions)
    /// </para>
    /// </summary>
    public partial class taskType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RegistrationInfoXName = System.Xml.Linq.XName.Get("RegistrationInfo", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TriggersXName = System.Xml.Linq.XName.Get("Triggers", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SettingsXName = System.Xml.Linq.XName.Get("Settings", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DataXName = System.Xml.Linq.XName.Get("Data", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PrincipalsXName = System.Xml.Linq.XName.Get("Principals", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ActionsXName = System.Xml.Linq.XName.Get("Actions", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName versionXName = System.Xml.Linq.XName.Get("version", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string versionFixedValue = "1.3";
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("taskType", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator taskType(XElement xe) { return XTypedServices.ToXTypedElement<taskType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static taskType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (RegistrationInfo?, Triggers?, Settings?, Data?, Principals?, Actions)
        /// </para>
        /// </summary>
        public taskType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RegistrationInfo?, Triggers?, Settings?, Data?, Principals?, Actions)
        /// </para>
        /// </summary>
        public virtual registrationInfoType RegistrationInfo {
            get {
                XElement x = this.GetElement(RegistrationInfoXName);
                return ((registrationInfoType)(x));
            }
            set {
                this.SetElement(RegistrationInfoXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RegistrationInfo?, Triggers?, Settings?, Data?, Principals?, Actions)
        /// </para>
        /// </summary>
        public virtual triggersType Triggers {
            get {
                XElement x = this.GetElement(TriggersXName);
                return ((triggersType)(x));
            }
            set {
                this.SetElement(TriggersXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RegistrationInfo?, Triggers?, Settings?, Data?, Principals?, Actions)
        /// </para>
        /// </summary>
        public virtual settingsType Settings {
            get {
                XElement x = this.GetElement(SettingsXName);
                return ((settingsType)(x));
            }
            set {
                this.SetElement(SettingsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RegistrationInfo?, Triggers?, Settings?, Data?, Principals?, Actions)
        /// </para>
        /// </summary>
        public virtual dataType Data {
            get {
                XElement x = this.GetElement(DataXName);
                return ((dataType)(x));
            }
            set {
                this.SetElement(DataXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RegistrationInfo?, Triggers?, Settings?, Data?, Principals?, Actions)
        /// </para>
        /// </summary>
        public virtual principalsType Principals {
            get {
                XElement x = this.GetElement(PrincipalsXName);
                return ((principalsType)(x));
            }
            set {
                this.SetElement(PrincipalsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RegistrationInfo?, Triggers?, Settings?, Data?, Principals?, Actions)
        /// </para>
        /// </summary>
        public virtual actionsType Actions {
            get {
                XElement x = this.GetElement(ActionsXName);
                return ((actionsType)(x));
            }
            set {
                this.SetElement(ActionsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string version {
            get {
                return versionFixedValue;
            }
            set {
                if (value.Equals(versionFixedValue)) {
                }
                else {
                    throw new Xml.Schema.Linq.LinqToXsdFixedValueException(value, versionFixedValue);
                }
                this.SetAttribute(versionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<taskType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RegistrationInfoXName, typeof(registrationInfoType));
            localElementDictionary.Add(TriggersXName, typeof(triggersType));
            localElementDictionary.Add(SettingsXName, typeof(settingsType));
            localElementDictionary.Add(DataXName, typeof(dataType));
            localElementDictionary.Add(PrincipalsXName, typeof(principalsType));
            localElementDictionary.Add(ActionsXName, typeof(actionsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (URI?, SecurityDescriptor?, Source?, Date?, Author?, Version?, Description?, Documentation?)
    /// </para>
    /// </summary>
    public partial class registrationInfoType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName URIXName = System.Xml.Linq.XName.Get("URI", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SecurityDescriptorXName = System.Xml.Linq.XName.Get("SecurityDescriptor", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SourceXName = System.Xml.Linq.XName.Get("Source", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DateXName = System.Xml.Linq.XName.Get("Date", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AuthorXName = System.Xml.Linq.XName.Get("Author", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VersionXName = System.Xml.Linq.XName.Get("Version", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DescriptionXName = System.Xml.Linq.XName.Get("Description", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DocumentationXName = System.Xml.Linq.XName.Get("Documentation", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("registrationInfoType", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator registrationInfoType(XElement xe) { return XTypedServices.ToXTypedElement<registrationInfoType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static registrationInfoType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (URI?, SecurityDescriptor?, Source?, Date?, Author?, Version?, Description?, Documentation?)
        /// </para>
        /// </summary>
        public registrationInfoType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URI?, SecurityDescriptor?, Source?, Date?, Author?, Version?, Description?, Documentation?)
        /// </para>
        /// </summary>
        public virtual System.Uri URI {
            get {
                XElement x = this.GetElement(URIXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(URIXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URI?, SecurityDescriptor?, Source?, Date?, Author?, Version?, Description?, Documentation?)
        /// </para>
        /// </summary>
        public virtual string SecurityDescriptor {
            get {
                XElement x = this.GetElement(SecurityDescriptorXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(SecurityDescriptorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URI?, SecurityDescriptor?, Source?, Date?, Author?, Version?, Description?, Documentation?)
        /// </para>
        /// </summary>
        public virtual string Source {
            get {
                XElement x = this.GetElement(SourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(SourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URI?, SecurityDescriptor?, Source?, Date?, Author?, Version?, Description?, Documentation?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? Date {
            get {
                XElement x = this.GetElement(DateXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetElement(DateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URI?, SecurityDescriptor?, Source?, Date?, Author?, Version?, Description?, Documentation?)
        /// </para>
        /// </summary>
        public virtual string Author {
            get {
                XElement x = this.GetElement(AuthorXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(AuthorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URI?, SecurityDescriptor?, Source?, Date?, Author?, Version?, Description?, Documentation?)
        /// </para>
        /// </summary>
        public virtual string Version {
            get {
                XElement x = this.GetElement(VersionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(VersionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URI?, SecurityDescriptor?, Source?, Date?, Author?, Version?, Description?, Documentation?)
        /// </para>
        /// </summary>
        public virtual string Description {
            get {
                XElement x = this.GetElement(DescriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(DescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (URI?, SecurityDescriptor?, Source?, Date?, Author?, Version?, Description?, Documentation?)
        /// </para>
        /// </summary>
        public virtual string Documentation {
            get {
                XElement x = this.GetElement(DocumentationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(DocumentationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<registrationInfoType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(URIXName, typeof(System.Uri));
            localElementDictionary.Add(SecurityDescriptorXName, typeof(string));
            localElementDictionary.Add(SourceXName, typeof(string));
            localElementDictionary.Add(DateXName, typeof(System.DateTime));
            localElementDictionary.Add(AuthorXName, typeof(string));
            localElementDictionary.Add(VersionXName, typeof(string));
            localElementDictionary.Add(DescriptionXName, typeof(string));
            localElementDictionary.Add(DocumentationXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (BootTrigger? | RegistrationTrigger? | IdleTrigger? | TimeTrigger? | EventTrigger? | LogonTrigger? | SessionStateChangeTrigger? | CalendarTrigger?)*
    /// </para>
    /// </summary>
    public partial class triggersType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BootTriggerXName = System.Xml.Linq.XName.Get("BootTrigger", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<bootTriggerType> BootTriggerField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RegistrationTriggerXName = System.Xml.Linq.XName.Get("RegistrationTrigger", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<registrationTriggerType> RegistrationTriggerField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdleTriggerXName = System.Xml.Linq.XName.Get("IdleTrigger", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<idleTriggerType> IdleTriggerField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TimeTriggerXName = System.Xml.Linq.XName.Get("TimeTrigger", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<timeTriggerType> TimeTriggerField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EventTriggerXName = System.Xml.Linq.XName.Get("EventTrigger", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<eventTriggerType> EventTriggerField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LogonTriggerXName = System.Xml.Linq.XName.Get("LogonTrigger", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<logonTriggerType> LogonTriggerField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SessionStateChangeTriggerXName = System.Xml.Linq.XName.Get("SessionStateChangeTrigger", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<sessionStateChangeTriggerType> SessionStateChangeTriggerField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CalendarTriggerXName = System.Xml.Linq.XName.Get("CalendarTrigger", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<calendarTriggerType> CalendarTriggerField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("triggersType", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator triggersType(XElement xe) { return XTypedServices.ToXTypedElement<triggersType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static triggersType() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(BootTriggerXName), new NamedContentModelEntity(RegistrationTriggerXName), new NamedContentModelEntity(IdleTriggerXName), new NamedContentModelEntity(TimeTriggerXName), new NamedContentModelEntity(EventTriggerXName), new NamedContentModelEntity(LogonTriggerXName), new NamedContentModelEntity(SessionStateChangeTriggerXName), new NamedContentModelEntity(CalendarTriggerXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (BootTrigger? | RegistrationTrigger? | IdleTrigger? | TimeTrigger? | EventTrigger? | LogonTrigger? | SessionStateChangeTrigger? | CalendarTrigger?)*
        /// </para>
        /// </summary>
        public triggersType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (BootTrigger? | RegistrationTrigger? | IdleTrigger? | TimeTrigger? | EventTrigger? | LogonTrigger? | SessionStateChangeTrigger? | CalendarTrigger?)*
        /// </para>
        /// </summary>
        public virtual IList<bootTriggerType> BootTrigger {
            get {
                if ((this.BootTriggerField == null)) {
                    this.BootTriggerField = new XTypedList<bootTriggerType>(this, LinqToXsdTypeManager.Instance, BootTriggerXName);
                }
                return this.BootTriggerField;
            }
            set {
                if ((value == null)) {
                    this.BootTriggerField = null;
                }
                else {
                    if ((this.BootTriggerField == null)) {
                        this.BootTriggerField = XTypedList<bootTriggerType>.Initialize(this, LinqToXsdTypeManager.Instance, value, BootTriggerXName);
                    }
                    else {
                        XTypedServices.SetList<bootTriggerType>(this.BootTriggerField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (BootTrigger? | RegistrationTrigger? | IdleTrigger? | TimeTrigger? | EventTrigger? | LogonTrigger? | SessionStateChangeTrigger? | CalendarTrigger?)*
        /// </para>
        /// </summary>
        public virtual IList<registrationTriggerType> RegistrationTrigger {
            get {
                if ((this.RegistrationTriggerField == null)) {
                    this.RegistrationTriggerField = new XTypedList<registrationTriggerType>(this, LinqToXsdTypeManager.Instance, RegistrationTriggerXName);
                }
                return this.RegistrationTriggerField;
            }
            set {
                if ((value == null)) {
                    this.RegistrationTriggerField = null;
                }
                else {
                    if ((this.RegistrationTriggerField == null)) {
                        this.RegistrationTriggerField = XTypedList<registrationTriggerType>.Initialize(this, LinqToXsdTypeManager.Instance, value, RegistrationTriggerXName);
                    }
                    else {
                        XTypedServices.SetList<registrationTriggerType>(this.RegistrationTriggerField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (BootTrigger? | RegistrationTrigger? | IdleTrigger? | TimeTrigger? | EventTrigger? | LogonTrigger? | SessionStateChangeTrigger? | CalendarTrigger?)*
        /// </para>
        /// </summary>
        public virtual IList<idleTriggerType> IdleTrigger {
            get {
                if ((this.IdleTriggerField == null)) {
                    this.IdleTriggerField = new XTypedList<idleTriggerType>(this, LinqToXsdTypeManager.Instance, IdleTriggerXName);
                }
                return this.IdleTriggerField;
            }
            set {
                if ((value == null)) {
                    this.IdleTriggerField = null;
                }
                else {
                    if ((this.IdleTriggerField == null)) {
                        this.IdleTriggerField = XTypedList<idleTriggerType>.Initialize(this, LinqToXsdTypeManager.Instance, value, IdleTriggerXName);
                    }
                    else {
                        XTypedServices.SetList<idleTriggerType>(this.IdleTriggerField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (BootTrigger? | RegistrationTrigger? | IdleTrigger? | TimeTrigger? | EventTrigger? | LogonTrigger? | SessionStateChangeTrigger? | CalendarTrigger?)*
        /// </para>
        /// </summary>
        public virtual IList<timeTriggerType> TimeTrigger {
            get {
                if ((this.TimeTriggerField == null)) {
                    this.TimeTriggerField = new XTypedList<timeTriggerType>(this, LinqToXsdTypeManager.Instance, TimeTriggerXName);
                }
                return this.TimeTriggerField;
            }
            set {
                if ((value == null)) {
                    this.TimeTriggerField = null;
                }
                else {
                    if ((this.TimeTriggerField == null)) {
                        this.TimeTriggerField = XTypedList<timeTriggerType>.Initialize(this, LinqToXsdTypeManager.Instance, value, TimeTriggerXName);
                    }
                    else {
                        XTypedServices.SetList<timeTriggerType>(this.TimeTriggerField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (BootTrigger? | RegistrationTrigger? | IdleTrigger? | TimeTrigger? | EventTrigger? | LogonTrigger? | SessionStateChangeTrigger? | CalendarTrigger?)*
        /// </para>
        /// </summary>
        public virtual IList<eventTriggerType> EventTrigger {
            get {
                if ((this.EventTriggerField == null)) {
                    this.EventTriggerField = new XTypedList<eventTriggerType>(this, LinqToXsdTypeManager.Instance, EventTriggerXName);
                }
                return this.EventTriggerField;
            }
            set {
                if ((value == null)) {
                    this.EventTriggerField = null;
                }
                else {
                    if ((this.EventTriggerField == null)) {
                        this.EventTriggerField = XTypedList<eventTriggerType>.Initialize(this, LinqToXsdTypeManager.Instance, value, EventTriggerXName);
                    }
                    else {
                        XTypedServices.SetList<eventTriggerType>(this.EventTriggerField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (BootTrigger? | RegistrationTrigger? | IdleTrigger? | TimeTrigger? | EventTrigger? | LogonTrigger? | SessionStateChangeTrigger? | CalendarTrigger?)*
        /// </para>
        /// </summary>
        public virtual IList<logonTriggerType> LogonTrigger {
            get {
                if ((this.LogonTriggerField == null)) {
                    this.LogonTriggerField = new XTypedList<logonTriggerType>(this, LinqToXsdTypeManager.Instance, LogonTriggerXName);
                }
                return this.LogonTriggerField;
            }
            set {
                if ((value == null)) {
                    this.LogonTriggerField = null;
                }
                else {
                    if ((this.LogonTriggerField == null)) {
                        this.LogonTriggerField = XTypedList<logonTriggerType>.Initialize(this, LinqToXsdTypeManager.Instance, value, LogonTriggerXName);
                    }
                    else {
                        XTypedServices.SetList<logonTriggerType>(this.LogonTriggerField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (BootTrigger? | RegistrationTrigger? | IdleTrigger? | TimeTrigger? | EventTrigger? | LogonTrigger? | SessionStateChangeTrigger? | CalendarTrigger?)*
        /// </para>
        /// </summary>
        public virtual IList<sessionStateChangeTriggerType> SessionStateChangeTrigger {
            get {
                if ((this.SessionStateChangeTriggerField == null)) {
                    this.SessionStateChangeTriggerField = new XTypedList<sessionStateChangeTriggerType>(this, LinqToXsdTypeManager.Instance, SessionStateChangeTriggerXName);
                }
                return this.SessionStateChangeTriggerField;
            }
            set {
                if ((value == null)) {
                    this.SessionStateChangeTriggerField = null;
                }
                else {
                    if ((this.SessionStateChangeTriggerField == null)) {
                        this.SessionStateChangeTriggerField = XTypedList<sessionStateChangeTriggerType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SessionStateChangeTriggerXName);
                    }
                    else {
                        XTypedServices.SetList<sessionStateChangeTriggerType>(this.SessionStateChangeTriggerField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (BootTrigger? | RegistrationTrigger? | IdleTrigger? | TimeTrigger? | EventTrigger? | LogonTrigger? | SessionStateChangeTrigger? | CalendarTrigger?)*
        /// </para>
        /// </summary>
        public virtual IList<calendarTriggerType> CalendarTrigger {
            get {
                if ((this.CalendarTriggerField == null)) {
                    this.CalendarTriggerField = new XTypedList<calendarTriggerType>(this, LinqToXsdTypeManager.Instance, CalendarTriggerXName);
                }
                return this.CalendarTriggerField;
            }
            set {
                if ((value == null)) {
                    this.CalendarTriggerField = null;
                }
                else {
                    if ((this.CalendarTriggerField == null)) {
                        this.CalendarTriggerField = XTypedList<calendarTriggerType>.Initialize(this, LinqToXsdTypeManager.Instance, value, CalendarTriggerXName);
                    }
                    else {
                        XTypedServices.SetList<calendarTriggerType>(this.CalendarTriggerField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<triggersType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(BootTriggerXName, typeof(bootTriggerType));
            localElementDictionary.Add(RegistrationTriggerXName, typeof(registrationTriggerType));
            localElementDictionary.Add(IdleTriggerXName, typeof(idleTriggerType));
            localElementDictionary.Add(TimeTriggerXName, typeof(timeTriggerType));
            localElementDictionary.Add(EventTriggerXName, typeof(eventTriggerType));
            localElementDictionary.Add(LogonTriggerXName, typeof(logonTriggerType));
            localElementDictionary.Add(SessionStateChangeTriggerXName, typeof(sessionStateChangeTriggerType));
            localElementDictionary.Add(CalendarTriggerXName, typeof(calendarTriggerType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Enabled?, StartBoundary?, EndBoundary?, Repetition?, ExecutionTimeLimit?)
    /// </para>
    /// </summary>
    public abstract partial class triggerBaseType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EnabledXName = System.Xml.Linq.XName.Get("Enabled", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StartBoundaryXName = System.Xml.Linq.XName.Get("StartBoundary", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EndBoundaryXName = System.Xml.Linq.XName.Get("EndBoundary", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RepetitionXName = System.Xml.Linq.XName.Get("Repetition", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExecutionTimeLimitXName = System.Xml.Linq.XName.Get("ExecutionTimeLimit", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("triggerBaseType", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator triggerBaseType(XElement xe) {  return (triggerBaseType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static triggerBaseType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(EnabledXName), new NamedContentModelEntity(StartBoundaryXName), new NamedContentModelEntity(EndBoundaryXName), new NamedContentModelEntity(RepetitionXName), new NamedContentModelEntity(ExecutionTimeLimitXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Enabled?, StartBoundary?, EndBoundary?, Repetition?, ExecutionTimeLimit?)
        /// </para>
        /// </summary>
        public triggerBaseType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Enabled?, StartBoundary?, EndBoundary?, Repetition?, ExecutionTimeLimit?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? Enabled {
            get {
                XElement x = this.GetElement(EnabledXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(EnabledXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Enabled?, StartBoundary?, EndBoundary?, Repetition?, ExecutionTimeLimit?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? StartBoundary {
            get {
                XElement x = this.GetElement(StartBoundaryXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetElement(StartBoundaryXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Enabled?, StartBoundary?, EndBoundary?, Repetition?, ExecutionTimeLimit?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? EndBoundary {
            get {
                XElement x = this.GetElement(EndBoundaryXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetElement(EndBoundaryXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Enabled?, StartBoundary?, EndBoundary?, Repetition?, ExecutionTimeLimit?)
        /// </para>
        /// </summary>
        public virtual repetitionType Repetition {
            get {
                XElement x = this.GetElement(RepetitionXName);
                return ((repetitionType)(x));
            }
            set {
                this.SetElement(RepetitionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Enabled?, StartBoundary?, EndBoundary?, Repetition?, ExecutionTimeLimit?)
        /// </para>
        /// </summary>
        public virtual System.TimeSpan? ExecutionTimeLimit {
            get {
                XElement x = this.GetElement(ExecutionTimeLimitXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElement(ExecutionTimeLimitXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(EnabledXName, typeof(bool));
            localElementDictionary.Add(StartBoundaryXName, typeof(System.DateTime));
            localElementDictionary.Add(EndBoundaryXName, typeof(System.DateTime));
            localElementDictionary.Add(RepetitionXName, typeof(repetitionType));
            localElementDictionary.Add(ExecutionTimeLimitXName, typeof(System.TimeSpan));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Interval, Duration?, StopAtDurationEnd?)
    /// </para>
    /// </summary>
    public partial class repetitionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IntervalXName = System.Xml.Linq.XName.Get("Interval", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DurationXName = System.Xml.Linq.XName.Get("Duration", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StopAtDurationEndXName = System.Xml.Linq.XName.Get("StopAtDurationEnd", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("repetitionType", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator repetitionType(XElement xe) { return XTypedServices.ToXTypedElement<repetitionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static repetitionType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Interval, Duration?, StopAtDurationEnd?)
        /// </para>
        /// </summary>
        public repetitionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Interval, Duration?, StopAtDurationEnd?)
        /// </para>
        /// </summary>
        public virtual System.TimeSpan Interval {
            get {
                XElement x = this.GetElement(IntervalXName);
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElementWithValidation(IntervalXName, value, "Interval", IntervalLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Interval, Duration?, StopAtDurationEnd?)
        /// </para>
        /// </summary>
        public virtual System.TimeSpan? Duration {
            get {
                XElement x = this.GetElement(DurationXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(DurationXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                }
                else {
                    this.SetElementWithValidation(DurationXName, value, "Duration", DurationLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Interval, Duration?, StopAtDurationEnd?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? StopAtDurationEnd {
            get {
                XElement x = this.GetElement(StopAtDurationEndXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(StopAtDurationEndXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<repetitionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(IntervalXName, typeof(System.TimeSpan));
            localElementDictionary.Add(DurationXName, typeof(System.TimeSpan));
            localElementDictionary.Add(StopAtDurationEndXName, typeof(bool));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        private class IntervalLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.TimeSpan(26784000000000), 0, null, new System.TimeSpan(600000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
            
            private IntervalLocalType() {
            }
        }
        
        private class DurationLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(256)), null, 0, 0, null, null, 0, null, new System.TimeSpan(600000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
            
            private DurationLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Enabled?, StartBoundary?, EndBoundary?, Repetition?, ExecutionTimeLimit?, Delay?)
    /// </para>
    /// </summary>
    public partial class bootTriggerType : global::Microsoft.Windows.Mit.Task.triggerBaseType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DelayXName = System.Xml.Linq.XName.Get("Delay", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("bootTriggerType", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator bootTriggerType(XElement xe) { return XTypedServices.ToXTypedElement<bootTriggerType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static bootTriggerType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(EnabledXName), new NamedContentModelEntity(StartBoundaryXName), new NamedContentModelEntity(EndBoundaryXName), new NamedContentModelEntity(RepetitionXName), new NamedContentModelEntity(ExecutionTimeLimitXName), new NamedContentModelEntity(DelayXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Enabled?, StartBoundary?, EndBoundary?, Repetition?, ExecutionTimeLimit?, Delay?)
        /// </para>
        /// </summary>
        public bootTriggerType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Enabled?, StartBoundary?, EndBoundary?, Repetition?, ExecutionTimeLimit?, Delay?)
        /// </para>
        /// </summary>
        public virtual System.TimeSpan? Delay {
            get {
                XElement x = this.GetElement(DelayXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElement(DelayXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<bootTriggerType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(EnabledXName, typeof(bool));
            localElementDictionary.Add(StartBoundaryXName, typeof(System.DateTime));
            localElementDictionary.Add(EndBoundaryXName, typeof(System.DateTime));
            localElementDictionary.Add(RepetitionXName, typeof(repetitionType));
            localElementDictionary.Add(ExecutionTimeLimitXName, typeof(System.TimeSpan));
            localElementDictionary.Add(DelayXName, typeof(System.TimeSpan));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Enabled?, StartBoundary?, EndBoundary?, Repetition?, ExecutionTimeLimit?, Delay?)
    /// </para>
    /// </summary>
    public partial class registrationTriggerType : global::Microsoft.Windows.Mit.Task.triggerBaseType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DelayXName = System.Xml.Linq.XName.Get("Delay", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("registrationTriggerType", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator registrationTriggerType(XElement xe) { return XTypedServices.ToXTypedElement<registrationTriggerType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static registrationTriggerType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(EnabledXName), new NamedContentModelEntity(StartBoundaryXName), new NamedContentModelEntity(EndBoundaryXName), new NamedContentModelEntity(RepetitionXName), new NamedContentModelEntity(ExecutionTimeLimitXName), new NamedContentModelEntity(DelayXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Enabled?, StartBoundary?, EndBoundary?, Repetition?, ExecutionTimeLimit?, Delay?)
        /// </para>
        /// </summary>
        public registrationTriggerType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Enabled?, StartBoundary?, EndBoundary?, Repetition?, ExecutionTimeLimit?, Delay?)
        /// </para>
        /// </summary>
        public virtual System.TimeSpan? Delay {
            get {
                XElement x = this.GetElement(DelayXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElement(DelayXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<registrationTriggerType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(EnabledXName, typeof(bool));
            localElementDictionary.Add(StartBoundaryXName, typeof(System.DateTime));
            localElementDictionary.Add(EndBoundaryXName, typeof(System.DateTime));
            localElementDictionary.Add(RepetitionXName, typeof(repetitionType));
            localElementDictionary.Add(ExecutionTimeLimitXName, typeof(System.TimeSpan));
            localElementDictionary.Add(DelayXName, typeof(System.TimeSpan));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Enabled?, StartBoundary?, EndBoundary?, Repetition?, ExecutionTimeLimit?)
    /// </para>
    /// </summary>
    public partial class idleTriggerType : global::Microsoft.Windows.Mit.Task.triggerBaseType, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("idleTriggerType", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator idleTriggerType(XElement xe) { return XTypedServices.ToXTypedElement<idleTriggerType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static idleTriggerType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(EnabledXName), new NamedContentModelEntity(StartBoundaryXName), new NamedContentModelEntity(EndBoundaryXName), new NamedContentModelEntity(RepetitionXName), new NamedContentModelEntity(ExecutionTimeLimitXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Enabled?, StartBoundary?, EndBoundary?, Repetition?, ExecutionTimeLimit?)
        /// </para>
        /// </summary>
        public idleTriggerType() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<idleTriggerType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(EnabledXName, typeof(bool));
            localElementDictionary.Add(StartBoundaryXName, typeof(System.DateTime));
            localElementDictionary.Add(EndBoundaryXName, typeof(System.DateTime));
            localElementDictionary.Add(RepetitionXName, typeof(repetitionType));
            localElementDictionary.Add(ExecutionTimeLimitXName, typeof(System.TimeSpan));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Enabled?, StartBoundary?, EndBoundary?, Repetition?, ExecutionTimeLimit?, RandomDelay?)
    /// </para>
    /// </summary>
    public partial class timeTriggerType : global::Microsoft.Windows.Mit.Task.triggerBaseType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RandomDelayXName = System.Xml.Linq.XName.Get("RandomDelay", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("timeTriggerType", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator timeTriggerType(XElement xe) { return XTypedServices.ToXTypedElement<timeTriggerType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static timeTriggerType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(EnabledXName), new NamedContentModelEntity(StartBoundaryXName), new NamedContentModelEntity(EndBoundaryXName), new NamedContentModelEntity(RepetitionXName), new NamedContentModelEntity(ExecutionTimeLimitXName), new NamedContentModelEntity(RandomDelayXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Enabled?, StartBoundary?, EndBoundary?, Repetition?, ExecutionTimeLimit?, RandomDelay?)
        /// </para>
        /// </summary>
        public timeTriggerType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Enabled?, StartBoundary?, EndBoundary?, Repetition?, ExecutionTimeLimit?, RandomDelay?)
        /// </para>
        /// </summary>
        public virtual System.TimeSpan? RandomDelay {
            get {
                XElement x = this.GetElement(RandomDelayXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElement(RandomDelayXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<timeTriggerType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(EnabledXName, typeof(bool));
            localElementDictionary.Add(StartBoundaryXName, typeof(System.DateTime));
            localElementDictionary.Add(EndBoundaryXName, typeof(System.DateTime));
            localElementDictionary.Add(RepetitionXName, typeof(repetitionType));
            localElementDictionary.Add(ExecutionTimeLimitXName, typeof(System.TimeSpan));
            localElementDictionary.Add(RandomDelayXName, typeof(System.TimeSpan));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Value+)
    /// </para>
    /// </summary>
    public partial class namedValues : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ValueXName = System.Xml.Linq.XName.Get("Value", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<namedValue> ValueField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("namedValues", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator namedValues(XElement xe) { return XTypedServices.ToXTypedElement<namedValues>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static namedValues() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ValueXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Value+)
        /// </para>
        /// </summary>
        public namedValues() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Value+)
        /// </para>
        /// </summary>
        public virtual IList<namedValue> Value {
            get {
                if ((this.ValueField == null)) {
                    this.ValueField = new XTypedList<namedValue>(this, LinqToXsdTypeManager.Instance, ValueXName);
                }
                return this.ValueField;
            }
            set {
                if ((value == null)) {
                    this.ValueField = null;
                }
                else {
                    if ((this.ValueField == null)) {
                        this.ValueField = XTypedList<namedValue>.Initialize(this, LinqToXsdTypeManager.Instance, value, ValueXName);
                    }
                    else {
                        XTypedServices.SetList<namedValue>(this.ValueField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<namedValues>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ValueXName, typeof(namedValue));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class namedValue : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("namedValue", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
		public static explicit operator namedValue(XElement xe) { return XTypedServices.ToXTypedElement<namedValue>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public namedValue() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::Microsoft.Windows.Mit.Task.nonEmptyString.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<namedValue>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Enabled?, StartBoundary?, EndBoundary?, Repetition?, ExecutionTimeLimit?, Subscription, Delay?, PeriodOfOccurrence?, NumberOfOccurrences?, MatchingElement?, ValueQueries?)
    /// </para>
    /// </summary>
    public partial class eventTriggerType : global::Microsoft.Windows.Mit.Task.triggerBaseType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SubscriptionXName = System.Xml.Linq.XName.Get("Subscription", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DelayXName = System.Xml.Linq.XName.Get("Delay", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PeriodOfOccurrenceXName = System.Xml.Linq.XName.Get("PeriodOfOccurrence", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NumberOfOccurrencesXName = System.Xml.Linq.XName.Get("NumberOfOccurrences", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MatchingElementXName = System.Xml.Linq.XName.Get("MatchingElement", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ValueQueriesXName = System.Xml.Linq.XName.Get("ValueQueries", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("eventTriggerType", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator eventTriggerType(XElement xe) { return XTypedServices.ToXTypedElement<eventTriggerType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static eventTriggerType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(EnabledXName), new NamedContentModelEntity(StartBoundaryXName), new NamedContentModelEntity(EndBoundaryXName), new NamedContentModelEntity(RepetitionXName), new NamedContentModelEntity(ExecutionTimeLimitXName), new NamedContentModelEntity(SubscriptionXName), new NamedContentModelEntity(DelayXName), new NamedContentModelEntity(PeriodOfOccurrenceXName), new NamedContentModelEntity(NumberOfOccurrencesXName), new NamedContentModelEntity(MatchingElementXName), new NamedContentModelEntity(ValueQueriesXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Enabled?, StartBoundary?, EndBoundary?, Repetition?, ExecutionTimeLimit?, Subscription, Delay?, PeriodOfOccurrence?, NumberOfOccurrences?, MatchingElement?, ValueQueries?)
        /// </para>
        /// </summary>
        public eventTriggerType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Enabled?, StartBoundary?, EndBoundary?, Repetition?, ExecutionTimeLimit?, Subscription, Delay?, PeriodOfOccurrence?, NumberOfOccurrences?, MatchingElement?, ValueQueries?)
        /// </para>
        /// </summary>
        public virtual string Subscription {
            get {
                XElement x = this.GetElement(SubscriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(SubscriptionXName, value, "Subscription", global::Microsoft.Windows.Mit.Task.nonEmptyString.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Enabled?, StartBoundary?, EndBoundary?, Repetition?, ExecutionTimeLimit?, Subscription, Delay?, PeriodOfOccurrence?, NumberOfOccurrences?, MatchingElement?, ValueQueries?)
        /// </para>
        /// </summary>
        public virtual System.TimeSpan? Delay {
            get {
                XElement x = this.GetElement(DelayXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElement(DelayXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Enabled?, StartBoundary?, EndBoundary?, Repetition?, ExecutionTimeLimit?, Subscription, Delay?, PeriodOfOccurrence?, NumberOfOccurrences?, MatchingElement?, ValueQueries?)
        /// </para>
        /// </summary>
        public virtual System.TimeSpan? PeriodOfOccurrence {
            get {
                XElement x = this.GetElement(PeriodOfOccurrenceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElement(PeriodOfOccurrenceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Enabled?, StartBoundary?, EndBoundary?, Repetition?, ExecutionTimeLimit?, Subscription, Delay?, PeriodOfOccurrence?, NumberOfOccurrences?, MatchingElement?, ValueQueries?)
        /// </para>
        /// </summary>
        public virtual System.Byte? NumberOfOccurrences {
            get {
                XElement x = this.GetElement(NumberOfOccurrencesXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<byte>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.UnsignedByte).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(NumberOfOccurrencesXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.UnsignedByte).Datatype);
                }
                else {
                    this.SetElementWithValidation(NumberOfOccurrencesXName, value, "NumberOfOccurrences", NumberOfOccurrencesLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Enabled?, StartBoundary?, EndBoundary?, Repetition?, ExecutionTimeLimit?, Subscription, Delay?, PeriodOfOccurrence?, NumberOfOccurrences?, MatchingElement?, ValueQueries?)
        /// </para>
        /// </summary>
        public virtual string MatchingElement {
            get {
                XElement x = this.GetElement(MatchingElementXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(MatchingElementXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(MatchingElementXName, value, "MatchingElement", global::Microsoft.Windows.Mit.Task.nonEmptyString.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Enabled?, StartBoundary?, EndBoundary?, Repetition?, ExecutionTimeLimit?, Subscription, Delay?, PeriodOfOccurrence?, NumberOfOccurrences?, MatchingElement?, ValueQueries?)
        /// </para>
        /// </summary>
        public virtual namedValues ValueQueries {
            get {
                XElement x = this.GetElement(ValueQueriesXName);
                return ((namedValues)(x));
            }
            set {
                this.SetElement(ValueQueriesXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<eventTriggerType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(EnabledXName, typeof(bool));
            localElementDictionary.Add(StartBoundaryXName, typeof(System.DateTime));
            localElementDictionary.Add(EndBoundaryXName, typeof(System.DateTime));
            localElementDictionary.Add(RepetitionXName, typeof(repetitionType));
            localElementDictionary.Add(ExecutionTimeLimitXName, typeof(System.TimeSpan));
            localElementDictionary.Add(SubscriptionXName, typeof(string));
            localElementDictionary.Add(DelayXName, typeof(System.TimeSpan));
            localElementDictionary.Add(PeriodOfOccurrenceXName, typeof(System.TimeSpan));
            localElementDictionary.Add(NumberOfOccurrencesXName, typeof(byte));
            localElementDictionary.Add(MatchingElementXName, typeof(string));
            localElementDictionary.Add(ValueQueriesXName, typeof(namedValues));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class NumberOfOccurrencesLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.UnsignedByte), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 32, 0, null, 1, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
            
            private NumberOfOccurrencesLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Enabled?, StartBoundary?, EndBoundary?, Repetition?, ExecutionTimeLimit?, UserId?, Delay?)
    /// </para>
    /// </summary>
    public partial class logonTriggerType : global::Microsoft.Windows.Mit.Task.triggerBaseType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UserIdXName = System.Xml.Linq.XName.Get("UserId", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DelayXName = System.Xml.Linq.XName.Get("Delay", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("logonTriggerType", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator logonTriggerType(XElement xe) { return XTypedServices.ToXTypedElement<logonTriggerType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static logonTriggerType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(EnabledXName), new NamedContentModelEntity(StartBoundaryXName), new NamedContentModelEntity(EndBoundaryXName), new NamedContentModelEntity(RepetitionXName), new NamedContentModelEntity(ExecutionTimeLimitXName), new NamedContentModelEntity(UserIdXName), new NamedContentModelEntity(DelayXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Enabled?, StartBoundary?, EndBoundary?, Repetition?, ExecutionTimeLimit?, UserId?, Delay?)
        /// </para>
        /// </summary>
        public logonTriggerType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Enabled?, StartBoundary?, EndBoundary?, Repetition?, ExecutionTimeLimit?, UserId?, Delay?)
        /// </para>
        /// </summary>
        public virtual string UserId {
            get {
                XElement x = this.GetElement(UserIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(UserIdXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(UserIdXName, value, "UserId", global::Microsoft.Windows.Mit.Task.nonEmptyString.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Enabled?, StartBoundary?, EndBoundary?, Repetition?, ExecutionTimeLimit?, UserId?, Delay?)
        /// </para>
        /// </summary>
        public virtual System.TimeSpan? Delay {
            get {
                XElement x = this.GetElement(DelayXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElement(DelayXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<logonTriggerType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(EnabledXName, typeof(bool));
            localElementDictionary.Add(StartBoundaryXName, typeof(System.DateTime));
            localElementDictionary.Add(EndBoundaryXName, typeof(System.DateTime));
            localElementDictionary.Add(RepetitionXName, typeof(repetitionType));
            localElementDictionary.Add(ExecutionTimeLimitXName, typeof(System.TimeSpan));
            localElementDictionary.Add(UserIdXName, typeof(string));
            localElementDictionary.Add(DelayXName, typeof(System.TimeSpan));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public enum sessionStateChangeType {
        
        ConsoleConnect,
        
        ConsoleDisconnect,
        
        RemoteConnect,
        
        RemoteDisconnect,
        
        SessionLock,
        
        SessionUnlock,
    }
    
    public sealed class sessionStateChangeTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "ConsoleConnect",
                        "ConsoleDisconnect",
                        "RemoteConnect",
                        "RemoteDisconnect",
                        "SessionLock",
                        "SessionUnlock"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private sessionStateChangeTypeValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Enabled?, StartBoundary?, EndBoundary?, Repetition?, ExecutionTimeLimit?, UserId?, Delay?, StateChange)
    /// </para>
    /// </summary>
    public partial class sessionStateChangeTriggerType : global::Microsoft.Windows.Mit.Task.triggerBaseType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UserIdXName = System.Xml.Linq.XName.Get("UserId", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DelayXName = System.Xml.Linq.XName.Get("Delay", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StateChangeXName = System.Xml.Linq.XName.Get("StateChange", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("sessionStateChangeTriggerType", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator sessionStateChangeTriggerType(XElement xe) { return XTypedServices.ToXTypedElement<sessionStateChangeTriggerType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static sessionStateChangeTriggerType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(EnabledXName), new NamedContentModelEntity(StartBoundaryXName), new NamedContentModelEntity(EndBoundaryXName), new NamedContentModelEntity(RepetitionXName), new NamedContentModelEntity(ExecutionTimeLimitXName), new NamedContentModelEntity(UserIdXName), new NamedContentModelEntity(DelayXName), new NamedContentModelEntity(StateChangeXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Enabled?, StartBoundary?, EndBoundary?, Repetition?, ExecutionTimeLimit?, UserId?, Delay?, StateChange)
        /// </para>
        /// </summary>
        public sessionStateChangeTriggerType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Enabled?, StartBoundary?, EndBoundary?, Repetition?, ExecutionTimeLimit?, UserId?, Delay?, StateChange)
        /// </para>
        /// </summary>
        public virtual string UserId {
            get {
                XElement x = this.GetElement(UserIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(UserIdXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(UserIdXName, value, "UserId", global::Microsoft.Windows.Mit.Task.nonEmptyString.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Enabled?, StartBoundary?, EndBoundary?, Repetition?, ExecutionTimeLimit?, UserId?, Delay?, StateChange)
        /// </para>
        /// </summary>
        public virtual System.TimeSpan? Delay {
            get {
                XElement x = this.GetElement(DelayXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElement(DelayXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Enabled?, StartBoundary?, EndBoundary?, Repetition?, ExecutionTimeLimit?, UserId?, Delay?, StateChange)
        /// </para>
        /// </summary>
        public virtual Microsoft.Windows.Mit.Task.sessionStateChangeType StateChange {
            get {
                XElement x = this.GetElement(StateChangeXName);
                return ((Microsoft.Windows.Mit.Task.sessionStateChangeType)(Enum.Parse(typeof(Microsoft.Windows.Mit.Task.sessionStateChangeType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetElementWithValidation(StateChangeXName, value.ToString(), "StateChange", global::Microsoft.Windows.Mit.Task.sessionStateChangeTypeValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<sessionStateChangeTriggerType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(EnabledXName, typeof(bool));
            localElementDictionary.Add(StartBoundaryXName, typeof(System.DateTime));
            localElementDictionary.Add(EndBoundaryXName, typeof(System.DateTime));
            localElementDictionary.Add(RepetitionXName, typeof(repetitionType));
            localElementDictionary.Add(ExecutionTimeLimitXName, typeof(System.TimeSpan));
            localElementDictionary.Add(UserIdXName, typeof(string));
            localElementDictionary.Add(DelayXName, typeof(System.TimeSpan));
            localElementDictionary.Add(StateChangeXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Enabled?, StartBoundary?, EndBoundary?, Repetition?, ExecutionTimeLimit?, RandomDelay?, (ScheduleByDay | ScheduleByWeek | ScheduleByMonth | ScheduleByMonthDayOfWeek))
    /// </para>
    /// </summary>
    public partial class calendarTriggerType : global::Microsoft.Windows.Mit.Task.triggerBaseType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RandomDelayXName = System.Xml.Linq.XName.Get("RandomDelay", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ScheduleByDayXName = System.Xml.Linq.XName.Get("ScheduleByDay", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ScheduleByWeekXName = System.Xml.Linq.XName.Get("ScheduleByWeek", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ScheduleByMonthXName = System.Xml.Linq.XName.Get("ScheduleByMonth", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ScheduleByMonthDayOfWeekXName = System.Xml.Linq.XName.Get("ScheduleByMonthDayOfWeek", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("calendarTriggerType", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator calendarTriggerType(XElement xe) { return XTypedServices.ToXTypedElement<calendarTriggerType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static calendarTriggerType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(EnabledXName), new NamedContentModelEntity(StartBoundaryXName), new NamedContentModelEntity(EndBoundaryXName), new NamedContentModelEntity(RepetitionXName), new NamedContentModelEntity(ExecutionTimeLimitXName), new NamedContentModelEntity(RandomDelayXName), new ChoiceContentModelEntity(new NamedContentModelEntity(ScheduleByDayXName), new NamedContentModelEntity(ScheduleByWeekXName), new NamedContentModelEntity(ScheduleByMonthXName), new NamedContentModelEntity(ScheduleByMonthDayOfWeekXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Enabled?, StartBoundary?, EndBoundary?, Repetition?, ExecutionTimeLimit?, RandomDelay?, (ScheduleByDay | ScheduleByWeek | ScheduleByMonth | ScheduleByMonthDayOfWeek))
        /// </para>
        /// </summary>
        public calendarTriggerType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Enabled?, StartBoundary?, EndBoundary?, Repetition?, ExecutionTimeLimit?, RandomDelay?, (ScheduleByDay | ScheduleByWeek | ScheduleByMonth | ScheduleByMonthDayOfWeek))
        /// </para>
        /// </summary>
        public virtual System.TimeSpan? RandomDelay {
            get {
                XElement x = this.GetElement(RandomDelayXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElement(RandomDelayXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Enabled?, StartBoundary?, EndBoundary?, Repetition?, ExecutionTimeLimit?, RandomDelay?, (ScheduleByDay | ScheduleByWeek | ScheduleByMonth | ScheduleByMonthDayOfWeek))
        /// </para>
        /// </summary>
        public virtual dailyScheduleType ScheduleByDay {
            get {
                XElement x = this.GetElement(ScheduleByDayXName);
                return ((dailyScheduleType)(x));
            }
            set {
                this.SetElement(ScheduleByDayXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Enabled?, StartBoundary?, EndBoundary?, Repetition?, ExecutionTimeLimit?, RandomDelay?, (ScheduleByDay | ScheduleByWeek | ScheduleByMonth | ScheduleByMonthDayOfWeek))
        /// </para>
        /// </summary>
        public virtual weeklyScheduleType ScheduleByWeek {
            get {
                XElement x = this.GetElement(ScheduleByWeekXName);
                return ((weeklyScheduleType)(x));
            }
            set {
                this.SetElement(ScheduleByWeekXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Enabled?, StartBoundary?, EndBoundary?, Repetition?, ExecutionTimeLimit?, RandomDelay?, (ScheduleByDay | ScheduleByWeek | ScheduleByMonth | ScheduleByMonthDayOfWeek))
        /// </para>
        /// </summary>
        public virtual monthlyScheduleType ScheduleByMonth {
            get {
                XElement x = this.GetElement(ScheduleByMonthXName);
                return ((monthlyScheduleType)(x));
            }
            set {
                this.SetElement(ScheduleByMonthXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Enabled?, StartBoundary?, EndBoundary?, Repetition?, ExecutionTimeLimit?, RandomDelay?, (ScheduleByDay | ScheduleByWeek | ScheduleByMonth | ScheduleByMonthDayOfWeek))
        /// </para>
        /// </summary>
        public virtual monthlyDayOfWeekScheduleType ScheduleByMonthDayOfWeek {
            get {
                XElement x = this.GetElement(ScheduleByMonthDayOfWeekXName);
                return ((monthlyDayOfWeekScheduleType)(x));
            }
            set {
                this.SetElement(ScheduleByMonthDayOfWeekXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<calendarTriggerType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(EnabledXName, typeof(bool));
            localElementDictionary.Add(StartBoundaryXName, typeof(System.DateTime));
            localElementDictionary.Add(EndBoundaryXName, typeof(System.DateTime));
            localElementDictionary.Add(RepetitionXName, typeof(repetitionType));
            localElementDictionary.Add(ExecutionTimeLimitXName, typeof(System.TimeSpan));
            localElementDictionary.Add(RandomDelayXName, typeof(System.TimeSpan));
            localElementDictionary.Add(ScheduleByDayXName, typeof(dailyScheduleType));
            localElementDictionary.Add(ScheduleByWeekXName, typeof(weeklyScheduleType));
            localElementDictionary.Add(ScheduleByMonthXName, typeof(monthlyScheduleType));
            localElementDictionary.Add(ScheduleByMonthDayOfWeekXName, typeof(monthlyDayOfWeekScheduleType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (DaysInterval?)
    /// </para>
    /// </summary>
    public partial class dailyScheduleType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DaysIntervalXName = System.Xml.Linq.XName.Get("DaysInterval", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("dailyScheduleType", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator dailyScheduleType(XElement xe) { return XTypedServices.ToXTypedElement<dailyScheduleType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static dailyScheduleType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (DaysInterval?)
        /// </para>
        /// </summary>
        public dailyScheduleType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DaysInterval?)
        /// </para>
        /// </summary>
        public virtual System.UInt32? DaysInterval {
            get {
                XElement x = this.GetElement(DaysIntervalXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<uint>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.UnsignedInt).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(DaysIntervalXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.UnsignedInt).Datatype);
                }
                else {
                    this.SetElementWithValidation(DaysIntervalXName, value, "DaysInterval", DaysIntervalLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<dailyScheduleType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(DaysIntervalXName, typeof(uint));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        private class DaysIntervalLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.UnsignedInt), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 365u, 0, null, 1u, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
            
            private DaysIntervalLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (WeeksInterval?, DaysOfWeek?)
    /// </para>
    /// </summary>
    public partial class weeklyScheduleType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WeeksIntervalXName = System.Xml.Linq.XName.Get("WeeksInterval", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DaysOfWeekXName = System.Xml.Linq.XName.Get("DaysOfWeek", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("weeklyScheduleType", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator weeklyScheduleType(XElement xe) { return XTypedServices.ToXTypedElement<weeklyScheduleType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static weeklyScheduleType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (WeeksInterval?, DaysOfWeek?)
        /// </para>
        /// </summary>
        public weeklyScheduleType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (WeeksInterval?, DaysOfWeek?)
        /// </para>
        /// </summary>
        public virtual System.Byte? WeeksInterval {
            get {
                XElement x = this.GetElement(WeeksIntervalXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<byte>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.UnsignedByte).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(WeeksIntervalXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.UnsignedByte).Datatype);
                }
                else {
                    this.SetElementWithValidation(WeeksIntervalXName, value, "WeeksInterval", WeeksIntervalLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (WeeksInterval?, DaysOfWeek?)
        /// </para>
        /// </summary>
        public virtual daysOfWeekType DaysOfWeek {
            get {
                XElement x = this.GetElement(DaysOfWeekXName);
                return ((daysOfWeekType)(x));
            }
            set {
                this.SetElement(DaysOfWeekXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<weeklyScheduleType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(WeeksIntervalXName, typeof(byte));
            localElementDictionary.Add(DaysOfWeekXName, typeof(daysOfWeekType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        private class WeeksIntervalLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.UnsignedByte), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 52, 0, null, 1, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
            
            private WeeksIntervalLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (DaysOfMonth?, Months?)
    /// </para>
    /// </summary>
    public partial class monthlyScheduleType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DaysOfMonthXName = System.Xml.Linq.XName.Get("DaysOfMonth", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MonthsXName = System.Xml.Linq.XName.Get("Months", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("monthlyScheduleType", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator monthlyScheduleType(XElement xe) { return XTypedServices.ToXTypedElement<monthlyScheduleType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static monthlyScheduleType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (DaysOfMonth?, Months?)
        /// </para>
        /// </summary>
        public monthlyScheduleType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DaysOfMonth?, Months?)
        /// </para>
        /// </summary>
        public virtual daysOfMonthType DaysOfMonth {
            get {
                XElement x = this.GetElement(DaysOfMonthXName);
                return ((daysOfMonthType)(x));
            }
            set {
                this.SetElement(DaysOfMonthXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DaysOfMonth?, Months?)
        /// </para>
        /// </summary>
        public virtual monthsType Months {
            get {
                XElement x = this.GetElement(MonthsXName);
                return ((monthsType)(x));
            }
            set {
                this.SetElement(MonthsXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<monthlyScheduleType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(DaysOfMonthXName, typeof(daysOfMonthType));
            localElementDictionary.Add(MonthsXName, typeof(monthsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Weeks?, DaysOfWeek, Months?)
    /// </para>
    /// </summary>
    public partial class monthlyDayOfWeekScheduleType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WeeksXName = System.Xml.Linq.XName.Get("Weeks", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DaysOfWeekXName = System.Xml.Linq.XName.Get("DaysOfWeek", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MonthsXName = System.Xml.Linq.XName.Get("Months", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("monthlyDayOfWeekScheduleType", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator monthlyDayOfWeekScheduleType(XElement xe) { return XTypedServices.ToXTypedElement<monthlyDayOfWeekScheduleType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static monthlyDayOfWeekScheduleType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Weeks?, DaysOfWeek, Months?)
        /// </para>
        /// </summary>
        public monthlyDayOfWeekScheduleType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Weeks?, DaysOfWeek, Months?)
        /// </para>
        /// </summary>
        public virtual weeksType Weeks {
            get {
                XElement x = this.GetElement(WeeksXName);
                return ((weeksType)(x));
            }
            set {
                this.SetElement(WeeksXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Weeks?, DaysOfWeek, Months?)
        /// </para>
        /// </summary>
        public virtual daysOfWeekType DaysOfWeek {
            get {
                XElement x = this.GetElement(DaysOfWeekXName);
                return ((daysOfWeekType)(x));
            }
            set {
                this.SetElement(DaysOfWeekXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Weeks?, DaysOfWeek, Months?)
        /// </para>
        /// </summary>
        public virtual monthsType Months {
            get {
                XElement x = this.GetElement(MonthsXName);
                return ((monthsType)(x));
            }
            set {
                this.SetElement(MonthsXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<monthlyDayOfWeekScheduleType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(WeeksXName, typeof(weeksType));
            localElementDictionary.Add(DaysOfWeekXName, typeof(daysOfWeekType));
            localElementDictionary.Add(MonthsXName, typeof(monthsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Monday?, Tuesday?, Wednesday?, Thursday?, Friday?, Saturday?, Sunday?)
    /// </para>
    /// </summary>
    public partial class daysOfWeekType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MondayXName = System.Xml.Linq.XName.Get("Monday", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TuesdayXName = System.Xml.Linq.XName.Get("Tuesday", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WednesdayXName = System.Xml.Linq.XName.Get("Wednesday", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ThursdayXName = System.Xml.Linq.XName.Get("Thursday", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FridayXName = System.Xml.Linq.XName.Get("Friday", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SaturdayXName = System.Xml.Linq.XName.Get("Saturday", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SundayXName = System.Xml.Linq.XName.Get("Sunday", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("daysOfWeekType", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator daysOfWeekType(XElement xe) { return XTypedServices.ToXTypedElement<daysOfWeekType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static daysOfWeekType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Monday?, Tuesday?, Wednesday?, Thursday?, Friday?, Saturday?, Sunday?)
        /// </para>
        /// </summary>
        public daysOfWeekType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Monday?, Tuesday?, Wednesday?, Thursday?, Friday?, Saturday?, Sunday?)
        /// </para>
        /// </summary>
        public virtual XTypedElement Monday {
            get {
                XElement x = this.GetElement(MondayXName);
                return ((XTypedElement)(x));
            }
            set {
                this.SetElement(MondayXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Monday?, Tuesday?, Wednesday?, Thursday?, Friday?, Saturday?, Sunday?)
        /// </para>
        /// </summary>
        public virtual XTypedElement Tuesday {
            get {
                XElement x = this.GetElement(TuesdayXName);
                return ((XTypedElement)(x));
            }
            set {
                this.SetElement(TuesdayXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Monday?, Tuesday?, Wednesday?, Thursday?, Friday?, Saturday?, Sunday?)
        /// </para>
        /// </summary>
        public virtual XTypedElement Wednesday {
            get {
                XElement x = this.GetElement(WednesdayXName);
                return ((XTypedElement)(x));
            }
            set {
                this.SetElement(WednesdayXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Monday?, Tuesday?, Wednesday?, Thursday?, Friday?, Saturday?, Sunday?)
        /// </para>
        /// </summary>
        public virtual XTypedElement Thursday {
            get {
                XElement x = this.GetElement(ThursdayXName);
                return ((XTypedElement)(x));
            }
            set {
                this.SetElement(ThursdayXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Monday?, Tuesday?, Wednesday?, Thursday?, Friday?, Saturday?, Sunday?)
        /// </para>
        /// </summary>
        public virtual XTypedElement Friday {
            get {
                XElement x = this.GetElement(FridayXName);
                return ((XTypedElement)(x));
            }
            set {
                this.SetElement(FridayXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Monday?, Tuesday?, Wednesday?, Thursday?, Friday?, Saturday?, Sunday?)
        /// </para>
        /// </summary>
        public virtual XTypedElement Saturday {
            get {
                XElement x = this.GetElement(SaturdayXName);
                return ((XTypedElement)(x));
            }
            set {
                this.SetElement(SaturdayXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Monday?, Tuesday?, Wednesday?, Thursday?, Friday?, Saturday?, Sunday?)
        /// </para>
        /// </summary>
        public virtual XTypedElement Sunday {
            get {
                XElement x = this.GetElement(SundayXName);
                return ((XTypedElement)(x));
            }
            set {
                this.SetElement(SundayXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<daysOfWeekType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(MondayXName, typeof(XTypedElement));
            localElementDictionary.Add(TuesdayXName, typeof(XTypedElement));
            localElementDictionary.Add(WednesdayXName, typeof(XTypedElement));
            localElementDictionary.Add(ThursdayXName, typeof(XTypedElement));
            localElementDictionary.Add(FridayXName, typeof(XTypedElement));
            localElementDictionary.Add(SaturdayXName, typeof(XTypedElement));
            localElementDictionary.Add(SundayXName, typeof(XTypedElement));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (January?, February?, March?, April?, May?, June?, July?, August?, September?, October?, November?, December?)
    /// </para>
    /// </summary>
    public partial class monthsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName JanuaryXName = System.Xml.Linq.XName.Get("January", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FebruaryXName = System.Xml.Linq.XName.Get("February", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MarchXName = System.Xml.Linq.XName.Get("March", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AprilXName = System.Xml.Linq.XName.Get("April", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MayXName = System.Xml.Linq.XName.Get("May", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName JuneXName = System.Xml.Linq.XName.Get("June", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName JulyXName = System.Xml.Linq.XName.Get("July", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AugustXName = System.Xml.Linq.XName.Get("August", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SeptemberXName = System.Xml.Linq.XName.Get("September", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OctoberXName = System.Xml.Linq.XName.Get("October", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NovemberXName = System.Xml.Linq.XName.Get("November", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DecemberXName = System.Xml.Linq.XName.Get("December", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("monthsType", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator monthsType(XElement xe) { return XTypedServices.ToXTypedElement<monthsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static monthsType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (January?, February?, March?, April?, May?, June?, July?, August?, September?, October?, November?, December?)
        /// </para>
        /// </summary>
        public monthsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (January?, February?, March?, April?, May?, June?, July?, August?, September?, October?, November?, December?)
        /// </para>
        /// </summary>
        public virtual XTypedElement January {
            get {
                XElement x = this.GetElement(JanuaryXName);
                return ((XTypedElement)(x));
            }
            set {
                this.SetElement(JanuaryXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (January?, February?, March?, April?, May?, June?, July?, August?, September?, October?, November?, December?)
        /// </para>
        /// </summary>
        public virtual XTypedElement February {
            get {
                XElement x = this.GetElement(FebruaryXName);
                return ((XTypedElement)(x));
            }
            set {
                this.SetElement(FebruaryXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (January?, February?, March?, April?, May?, June?, July?, August?, September?, October?, November?, December?)
        /// </para>
        /// </summary>
        public virtual XTypedElement March {
            get {
                XElement x = this.GetElement(MarchXName);
                return ((XTypedElement)(x));
            }
            set {
                this.SetElement(MarchXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (January?, February?, March?, April?, May?, June?, July?, August?, September?, October?, November?, December?)
        /// </para>
        /// </summary>
        public virtual XTypedElement April {
            get {
                XElement x = this.GetElement(AprilXName);
                return ((XTypedElement)(x));
            }
            set {
                this.SetElement(AprilXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (January?, February?, March?, April?, May?, June?, July?, August?, September?, October?, November?, December?)
        /// </para>
        /// </summary>
        public virtual XTypedElement May {
            get {
                XElement x = this.GetElement(MayXName);
                return ((XTypedElement)(x));
            }
            set {
                this.SetElement(MayXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (January?, February?, March?, April?, May?, June?, July?, August?, September?, October?, November?, December?)
        /// </para>
        /// </summary>
        public virtual XTypedElement June {
            get {
                XElement x = this.GetElement(JuneXName);
                return ((XTypedElement)(x));
            }
            set {
                this.SetElement(JuneXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (January?, February?, March?, April?, May?, June?, July?, August?, September?, October?, November?, December?)
        /// </para>
        /// </summary>
        public virtual XTypedElement July {
            get {
                XElement x = this.GetElement(JulyXName);
                return ((XTypedElement)(x));
            }
            set {
                this.SetElement(JulyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (January?, February?, March?, April?, May?, June?, July?, August?, September?, October?, November?, December?)
        /// </para>
        /// </summary>
        public virtual XTypedElement August {
            get {
                XElement x = this.GetElement(AugustXName);
                return ((XTypedElement)(x));
            }
            set {
                this.SetElement(AugustXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (January?, February?, March?, April?, May?, June?, July?, August?, September?, October?, November?, December?)
        /// </para>
        /// </summary>
        public virtual XTypedElement September {
            get {
                XElement x = this.GetElement(SeptemberXName);
                return ((XTypedElement)(x));
            }
            set {
                this.SetElement(SeptemberXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (January?, February?, March?, April?, May?, June?, July?, August?, September?, October?, November?, December?)
        /// </para>
        /// </summary>
        public virtual XTypedElement October {
            get {
                XElement x = this.GetElement(OctoberXName);
                return ((XTypedElement)(x));
            }
            set {
                this.SetElement(OctoberXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (January?, February?, March?, April?, May?, June?, July?, August?, September?, October?, November?, December?)
        /// </para>
        /// </summary>
        public virtual XTypedElement November {
            get {
                XElement x = this.GetElement(NovemberXName);
                return ((XTypedElement)(x));
            }
            set {
                this.SetElement(NovemberXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (January?, February?, March?, April?, May?, June?, July?, August?, September?, October?, November?, December?)
        /// </para>
        /// </summary>
        public virtual XTypedElement December {
            get {
                XElement x = this.GetElement(DecemberXName);
                return ((XTypedElement)(x));
            }
            set {
                this.SetElement(DecemberXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<monthsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(JanuaryXName, typeof(XTypedElement));
            localElementDictionary.Add(FebruaryXName, typeof(XTypedElement));
            localElementDictionary.Add(MarchXName, typeof(XTypedElement));
            localElementDictionary.Add(AprilXName, typeof(XTypedElement));
            localElementDictionary.Add(MayXName, typeof(XTypedElement));
            localElementDictionary.Add(JuneXName, typeof(XTypedElement));
            localElementDictionary.Add(JulyXName, typeof(XTypedElement));
            localElementDictionary.Add(AugustXName, typeof(XTypedElement));
            localElementDictionary.Add(SeptemberXName, typeof(XTypedElement));
            localElementDictionary.Add(OctoberXName, typeof(XTypedElement));
            localElementDictionary.Add(NovemberXName, typeof(XTypedElement));
            localElementDictionary.Add(DecemberXName, typeof(XTypedElement));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Day*)
    /// </para>
    /// </summary>
    public partial class daysOfMonthType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DayXName = System.Xml.Linq.XName.Get("Day", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> DayField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("daysOfMonthType", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator daysOfMonthType(XElement xe) { return XTypedServices.ToXTypedElement<daysOfMonthType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static daysOfMonthType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DayXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Day*)
        /// </para>
        /// </summary>
        public daysOfMonthType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Day*)
        /// </para>
        /// </summary>
        public virtual IList<string> Day {
            get {
                if ((this.DayField == null)) {
                    this.DayField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, DayXName);
                }
                return this.DayField;
            }
            set {
                if ((value == null)) {
                    this.DayField = null;
                }
                else {
                    if ((this.DayField == null)) {
                        this.DayField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, DayXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.DayField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<daysOfMonthType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(DayXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public sealed class dayOfMonthType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[1-9]|[1-2][0-9]|3[0-1]|Last"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private dayOfMonthType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Week*)
    /// </para>
    /// </summary>
    public partial class weeksType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WeekXName = System.Xml.Linq.XName.Get("Week", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> WeekField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("weeksType", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator weeksType(XElement xe) { return XTypedServices.ToXTypedElement<weeksType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static weeksType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(WeekXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Week*)
        /// </para>
        /// </summary>
        public weeksType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Week*)
        /// </para>
        /// </summary>
        public virtual IList<string> Week {
            get {
                if ((this.WeekField == null)) {
                    this.WeekField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, WeekXName);
                }
                return this.WeekField;
            }
            set {
                if ((value == null)) {
                    this.WeekField = null;
                }
                else {
                    if ((this.WeekField == null)) {
                        this.WeekField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, WeekXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.WeekField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<weeksType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(WeekXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public sealed class weekType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[1-4]|Last"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private weekType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (AllowStartOnDemand?, RestartOnFailure?, MultipleInstancesPolicy?, DisallowStartIfOnBatteries?, StopIfGoingOnBatteries?, AllowHardTerminate?, StartWhenAvailable?, NetworkProfileName?, RunOnlyIfNetworkAvailable?, WakeToRun?, Enabled?, Hidden?, DeleteExpiredTaskAfter?, IdleSettings?, NetworkSettings?, ExecutionTimeLimit?, Priority?, RunOnlyIfIdle?, UseUnifiedSchedulingEngine?, DisallowStartOnRemoteAppSession?)
    /// </para>
    /// </summary>
    public partial class settingsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AllowStartOnDemandXName = System.Xml.Linq.XName.Get("AllowStartOnDemand", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RestartOnFailureXName = System.Xml.Linq.XName.Get("RestartOnFailure", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MultipleInstancesPolicyXName = System.Xml.Linq.XName.Get("MultipleInstancesPolicy", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DisallowStartIfOnBatteriesXName = System.Xml.Linq.XName.Get("DisallowStartIfOnBatteries", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StopIfGoingOnBatteriesXName = System.Xml.Linq.XName.Get("StopIfGoingOnBatteries", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AllowHardTerminateXName = System.Xml.Linq.XName.Get("AllowHardTerminate", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StartWhenAvailableXName = System.Xml.Linq.XName.Get("StartWhenAvailable", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NetworkProfileNameXName = System.Xml.Linq.XName.Get("NetworkProfileName", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RunOnlyIfNetworkAvailableXName = System.Xml.Linq.XName.Get("RunOnlyIfNetworkAvailable", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WakeToRunXName = System.Xml.Linq.XName.Get("WakeToRun", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EnabledXName = System.Xml.Linq.XName.Get("Enabled", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HiddenXName = System.Xml.Linq.XName.Get("Hidden", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DeleteExpiredTaskAfterXName = System.Xml.Linq.XName.Get("DeleteExpiredTaskAfter", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdleSettingsXName = System.Xml.Linq.XName.Get("IdleSettings", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NetworkSettingsXName = System.Xml.Linq.XName.Get("NetworkSettings", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExecutionTimeLimitXName = System.Xml.Linq.XName.Get("ExecutionTimeLimit", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PriorityXName = System.Xml.Linq.XName.Get("Priority", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RunOnlyIfIdleXName = System.Xml.Linq.XName.Get("RunOnlyIfIdle", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UseUnifiedSchedulingEngineXName = System.Xml.Linq.XName.Get("UseUnifiedSchedulingEngine", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DisallowStartOnRemoteAppSessionXName = System.Xml.Linq.XName.Get("DisallowStartOnRemoteAppSession", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("settingsType", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator settingsType(XElement xe) { return XTypedServices.ToXTypedElement<settingsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static settingsType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (AllowStartOnDemand?, RestartOnFailure?, MultipleInstancesPolicy?, DisallowStartIfOnBatteries?, StopIfGoingOnBatteries?, AllowHardTerminate?, StartWhenAvailable?, NetworkProfileName?, RunOnlyIfNetworkAvailable?, WakeToRun?, Enabled?, Hidden?, DeleteExpiredTaskAfter?, IdleSettings?, NetworkSettings?, ExecutionTimeLimit?, Priority?, RunOnlyIfIdle?, UseUnifiedSchedulingEngine?, DisallowStartOnRemoteAppSession?)
        /// </para>
        /// </summary>
        public settingsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AllowStartOnDemand?, RestartOnFailure?, MultipleInstancesPolicy?, DisallowStartIfOnBatteries?, StopIfGoingOnBatteries?, AllowHardTerminate?, StartWhenAvailable?, NetworkProfileName?, RunOnlyIfNetworkAvailable?, WakeToRun?, Enabled?, Hidden?, DeleteExpiredTaskAfter?, IdleSettings?, NetworkSettings?, ExecutionTimeLimit?, Priority?, RunOnlyIfIdle?, UseUnifiedSchedulingEngine?, DisallowStartOnRemoteAppSession?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? AllowStartOnDemand {
            get {
                XElement x = this.GetElement(AllowStartOnDemandXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(AllowStartOnDemandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AllowStartOnDemand?, RestartOnFailure?, MultipleInstancesPolicy?, DisallowStartIfOnBatteries?, StopIfGoingOnBatteries?, AllowHardTerminate?, StartWhenAvailable?, NetworkProfileName?, RunOnlyIfNetworkAvailable?, WakeToRun?, Enabled?, Hidden?, DeleteExpiredTaskAfter?, IdleSettings?, NetworkSettings?, ExecutionTimeLimit?, Priority?, RunOnlyIfIdle?, UseUnifiedSchedulingEngine?, DisallowStartOnRemoteAppSession?)
        /// </para>
        /// </summary>
        public virtual restartType RestartOnFailure {
            get {
                XElement x = this.GetElement(RestartOnFailureXName);
                return ((restartType)(x));
            }
            set {
                this.SetElement(RestartOnFailureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AllowStartOnDemand?, RestartOnFailure?, MultipleInstancesPolicy?, DisallowStartIfOnBatteries?, StopIfGoingOnBatteries?, AllowHardTerminate?, StartWhenAvailable?, NetworkProfileName?, RunOnlyIfNetworkAvailable?, WakeToRun?, Enabled?, Hidden?, DeleteExpiredTaskAfter?, IdleSettings?, NetworkSettings?, ExecutionTimeLimit?, Priority?, RunOnlyIfIdle?, UseUnifiedSchedulingEngine?, DisallowStartOnRemoteAppSession?)
        /// </para>
        /// </summary>
        public virtual Microsoft.Windows.Mit.Task.multipleInstancesPolicyType? MultipleInstancesPolicy {
            get {
                XElement x = this.GetElement(MultipleInstancesPolicyXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Windows.Mit.Task.multipleInstancesPolicyType)(Enum.Parse(typeof(Microsoft.Windows.Mit.Task.multipleInstancesPolicyType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                if (value == null) {
                    this.SetElement(MultipleInstancesPolicyXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(MultipleInstancesPolicyXName, value.ToString(), "MultipleInstancesPolicy", global::Microsoft.Windows.Mit.Task.multipleInstancesPolicyTypeValidator.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AllowStartOnDemand?, RestartOnFailure?, MultipleInstancesPolicy?, DisallowStartIfOnBatteries?, StopIfGoingOnBatteries?, AllowHardTerminate?, StartWhenAvailable?, NetworkProfileName?, RunOnlyIfNetworkAvailable?, WakeToRun?, Enabled?, Hidden?, DeleteExpiredTaskAfter?, IdleSettings?, NetworkSettings?, ExecutionTimeLimit?, Priority?, RunOnlyIfIdle?, UseUnifiedSchedulingEngine?, DisallowStartOnRemoteAppSession?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? DisallowStartIfOnBatteries {
            get {
                XElement x = this.GetElement(DisallowStartIfOnBatteriesXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(DisallowStartIfOnBatteriesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AllowStartOnDemand?, RestartOnFailure?, MultipleInstancesPolicy?, DisallowStartIfOnBatteries?, StopIfGoingOnBatteries?, AllowHardTerminate?, StartWhenAvailable?, NetworkProfileName?, RunOnlyIfNetworkAvailable?, WakeToRun?, Enabled?, Hidden?, DeleteExpiredTaskAfter?, IdleSettings?, NetworkSettings?, ExecutionTimeLimit?, Priority?, RunOnlyIfIdle?, UseUnifiedSchedulingEngine?, DisallowStartOnRemoteAppSession?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? StopIfGoingOnBatteries {
            get {
                XElement x = this.GetElement(StopIfGoingOnBatteriesXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(StopIfGoingOnBatteriesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AllowStartOnDemand?, RestartOnFailure?, MultipleInstancesPolicy?, DisallowStartIfOnBatteries?, StopIfGoingOnBatteries?, AllowHardTerminate?, StartWhenAvailable?, NetworkProfileName?, RunOnlyIfNetworkAvailable?, WakeToRun?, Enabled?, Hidden?, DeleteExpiredTaskAfter?, IdleSettings?, NetworkSettings?, ExecutionTimeLimit?, Priority?, RunOnlyIfIdle?, UseUnifiedSchedulingEngine?, DisallowStartOnRemoteAppSession?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? AllowHardTerminate {
            get {
                XElement x = this.GetElement(AllowHardTerminateXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(AllowHardTerminateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AllowStartOnDemand?, RestartOnFailure?, MultipleInstancesPolicy?, DisallowStartIfOnBatteries?, StopIfGoingOnBatteries?, AllowHardTerminate?, StartWhenAvailable?, NetworkProfileName?, RunOnlyIfNetworkAvailable?, WakeToRun?, Enabled?, Hidden?, DeleteExpiredTaskAfter?, IdleSettings?, NetworkSettings?, ExecutionTimeLimit?, Priority?, RunOnlyIfIdle?, UseUnifiedSchedulingEngine?, DisallowStartOnRemoteAppSession?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? StartWhenAvailable {
            get {
                XElement x = this.GetElement(StartWhenAvailableXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(StartWhenAvailableXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AllowStartOnDemand?, RestartOnFailure?, MultipleInstancesPolicy?, DisallowStartIfOnBatteries?, StopIfGoingOnBatteries?, AllowHardTerminate?, StartWhenAvailable?, NetworkProfileName?, RunOnlyIfNetworkAvailable?, WakeToRun?, Enabled?, Hidden?, DeleteExpiredTaskAfter?, IdleSettings?, NetworkSettings?, ExecutionTimeLimit?, Priority?, RunOnlyIfIdle?, UseUnifiedSchedulingEngine?, DisallowStartOnRemoteAppSession?)
        /// </para>
        /// </summary>
        public virtual string NetworkProfileName {
            get {
                XElement x = this.GetElement(NetworkProfileNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(NetworkProfileNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AllowStartOnDemand?, RestartOnFailure?, MultipleInstancesPolicy?, DisallowStartIfOnBatteries?, StopIfGoingOnBatteries?, AllowHardTerminate?, StartWhenAvailable?, NetworkProfileName?, RunOnlyIfNetworkAvailable?, WakeToRun?, Enabled?, Hidden?, DeleteExpiredTaskAfter?, IdleSettings?, NetworkSettings?, ExecutionTimeLimit?, Priority?, RunOnlyIfIdle?, UseUnifiedSchedulingEngine?, DisallowStartOnRemoteAppSession?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? RunOnlyIfNetworkAvailable {
            get {
                XElement x = this.GetElement(RunOnlyIfNetworkAvailableXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(RunOnlyIfNetworkAvailableXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AllowStartOnDemand?, RestartOnFailure?, MultipleInstancesPolicy?, DisallowStartIfOnBatteries?, StopIfGoingOnBatteries?, AllowHardTerminate?, StartWhenAvailable?, NetworkProfileName?, RunOnlyIfNetworkAvailable?, WakeToRun?, Enabled?, Hidden?, DeleteExpiredTaskAfter?, IdleSettings?, NetworkSettings?, ExecutionTimeLimit?, Priority?, RunOnlyIfIdle?, UseUnifiedSchedulingEngine?, DisallowStartOnRemoteAppSession?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? WakeToRun {
            get {
                XElement x = this.GetElement(WakeToRunXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(WakeToRunXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AllowStartOnDemand?, RestartOnFailure?, MultipleInstancesPolicy?, DisallowStartIfOnBatteries?, StopIfGoingOnBatteries?, AllowHardTerminate?, StartWhenAvailable?, NetworkProfileName?, RunOnlyIfNetworkAvailable?, WakeToRun?, Enabled?, Hidden?, DeleteExpiredTaskAfter?, IdleSettings?, NetworkSettings?, ExecutionTimeLimit?, Priority?, RunOnlyIfIdle?, UseUnifiedSchedulingEngine?, DisallowStartOnRemoteAppSession?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? Enabled {
            get {
                XElement x = this.GetElement(EnabledXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(EnabledXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AllowStartOnDemand?, RestartOnFailure?, MultipleInstancesPolicy?, DisallowStartIfOnBatteries?, StopIfGoingOnBatteries?, AllowHardTerminate?, StartWhenAvailable?, NetworkProfileName?, RunOnlyIfNetworkAvailable?, WakeToRun?, Enabled?, Hidden?, DeleteExpiredTaskAfter?, IdleSettings?, NetworkSettings?, ExecutionTimeLimit?, Priority?, RunOnlyIfIdle?, UseUnifiedSchedulingEngine?, DisallowStartOnRemoteAppSession?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? Hidden {
            get {
                XElement x = this.GetElement(HiddenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(HiddenXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AllowStartOnDemand?, RestartOnFailure?, MultipleInstancesPolicy?, DisallowStartIfOnBatteries?, StopIfGoingOnBatteries?, AllowHardTerminate?, StartWhenAvailable?, NetworkProfileName?, RunOnlyIfNetworkAvailable?, WakeToRun?, Enabled?, Hidden?, DeleteExpiredTaskAfter?, IdleSettings?, NetworkSettings?, ExecutionTimeLimit?, Priority?, RunOnlyIfIdle?, UseUnifiedSchedulingEngine?, DisallowStartOnRemoteAppSession?)
        /// </para>
        /// </summary>
        public virtual System.TimeSpan? DeleteExpiredTaskAfter {
            get {
                XElement x = this.GetElement(DeleteExpiredTaskAfterXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElement(DeleteExpiredTaskAfterXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AllowStartOnDemand?, RestartOnFailure?, MultipleInstancesPolicy?, DisallowStartIfOnBatteries?, StopIfGoingOnBatteries?, AllowHardTerminate?, StartWhenAvailable?, NetworkProfileName?, RunOnlyIfNetworkAvailable?, WakeToRun?, Enabled?, Hidden?, DeleteExpiredTaskAfter?, IdleSettings?, NetworkSettings?, ExecutionTimeLimit?, Priority?, RunOnlyIfIdle?, UseUnifiedSchedulingEngine?, DisallowStartOnRemoteAppSession?)
        /// </para>
        /// </summary>
        public virtual idleSettingsType IdleSettings {
            get {
                XElement x = this.GetElement(IdleSettingsXName);
                return ((idleSettingsType)(x));
            }
            set {
                this.SetElement(IdleSettingsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AllowStartOnDemand?, RestartOnFailure?, MultipleInstancesPolicy?, DisallowStartIfOnBatteries?, StopIfGoingOnBatteries?, AllowHardTerminate?, StartWhenAvailable?, NetworkProfileName?, RunOnlyIfNetworkAvailable?, WakeToRun?, Enabled?, Hidden?, DeleteExpiredTaskAfter?, IdleSettings?, NetworkSettings?, ExecutionTimeLimit?, Priority?, RunOnlyIfIdle?, UseUnifiedSchedulingEngine?, DisallowStartOnRemoteAppSession?)
        /// </para>
        /// </summary>
        public virtual networkSettingsType NetworkSettings {
            get {
                XElement x = this.GetElement(NetworkSettingsXName);
                return ((networkSettingsType)(x));
            }
            set {
                this.SetElement(NetworkSettingsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AllowStartOnDemand?, RestartOnFailure?, MultipleInstancesPolicy?, DisallowStartIfOnBatteries?, StopIfGoingOnBatteries?, AllowHardTerminate?, StartWhenAvailable?, NetworkProfileName?, RunOnlyIfNetworkAvailable?, WakeToRun?, Enabled?, Hidden?, DeleteExpiredTaskAfter?, IdleSettings?, NetworkSettings?, ExecutionTimeLimit?, Priority?, RunOnlyIfIdle?, UseUnifiedSchedulingEngine?, DisallowStartOnRemoteAppSession?)
        /// </para>
        /// </summary>
        public virtual System.TimeSpan? ExecutionTimeLimit {
            get {
                XElement x = this.GetElement(ExecutionTimeLimitXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElement(ExecutionTimeLimitXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AllowStartOnDemand?, RestartOnFailure?, MultipleInstancesPolicy?, DisallowStartIfOnBatteries?, StopIfGoingOnBatteries?, AllowHardTerminate?, StartWhenAvailable?, NetworkProfileName?, RunOnlyIfNetworkAvailable?, WakeToRun?, Enabled?, Hidden?, DeleteExpiredTaskAfter?, IdleSettings?, NetworkSettings?, ExecutionTimeLimit?, Priority?, RunOnlyIfIdle?, UseUnifiedSchedulingEngine?, DisallowStartOnRemoteAppSession?)
        /// </para>
        /// </summary>
        public virtual System.SByte? Priority {
            get {
                XElement x = this.GetElement(PriorityXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<sbyte>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(PriorityXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte).Datatype);
                }
                else {
                    this.SetElementWithValidation(PriorityXName, value, "Priority", global::Microsoft.Windows.Mit.Task.priorityType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AllowStartOnDemand?, RestartOnFailure?, MultipleInstancesPolicy?, DisallowStartIfOnBatteries?, StopIfGoingOnBatteries?, AllowHardTerminate?, StartWhenAvailable?, NetworkProfileName?, RunOnlyIfNetworkAvailable?, WakeToRun?, Enabled?, Hidden?, DeleteExpiredTaskAfter?, IdleSettings?, NetworkSettings?, ExecutionTimeLimit?, Priority?, RunOnlyIfIdle?, UseUnifiedSchedulingEngine?, DisallowStartOnRemoteAppSession?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? RunOnlyIfIdle {
            get {
                XElement x = this.GetElement(RunOnlyIfIdleXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(RunOnlyIfIdleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AllowStartOnDemand?, RestartOnFailure?, MultipleInstancesPolicy?, DisallowStartIfOnBatteries?, StopIfGoingOnBatteries?, AllowHardTerminate?, StartWhenAvailable?, NetworkProfileName?, RunOnlyIfNetworkAvailable?, WakeToRun?, Enabled?, Hidden?, DeleteExpiredTaskAfter?, IdleSettings?, NetworkSettings?, ExecutionTimeLimit?, Priority?, RunOnlyIfIdle?, UseUnifiedSchedulingEngine?, DisallowStartOnRemoteAppSession?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? UseUnifiedSchedulingEngine {
            get {
                XElement x = this.GetElement(UseUnifiedSchedulingEngineXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(UseUnifiedSchedulingEngineXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AllowStartOnDemand?, RestartOnFailure?, MultipleInstancesPolicy?, DisallowStartIfOnBatteries?, StopIfGoingOnBatteries?, AllowHardTerminate?, StartWhenAvailable?, NetworkProfileName?, RunOnlyIfNetworkAvailable?, WakeToRun?, Enabled?, Hidden?, DeleteExpiredTaskAfter?, IdleSettings?, NetworkSettings?, ExecutionTimeLimit?, Priority?, RunOnlyIfIdle?, UseUnifiedSchedulingEngine?, DisallowStartOnRemoteAppSession?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? DisallowStartOnRemoteAppSession {
            get {
                XElement x = this.GetElement(DisallowStartOnRemoteAppSessionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(DisallowStartOnRemoteAppSessionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<settingsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AllowStartOnDemandXName, typeof(bool));
            localElementDictionary.Add(RestartOnFailureXName, typeof(restartType));
            localElementDictionary.Add(MultipleInstancesPolicyXName, typeof(string));
            localElementDictionary.Add(DisallowStartIfOnBatteriesXName, typeof(bool));
            localElementDictionary.Add(StopIfGoingOnBatteriesXName, typeof(bool));
            localElementDictionary.Add(AllowHardTerminateXName, typeof(bool));
            localElementDictionary.Add(StartWhenAvailableXName, typeof(bool));
            localElementDictionary.Add(NetworkProfileNameXName, typeof(string));
            localElementDictionary.Add(RunOnlyIfNetworkAvailableXName, typeof(bool));
            localElementDictionary.Add(WakeToRunXName, typeof(bool));
            localElementDictionary.Add(EnabledXName, typeof(bool));
            localElementDictionary.Add(HiddenXName, typeof(bool));
            localElementDictionary.Add(DeleteExpiredTaskAfterXName, typeof(System.TimeSpan));
            localElementDictionary.Add(IdleSettingsXName, typeof(idleSettingsType));
            localElementDictionary.Add(NetworkSettingsXName, typeof(networkSettingsType));
            localElementDictionary.Add(ExecutionTimeLimitXName, typeof(System.TimeSpan));
            localElementDictionary.Add(PriorityXName, typeof(sbyte));
            localElementDictionary.Add(RunOnlyIfIdleXName, typeof(bool));
            localElementDictionary.Add(UseUnifiedSchedulingEngineXName, typeof(bool));
            localElementDictionary.Add(DisallowStartOnRemoteAppSessionXName, typeof(bool));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum multipleInstancesPolicyType {
        
        Parallel,
        
        Queue,
        
        IgnoreNew,
        
        StopExisting,
    }
    
    public sealed class multipleInstancesPolicyTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Parallel",
                        "Queue",
                        "IgnoreNew",
                        "StopExisting"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private multipleInstancesPolicyTypeValidator() {
        }
    }
    
    public sealed class priorityType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Byte), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 10, 0, null, 0, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private priorityType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Duration?, WaitTimeout?, StopOnIdleEnd?, RestartOnIdle?)
    /// </para>
    /// </summary>
    public partial class idleSettingsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DurationXName = System.Xml.Linq.XName.Get("Duration", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WaitTimeoutXName = System.Xml.Linq.XName.Get("WaitTimeout", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StopOnIdleEndXName = System.Xml.Linq.XName.Get("StopOnIdleEnd", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RestartOnIdleXName = System.Xml.Linq.XName.Get("RestartOnIdle", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("idleSettingsType", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator idleSettingsType(XElement xe) { return XTypedServices.ToXTypedElement<idleSettingsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static idleSettingsType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Duration?, WaitTimeout?, StopOnIdleEnd?, RestartOnIdle?)
        /// </para>
        /// </summary>
        public idleSettingsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Duration?, WaitTimeout?, StopOnIdleEnd?, RestartOnIdle?)
        /// </para>
        /// </summary>
        public virtual System.TimeSpan? Duration {
            get {
                XElement x = this.GetElement(DurationXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(DurationXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                }
                else {
                    this.SetElementWithValidation(DurationXName, value, "Duration", DurationLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Duration?, WaitTimeout?, StopOnIdleEnd?, RestartOnIdle?)
        /// </para>
        /// </summary>
        public virtual System.TimeSpan? WaitTimeout {
            get {
                XElement x = this.GetElement(WaitTimeoutXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(WaitTimeoutXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                }
                else {
                    this.SetElementWithValidation(WaitTimeoutXName, value, "WaitTimeout", WaitTimeoutLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Duration?, WaitTimeout?, StopOnIdleEnd?, RestartOnIdle?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? StopOnIdleEnd {
            get {
                XElement x = this.GetElement(StopOnIdleEndXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(StopOnIdleEndXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Duration?, WaitTimeout?, StopOnIdleEnd?, RestartOnIdle?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? RestartOnIdle {
            get {
                XElement x = this.GetElement(RestartOnIdleXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(RestartOnIdleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<idleSettingsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(DurationXName, typeof(System.TimeSpan));
            localElementDictionary.Add(WaitTimeoutXName, typeof(System.TimeSpan));
            localElementDictionary.Add(StopOnIdleEndXName, typeof(bool));
            localElementDictionary.Add(RestartOnIdleXName, typeof(bool));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        private class DurationLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(256)), null, 0, 0, null, null, 0, null, new System.TimeSpan(600000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
            
            private DurationLocalType() {
            }
        }
        
        private class WaitTimeoutLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(256)), null, 0, 0, null, null, 0, null, new System.TimeSpan(600000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
            
            private WaitTimeoutLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Name?, Id?)
    /// </para>
    /// </summary>
    public partial class networkSettingsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IdXName = System.Xml.Linq.XName.Get("Id", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("networkSettingsType", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator networkSettingsType(XElement xe) { return XTypedServices.ToXTypedElement<networkSettingsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static networkSettingsType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Name?, Id?)
        /// </para>
        /// </summary>
        public networkSettingsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name?, Id?)
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XElement x = this.GetElement(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(NameXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(NameXName, value, "Name", global::Microsoft.Windows.Mit.Task.nonEmptyString.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Name?, Id?)
        /// </para>
        /// </summary>
        public virtual string Id {
            get {
                XElement x = this.GetElement(IdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(IdXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(IdXName, value, "Id", global::Microsoft.Windows.Mit.Task.guidType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<networkSettingsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(NameXName, typeof(string));
            localElementDictionary.Add(IdXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Interval, Count)
    /// </para>
    /// </summary>
    public partial class restartType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IntervalXName = System.Xml.Linq.XName.Get("Interval", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CountXName = System.Xml.Linq.XName.Get("Count", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("restartType", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator restartType(XElement xe) { return XTypedServices.ToXTypedElement<restartType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static restartType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Interval, Count)
        /// </para>
        /// </summary>
        public restartType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Interval, Count)
        /// </para>
        /// </summary>
        public virtual System.TimeSpan Interval {
            get {
                XElement x = this.GetElement(IntervalXName);
                return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
            }
            set {
                this.SetElementWithValidation(IntervalXName, value, "Interval", IntervalLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Interval, Count)
        /// </para>
        /// </summary>
        public virtual byte Count {
            get {
                XElement x = this.GetElement(CountXName);
                return XTypedServices.ParseValue<byte>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.UnsignedByte).Datatype);
            }
            set {
                this.SetElementWithValidation(CountXName, value, "Count", CountLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<restartType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(IntervalXName, typeof(System.TimeSpan));
            localElementDictionary.Add(CountXName, typeof(byte));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        private class IntervalLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, new System.TimeSpan(26784000000000), 0, null, new System.TimeSpan(600000000), 0, null, 0, XmlSchemaWhiteSpace.Collapse));
            
            private IntervalLocalType() {
            }
        }
        
        private class CountLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.UnsignedByte), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(256)), null, 0, 0, null, null, 0, null, 1, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
            
            private CountLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (any)
    /// </para>
    /// </summary>
    public partial class dataType : XTypedElement, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("dataType", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static FSM validationStates;
        
		public static explicit operator dataType(XElement xe) { return XTypedServices.ToXTypedElement<dataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static dataType() {
            InitFSM();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public dataType() {
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public virtual IEnumerable<XElement> Any {
            get {
                return this.GetWildCards(WildCard.DefaultWildCard);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<dataType>(this);
        }
        
        FSM IXMetaData.GetValidationStates() {
            return validationStates;
        }
        
        private static void InitFSM() {
            Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
            transitions.Add(1, new Transitions(new SingleTransition(new WildCard("##any", "http://schemas.microsoft.com/windows/2004/02/mit/task"), 2)));
            validationStates = new FSM(1, new Set<int>(2), transitions);
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Principal)
    /// </para>
    /// </summary>
    public partial class principalsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PrincipalXName = System.Xml.Linq.XName.Get("Principal", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("principalsType", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator principalsType(XElement xe) { return XTypedServices.ToXTypedElement<principalsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static principalsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PrincipalXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Principal)
        /// </para>
        /// </summary>
        public principalsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Principal)
        /// </para>
        /// </summary>
        public virtual principalType Principal {
            get {
                XElement x = this.GetElement(PrincipalXName);
                return ((principalType)(x));
            }
            set {
                this.SetElement(PrincipalXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<principalsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PrincipalXName, typeof(principalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (UserId?, LogonType?, GroupId?, DisplayName?, RunLevel?, ProcessTokenSidType?, RequiredPrivileges?)
    /// </para>
    /// </summary>
    public partial class principalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UserIdXName = System.Xml.Linq.XName.Get("UserId", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LogonTypeXName = System.Xml.Linq.XName.Get("LogonType", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GroupIdXName = System.Xml.Linq.XName.Get("GroupId", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DisplayNameXName = System.Xml.Linq.XName.Get("DisplayName", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RunLevelXName = System.Xml.Linq.XName.Get("RunLevel", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProcessTokenSidTypeXName = System.Xml.Linq.XName.Get("ProcessTokenSidType", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RequiredPrivilegesXName = System.Xml.Linq.XName.Get("RequiredPrivileges", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("principalType", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator principalType(XElement xe) { return XTypedServices.ToXTypedElement<principalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static principalType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (UserId?, LogonType?, GroupId?, DisplayName?, RunLevel?, ProcessTokenSidType?, RequiredPrivileges?)
        /// </para>
        /// </summary>
        public principalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (UserId?, LogonType?, GroupId?, DisplayName?, RunLevel?, ProcessTokenSidType?, RequiredPrivileges?)
        /// </para>
        /// </summary>
        public virtual string UserId {
            get {
                XElement x = this.GetElement(UserIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(UserIdXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(UserIdXName, value, "UserId", global::Microsoft.Windows.Mit.Task.nonEmptyString.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (UserId?, LogonType?, GroupId?, DisplayName?, RunLevel?, ProcessTokenSidType?, RequiredPrivileges?)
        /// </para>
        /// </summary>
        public virtual Microsoft.Windows.Mit.Task.logonType? LogonType {
            get {
                XElement x = this.GetElement(LogonTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Windows.Mit.Task.logonType)(Enum.Parse(typeof(Microsoft.Windows.Mit.Task.logonType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                if (value == null) {
                    this.SetElement(LogonTypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(LogonTypeXName, value.ToString(), "LogonType", global::Microsoft.Windows.Mit.Task.logonTypeValidator.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (UserId?, LogonType?, GroupId?, DisplayName?, RunLevel?, ProcessTokenSidType?, RequiredPrivileges?)
        /// </para>
        /// </summary>
        public virtual string GroupId {
            get {
                XElement x = this.GetElement(GroupIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(GroupIdXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(GroupIdXName, value, "GroupId", global::Microsoft.Windows.Mit.Task.nonEmptyString.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (UserId?, LogonType?, GroupId?, DisplayName?, RunLevel?, ProcessTokenSidType?, RequiredPrivileges?)
        /// </para>
        /// </summary>
        public virtual string DisplayName {
            get {
                XElement x = this.GetElement(DisplayNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(DisplayNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (UserId?, LogonType?, GroupId?, DisplayName?, RunLevel?, ProcessTokenSidType?, RequiredPrivileges?)
        /// </para>
        /// </summary>
        public virtual Microsoft.Windows.Mit.Task.runLevelType? RunLevel {
            get {
                XElement x = this.GetElement(RunLevelXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Windows.Mit.Task.runLevelType)(Enum.Parse(typeof(Microsoft.Windows.Mit.Task.runLevelType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                if (value == null) {
                    this.SetElement(RunLevelXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(RunLevelXName, value.ToString(), "RunLevel", global::Microsoft.Windows.Mit.Task.runLevelTypeValidator.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (UserId?, LogonType?, GroupId?, DisplayName?, RunLevel?, ProcessTokenSidType?, RequiredPrivileges?)
        /// </para>
        /// </summary>
        public virtual Microsoft.Windows.Mit.Task.processTokenSidType? ProcessTokenSidType {
            get {
                XElement x = this.GetElement(ProcessTokenSidTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((Microsoft.Windows.Mit.Task.processTokenSidType)(Enum.Parse(typeof(Microsoft.Windows.Mit.Task.processTokenSidType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                if (value == null) {
                    this.SetElement(ProcessTokenSidTypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(ProcessTokenSidTypeXName, value.ToString(), "ProcessTokenSidType", global::Microsoft.Windows.Mit.Task.processTokenSidTypeValidator.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (UserId?, LogonType?, GroupId?, DisplayName?, RunLevel?, ProcessTokenSidType?, RequiredPrivileges?)
        /// </para>
        /// </summary>
        public virtual requiredPrivilegesType RequiredPrivileges {
            get {
                XElement x = this.GetElement(RequiredPrivilegesXName);
                return ((requiredPrivilegesType)(x));
            }
            set {
                this.SetElement(RequiredPrivilegesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<principalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(UserIdXName, typeof(string));
            localElementDictionary.Add(LogonTypeXName, typeof(string));
            localElementDictionary.Add(GroupIdXName, typeof(string));
            localElementDictionary.Add(DisplayNameXName, typeof(string));
            localElementDictionary.Add(RunLevelXName, typeof(string));
            localElementDictionary.Add(ProcessTokenSidTypeXName, typeof(string));
            localElementDictionary.Add(RequiredPrivilegesXName, typeof(requiredPrivilegesType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum logonType {
        
        S4U,
        
        Password,
        
        InteractiveToken,
        
        InteractiveTokenOrPassword,
    }
    
    public sealed class logonTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "S4U",
                        "Password",
                        "InteractiveToken",
                        "InteractiveTokenOrPassword"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private logonTypeValidator() {
        }
    }
    
    public enum runLevelType {
        
        LeastPrivilege,
        
        HighestAvailable,
    }
    
    public sealed class runLevelTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "LeastPrivilege",
                        "HighestAvailable"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private runLevelTypeValidator() {
        }
    }
    
    public enum processTokenSidType {
        
        None,
        
        Unrestricted,
    }
    
    public sealed class processTokenSidTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "None",
                        "Unrestricted"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private processTokenSidTypeValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Privilege+)
    /// </para>
    /// </summary>
    public partial class requiredPrivilegesType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PrivilegeXName = System.Xml.Linq.XName.Get("Privilege", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> PrivilegeField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("requiredPrivilegesType", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator requiredPrivilegesType(XElement xe) { return XTypedServices.ToXTypedElement<requiredPrivilegesType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static requiredPrivilegesType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PrivilegeXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Privilege+)
        /// </para>
        /// </summary>
        public requiredPrivilegesType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Privilege+)
        /// </para>
        /// </summary>
        public virtual IList<Microsoft.Windows.Mit.Task.privilegeType> Privilege {
            get {
                if ((this.PrivilegeField == null)) {
                    this.PrivilegeField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, PrivilegeXName);
                }
                return this.PrivilegeField.Select(item => (Microsoft.Windows.Mit.Task.privilegeType) Enum.Parse(typeof(Microsoft.Windows.Mit.Task.privilegeType), item)).ToList();
            }
            set {
                if ((value == null)) {
                    this.PrivilegeField = null;
                }
                else {
                    if ((this.PrivilegeField == null)) {
                        this.PrivilegeField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value.Select(item => item.ToString()), PrivilegeXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.PrivilegeField, value.Select(item => item.ToString()).ToList());
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<requiredPrivilegesType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PrivilegeXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public enum privilegeType {
        
        SeCreateTokenPrivilege,
        
        SeAssignPrimaryTokenPrivilege,
        
        SeLockMemoryPrivilege,
        
        SeIncreaseQuotaPrivilege,
        
        SeUnsolicitedInputPrivilege,
        
        SeMachineAccountPrivilege,
        
        SeTcbPrivilege,
        
        SeSecurityPrivilege,
        
        SeTakeOwnershipPrivilege,
        
        SeLoadDriverPrivilege,
        
        SeSystemProfilePrivilege,
        
        SeSystemtimePrivilege,
        
        SeProfileSingleProcessPrivilege,
        
        SeIncreaseBasePriorityPrivilege,
        
        SeCreatePagefilePrivilege,
        
        SeCreatePermanentPrivilege,
        
        SeBackupPrivilege,
        
        SeRestorePrivilege,
        
        SeShutdownPrivilege,
        
        SeDebugPrivilege,
        
        SeAuditPrivilege,
        
        SeSystemEnvironmentPrivilege,
        
        SeChangeNotifyPrivilege,
        
        SeRemoteShutdownPrivilege,
        
        SeUndockPrivilege,
        
        SeSyncAgentPrivilege,
        
        SeEnableDelegationPrivilege,
        
        SeManageVolumePrivilege,
        
        SeImpersonatePrivilege,
        
        SeCreateGlobalPrivilege,
        
        SeTrustedCredManAccessPrivilege,
        
        SeRelabelPrivilege,
        
        SeIncreaseWorkingSetPrivilege,
        
        SeTimeZonePrivilege,
        
        SeCreateSymbolicLinkPrivilege,
    }
    
    public sealed class privilegeTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "SeCreateTokenPrivilege",
                        "SeAssignPrimaryTokenPrivilege",
                        "SeLockMemoryPrivilege",
                        "SeIncreaseQuotaPrivilege",
                        "SeUnsolicitedInputPrivilege",
                        "SeMachineAccountPrivilege",
                        "SeTcbPrivilege",
                        "SeSecurityPrivilege",
                        "SeTakeOwnershipPrivilege",
                        "SeLoadDriverPrivilege",
                        "SeSystemProfilePrivilege",
                        "SeSystemtimePrivilege",
                        "SeProfileSingleProcessPrivilege",
                        "SeIncreaseBasePriorityPrivilege",
                        "SeCreatePagefilePrivilege",
                        "SeCreatePermanentPrivilege",
                        "SeBackupPrivilege",
                        "SeRestorePrivilege",
                        "SeShutdownPrivilege",
                        "SeDebugPrivilege",
                        "SeAuditPrivilege",
                        "SeSystemEnvironmentPrivilege",
                        "SeChangeNotifyPrivilege",
                        "SeRemoteShutdownPrivilege",
                        "SeUndockPrivilege",
                        "SeSyncAgentPrivilege",
                        "SeEnableDelegationPrivilege",
                        "SeManageVolumePrivilege",
                        "SeImpersonatePrivilege",
                        "SeCreateGlobalPrivilege",
                        "SeTrustedCredManAccessPrivilege",
                        "SeRelabelPrivilege",
                        "SeIncreaseWorkingSetPrivilege",
                        "SeTimeZonePrivilege",
                        "SeCreateSymbolicLinkPrivilege"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private privilegeTypeValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Exec | ComHandler | SendEmail | ShowMessage)+)
    /// </para>
    /// </summary>
    public partial class actionsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExecXName = System.Xml.Linq.XName.Get("Exec", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<execType> ExecField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ComHandlerXName = System.Xml.Linq.XName.Get("ComHandler", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<comHandlerType> ComHandlerField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SendEmailXName = System.Xml.Linq.XName.Get("SendEmail", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<sendEmailType> SendEmailField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ShowMessageXName = System.Xml.Linq.XName.Get("ShowMessage", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<showMessageType> ShowMessageField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ContextXName = System.Xml.Linq.XName.Get("Context", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("actionsType", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator actionsType(XElement xe) { return XTypedServices.ToXTypedElement<actionsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static actionsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(ExecXName), new NamedContentModelEntity(ComHandlerXName), new NamedContentModelEntity(SendEmailXName), new NamedContentModelEntity(ShowMessageXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Exec | ComHandler | SendEmail | ShowMessage)+)
        /// </para>
        /// </summary>
        public actionsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Exec | ComHandler | SendEmail | ShowMessage)+)
        /// </para>
        /// </summary>
        public virtual IList<execType> Exec {
            get {
                if ((this.ExecField == null)) {
                    this.ExecField = new XTypedList<execType>(this, LinqToXsdTypeManager.Instance, ExecXName);
                }
                return this.ExecField;
            }
            set {
                if ((value == null)) {
                    this.ExecField = null;
                }
                else {
                    if ((this.ExecField == null)) {
                        this.ExecField = XTypedList<execType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ExecXName);
                    }
                    else {
                        XTypedServices.SetList<execType>(this.ExecField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Exec | ComHandler | SendEmail | ShowMessage)+)
        /// </para>
        /// </summary>
        public virtual IList<comHandlerType> ComHandler {
            get {
                if ((this.ComHandlerField == null)) {
                    this.ComHandlerField = new XTypedList<comHandlerType>(this, LinqToXsdTypeManager.Instance, ComHandlerXName);
                }
                return this.ComHandlerField;
            }
            set {
                if ((value == null)) {
                    this.ComHandlerField = null;
                }
                else {
                    if ((this.ComHandlerField == null)) {
                        this.ComHandlerField = XTypedList<comHandlerType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ComHandlerXName);
                    }
                    else {
                        XTypedServices.SetList<comHandlerType>(this.ComHandlerField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Exec | ComHandler | SendEmail | ShowMessage)+)
        /// </para>
        /// </summary>
        public virtual IList<sendEmailType> SendEmail {
            get {
                if ((this.SendEmailField == null)) {
                    this.SendEmailField = new XTypedList<sendEmailType>(this, LinqToXsdTypeManager.Instance, SendEmailXName);
                }
                return this.SendEmailField;
            }
            set {
                if ((value == null)) {
                    this.SendEmailField = null;
                }
                else {
                    if ((this.SendEmailField == null)) {
                        this.SendEmailField = XTypedList<sendEmailType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SendEmailXName);
                    }
                    else {
                        XTypedServices.SetList<sendEmailType>(this.SendEmailField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Exec | ComHandler | SendEmail | ShowMessage)+)
        /// </para>
        /// </summary>
        public virtual IList<showMessageType> ShowMessage {
            get {
                if ((this.ShowMessageField == null)) {
                    this.ShowMessageField = new XTypedList<showMessageType>(this, LinqToXsdTypeManager.Instance, ShowMessageXName);
                }
                return this.ShowMessageField;
            }
            set {
                if ((value == null)) {
                    this.ShowMessageField = null;
                }
                else {
                    if ((this.ShowMessageField == null)) {
                        this.ShowMessageField = XTypedList<showMessageType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ShowMessageXName);
                    }
                    else {
                        XTypedServices.SetList<showMessageType>(this.ShowMessageField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string Context {
            get {
                XAttribute x = this.Attribute(ContextXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(ContextXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<actionsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ExecXName, typeof(execType));
            localElementDictionary.Add(ComHandlerXName, typeof(comHandlerType));
            localElementDictionary.Add(SendEmailXName, typeof(sendEmailType));
            localElementDictionary.Add(ShowMessageXName, typeof(showMessageType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public abstract partial class actionBaseType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("actionBaseType", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
		public static explicit operator actionBaseType(XElement xe) {  return (actionBaseType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public actionBaseType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Command, Arguments?, WorkingDirectory?)
    /// </para>
    /// </summary>
    public partial class execType : global::Microsoft.Windows.Mit.Task.actionBaseType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CommandXName = System.Xml.Linq.XName.Get("Command", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ArgumentsXName = System.Xml.Linq.XName.Get("Arguments", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WorkingDirectoryXName = System.Xml.Linq.XName.Get("WorkingDirectory", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("execType", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator execType(XElement xe) { return XTypedServices.ToXTypedElement<execType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static execType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Command, Arguments?, WorkingDirectory?)
        /// </para>
        /// </summary>
        public execType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Command, Arguments?, WorkingDirectory?)
        /// </para>
        /// </summary>
        public virtual string Command {
            get {
                XElement x = this.GetElement(CommandXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(CommandXName, value, "Command", global::Microsoft.Windows.Mit.Task.pathType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Command, Arguments?, WorkingDirectory?)
        /// </para>
        /// </summary>
        public virtual string Arguments {
            get {
                XElement x = this.GetElement(ArgumentsXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(ArgumentsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Command, Arguments?, WorkingDirectory?)
        /// </para>
        /// </summary>
        public virtual string WorkingDirectory {
            get {
                XElement x = this.GetElement(WorkingDirectoryXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(WorkingDirectoryXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(WorkingDirectoryXName, value, "WorkingDirectory", global::Microsoft.Windows.Mit.Task.pathType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<execType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(CommandXName, typeof(string));
            localElementDictionary.Add(ArgumentsXName, typeof(string));
            localElementDictionary.Add(WorkingDirectoryXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ClassId, Data?)
    /// </para>
    /// </summary>
    public partial class comHandlerType : global::Microsoft.Windows.Mit.Task.actionBaseType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ClassIdXName = System.Xml.Linq.XName.Get("ClassId", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DataXName = System.Xml.Linq.XName.Get("Data", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("comHandlerType", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator comHandlerType(XElement xe) { return XTypedServices.ToXTypedElement<comHandlerType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static comHandlerType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ClassId, Data?)
        /// </para>
        /// </summary>
        public comHandlerType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ClassId, Data?)
        /// </para>
        /// </summary>
        public virtual string ClassId {
            get {
                XElement x = this.GetElement(ClassIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(ClassIdXName, value, "ClassId", global::Microsoft.Windows.Mit.Task.guidType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ClassId, Data?)
        /// </para>
        /// </summary>
        public virtual dataType Data {
            get {
                XElement x = this.GetElement(DataXName);
                return ((dataType)(x));
            }
            set {
                this.SetElement(DataXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<comHandlerType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ClassIdXName, typeof(string));
            localElementDictionary.Add(DataXName, typeof(dataType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class guidType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\{([0-9a-fA-F]){8}(\\-[0-9a-fA-F]{4}){3}\\-[0-9a-fA-F]{12}\\}"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private guidType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Server, Subject?, To?, Cc?, Bcc?, ReplyTo?, From?, HeaderFields?, Body?, Attachments?)
    /// </para>
    /// </summary>
    public partial class sendEmailType : global::Microsoft.Windows.Mit.Task.actionBaseType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ServerXName = System.Xml.Linq.XName.Get("Server", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SubjectXName = System.Xml.Linq.XName.Get("Subject", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ToXName = System.Xml.Linq.XName.Get("To", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CcXName = System.Xml.Linq.XName.Get("Cc", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BccXName = System.Xml.Linq.XName.Get("Bcc", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ReplyToXName = System.Xml.Linq.XName.Get("ReplyTo", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FromXName = System.Xml.Linq.XName.Get("From", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HeaderFieldsXName = System.Xml.Linq.XName.Get("HeaderFields", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BodyXName = System.Xml.Linq.XName.Get("Body", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AttachmentsXName = System.Xml.Linq.XName.Get("Attachments", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("sendEmailType", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator sendEmailType(XElement xe) { return XTypedServices.ToXTypedElement<sendEmailType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static sendEmailType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Server, Subject?, To?, Cc?, Bcc?, ReplyTo?, From?, HeaderFields?, Body?, Attachments?)
        /// </para>
        /// </summary>
        public sendEmailType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Server, Subject?, To?, Cc?, Bcc?, ReplyTo?, From?, HeaderFields?, Body?, Attachments?)
        /// </para>
        /// </summary>
        public virtual string Server {
            get {
                XElement x = this.GetElement(ServerXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(ServerXName, value, "Server", global::Microsoft.Windows.Mit.Task.nonEmptyString.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Server, Subject?, To?, Cc?, Bcc?, ReplyTo?, From?, HeaderFields?, Body?, Attachments?)
        /// </para>
        /// </summary>
        public virtual string Subject {
            get {
                XElement x = this.GetElement(SubjectXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(SubjectXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Server, Subject?, To?, Cc?, Bcc?, ReplyTo?, From?, HeaderFields?, Body?, Attachments?)
        /// </para>
        /// </summary>
        public virtual string To {
            get {
                XElement x = this.GetElement(ToXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(ToXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Server, Subject?, To?, Cc?, Bcc?, ReplyTo?, From?, HeaderFields?, Body?, Attachments?)
        /// </para>
        /// </summary>
        public virtual string Cc {
            get {
                XElement x = this.GetElement(CcXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(CcXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Server, Subject?, To?, Cc?, Bcc?, ReplyTo?, From?, HeaderFields?, Body?, Attachments?)
        /// </para>
        /// </summary>
        public virtual string Bcc {
            get {
                XElement x = this.GetElement(BccXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(BccXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Server, Subject?, To?, Cc?, Bcc?, ReplyTo?, From?, HeaderFields?, Body?, Attachments?)
        /// </para>
        /// </summary>
        public virtual string ReplyTo {
            get {
                XElement x = this.GetElement(ReplyToXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(ReplyToXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Server, Subject?, To?, Cc?, Bcc?, ReplyTo?, From?, HeaderFields?, Body?, Attachments?)
        /// </para>
        /// </summary>
        public virtual string From {
            get {
                XElement x = this.GetElement(FromXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(FromXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Server, Subject?, To?, Cc?, Bcc?, ReplyTo?, From?, HeaderFields?, Body?, Attachments?)
        /// </para>
        /// </summary>
        public virtual headerFieldsType HeaderFields {
            get {
                XElement x = this.GetElement(HeaderFieldsXName);
                return ((headerFieldsType)(x));
            }
            set {
                this.SetElement(HeaderFieldsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Server, Subject?, To?, Cc?, Bcc?, ReplyTo?, From?, HeaderFields?, Body?, Attachments?)
        /// </para>
        /// </summary>
        public virtual string Body {
            get {
                XElement x = this.GetElement(BodyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(BodyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Server, Subject?, To?, Cc?, Bcc?, ReplyTo?, From?, HeaderFields?, Body?, Attachments?)
        /// </para>
        /// </summary>
        public virtual attachmentsType Attachments {
            get {
                XElement x = this.GetElement(AttachmentsXName);
                return ((attachmentsType)(x));
            }
            set {
                this.SetElement(AttachmentsXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<sendEmailType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ServerXName, typeof(string));
            localElementDictionary.Add(SubjectXName, typeof(string));
            localElementDictionary.Add(ToXName, typeof(string));
            localElementDictionary.Add(CcXName, typeof(string));
            localElementDictionary.Add(BccXName, typeof(string));
            localElementDictionary.Add(ReplyToXName, typeof(string));
            localElementDictionary.Add(FromXName, typeof(string));
            localElementDictionary.Add(HeaderFieldsXName, typeof(headerFieldsType));
            localElementDictionary.Add(BodyXName, typeof(string));
            localElementDictionary.Add(AttachmentsXName, typeof(attachmentsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (HeaderField*)
    /// </para>
    /// </summary>
    public partial class headerFieldsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HeaderFieldXName = System.Xml.Linq.XName.Get("HeaderField", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<headerFieldType> HeaderFieldField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("headerFieldsType", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator headerFieldsType(XElement xe) { return XTypedServices.ToXTypedElement<headerFieldsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static headerFieldsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(HeaderFieldXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (HeaderField*)
        /// </para>
        /// </summary>
        public headerFieldsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (HeaderField*)
        /// </para>
        /// </summary>
        public virtual IList<headerFieldType> HeaderField {
            get {
                if ((this.HeaderFieldField == null)) {
                    this.HeaderFieldField = new XTypedList<headerFieldType>(this, LinqToXsdTypeManager.Instance, HeaderFieldXName);
                }
                return this.HeaderFieldField;
            }
            set {
                if ((value == null)) {
                    this.HeaderFieldField = null;
                }
                else {
                    if ((this.HeaderFieldField == null)) {
                        this.HeaderFieldField = XTypedList<headerFieldType>.Initialize(this, LinqToXsdTypeManager.Instance, value, HeaderFieldXName);
                    }
                    else {
                        XTypedServices.SetList<headerFieldType>(this.HeaderFieldField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<headerFieldsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(HeaderFieldXName, typeof(headerFieldType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Name, Value)
    /// </para>
    /// </summary>
    public partial class headerFieldType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ValueXName = System.Xml.Linq.XName.Get("Value", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("headerFieldType", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator headerFieldType(XElement xe) { return XTypedServices.ToXTypedElement<headerFieldType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static headerFieldType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Name, Value)
        /// </para>
        /// </summary>
        public headerFieldType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Name, Value)
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XElement x = this.GetElement(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(NameXName, value, "Name", global::Microsoft.Windows.Mit.Task.nonEmptyString.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Name, Value)
        /// </para>
        /// </summary>
        public virtual string Value {
            get {
                XElement x = this.GetElement(ValueXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(ValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<headerFieldType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(NameXName, typeof(string));
            localElementDictionary.Add(ValueXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (File*)
    /// </para>
    /// </summary>
    public partial class attachmentsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FileXName = System.Xml.Linq.XName.Get("File", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<string> FileField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("attachmentsType", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator attachmentsType(XElement xe) { return XTypedServices.ToXTypedElement<attachmentsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static attachmentsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FileXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (File*)
        /// </para>
        /// </summary>
        public attachmentsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (File*)
        /// </para>
        /// </summary>
        public virtual IList<string> File {
            get {
                if ((this.FileField == null)) {
                    this.FileField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, FileXName);
                }
                return this.FileField;
            }
            set {
                if ((value == null)) {
                    this.FileField = null;
                }
                else {
                    if ((this.FileField == null)) {
                        this.FileField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, FileXName);
                    }
                    else {
                        XTypedServices.SetList<System.String>(this.FileField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<attachmentsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FileXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Title, Body)
    /// </para>
    /// </summary>
    public partial class showMessageType : global::Microsoft.Windows.Mit.Task.actionBaseType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TitleXName = System.Xml.Linq.XName.Get("Title", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BodyXName = System.Xml.Linq.XName.Get("Body", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("showMessageType", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator showMessageType(XElement xe) { return XTypedServices.ToXTypedElement<showMessageType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static showMessageType() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Title, Body)
        /// </para>
        /// </summary>
        public showMessageType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Title, Body)
        /// </para>
        /// </summary>
        public virtual string Title {
            get {
                XElement x = this.GetElement(TitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(TitleXName, value, "Title", global::Microsoft.Windows.Mit.Task.nonEmptyString.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Title, Body)
        /// </para>
        /// </summary>
        public virtual string Body {
            get {
                XElement x = this.GetElement(BodyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(BodyXName, value, "Body", global::Microsoft.Windows.Mit.Task.nonEmptyString.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<showMessageType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TitleXName, typeof(string));
            localElementDictionary.Add(BodyXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Task : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private taskType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Task", "http://schemas.microsoft.com/windows/2004/02/mit/task");
        
		public static explicit operator Task(XElement xe) { return XTypedServices.ToXTypedElement<Task, taskType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Task() {
            SetInnerType(new taskType());
        }
        
        public Task(taskType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual taskType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RegistrationInfo?, Triggers?, Settings?, Data?, Principals?, Actions)
        /// </para>
        /// </summary>
        public virtual registrationInfoType RegistrationInfo {
            get {
                return this.ContentField.RegistrationInfo;
            }
            set {
                this.ContentField.RegistrationInfo = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RegistrationInfo?, Triggers?, Settings?, Data?, Principals?, Actions)
        /// </para>
        /// </summary>
        public virtual triggersType Triggers {
            get {
                return this.ContentField.Triggers;
            }
            set {
                this.ContentField.Triggers = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RegistrationInfo?, Triggers?, Settings?, Data?, Principals?, Actions)
        /// </para>
        /// </summary>
        public virtual settingsType Settings {
            get {
                return this.ContentField.Settings;
            }
            set {
                this.ContentField.Settings = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RegistrationInfo?, Triggers?, Settings?, Data?, Principals?, Actions)
        /// </para>
        /// </summary>
        public virtual dataType Data {
            get {
                return this.ContentField.Data;
            }
            set {
                this.ContentField.Data = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RegistrationInfo?, Triggers?, Settings?, Data?, Principals?, Actions)
        /// </para>
        /// </summary>
        public virtual principalsType Principals {
            get {
                return this.ContentField.Principals;
            }
            set {
                this.ContentField.Principals = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RegistrationInfo?, Triggers?, Settings?, Data?, Principals?, Actions)
        /// </para>
        /// </summary>
        public virtual actionsType Actions {
            get {
                return this.ContentField.Actions;
            }
            set {
                this.ContentField.Actions = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string version {
            get {
                return this.ContentField.version;
            }
            set {
                this.ContentField.version = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Task Load(string xmlFile) {
            return XTypedServices.Load<Task, taskType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Task Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Task, taskType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Task Parse(string xml) {
            return XTypedServices.Parse<Task, taskType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Task(((taskType)(this.Content.Clone())));
        }
        
        private void SetInnerType(taskType ContentField) {
            this.ContentField = ((taskType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> typeDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> elementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static Dictionary<System.Type, System.Type> wrapperDictionary = new Dictionary<System.Type, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
            BuildWrapperDictionary();
        }
        
        private LinqToXsdTypeManager() {
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return wrapperDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(System.Xml.Linq.XName.Get("taskType", "http://schemas.microsoft.com/windows/2004/02/mit/task"), typeof(global::Microsoft.Windows.Mit.Task.taskType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("registrationInfoType", "http://schemas.microsoft.com/windows/2004/02/mit/task"), typeof(global::Microsoft.Windows.Mit.Task.registrationInfoType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("triggersType", "http://schemas.microsoft.com/windows/2004/02/mit/task"), typeof(global::Microsoft.Windows.Mit.Task.triggersType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("triggerBaseType", "http://schemas.microsoft.com/windows/2004/02/mit/task"), typeof(global::Microsoft.Windows.Mit.Task.triggerBaseType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("repetitionType", "http://schemas.microsoft.com/windows/2004/02/mit/task"), typeof(global::Microsoft.Windows.Mit.Task.repetitionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("bootTriggerType", "http://schemas.microsoft.com/windows/2004/02/mit/task"), typeof(global::Microsoft.Windows.Mit.Task.bootTriggerType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("registrationTriggerType", "http://schemas.microsoft.com/windows/2004/02/mit/task"), typeof(global::Microsoft.Windows.Mit.Task.registrationTriggerType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("idleTriggerType", "http://schemas.microsoft.com/windows/2004/02/mit/task"), typeof(global::Microsoft.Windows.Mit.Task.idleTriggerType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("timeTriggerType", "http://schemas.microsoft.com/windows/2004/02/mit/task"), typeof(global::Microsoft.Windows.Mit.Task.timeTriggerType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("namedValues", "http://schemas.microsoft.com/windows/2004/02/mit/task"), typeof(global::Microsoft.Windows.Mit.Task.namedValues));
            typeDictionary.Add(System.Xml.Linq.XName.Get("namedValue", "http://schemas.microsoft.com/windows/2004/02/mit/task"), typeof(global::Microsoft.Windows.Mit.Task.namedValue));
            typeDictionary.Add(System.Xml.Linq.XName.Get("eventTriggerType", "http://schemas.microsoft.com/windows/2004/02/mit/task"), typeof(global::Microsoft.Windows.Mit.Task.eventTriggerType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("logonTriggerType", "http://schemas.microsoft.com/windows/2004/02/mit/task"), typeof(global::Microsoft.Windows.Mit.Task.logonTriggerType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("sessionStateChangeTriggerType", "http://schemas.microsoft.com/windows/2004/02/mit/task"), typeof(global::Microsoft.Windows.Mit.Task.sessionStateChangeTriggerType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("calendarTriggerType", "http://schemas.microsoft.com/windows/2004/02/mit/task"), typeof(global::Microsoft.Windows.Mit.Task.calendarTriggerType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("dailyScheduleType", "http://schemas.microsoft.com/windows/2004/02/mit/task"), typeof(global::Microsoft.Windows.Mit.Task.dailyScheduleType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("weeklyScheduleType", "http://schemas.microsoft.com/windows/2004/02/mit/task"), typeof(global::Microsoft.Windows.Mit.Task.weeklyScheduleType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("monthlyScheduleType", "http://schemas.microsoft.com/windows/2004/02/mit/task"), typeof(global::Microsoft.Windows.Mit.Task.monthlyScheduleType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("monthlyDayOfWeekScheduleType", "http://schemas.microsoft.com/windows/2004/02/mit/task"), typeof(global::Microsoft.Windows.Mit.Task.monthlyDayOfWeekScheduleType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("daysOfWeekType", "http://schemas.microsoft.com/windows/2004/02/mit/task"), typeof(global::Microsoft.Windows.Mit.Task.daysOfWeekType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("monthsType", "http://schemas.microsoft.com/windows/2004/02/mit/task"), typeof(global::Microsoft.Windows.Mit.Task.monthsType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("daysOfMonthType", "http://schemas.microsoft.com/windows/2004/02/mit/task"), typeof(global::Microsoft.Windows.Mit.Task.daysOfMonthType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("weeksType", "http://schemas.microsoft.com/windows/2004/02/mit/task"), typeof(global::Microsoft.Windows.Mit.Task.weeksType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("settingsType", "http://schemas.microsoft.com/windows/2004/02/mit/task"), typeof(global::Microsoft.Windows.Mit.Task.settingsType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("idleSettingsType", "http://schemas.microsoft.com/windows/2004/02/mit/task"), typeof(global::Microsoft.Windows.Mit.Task.idleSettingsType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("networkSettingsType", "http://schemas.microsoft.com/windows/2004/02/mit/task"), typeof(global::Microsoft.Windows.Mit.Task.networkSettingsType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("restartType", "http://schemas.microsoft.com/windows/2004/02/mit/task"), typeof(global::Microsoft.Windows.Mit.Task.restartType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("dataType", "http://schemas.microsoft.com/windows/2004/02/mit/task"), typeof(global::Microsoft.Windows.Mit.Task.dataType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("principalsType", "http://schemas.microsoft.com/windows/2004/02/mit/task"), typeof(global::Microsoft.Windows.Mit.Task.principalsType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("principalType", "http://schemas.microsoft.com/windows/2004/02/mit/task"), typeof(global::Microsoft.Windows.Mit.Task.principalType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("requiredPrivilegesType", "http://schemas.microsoft.com/windows/2004/02/mit/task"), typeof(global::Microsoft.Windows.Mit.Task.requiredPrivilegesType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("actionsType", "http://schemas.microsoft.com/windows/2004/02/mit/task"), typeof(global::Microsoft.Windows.Mit.Task.actionsType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("actionBaseType", "http://schemas.microsoft.com/windows/2004/02/mit/task"), typeof(global::Microsoft.Windows.Mit.Task.actionBaseType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("execType", "http://schemas.microsoft.com/windows/2004/02/mit/task"), typeof(global::Microsoft.Windows.Mit.Task.execType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("comHandlerType", "http://schemas.microsoft.com/windows/2004/02/mit/task"), typeof(global::Microsoft.Windows.Mit.Task.comHandlerType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("sendEmailType", "http://schemas.microsoft.com/windows/2004/02/mit/task"), typeof(global::Microsoft.Windows.Mit.Task.sendEmailType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("headerFieldsType", "http://schemas.microsoft.com/windows/2004/02/mit/task"), typeof(global::Microsoft.Windows.Mit.Task.headerFieldsType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("headerFieldType", "http://schemas.microsoft.com/windows/2004/02/mit/task"), typeof(global::Microsoft.Windows.Mit.Task.headerFieldType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("attachmentsType", "http://schemas.microsoft.com/windows/2004/02/mit/task"), typeof(global::Microsoft.Windows.Mit.Task.attachmentsType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("showMessageType", "http://schemas.microsoft.com/windows/2004/02/mit/task"), typeof(global::Microsoft.Windows.Mit.Task.showMessageType));
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(System.Xml.Linq.XName.Get("Task", "http://schemas.microsoft.com/windows/2004/02/mit/task"), typeof(global::Microsoft.Windows.Mit.Task.Task));
        }
        
        private static void BuildWrapperDictionary() {
            wrapperDictionary.Add(typeof(Microsoft.Windows.Mit.Task.Task), typeof(global::Microsoft.Windows.Mit.Task.taskType));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[System.Xml.Linq.XName.Get("Task", "http://schemas.microsoft.com/windows/2004/02/mit/task")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public Task Task {  get {return rootObject as Task; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(Task root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public global::Microsoft.Windows.Mit.Task.Task Task {  get {return rootObject as global::Microsoft.Windows.Mit.Task.Task; } }
        
        private XRoot() {
        }
        
        public XRoot(global::Microsoft.Windows.Mit.Task.Task root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
