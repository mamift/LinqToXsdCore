//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace psidev.info.psi.pi.mzIdentML.Item1.Item2 {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    
    /// <summary>
    /// <para>
    /// The list of controlled vocabularies used in the file.
    /// </para>
    /// <para>
    /// Regular expression: (cv+)
    /// </para>
    /// </summary>
    public partial class CVListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvXName = System.Xml.Linq.XName.Get("cv", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<cvType> cvField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CVListType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CVListType(XElement xe) { return XTypedServices.ToXTypedElement<CVListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CVListType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(cvXName));
        }
        
        /// <summary>
        /// <para>
        /// The list of controlled vocabularies used in the file.
        /// </para>
        /// <para>
        /// Regular expression: (cv+)
        /// </para>
        /// </summary>
        public CVListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cv+)
        /// </para>
        /// </summary>
        public virtual IList<cvType> cv {
            get {
                if ((this.cvField == null)) {
                    this.cvField = new XTypedList<cvType>(this, LinqToXsdTypeManager.Instance, cvXName);
                }
                return this.cvField;
            }
            set {
                if ((value == null)) {
                    this.cvField = null;
                }
                else {
                    if ((this.cvField == null)) {
                        this.cvField = XTypedList<cvType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvXName);
                    }
                    else {
                        XTypedServices.SetList<cvType>(this.cvField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CVListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(cvXName, typeof(cvType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The software packages used to perform the analyses.
    ///			
    /// </para>
    /// <para>
    /// Regular expression: (AnalysisSoftware+)
    /// </para>
    /// </summary>
    public partial class AnalysisSoftwareListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AnalysisSoftwareXName = System.Xml.Linq.XName.Get("AnalysisSoftware", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AnalysisSoftwareType> AnalysisSoftwareField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AnalysisSoftwareListType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AnalysisSoftwareListType(XElement xe) { return XTypedServices.ToXTypedElement<AnalysisSoftwareListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AnalysisSoftwareListType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AnalysisSoftwareXName));
        }
        
        /// <summary>
        /// <para>
        /// The software packages used to perform the analyses.
        ///			
        /// </para>
        /// <para>
        /// Regular expression: (AnalysisSoftware+)
        /// </para>
        /// </summary>
        public AnalysisSoftwareListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AnalysisSoftware+)
        /// </para>
        /// </summary>
        public virtual IList<AnalysisSoftwareType> AnalysisSoftware {
            get {
                if ((this.AnalysisSoftwareField == null)) {
                    this.AnalysisSoftwareField = new XTypedList<AnalysisSoftwareType>(this, LinqToXsdTypeManager.Instance, AnalysisSoftwareXName);
                }
                return this.AnalysisSoftwareField;
            }
            set {
                if ((value == null)) {
                    this.AnalysisSoftwareField = null;
                }
                else {
                    if ((this.AnalysisSoftwareField == null)) {
                        this.AnalysisSoftwareField = XTypedList<AnalysisSoftwareType>.Initialize(this, LinqToXsdTypeManager.Instance, value, AnalysisSoftwareXName);
                    }
                    else {
                        XTypedServices.SetList<AnalysisSoftwareType>(this.AnalysisSoftwareField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AnalysisSoftwareListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AnalysisSoftwareXName, typeof(AnalysisSoftwareType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The samples analysed can optionally be recorded using CV terms for descriptions. If a composite sample has been analysed, the subsample association can be used to build a hierarchical description. 
    /// </para>
    /// <para>
    /// Regular expression: (Sample+)
    /// </para>
    /// </summary>
    public partial class AnalysisSampleCollectionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SampleXName = System.Xml.Linq.XName.Get("Sample", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SampleType> SampleField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AnalysisSampleCollectionType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AnalysisSampleCollectionType(XElement xe) { return XTypedServices.ToXTypedElement<AnalysisSampleCollectionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AnalysisSampleCollectionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SampleXName));
        }
        
        /// <summary>
        /// <para>
        /// The samples analysed can optionally be recorded using CV terms for descriptions. If a composite sample has been analysed, the subsample association can be used to build a hierarchical description. 
        /// </para>
        /// <para>
        /// Regular expression: (Sample+)
        /// </para>
        /// </summary>
        public AnalysisSampleCollectionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Sample+)
        /// </para>
        /// </summary>
        public virtual IList<SampleType> Sample {
            get {
                if ((this.SampleField == null)) {
                    this.SampleField = new XTypedList<SampleType>(this, LinqToXsdTypeManager.Instance, SampleXName);
                }
                return this.SampleField;
            }
            set {
                if ((value == null)) {
                    this.SampleField = null;
                }
                else {
                    if ((this.SampleField == null)) {
                        this.SampleField = XTypedList<SampleType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SampleXName);
                    }
                    else {
                        XTypedServices.SetList<SampleType>(this.SampleField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AnalysisSampleCollectionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SampleXName, typeof(SampleType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The collection of sequences (DBSequence or Peptide) identified and their relationship between each other (PeptideEvidence) to be referenced elsewhere in the results. 
    /// </para>
    /// <para>
    /// Regular expression: (DBSequence*, Peptide*, PeptideEvidence*)
    /// </para>
    /// </summary>
    public partial class SequenceCollectionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DBSequenceXName = System.Xml.Linq.XName.Get("DBSequence", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DBSequenceType> DBSequenceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PeptideXName = System.Xml.Linq.XName.Get("Peptide", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PeptideType> PeptideField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PeptideEvidenceXName = System.Xml.Linq.XName.Get("PeptideEvidence", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PeptideEvidenceType> PeptideEvidenceField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SequenceCollectionType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SequenceCollectionType(XElement xe) { return XTypedServices.ToXTypedElement<SequenceCollectionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SequenceCollectionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DBSequenceXName), new NamedContentModelEntity(PeptideXName), new NamedContentModelEntity(PeptideEvidenceXName));
        }
        
        /// <summary>
        /// <para>
        /// The collection of sequences (DBSequence or Peptide) identified and their relationship between each other (PeptideEvidence) to be referenced elsewhere in the results. 
        /// </para>
        /// <para>
        /// Regular expression: (DBSequence*, Peptide*, PeptideEvidence*)
        /// </para>
        /// </summary>
        public SequenceCollectionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DBSequence*, Peptide*, PeptideEvidence*)
        /// </para>
        /// </summary>
        public virtual IList<DBSequenceType> DBSequence {
            get {
                if ((this.DBSequenceField == null)) {
                    this.DBSequenceField = new XTypedList<DBSequenceType>(this, LinqToXsdTypeManager.Instance, DBSequenceXName);
                }
                return this.DBSequenceField;
            }
            set {
                if ((value == null)) {
                    this.DBSequenceField = null;
                }
                else {
                    if ((this.DBSequenceField == null)) {
                        this.DBSequenceField = XTypedList<DBSequenceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, DBSequenceXName);
                    }
                    else {
                        XTypedServices.SetList<DBSequenceType>(this.DBSequenceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DBSequence*, Peptide*, PeptideEvidence*)
        /// </para>
        /// </summary>
        public virtual IList<PeptideType> Peptide {
            get {
                if ((this.PeptideField == null)) {
                    this.PeptideField = new XTypedList<PeptideType>(this, LinqToXsdTypeManager.Instance, PeptideXName);
                }
                return this.PeptideField;
            }
            set {
                if ((value == null)) {
                    this.PeptideField = null;
                }
                else {
                    if ((this.PeptideField == null)) {
                        this.PeptideField = XTypedList<PeptideType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PeptideXName);
                    }
                    else {
                        XTypedServices.SetList<PeptideType>(this.PeptideField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DBSequence*, Peptide*, PeptideEvidence*)
        /// </para>
        /// </summary>
        public virtual IList<PeptideEvidenceType> PeptideEvidence {
            get {
                if ((this.PeptideEvidenceField == null)) {
                    this.PeptideEvidenceField = new XTypedList<PeptideEvidenceType>(this, LinqToXsdTypeManager.Instance, PeptideEvidenceXName);
                }
                return this.PeptideEvidenceField;
            }
            set {
                if ((value == null)) {
                    this.PeptideEvidenceField = null;
                }
                else {
                    if ((this.PeptideEvidenceField == null)) {
                        this.PeptideEvidenceField = XTypedList<PeptideEvidenceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PeptideEvidenceXName);
                    }
                    else {
                        XTypedServices.SetList<PeptideEvidenceType>(this.PeptideEvidenceField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SequenceCollectionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(DBSequenceXName, typeof(DBSequenceType));
            localElementDictionary.Add(PeptideXName, typeof(PeptideType));
            localElementDictionary.Add(PeptideEvidenceXName, typeof(PeptideEvidenceType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The analyses performed to get the results, which map the input and output data sets. Analyses are for example: SpectrumIdentification (resulting in peptides) or ProteinDetection (assemble proteins from peptides).
    /// </para>
    /// <para>
    /// Regular expression: (SpectrumIdentification+, ProteinDetection?)
    /// </para>
    /// </summary>
    public partial class AnalysisCollectionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SpectrumIdentificationXName = System.Xml.Linq.XName.Get("SpectrumIdentification", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SpectrumIdentificationType> SpectrumIdentificationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProteinDetectionXName = System.Xml.Linq.XName.Get("ProteinDetection", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AnalysisCollectionType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AnalysisCollectionType(XElement xe) { return XTypedServices.ToXTypedElement<AnalysisCollectionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AnalysisCollectionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SpectrumIdentificationXName), new NamedContentModelEntity(ProteinDetectionXName));
        }
        
        /// <summary>
        /// <para>
        /// The analyses performed to get the results, which map the input and output data sets. Analyses are for example: SpectrumIdentification (resulting in peptides) or ProteinDetection (assemble proteins from peptides).
        /// </para>
        /// <para>
        /// Regular expression: (SpectrumIdentification+, ProteinDetection?)
        /// </para>
        /// </summary>
        public AnalysisCollectionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SpectrumIdentification+, ProteinDetection?)
        /// </para>
        /// </summary>
        public virtual IList<SpectrumIdentificationType> SpectrumIdentification {
            get {
                if ((this.SpectrumIdentificationField == null)) {
                    this.SpectrumIdentificationField = new XTypedList<SpectrumIdentificationType>(this, LinqToXsdTypeManager.Instance, SpectrumIdentificationXName);
                }
                return this.SpectrumIdentificationField;
            }
            set {
                if ((value == null)) {
                    this.SpectrumIdentificationField = null;
                }
                else {
                    if ((this.SpectrumIdentificationField == null)) {
                        this.SpectrumIdentificationField = XTypedList<SpectrumIdentificationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SpectrumIdentificationXName);
                    }
                    else {
                        XTypedServices.SetList<SpectrumIdentificationType>(this.SpectrumIdentificationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SpectrumIdentification+, ProteinDetection?)
        /// </para>
        /// </summary>
        public virtual ProteinDetectionType ProteinDetection {
            get {
                XElement x = this.GetElement(ProteinDetectionXName);
                return ((ProteinDetectionType)(x));
            }
            set {
                this.SetElement(ProteinDetectionXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AnalysisCollectionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SpectrumIdentificationXName, typeof(SpectrumIdentificationType));
            localElementDictionary.Add(ProteinDetectionXName, typeof(ProteinDetectionType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The collection of protocols which include the parameters and settings of the performed analyses. 
    /// </para>
    /// <para>
    /// Regular expression: (SpectrumIdentificationProtocol+, ProteinDetectionProtocol?)
    /// </para>
    /// </summary>
    public partial class AnalysisProtocolCollectionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SpectrumIdentificationProtocolXName = System.Xml.Linq.XName.Get("SpectrumIdentificationProtocol", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SpectrumIdentificationProtocolType> SpectrumIdentificationProtocolField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProteinDetectionProtocolXName = System.Xml.Linq.XName.Get("ProteinDetectionProtocol", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AnalysisProtocolCollectionType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AnalysisProtocolCollectionType(XElement xe) { return XTypedServices.ToXTypedElement<AnalysisProtocolCollectionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AnalysisProtocolCollectionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SpectrumIdentificationProtocolXName), new NamedContentModelEntity(ProteinDetectionProtocolXName));
        }
        
        /// <summary>
        /// <para>
        /// The collection of protocols which include the parameters and settings of the performed analyses. 
        /// </para>
        /// <para>
        /// Regular expression: (SpectrumIdentificationProtocol+, ProteinDetectionProtocol?)
        /// </para>
        /// </summary>
        public AnalysisProtocolCollectionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SpectrumIdentificationProtocol+, ProteinDetectionProtocol?)
        /// </para>
        /// </summary>
        public virtual IList<SpectrumIdentificationProtocolType> SpectrumIdentificationProtocol {
            get {
                if ((this.SpectrumIdentificationProtocolField == null)) {
                    this.SpectrumIdentificationProtocolField = new XTypedList<SpectrumIdentificationProtocolType>(this, LinqToXsdTypeManager.Instance, SpectrumIdentificationProtocolXName);
                }
                return this.SpectrumIdentificationProtocolField;
            }
            set {
                if ((value == null)) {
                    this.SpectrumIdentificationProtocolField = null;
                }
                else {
                    if ((this.SpectrumIdentificationProtocolField == null)) {
                        this.SpectrumIdentificationProtocolField = XTypedList<SpectrumIdentificationProtocolType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SpectrumIdentificationProtocolXName);
                    }
                    else {
                        XTypedServices.SetList<SpectrumIdentificationProtocolType>(this.SpectrumIdentificationProtocolField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SpectrumIdentificationProtocol+, ProteinDetectionProtocol?)
        /// </para>
        /// </summary>
        public virtual ProteinDetectionProtocolType ProteinDetectionProtocol {
            get {
                XElement x = this.GetElement(ProteinDetectionProtocolXName);
                return ((ProteinDetectionProtocolType)(x));
            }
            set {
                this.SetElement(ProteinDetectionProtocolXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AnalysisProtocolCollectionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SpectrumIdentificationProtocolXName, typeof(SpectrumIdentificationProtocolType));
            localElementDictionary.Add(ProteinDetectionProtocolXName, typeof(ProteinDetectionProtocolType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The inputs to the analyses including the databases searched, the spectral data and the source file converted to mzIdentML. 
    /// </para>
    /// <para>
    /// Regular expression: (SourceFile*, SearchDatabase*, SpectraData+)
    /// </para>
    /// </summary>
    public partial class InputsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SourceFileXName = System.Xml.Linq.XName.Get("SourceFile", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SourceFileType> SourceFileField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SearchDatabaseXName = System.Xml.Linq.XName.Get("SearchDatabase", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SearchDatabaseType> SearchDatabaseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SpectraDataXName = System.Xml.Linq.XName.Get("SpectraData", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SpectraDataType> SpectraDataField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("InputsType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator InputsType(XElement xe) { return XTypedServices.ToXTypedElement<InputsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static InputsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SourceFileXName), new NamedContentModelEntity(SearchDatabaseXName), new NamedContentModelEntity(SpectraDataXName));
        }
        
        /// <summary>
        /// <para>
        /// The inputs to the analyses including the databases searched, the spectral data and the source file converted to mzIdentML. 
        /// </para>
        /// <para>
        /// Regular expression: (SourceFile*, SearchDatabase*, SpectraData+)
        /// </para>
        /// </summary>
        public InputsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SourceFile*, SearchDatabase*, SpectraData+)
        /// </para>
        /// </summary>
        public virtual IList<SourceFileType> SourceFile {
            get {
                if ((this.SourceFileField == null)) {
                    this.SourceFileField = new XTypedList<SourceFileType>(this, LinqToXsdTypeManager.Instance, SourceFileXName);
                }
                return this.SourceFileField;
            }
            set {
                if ((value == null)) {
                    this.SourceFileField = null;
                }
                else {
                    if ((this.SourceFileField == null)) {
                        this.SourceFileField = XTypedList<SourceFileType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SourceFileXName);
                    }
                    else {
                        XTypedServices.SetList<SourceFileType>(this.SourceFileField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SourceFile*, SearchDatabase*, SpectraData+)
        /// </para>
        /// </summary>
        public virtual IList<SearchDatabaseType> SearchDatabase {
            get {
                if ((this.SearchDatabaseField == null)) {
                    this.SearchDatabaseField = new XTypedList<SearchDatabaseType>(this, LinqToXsdTypeManager.Instance, SearchDatabaseXName);
                }
                return this.SearchDatabaseField;
            }
            set {
                if ((value == null)) {
                    this.SearchDatabaseField = null;
                }
                else {
                    if ((this.SearchDatabaseField == null)) {
                        this.SearchDatabaseField = XTypedList<SearchDatabaseType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SearchDatabaseXName);
                    }
                    else {
                        XTypedServices.SetList<SearchDatabaseType>(this.SearchDatabaseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SourceFile*, SearchDatabase*, SpectraData+)
        /// </para>
        /// </summary>
        public virtual IList<SpectraDataType> SpectraData {
            get {
                if ((this.SpectraDataField == null)) {
                    this.SpectraDataField = new XTypedList<SpectraDataType>(this, LinqToXsdTypeManager.Instance, SpectraDataXName);
                }
                return this.SpectraDataField;
            }
            set {
                if ((value == null)) {
                    this.SpectraDataField = null;
                }
                else {
                    if ((this.SpectraDataField == null)) {
                        this.SpectraDataField = XTypedList<SpectraDataType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SpectraDataXName);
                    }
                    else {
                        XTypedServices.SetList<SpectraDataType>(this.SpectraDataField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<InputsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SourceFileXName, typeof(SourceFileType));
            localElementDictionary.Add(SearchDatabaseXName, typeof(SearchDatabaseType));
            localElementDictionary.Add(SpectraDataXName, typeof(SpectraDataType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Data sets generated by the analyses, including peptide and protein lists. 
    /// </para>
    /// <para>
    /// Regular expression: (SpectrumIdentificationList+, ProteinDetectionList?)
    /// </para>
    /// </summary>
    public partial class AnalysisDataType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SpectrumIdentificationListXName = System.Xml.Linq.XName.Get("SpectrumIdentificationList", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SpectrumIdentificationListType> SpectrumIdentificationListField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProteinDetectionListXName = System.Xml.Linq.XName.Get("ProteinDetectionList", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AnalysisDataType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AnalysisDataType(XElement xe) { return XTypedServices.ToXTypedElement<AnalysisDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AnalysisDataType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SpectrumIdentificationListXName), new NamedContentModelEntity(ProteinDetectionListXName));
        }
        
        /// <summary>
        /// <para>
        /// Data sets generated by the analyses, including peptide and protein lists. 
        /// </para>
        /// <para>
        /// Regular expression: (SpectrumIdentificationList+, ProteinDetectionList?)
        /// </para>
        /// </summary>
        public AnalysisDataType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SpectrumIdentificationList+, ProteinDetectionList?)
        /// </para>
        /// </summary>
        public virtual IList<SpectrumIdentificationListType> SpectrumIdentificationList {
            get {
                if ((this.SpectrumIdentificationListField == null)) {
                    this.SpectrumIdentificationListField = new XTypedList<SpectrumIdentificationListType>(this, LinqToXsdTypeManager.Instance, SpectrumIdentificationListXName);
                }
                return this.SpectrumIdentificationListField;
            }
            set {
                if ((value == null)) {
                    this.SpectrumIdentificationListField = null;
                }
                else {
                    if ((this.SpectrumIdentificationListField == null)) {
                        this.SpectrumIdentificationListField = XTypedList<SpectrumIdentificationListType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SpectrumIdentificationListXName);
                    }
                    else {
                        XTypedServices.SetList<SpectrumIdentificationListType>(this.SpectrumIdentificationListField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SpectrumIdentificationList+, ProteinDetectionList?)
        /// </para>
        /// </summary>
        public virtual ProteinDetectionListType ProteinDetectionList {
            get {
                XElement x = this.GetElement(ProteinDetectionListXName);
                return ((ProteinDetectionListType)(x));
            }
            set {
                this.SetElement(ProteinDetectionListXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AnalysisDataType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SpectrumIdentificationListXName, typeof(SpectrumIdentificationListType));
            localElementDictionary.Add(ProteinDetectionListXName, typeof(ProteinDetectionListType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The collection of input and output data sets of the analyses.
    ///			
    /// </para>
    /// <para>
    /// Regular expression: (Inputs, AnalysisData)
    /// </para>
    /// </summary>
    public partial class DataCollectionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InputsXName = System.Xml.Linq.XName.Get("Inputs", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AnalysisDataXName = System.Xml.Linq.XName.Get("AnalysisData", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DataCollectionType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DataCollectionType(XElement xe) { return XTypedServices.ToXTypedElement<DataCollectionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DataCollectionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(InputsXName), new NamedContentModelEntity(AnalysisDataXName));
        }
        
        /// <summary>
        /// <para>
        /// The collection of input and output data sets of the analyses.
        ///			
        /// </para>
        /// <para>
        /// Regular expression: (Inputs, AnalysisData)
        /// </para>
        /// </summary>
        public DataCollectionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Inputs, AnalysisData)
        /// </para>
        /// </summary>
        public virtual InputsType Inputs {
            get {
                XElement x = this.GetElement(InputsXName);
                return ((InputsType)(x));
            }
            set {
                this.SetElement(InputsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Inputs, AnalysisData)
        /// </para>
        /// </summary>
        public virtual AnalysisDataType AnalysisData {
            get {
                XElement x = this.GetElement(AnalysisDataXName);
                return ((AnalysisDataType)(x));
            }
            set {
                this.SetElement(AnalysisDataXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DataCollectionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(InputsXName, typeof(InputsType));
            localElementDictionary.Add(AnalysisDataXName, typeof(AnalysisDataType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The upper-most hierarchy level of mzIdentML with sub-containers for example describing software, protocols and search results (spectrum identifications or protein detection results). 
    /// </para>
    /// <para>
    /// Regular expression: (cvList, AnalysisSoftwareList?, Provider?, AuditCollection?, AnalysisSampleCollection?, SequenceCollection?, AnalysisCollection, AnalysisProtocolCollection, DataCollection, BibliographicReference*)
    /// </para>
    /// </summary>
    public partial class MzIdentMLType : global::psidev.info.psi.pi.mzIdentML.Item1.Item2.IdentifiableType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvListXName = System.Xml.Linq.XName.Get("cvList", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AnalysisSoftwareListXName = System.Xml.Linq.XName.Get("AnalysisSoftwareList", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProviderXName = System.Xml.Linq.XName.Get("Provider", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AuditCollectionXName = System.Xml.Linq.XName.Get("AuditCollection", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AnalysisSampleCollectionXName = System.Xml.Linq.XName.Get("AnalysisSampleCollection", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SequenceCollectionXName = System.Xml.Linq.XName.Get("SequenceCollection", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AnalysisCollectionXName = System.Xml.Linq.XName.Get("AnalysisCollection", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AnalysisProtocolCollectionXName = System.Xml.Linq.XName.Get("AnalysisProtocolCollection", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DataCollectionXName = System.Xml.Linq.XName.Get("DataCollection", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BibliographicReferenceXName = System.Xml.Linq.XName.Get("BibliographicReference", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<BibliographicReferenceType> BibliographicReferenceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName creationDateXName = System.Xml.Linq.XName.Get("creationDate", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName versionXName = System.Xml.Linq.XName.Get("version", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("MzIdentMLType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator MzIdentMLType(XElement xe) { return XTypedServices.ToXTypedElement<MzIdentMLType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MzIdentMLType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(cvListXName), new NamedContentModelEntity(AnalysisSoftwareListXName), new NamedContentModelEntity(ProviderXName), new NamedContentModelEntity(AuditCollectionXName), new NamedContentModelEntity(AnalysisSampleCollectionXName), new NamedContentModelEntity(SequenceCollectionXName), new NamedContentModelEntity(AnalysisCollectionXName), new NamedContentModelEntity(AnalysisProtocolCollectionXName), new NamedContentModelEntity(DataCollectionXName), new NamedContentModelEntity(BibliographicReferenceXName));
        }
        
        /// <summary>
        /// <para>
        /// The upper-most hierarchy level of mzIdentML with sub-containers for example describing software, protocols and search results (spectrum identifications or protein detection results). 
        /// </para>
        /// <para>
        /// Regular expression: (cvList, AnalysisSoftwareList?, Provider?, AuditCollection?, AnalysisSampleCollection?, SequenceCollection?, AnalysisCollection, AnalysisProtocolCollection, DataCollection, BibliographicReference*)
        /// </para>
        /// </summary>
        public MzIdentMLType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (cvList, AnalysisSoftwareList?, Provider?, AuditCollection?, AnalysisSampleCollection?, SequenceCollection?, AnalysisCollection, AnalysisProtocolCollection, DataCollection, BibliographicReference*)
        /// </para>
        /// </summary>
        public virtual CVListType cvList {
            get {
                XElement x = this.GetElement(cvListXName);
                return ((CVListType)(x));
            }
            set {
                this.SetElement(cvListXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (cvList, AnalysisSoftwareList?, Provider?, AuditCollection?, AnalysisSampleCollection?, SequenceCollection?, AnalysisCollection, AnalysisProtocolCollection, DataCollection, BibliographicReference*)
        /// </para>
        /// </summary>
        public virtual AnalysisSoftwareListType AnalysisSoftwareList {
            get {
                XElement x = this.GetElement(AnalysisSoftwareListXName);
                return ((AnalysisSoftwareListType)(x));
            }
            set {
                this.SetElement(AnalysisSoftwareListXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The Provider of the mzIdentML record in terms of the contact and software. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (cvList, AnalysisSoftwareList?, Provider?, AuditCollection?, AnalysisSampleCollection?, SequenceCollection?, AnalysisCollection, AnalysisProtocolCollection, DataCollection, BibliographicReference*)
        /// </para>
        /// </summary>
        public virtual ProviderType Provider {
            get {
                XElement x = this.GetElement(ProviderXName);
                return ((ProviderType)(x));
            }
            set {
                this.SetElement(ProviderXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (cvList, AnalysisSoftwareList?, Provider?, AuditCollection?, AnalysisSampleCollection?, SequenceCollection?, AnalysisCollection, AnalysisProtocolCollection, DataCollection, BibliographicReference*)
        /// </para>
        /// </summary>
        public virtual AuditCollectionType AuditCollection {
            get {
                XElement x = this.GetElement(AuditCollectionXName);
                return ((AuditCollectionType)(x));
            }
            set {
                this.SetElement(AuditCollectionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (cvList, AnalysisSoftwareList?, Provider?, AuditCollection?, AnalysisSampleCollection?, SequenceCollection?, AnalysisCollection, AnalysisProtocolCollection, DataCollection, BibliographicReference*)
        /// </para>
        /// </summary>
        public virtual AnalysisSampleCollectionType AnalysisSampleCollection {
            get {
                XElement x = this.GetElement(AnalysisSampleCollectionXName);
                return ((AnalysisSampleCollectionType)(x));
            }
            set {
                this.SetElement(AnalysisSampleCollectionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (cvList, AnalysisSoftwareList?, Provider?, AuditCollection?, AnalysisSampleCollection?, SequenceCollection?, AnalysisCollection, AnalysisProtocolCollection, DataCollection, BibliographicReference*)
        /// </para>
        /// </summary>
        public virtual SequenceCollectionType SequenceCollection {
            get {
                XElement x = this.GetElement(SequenceCollectionXName);
                return ((SequenceCollectionType)(x));
            }
            set {
                this.SetElement(SequenceCollectionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (cvList, AnalysisSoftwareList?, Provider?, AuditCollection?, AnalysisSampleCollection?, SequenceCollection?, AnalysisCollection, AnalysisProtocolCollection, DataCollection, BibliographicReference*)
        /// </para>
        /// </summary>
        public virtual AnalysisCollectionType AnalysisCollection {
            get {
                XElement x = this.GetElement(AnalysisCollectionXName);
                return ((AnalysisCollectionType)(x));
            }
            set {
                this.SetElement(AnalysisCollectionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (cvList, AnalysisSoftwareList?, Provider?, AuditCollection?, AnalysisSampleCollection?, SequenceCollection?, AnalysisCollection, AnalysisProtocolCollection, DataCollection, BibliographicReference*)
        /// </para>
        /// </summary>
        public virtual AnalysisProtocolCollectionType AnalysisProtocolCollection {
            get {
                XElement x = this.GetElement(AnalysisProtocolCollectionXName);
                return ((AnalysisProtocolCollectionType)(x));
            }
            set {
                this.SetElement(AnalysisProtocolCollectionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (cvList, AnalysisSoftwareList?, Provider?, AuditCollection?, AnalysisSampleCollection?, SequenceCollection?, AnalysisCollection, AnalysisProtocolCollection, DataCollection, BibliographicReference*)
        /// </para>
        /// </summary>
        public virtual DataCollectionType DataCollection {
            get {
                XElement x = this.GetElement(DataCollectionXName);
                return ((DataCollectionType)(x));
            }
            set {
                this.SetElement(DataCollectionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Any bibliographic references associated with the file
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvList, AnalysisSoftwareList?, Provider?, AuditCollection?, AnalysisSampleCollection?, SequenceCollection?, AnalysisCollection, AnalysisProtocolCollection, DataCollection, BibliographicReference*)
        /// </para>
        /// </summary>
        public virtual IList<BibliographicReferenceType> BibliographicReference {
            get {
                if ((this.BibliographicReferenceField == null)) {
                    this.BibliographicReferenceField = new XTypedList<BibliographicReferenceType>(this, LinqToXsdTypeManager.Instance, BibliographicReferenceXName);
                }
                return this.BibliographicReferenceField;
            }
            set {
                if ((value == null)) {
                    this.BibliographicReferenceField = null;
                }
                else {
                    if ((this.BibliographicReferenceField == null)) {
                        this.BibliographicReferenceField = XTypedList<BibliographicReferenceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, BibliographicReferenceXName);
                    }
                    else {
                        XTypedServices.SetList<BibliographicReferenceType>(this.BibliographicReferenceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The date on which the file was produced.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? creationDate {
            get {
                XAttribute x = this.Attribute(creationDateXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetAttribute(creationDateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The version of the schema this instance document refers to, in the format x.y.z. Changes to z should not affect prevent instance documents from validating. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string version {
            get {
                XAttribute x = this.Attribute(versionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(versionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MzIdentMLType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(cvListXName, typeof(CVListType));
            localElementDictionary.Add(AnalysisSoftwareListXName, typeof(AnalysisSoftwareListType));
            localElementDictionary.Add(ProviderXName, typeof(ProviderType));
            localElementDictionary.Add(AuditCollectionXName, typeof(AuditCollectionType));
            localElementDictionary.Add(AnalysisSampleCollectionXName, typeof(AnalysisSampleCollectionType));
            localElementDictionary.Add(SequenceCollectionXName, typeof(SequenceCollectionType));
            localElementDictionary.Add(AnalysisCollectionXName, typeof(AnalysisCollectionType));
            localElementDictionary.Add(AnalysisProtocolCollectionXName, typeof(AnalysisProtocolCollectionType));
            localElementDictionary.Add(DataCollectionXName, typeof(DataCollectionType));
            localElementDictionary.Add(BibliographicReferenceXName, typeof(BibliographicReferenceType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A database for searching mass spectra. Examples include a set of amino acid sequence entries, nucleotide databases (e.g. 6 frame translated) or annotated spectra libraries. 
    /// </para>
    /// <para>
    /// Regular expression: (ExternalFormatDocumentation?, FileFormat, DatabaseName, cvParam*)
    /// </para>
    /// </summary>
    public partial class SearchDatabaseType : global::psidev.info.psi.pi.mzIdentML.Item1.Item2.ExternalDataType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DatabaseNameXName = System.Xml.Linq.XName.Get("DatabaseName", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CVParamType> cvParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName versionXName = System.Xml.Linq.XName.Get("version", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName releaseDateXName = System.Xml.Linq.XName.Get("releaseDate", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName numDatabaseSequencesXName = System.Xml.Linq.XName.Get("numDatabaseSequences", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName numResiduesXName = System.Xml.Linq.XName.Get("numResidues", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SearchDatabaseType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SearchDatabaseType(XElement xe) { return XTypedServices.ToXTypedElement<SearchDatabaseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SearchDatabaseType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ExternalFormatDocumentationXName), new NamedContentModelEntity(FileFormatXName), new NamedContentModelEntity(DatabaseNameXName), new NamedContentModelEntity(cvParamXName));
        }
        
        /// <summary>
        /// <para>
        /// A database for searching mass spectra. Examples include a set of amino acid sequence entries, nucleotide databases (e.g. 6 frame translated) or annotated spectra libraries. 
        /// </para>
        /// <para>
        /// Regular expression: (ExternalFormatDocumentation?, FileFormat, DatabaseName, cvParam*)
        /// </para>
        /// </summary>
        public SearchDatabaseType() {
        }
        
        /// <summary>
        /// <para>
        /// The database name may be given as a cvParam if it maps exactly to one of the release databases listed in the CV, otherwise a userParam should be used. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ExternalFormatDocumentation?, FileFormat, DatabaseName, cvParam*)
        /// </para>
        /// </summary>
        public virtual ParamType DatabaseName {
            get {
                XElement x = this.GetElement(DatabaseNameXName);
                return ((ParamType)(x));
            }
            set {
                this.SetElement(DatabaseNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ExternalFormatDocumentation?, FileFormat, DatabaseName, cvParam*)
        /// </para>
        /// </summary>
        public virtual IList<CVParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<CVParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<CVParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<CVParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The version of the database.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string version {
            get {
                XAttribute x = this.Attribute(versionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(versionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The date and time the database was released to the public; omit this attribute when the date and time are unknown or not applicable (e.g. custom databases). 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? releaseDate {
            get {
                XAttribute x = this.Attribute(releaseDateXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetAttribute(releaseDateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The total number of sequences in the database.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int64? numDatabaseSequences {
            get {
                XAttribute x = this.Attribute(numDatabaseSequencesXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<long>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
            }
            set {
                this.SetAttribute(numDatabaseSequencesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The number of residues in the database.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int64? numResidues {
            get {
                XAttribute x = this.Attribute(numResiduesXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<long>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
            }
            set {
                this.SetAttribute(numResiduesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SearchDatabaseType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ExternalFormatDocumentationXName, typeof(System.Uri));
            localElementDictionary.Add(FileFormatXName, typeof(FileFormatType));
            localElementDictionary.Add(DatabaseNameXName, typeof(ParamType));
            localElementDictionary.Add(cvParamXName, typeof(CVParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A file from which this mzIdentML instance was created.
    /// </para>
    /// <para>
    /// Regular expression: (ExternalFormatDocumentation?, FileFormat, (cvParam | userParam)*)
    /// </para>
    /// </summary>
    public partial class SourceFileType : global::psidev.info.psi.pi.mzIdentML.Item1.Item2.ExternalDataType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CVParamType> cvParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userParamXName = System.Xml.Linq.XName.Get("userParam", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserParamType> userParamField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SourceFileType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SourceFileType(XElement xe) { return XTypedServices.ToXTypedElement<SourceFileType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SourceFileType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ExternalFormatDocumentationXName), new NamedContentModelEntity(FileFormatXName), new ChoiceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName)));
        }
        
        /// <summary>
        /// <para>
        /// A file from which this mzIdentML instance was created.
        /// </para>
        /// <para>
        /// Regular expression: (ExternalFormatDocumentation?, FileFormat, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public SourceFileType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (ExternalFormatDocumentation?, FileFormat, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public virtual IList<CVParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<CVParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<CVParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<CVParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (ExternalFormatDocumentation?, FileFormat, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public virtual IList<UserParamType> userParam {
            get {
                if ((this.userParamField == null)) {
                    this.userParamField = new XTypedList<UserParamType>(this, LinqToXsdTypeManager.Instance, userParamXName);
                }
                return this.userParamField;
            }
            set {
                if ((value == null)) {
                    this.userParamField = null;
                }
                else {
                    if ((this.userParamField == null)) {
                        this.userParamField = XTypedList<UserParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, userParamXName);
                    }
                    else {
                        XTypedServices.SetList<UserParamType>(this.userParamField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SourceFileType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ExternalFormatDocumentationXName, typeof(System.Uri));
            localElementDictionary.Add(FileFormatXName, typeof(FileFormatType));
            localElementDictionary.Add(cvParamXName, typeof(CVParamType));
            localElementDictionary.Add(userParamXName, typeof(UserParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The specification of static/variable modifications (e.g. Oxidation of Methionine) that are to be considered in the spectra search. 
    /// </para>
    /// <para>
    /// Regular expression: (SearchModification+)
    /// </para>
    /// </summary>
    public partial class ModificationParamsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SearchModificationXName = System.Xml.Linq.XName.Get("SearchModification", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SearchModificationType> SearchModificationField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ModificationParamsType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ModificationParamsType(XElement xe) { return XTypedServices.ToXTypedElement<ModificationParamsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ModificationParamsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SearchModificationXName));
        }
        
        /// <summary>
        /// <para>
        /// The specification of static/variable modifications (e.g. Oxidation of Methionine) that are to be considered in the spectra search. 
        /// </para>
        /// <para>
        /// Regular expression: (SearchModification+)
        /// </para>
        /// </summary>
        public ModificationParamsType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SearchModification+)
        /// </para>
        /// </summary>
        public virtual IList<SearchModificationType> SearchModification {
            get {
                if ((this.SearchModificationField == null)) {
                    this.SearchModificationField = new XTypedList<SearchModificationType>(this, LinqToXsdTypeManager.Instance, SearchModificationXName);
                }
                return this.SearchModificationField;
            }
            set {
                if ((value == null)) {
                    this.SearchModificationField = null;
                }
                else {
                    if ((this.SearchModificationField == null)) {
                        this.SearchModificationField = XTypedList<SearchModificationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SearchModificationXName);
                    }
                    else {
                        XTypedServices.SetList<SearchModificationType>(this.SearchModificationField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ModificationParamsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SearchModificationXName, typeof(SearchModificationType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Filters applied to the search database. The filter must include at least one of Include and Exclude. If both are used, it is assumed that inclusion is performed first. 
    /// </para>
    /// <para>
    /// Regular expression: (FilterType1, Include?, Exclude?)
    /// </para>
    /// </summary>
    public partial class FilterType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FilterType1XName = System.Xml.Linq.XName.Get("FilterType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IncludeXName = System.Xml.Linq.XName.Get("Include", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExcludeXName = System.Xml.Linq.XName.Get("Exclude", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FilterType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FilterType(XElement xe) { return XTypedServices.ToXTypedElement<FilterType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FilterType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FilterType1XName), new NamedContentModelEntity(IncludeXName), new NamedContentModelEntity(ExcludeXName));
        }
        
        /// <summary>
        /// <para>
        /// Filters applied to the search database. The filter must include at least one of Include and Exclude. If both are used, it is assumed that inclusion is performed first. 
        /// </para>
        /// <para>
        /// Regular expression: (FilterType1, Include?, Exclude?)
        /// </para>
        /// </summary>
        public FilterType() {
        }
        
        /// <summary>
        /// <para>
        /// The type of filter e.g. database taxonomy filter, pi filter, mw filter 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (FilterType1, Include?, Exclude?)
        /// </para>
        /// </summary>
        public virtual ParamType FilterType1 {
            get {
                XElement x = this.GetElement(FilterType1XName);
                return ((ParamType)(x));
            }
            set {
                this.SetElement(FilterType1XName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// All sequences fulfilling the specifed criteria are included.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FilterType1, Include?, Exclude?)
        /// </para>
        /// </summary>
        public virtual ParamListType Include {
            get {
                XElement x = this.GetElement(IncludeXName);
                return ((ParamListType)(x));
            }
            set {
                this.SetElement(IncludeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// All sequences fulfilling the specifed criteria are excluded.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FilterType1, Include?, Exclude?)
        /// </para>
        /// </summary>
        public virtual ParamListType Exclude {
            get {
                XElement x = this.GetElement(ExcludeXName);
                return ((ParamListType)(x));
            }
            set {
                this.SetElement(ExcludeXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FilterType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FilterType1XName, typeof(ParamType));
            localElementDictionary.Add(IncludeXName, typeof(ParamListType));
            localElementDictionary.Add(ExcludeXName, typeof(ParamListType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The specification of filters applied to the database searched.
    ///			
    /// </para>
    /// <para>
    /// Regular expression: (Filter+)
    /// </para>
    /// </summary>
    public partial class DatabaseFiltersType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FilterXName = System.Xml.Linq.XName.Get("Filter", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FilterType> FilterField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DatabaseFiltersType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DatabaseFiltersType(XElement xe) { return XTypedServices.ToXTypedElement<DatabaseFiltersType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DatabaseFiltersType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FilterXName));
        }
        
        /// <summary>
        /// <para>
        /// The specification of filters applied to the database searched.
        ///			
        /// </para>
        /// <para>
        /// Regular expression: (Filter+)
        /// </para>
        /// </summary>
        public DatabaseFiltersType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Filter+)
        /// </para>
        /// </summary>
        public virtual IList<FilterType> Filter {
            get {
                if ((this.FilterField == null)) {
                    this.FilterField = new XTypedList<FilterType>(this, LinqToXsdTypeManager.Instance, FilterXName);
                }
                return this.FilterField;
            }
            set {
                if ((value == null)) {
                    this.FilterField = null;
                }
                else {
                    if ((this.FilterField == null)) {
                        this.FilterField = XTypedList<FilterType>.Initialize(this, LinqToXsdTypeManager.Instance, value, FilterXName);
                    }
                    else {
                        XTypedServices.SetList<FilterType>(this.FilterField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DatabaseFiltersType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FilterXName, typeof(FilterType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The table used to translate codons into nucleic acids e.g. by reference to the NCBI translation table. 
    /// </para>
    /// <para>
    /// Regular expression: (cvParam*)
    /// </para>
    /// </summary>
    public partial class TranslationTableType : global::psidev.info.psi.pi.mzIdentML.Item1.Item2.IdentifiableType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CVParamType> cvParamField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TranslationTableType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TranslationTableType(XElement xe) { return XTypedServices.ToXTypedElement<TranslationTableType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TranslationTableType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(cvParamXName));
        }
        
        /// <summary>
        /// <para>
        /// The table used to translate codons into nucleic acids e.g. by reference to the NCBI translation table. 
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*)
        /// </para>
        /// </summary>
        public TranslationTableType() {
        }
        
        /// <summary>
        /// <para>
        /// The details specifying this translation table are captured as cvParams, e.g. translation table, translation start codons and translation table description (see specification document and mapping file)
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam*)
        /// </para>
        /// </summary>
        public virtual IList<CVParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<CVParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<CVParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<CVParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TranslationTableType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(cvParamXName, typeof(CVParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A specification of how a nucleic acid sequence database was translated for searching. 
    /// </para>
    /// <para>
    /// Regular expression: (TranslationTable+)
    /// </para>
    /// </summary>
    public partial class DatabaseTranslationType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TranslationTableXName = System.Xml.Linq.XName.Get("TranslationTable", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TranslationTableType> TranslationTableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName framesXName = System.Xml.Linq.XName.Get("frames", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DatabaseTranslationType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DatabaseTranslationType(XElement xe) { return XTypedServices.ToXTypedElement<DatabaseTranslationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DatabaseTranslationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TranslationTableXName));
        }
        
        /// <summary>
        /// <para>
        /// A specification of how a nucleic acid sequence database was translated for searching. 
        /// </para>
        /// <para>
        /// Regular expression: (TranslationTable+)
        /// </para>
        /// </summary>
        public DatabaseTranslationType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (TranslationTable+)
        /// </para>
        /// </summary>
        public virtual IList<TranslationTableType> TranslationTable {
            get {
                if ((this.TranslationTableField == null)) {
                    this.TranslationTableField = new XTypedList<TranslationTableType>(this, LinqToXsdTypeManager.Instance, TranslationTableXName);
                }
                return this.TranslationTableField;
            }
            set {
                if ((value == null)) {
                    this.TranslationTableField = null;
                }
                else {
                    if ((this.TranslationTableField == null)) {
                        this.TranslationTableField = XTypedList<TranslationTableType>.Initialize(this, LinqToXsdTypeManager.Instance, value, TranslationTableXName);
                    }
                    else {
                        XTypedServices.SetList<TranslationTableType>(this.TranslationTableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The frames in which the nucleic acid sequence has been translated as a space separated list 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<int> frames {
            get {
                XAttribute x = this.Attribute(framesXName);
                return XTypedServices.ParseListValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetListAttribute(framesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DatabaseTranslationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TranslationTableXName, typeof(TranslationTableType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The parameters and settings of a SpectrumIdentification analysis.
    /// </para>
    /// <para>
    /// Regular expression: (SearchType, AdditionalSearchParams?, ModificationParams?, Enzymes?, MassTable*, FragmentTolerance?, ParentTolerance?, Threshold, DatabaseFilters?, DatabaseTranslation?)
    /// </para>
    /// </summary>
    public partial class SpectrumIdentificationProtocolType : global::psidev.info.psi.pi.mzIdentML.Item1.Item2.IdentifiableType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SearchTypeXName = System.Xml.Linq.XName.Get("SearchType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AdditionalSearchParamsXName = System.Xml.Linq.XName.Get("AdditionalSearchParams", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ModificationParamsXName = System.Xml.Linq.XName.Get("ModificationParams", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EnzymesXName = System.Xml.Linq.XName.Get("Enzymes", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MassTableXName = System.Xml.Linq.XName.Get("MassTable", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MassTableType> MassTableField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FragmentToleranceXName = System.Xml.Linq.XName.Get("FragmentTolerance", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ParentToleranceXName = System.Xml.Linq.XName.Get("ParentTolerance", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ThresholdXName = System.Xml.Linq.XName.Get("Threshold", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DatabaseFiltersXName = System.Xml.Linq.XName.Get("DatabaseFilters", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DatabaseTranslationXName = System.Xml.Linq.XName.Get("DatabaseTranslation", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName analysisSoftware_refXName = System.Xml.Linq.XName.Get("analysisSoftware_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SpectrumIdentificationProtocolType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SpectrumIdentificationProtocolType(XElement xe) { return XTypedServices.ToXTypedElement<SpectrumIdentificationProtocolType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SpectrumIdentificationProtocolType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SearchTypeXName), new NamedContentModelEntity(AdditionalSearchParamsXName), new NamedContentModelEntity(ModificationParamsXName), new NamedContentModelEntity(EnzymesXName), new NamedContentModelEntity(MassTableXName), new NamedContentModelEntity(FragmentToleranceXName), new NamedContentModelEntity(ParentToleranceXName), new NamedContentModelEntity(ThresholdXName), new NamedContentModelEntity(DatabaseFiltersXName), new NamedContentModelEntity(DatabaseTranslationXName));
        }
        
        /// <summary>
        /// <para>
        /// The parameters and settings of a SpectrumIdentification analysis.
        /// </para>
        /// <para>
        /// Regular expression: (SearchType, AdditionalSearchParams?, ModificationParams?, Enzymes?, MassTable*, FragmentTolerance?, ParentTolerance?, Threshold, DatabaseFilters?, DatabaseTranslation?)
        /// </para>
        /// </summary>
        public SpectrumIdentificationProtocolType() {
        }
        
        /// <summary>
        /// <para>
        /// The type of search performed e.g. PMF, Tag searches, MS-MS 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SearchType, AdditionalSearchParams?, ModificationParams?, Enzymes?, MassTable*, FragmentTolerance?, ParentTolerance?, Threshold, DatabaseFilters?, DatabaseTranslation?)
        /// </para>
        /// </summary>
        public virtual ParamType SearchType {
            get {
                XElement x = this.GetElement(SearchTypeXName);
                return ((ParamType)(x));
            }
            set {
                this.SetElement(SearchTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The search parameters other than the modifications searched. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SearchType, AdditionalSearchParams?, ModificationParams?, Enzymes?, MassTable*, FragmentTolerance?, ParentTolerance?, Threshold, DatabaseFilters?, DatabaseTranslation?)
        /// </para>
        /// </summary>
        public virtual ParamListType AdditionalSearchParams {
            get {
                XElement x = this.GetElement(AdditionalSearchParamsXName);
                return ((ParamListType)(x));
            }
            set {
                this.SetElement(AdditionalSearchParamsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SearchType, AdditionalSearchParams?, ModificationParams?, Enzymes?, MassTable*, FragmentTolerance?, ParentTolerance?, Threshold, DatabaseFilters?, DatabaseTranslation?)
        /// </para>
        /// </summary>
        public virtual ModificationParamsType ModificationParams {
            get {
                XElement x = this.GetElement(ModificationParamsXName);
                return ((ModificationParamsType)(x));
            }
            set {
                this.SetElement(ModificationParamsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SearchType, AdditionalSearchParams?, ModificationParams?, Enzymes?, MassTable*, FragmentTolerance?, ParentTolerance?, Threshold, DatabaseFilters?, DatabaseTranslation?)
        /// </para>
        /// </summary>
        public virtual EnzymesType Enzymes {
            get {
                XElement x = this.GetElement(EnzymesXName);
                return ((EnzymesType)(x));
            }
            set {
                this.SetElement(EnzymesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SearchType, AdditionalSearchParams?, ModificationParams?, Enzymes?, MassTable*, FragmentTolerance?, ParentTolerance?, Threshold, DatabaseFilters?, DatabaseTranslation?)
        /// </para>
        /// </summary>
        public virtual IList<MassTableType> MassTable {
            get {
                if ((this.MassTableField == null)) {
                    this.MassTableField = new XTypedList<MassTableType>(this, LinqToXsdTypeManager.Instance, MassTableXName);
                }
                return this.MassTableField;
            }
            set {
                if ((value == null)) {
                    this.MassTableField = null;
                }
                else {
                    if ((this.MassTableField == null)) {
                        this.MassTableField = XTypedList<MassTableType>.Initialize(this, LinqToXsdTypeManager.Instance, value, MassTableXName);
                    }
                    else {
                        XTypedServices.SetList<MassTableType>(this.MassTableField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SearchType, AdditionalSearchParams?, ModificationParams?, Enzymes?, MassTable*, FragmentTolerance?, ParentTolerance?, Threshold, DatabaseFilters?, DatabaseTranslation?)
        /// </para>
        /// </summary>
        public virtual ToleranceType FragmentTolerance {
            get {
                XElement x = this.GetElement(FragmentToleranceXName);
                return ((ToleranceType)(x));
            }
            set {
                this.SetElement(FragmentToleranceXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SearchType, AdditionalSearchParams?, ModificationParams?, Enzymes?, MassTable*, FragmentTolerance?, ParentTolerance?, Threshold, DatabaseFilters?, DatabaseTranslation?)
        /// </para>
        /// </summary>
        public virtual ToleranceType ParentTolerance {
            get {
                XElement x = this.GetElement(ParentToleranceXName);
                return ((ToleranceType)(x));
            }
            set {
                this.SetElement(ParentToleranceXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The threshold(s) applied to determine that a result is significant. If multiple terms are used it is assumed that all conditions are satisfied by the passing results.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SearchType, AdditionalSearchParams?, ModificationParams?, Enzymes?, MassTable*, FragmentTolerance?, ParentTolerance?, Threshold, DatabaseFilters?, DatabaseTranslation?)
        /// </para>
        /// </summary>
        public virtual ParamListType Threshold {
            get {
                XElement x = this.GetElement(ThresholdXName);
                return ((ParamListType)(x));
            }
            set {
                this.SetElement(ThresholdXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SearchType, AdditionalSearchParams?, ModificationParams?, Enzymes?, MassTable*, FragmentTolerance?, ParentTolerance?, Threshold, DatabaseFilters?, DatabaseTranslation?)
        /// </para>
        /// </summary>
        public virtual DatabaseFiltersType DatabaseFilters {
            get {
                XElement x = this.GetElement(DatabaseFiltersXName);
                return ((DatabaseFiltersType)(x));
            }
            set {
                this.SetElement(DatabaseFiltersXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SearchType, AdditionalSearchParams?, ModificationParams?, Enzymes?, MassTable*, FragmentTolerance?, ParentTolerance?, Threshold, DatabaseFilters?, DatabaseTranslation?)
        /// </para>
        /// </summary>
        public virtual DatabaseTranslationType DatabaseTranslation {
            get {
                XElement x = this.GetElement(DatabaseTranslationXName);
                return ((DatabaseTranslationType)(x));
            }
            set {
                this.SetElement(DatabaseTranslationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The search algorithm used, given as a reference to the SoftwareCollection section. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string analysisSoftware_ref {
            get {
                XAttribute x = this.Attribute(analysisSoftware_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(analysisSoftware_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SpectrumIdentificationProtocolType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SearchTypeXName, typeof(ParamType));
            localElementDictionary.Add(AdditionalSearchParamsXName, typeof(ParamListType));
            localElementDictionary.Add(ModificationParamsXName, typeof(ModificationParamsType));
            localElementDictionary.Add(EnzymesXName, typeof(EnzymesType));
            localElementDictionary.Add(MassTableXName, typeof(MassTableType));
            localElementDictionary.Add(FragmentToleranceXName, typeof(ToleranceType));
            localElementDictionary.Add(ParentToleranceXName, typeof(ToleranceType));
            localElementDictionary.Add(ThresholdXName, typeof(ParamListType));
            localElementDictionary.Add(DatabaseFiltersXName, typeof(DatabaseFiltersType));
            localElementDictionary.Add(DatabaseTranslationXName, typeof(DatabaseTranslationType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The attribute referencing an identifier within the SpectraData section. 
    /// </para>
    /// </summary>
    public partial class InputSpectraType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName spectraData_refXName = System.Xml.Linq.XName.Get("spectraData_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("InputSpectraType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
		public static explicit operator InputSpectraType(XElement xe) { return XTypedServices.ToXTypedElement<InputSpectraType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// The attribute referencing an identifier within the SpectraData section. 
        /// </para>
        /// </summary>
        public InputSpectraType() {
        }
        
        /// <summary>
        /// <para>
        /// A reference to the SpectraData element which locates the input spectra to an external file. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string spectraData_ref {
            get {
                XAttribute x = this.Attribute(spectraData_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(spectraData_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<InputSpectraType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// One of the search databases used.
    /// </para>
    /// </summary>
    public partial class SearchDatabaseRefType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName searchDatabase_refXName = System.Xml.Linq.XName.Get("searchDatabase_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SearchDatabaseRefType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
		public static explicit operator SearchDatabaseRefType(XElement xe) { return XTypedServices.ToXTypedElement<SearchDatabaseRefType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// One of the search databases used.
        /// </para>
        /// </summary>
        public SearchDatabaseRefType() {
        }
        
        /// <summary>
        /// <para>
        /// A reference to the database searched.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string searchDatabase_ref {
            get {
                XAttribute x = this.Attribute(searchDatabase_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(searchDatabase_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SearchDatabaseRefType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// An Analysis which tries to identify peptides in input spectra, referencing the database searched, the input spectra, the output results and the protocol that is run. 
    /// </para>
    /// <para>
    /// Regular expression: (InputSpectra+, SearchDatabaseRef+)
    /// </para>
    /// </summary>
    public partial class SpectrumIdentificationType : global::psidev.info.psi.pi.mzIdentML.Item1.Item2.ProtocolApplicationType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InputSpectraXName = System.Xml.Linq.XName.Get("InputSpectra", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<InputSpectraType> InputSpectraField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SearchDatabaseRefXName = System.Xml.Linq.XName.Get("SearchDatabaseRef", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SearchDatabaseRefType> SearchDatabaseRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName spectrumIdentificationProtocol_refXName = System.Xml.Linq.XName.Get("spectrumIdentificationProtocol_ref", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName spectrumIdentificationList_refXName = System.Xml.Linq.XName.Get("spectrumIdentificationList_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SpectrumIdentificationType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SpectrumIdentificationType(XElement xe) { return XTypedServices.ToXTypedElement<SpectrumIdentificationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SpectrumIdentificationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(InputSpectraXName), new NamedContentModelEntity(SearchDatabaseRefXName));
        }
        
        /// <summary>
        /// <para>
        /// An Analysis which tries to identify peptides in input spectra, referencing the database searched, the input spectra, the output results and the protocol that is run. 
        /// </para>
        /// <para>
        /// Regular expression: (InputSpectra+, SearchDatabaseRef+)
        /// </para>
        /// </summary>
        public SpectrumIdentificationType() {
        }
        
        /// <summary>
        /// <para>
        /// One of the spectra data sets used.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (InputSpectra+, SearchDatabaseRef+)
        /// </para>
        /// </summary>
        public virtual IList<InputSpectraType> InputSpectra {
            get {
                if ((this.InputSpectraField == null)) {
                    this.InputSpectraField = new XTypedList<InputSpectraType>(this, LinqToXsdTypeManager.Instance, InputSpectraXName);
                }
                return this.InputSpectraField;
            }
            set {
                if ((value == null)) {
                    this.InputSpectraField = null;
                }
                else {
                    if ((this.InputSpectraField == null)) {
                        this.InputSpectraField = XTypedList<InputSpectraType>.Initialize(this, LinqToXsdTypeManager.Instance, value, InputSpectraXName);
                    }
                    else {
                        XTypedServices.SetList<InputSpectraType>(this.InputSpectraField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (InputSpectra+, SearchDatabaseRef+)
        /// </para>
        /// </summary>
        public virtual IList<SearchDatabaseRefType> SearchDatabaseRef {
            get {
                if ((this.SearchDatabaseRefField == null)) {
                    this.SearchDatabaseRefField = new XTypedList<SearchDatabaseRefType>(this, LinqToXsdTypeManager.Instance, SearchDatabaseRefXName);
                }
                return this.SearchDatabaseRefField;
            }
            set {
                if ((value == null)) {
                    this.SearchDatabaseRefField = null;
                }
                else {
                    if ((this.SearchDatabaseRefField == null)) {
                        this.SearchDatabaseRefField = XTypedList<SearchDatabaseRefType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SearchDatabaseRefXName);
                    }
                    else {
                        XTypedServices.SetList<SearchDatabaseRefType>(this.SearchDatabaseRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A reference to the search protocol used for this SpectrumIdentification. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string spectrumIdentificationProtocol_ref {
            get {
                XAttribute x = this.Attribute(spectrumIdentificationProtocol_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(spectrumIdentificationProtocol_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A reference to the SpectrumIdentificationList produced by this analysis in the DataCollection section. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string spectrumIdentificationList_ref {
            get {
                XAttribute x = this.Attribute(spectrumIdentificationList_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(spectrumIdentificationList_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SpectrumIdentificationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(InputSpectraXName, typeof(InputSpectraType));
            localElementDictionary.Add(SearchDatabaseRefXName, typeof(SearchDatabaseRefType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// References to CV terms defining the measures about product ions to be reported in SpectrumIdentificationItem 
    /// </para>
    /// <para>
    /// Regular expression: (cvParam+)
    /// </para>
    /// </summary>
    public partial class MeasureType : global::psidev.info.psi.pi.mzIdentML.Item1.Item2.IdentifiableType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CVParamType> cvParamField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("MeasureType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator MeasureType(XElement xe) { return XTypedServices.ToXTypedElement<MeasureType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MeasureType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(cvParamXName));
        }
        
        /// <summary>
        /// <para>
        /// References to CV terms defining the measures about product ions to be reported in SpectrumIdentificationItem 
        /// </para>
        /// <para>
        /// Regular expression: (cvParam+)
        /// </para>
        /// </summary>
        public MeasureType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam+)
        /// </para>
        /// </summary>
        public virtual IList<CVParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<CVParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<CVParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<CVParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MeasureType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(cvParamXName, typeof(CVParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Contains the types of measures that will be reported in generic arrays for each SpectrumIdentificationItem e.g. product ion m/z, product ion intensity, product ion m/z error 
    /// </para>
    /// <para>
    /// Regular expression: (Measure+)
    /// </para>
    /// </summary>
    public partial class FragmentationTableType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MeasureXName = System.Xml.Linq.XName.Get("Measure", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MeasureType> MeasureField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FragmentationTableType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FragmentationTableType(XElement xe) { return XTypedServices.ToXTypedElement<FragmentationTableType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FragmentationTableType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(MeasureXName));
        }
        
        /// <summary>
        /// <para>
        /// Contains the types of measures that will be reported in generic arrays for each SpectrumIdentificationItem e.g. product ion m/z, product ion intensity, product ion m/z error 
        /// </para>
        /// <para>
        /// Regular expression: (Measure+)
        /// </para>
        /// </summary>
        public FragmentationTableType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Measure+)
        /// </para>
        /// </summary>
        public virtual IList<MeasureType> Measure {
            get {
                if ((this.MeasureField == null)) {
                    this.MeasureField = new XTypedList<MeasureType>(this, LinqToXsdTypeManager.Instance, MeasureXName);
                }
                return this.MeasureField;
            }
            set {
                if ((value == null)) {
                    this.MeasureField = null;
                }
                else {
                    if ((this.MeasureField == null)) {
                        this.MeasureField = XTypedList<MeasureType>.Initialize(this, LinqToXsdTypeManager.Instance, value, MeasureXName);
                    }
                    else {
                        XTypedServices.SetList<MeasureType>(this.MeasureField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FragmentationTableType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(MeasureXName, typeof(MeasureType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Represents the set of all search results from SpectrumIdentification.
    /// </para>
    /// <para>
    /// Regular expression: (FragmentationTable?, SpectrumIdentificationResult+, (cvParam | userParam)*)
    /// </para>
    /// </summary>
    public partial class SpectrumIdentificationListType : global::psidev.info.psi.pi.mzIdentML.Item1.Item2.IdentifiableType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FragmentationTableXName = System.Xml.Linq.XName.Get("FragmentationTable", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SpectrumIdentificationResultXName = System.Xml.Linq.XName.Get("SpectrumIdentificationResult", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SpectrumIdentificationResultType> SpectrumIdentificationResultField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CVParamType> cvParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userParamXName = System.Xml.Linq.XName.Get("userParam", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserParamType> userParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName numSequencesSearchedXName = System.Xml.Linq.XName.Get("numSequencesSearched", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SpectrumIdentificationListType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SpectrumIdentificationListType(XElement xe) { return XTypedServices.ToXTypedElement<SpectrumIdentificationListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SpectrumIdentificationListType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FragmentationTableXName), new NamedContentModelEntity(SpectrumIdentificationResultXName), new ChoiceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName)));
        }
        
        /// <summary>
        /// <para>
        /// Represents the set of all search results from SpectrumIdentification.
        /// </para>
        /// <para>
        /// Regular expression: (FragmentationTable?, SpectrumIdentificationResult+, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public SpectrumIdentificationListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FragmentationTable?, SpectrumIdentificationResult+, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public virtual FragmentationTableType FragmentationTable {
            get {
                XElement x = this.GetElement(FragmentationTableXName);
                return ((FragmentationTableType)(x));
            }
            set {
                this.SetElement(FragmentationTableXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (FragmentationTable?, SpectrumIdentificationResult+, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public virtual IList<SpectrumIdentificationResultType> SpectrumIdentificationResult {
            get {
                if ((this.SpectrumIdentificationResultField == null)) {
                    this.SpectrumIdentificationResultField = new XTypedList<SpectrumIdentificationResultType>(this, LinqToXsdTypeManager.Instance, SpectrumIdentificationResultXName);
                }
                return this.SpectrumIdentificationResultField;
            }
            set {
                if ((value == null)) {
                    this.SpectrumIdentificationResultField = null;
                }
                else {
                    if ((this.SpectrumIdentificationResultField == null)) {
                        this.SpectrumIdentificationResultField = XTypedList<SpectrumIdentificationResultType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SpectrumIdentificationResultXName);
                    }
                    else {
                        XTypedServices.SetList<SpectrumIdentificationResultType>(this.SpectrumIdentificationResultField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (FragmentationTable?, SpectrumIdentificationResult+, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public virtual IList<CVParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<CVParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<CVParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<CVParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (FragmentationTable?, SpectrumIdentificationResult+, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public virtual IList<UserParamType> userParam {
            get {
                if ((this.userParamField == null)) {
                    this.userParamField = new XTypedList<UserParamType>(this, LinqToXsdTypeManager.Instance, userParamXName);
                }
                return this.userParamField;
            }
            set {
                if ((value == null)) {
                    this.userParamField = null;
                }
                else {
                    if ((this.userParamField == null)) {
                        this.userParamField = XTypedList<UserParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, userParamXName);
                    }
                    else {
                        XTypedServices.SetList<UserParamType>(this.userParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The number of database sequences searched against. This value should be provided unless a de novo search has been performed.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int64? numSequencesSearched {
            get {
                XAttribute x = this.Attribute(numSequencesSearchedXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<long>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
            }
            set {
                this.SetAttribute(numSequencesSearchedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Long).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SpectrumIdentificationListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FragmentationTableXName, typeof(FragmentationTableType));
            localElementDictionary.Add(SpectrumIdentificationResultXName, typeof(SpectrumIdentificationResultType));
            localElementDictionary.Add(cvParamXName, typeof(CVParamType));
            localElementDictionary.Add(userParamXName, typeof(UserParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The specificity rules of the searched modification including for example the probability of a modification's presence or peptide or protein termini. Standard fixed or variable status should be provided by the attribute fixedMod.
    /// </para>
    /// <para>
    /// Regular expression: (cvParam+)
    /// </para>
    /// </summary>
    public partial class SpecificityRulesType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CVParamType> cvParamField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SpecificityRulesType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SpecificityRulesType(XElement xe) { return XTypedServices.ToXTypedElement<SpecificityRulesType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SpecificityRulesType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(cvParamXName));
        }
        
        /// <summary>
        /// <para>
        /// The specificity rules of the searched modification including for example the probability of a modification's presence or peptide or protein termini. Standard fixed or variable status should be provided by the attribute fixedMod.
        /// </para>
        /// <para>
        /// Regular expression: (cvParam+)
        /// </para>
        /// </summary>
        public SpecificityRulesType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam+)
        /// </para>
        /// </summary>
        public virtual IList<CVParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<CVParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<CVParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<CVParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SpecificityRulesType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(cvParamXName, typeof(CVParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Specification of a search modification as parameter for a spectra search. Contains the name of the modification, the mass, the specificity and whether it is a static modification. 
    /// </para>
    /// <para>
    /// Regular expression: (SpecificityRules*, cvParam+)
    /// </para>
    /// </summary>
    public partial class SearchModificationType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SpecificityRulesXName = System.Xml.Linq.XName.Get("SpecificityRules", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SpecificityRulesType> SpecificityRulesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CVParamType> cvParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName fixedModXName = System.Xml.Linq.XName.Get("fixedMod", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName massDeltaXName = System.Xml.Linq.XName.Get("massDelta", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName residuesXName = System.Xml.Linq.XName.Get("residues", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SearchModificationType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SearchModificationType(XElement xe) { return XTypedServices.ToXTypedElement<SearchModificationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SearchModificationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SpecificityRulesXName), new NamedContentModelEntity(cvParamXName));
        }
        
        /// <summary>
        /// <para>
        /// Specification of a search modification as parameter for a spectra search. Contains the name of the modification, the mass, the specificity and whether it is a static modification. 
        /// </para>
        /// <para>
        /// Regular expression: (SpecificityRules*, cvParam+)
        /// </para>
        /// </summary>
        public SearchModificationType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SpecificityRules*, cvParam+)
        /// </para>
        /// </summary>
        public virtual IList<SpecificityRulesType> SpecificityRules {
            get {
                if ((this.SpecificityRulesField == null)) {
                    this.SpecificityRulesField = new XTypedList<SpecificityRulesType>(this, LinqToXsdTypeManager.Instance, SpecificityRulesXName);
                }
                return this.SpecificityRulesField;
            }
            set {
                if ((value == null)) {
                    this.SpecificityRulesField = null;
                }
                else {
                    if ((this.SpecificityRulesField == null)) {
                        this.SpecificityRulesField = XTypedList<SpecificityRulesType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SpecificityRulesXName);
                    }
                    else {
                        XTypedServices.SetList<SpecificityRulesType>(this.SpecificityRulesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The modification is uniquely identified by references to external CVs such as UNIMOD, see specification document and mapping file for more details.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SpecificityRules*, cvParam+)
        /// </para>
        /// </summary>
        public virtual IList<CVParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<CVParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<CVParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<CVParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// True, if the modification is static (i.e. occurs always).
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual bool fixedMod {
            get {
                XAttribute x = this.Attribute(fixedModXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(fixedModXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The mass delta of the searched modification in Daltons.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual float massDelta {
            get {
                XAttribute x = this.Attribute(massDeltaXName);
                return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
            set {
                this.SetAttribute(massDeltaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The residue(s) searched with the specified modification. For N or C terminal modifications that can occur on any residue, the . character should be used to specify any, otherwise the list of amino acids should be provided.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual object residues {
            get {
                XAttribute x = this.Attribute(residuesXName);
                return XTypedServices.ParseUnionValue(x, global::psidev.info.psi.pi.mzIdentML.Item1.Item2.listOfCharsOrAny.TypeDefinition);
            }
            set {
                this.SetUnionAttribute(value, "residues", this, residuesXName, global::psidev.info.psi.pi.mzIdentML.Item1.Item2.listOfCharsOrAny.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SearchModificationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SpecificityRulesXName, typeof(SpecificityRulesType));
            localElementDictionary.Add(cvParamXName, typeof(CVParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// An array of values for a given type of measure and for a particular ion type, in parallel to the index of ions identified. 
    /// </para>
    /// </summary>
    public partial class FragmentArrayType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valuesXName = System.Xml.Linq.XName.Get("values", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName measure_refXName = System.Xml.Linq.XName.Get("measure_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FragmentArrayType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
		public static explicit operator FragmentArrayType(XElement xe) { return XTypedServices.ToXTypedElement<FragmentArrayType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// An array of values for a given type of measure and for a particular ion type, in parallel to the index of ions identified. 
        /// </para>
        /// </summary>
        public FragmentArrayType() {
        }
        
        /// <summary>
        /// <para>
        /// The values of this particular measure, corresponding to the index defined in ion type 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual IList<float> values {
            get {
                XAttribute x = this.Attribute(valuesXName);
                return XTypedServices.ParseListValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
            set {
                this.SetListAttribute(valuesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A reference to the Measure defined in the FragmentationTable
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string measure_ref {
            get {
                XAttribute x = this.Attribute(measure_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(measure_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FragmentArrayType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// IonType defines the index of fragmentation ions being reported, importing a CV term for the type of ion e.g. b ion. Example: if b3 b7 b8 and b10 have been identified, the index attribute will contain 3 7 8 10, and the corresponding values will be reported in parallel arrays below 
    /// </para>
    /// <para>
    /// Regular expression: (FragmentArray*, userParam*, cvParam+)
    /// </para>
    /// </summary>
    public partial class IonTypeType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FragmentArrayXName = System.Xml.Linq.XName.Get("FragmentArray", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FragmentArrayType> FragmentArrayField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userParamXName = System.Xml.Linq.XName.Get("userParam", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserParamType> userParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CVParamType> cvParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName indexXName = System.Xml.Linq.XName.Get("index", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName chargeXName = System.Xml.Linq.XName.Get("charge", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("IonTypeType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator IonTypeType(XElement xe) { return XTypedServices.ToXTypedElement<IonTypeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static IonTypeType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FragmentArrayXName), new NamedContentModelEntity(userParamXName), new NamedContentModelEntity(cvParamXName));
        }
        
        /// <summary>
        /// <para>
        /// IonType defines the index of fragmentation ions being reported, importing a CV term for the type of ion e.g. b ion. Example: if b3 b7 b8 and b10 have been identified, the index attribute will contain 3 7 8 10, and the corresponding values will be reported in parallel arrays below 
        /// </para>
        /// <para>
        /// Regular expression: (FragmentArray*, userParam*, cvParam+)
        /// </para>
        /// </summary>
        public IonTypeType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (FragmentArray*, userParam*, cvParam+)
        /// </para>
        /// </summary>
        public virtual IList<FragmentArrayType> FragmentArray {
            get {
                if ((this.FragmentArrayField == null)) {
                    this.FragmentArrayField = new XTypedList<FragmentArrayType>(this, LinqToXsdTypeManager.Instance, FragmentArrayXName);
                }
                return this.FragmentArrayField;
            }
            set {
                if ((value == null)) {
                    this.FragmentArrayField = null;
                }
                else {
                    if ((this.FragmentArrayField == null)) {
                        this.FragmentArrayField = XTypedList<FragmentArrayType>.Initialize(this, LinqToXsdTypeManager.Instance, value, FragmentArrayXName);
                    }
                    else {
                        XTypedServices.SetList<FragmentArrayType>(this.FragmentArrayField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// In case more information about the ions annotation has to be conveyed, that has no fit in FragmentArray. Note: It is suggested that the value attribute takes the form of a list of the same size as FragmentArray values. However, there is no formal encoding and it cannot be expeceted that other software will process or impart that information properly.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (FragmentArray*, userParam*, cvParam+)
        /// </para>
        /// </summary>
        public virtual IList<UserParamType> userParam {
            get {
                if ((this.userParamField == null)) {
                    this.userParamField = new XTypedList<UserParamType>(this, LinqToXsdTypeManager.Instance, userParamXName);
                }
                return this.userParamField;
            }
            set {
                if ((value == null)) {
                    this.userParamField = null;
                }
                else {
                    if ((this.userParamField == null)) {
                        this.userParamField = XTypedList<UserParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, userParamXName);
                    }
                    else {
                        XTypedServices.SetList<UserParamType>(this.userParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The type of ion identified. In the case of neutral losses, one term should report the ion type, a second term should report the neutral loss - note: this is a change in practice from mzIdentML 1.1.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (FragmentArray*, userParam*, cvParam+)
        /// </para>
        /// </summary>
        public virtual IList<CVParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<CVParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<CVParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<CVParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The index of ions identified as integers, following standard notation for a-c, x-z e.g. if b3 b5 and b6 have been identified, the index would store "3 5 6". For internal ions, the index contains pairs defining the start and end point - see specification document for examples. For immonium ions, the index is the position of the identified ion within the peptide sequence - if the peptide contains the same amino acid in multiple positions that cannot be distinguished, all positions should be given. For precursor ions, including neutral losses, the index value MUST be 0. For any other ions not related to the position within the peptide sequence e.g. quantification reporter ions, the index value MUST be 0. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<decimal> index {
            get {
                XAttribute x = this.Attribute(indexXName);
                return XTypedServices.ParseListValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetListAttribute(indexXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The charge of the identified fragmentation ions.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual int charge {
            get {
                XAttribute x = this.Attribute(chargeXName);
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(chargeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<IonTypeType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FragmentArrayXName, typeof(FragmentArrayType));
            localElementDictionary.Add(userParamXName, typeof(UserParamType));
            localElementDictionary.Add(cvParamXName, typeof(CVParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The product ions identified in this result.
    /// </para>
    /// <para>
    /// Regular expression: (IonType+)
    /// </para>
    /// </summary>
    public partial class FragmentationType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IonTypeXName = System.Xml.Linq.XName.Get("IonType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<IonTypeType> IonTypeField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FragmentationType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FragmentationType(XElement xe) { return XTypedServices.ToXTypedElement<FragmentationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FragmentationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(IonTypeXName));
        }
        
        /// <summary>
        /// <para>
        /// The product ions identified in this result.
        /// </para>
        /// <para>
        /// Regular expression: (IonType+)
        /// </para>
        /// </summary>
        public FragmentationType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (IonType+)
        /// </para>
        /// </summary>
        public virtual IList<IonTypeType> IonType {
            get {
                if ((this.IonTypeField == null)) {
                    this.IonTypeField = new XTypedList<IonTypeType>(this, LinqToXsdTypeManager.Instance, IonTypeXName);
                }
                return this.IonTypeField;
            }
            set {
                if ((value == null)) {
                    this.IonTypeField = null;
                }
                else {
                    if ((this.IonTypeField == null)) {
                        this.IonTypeField = XTypedList<IonTypeType>.Initialize(this, LinqToXsdTypeManager.Instance, value, IonTypeXName);
                    }
                    else {
                        XTypedServices.SetList<IonTypeType>(this.IonTypeField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FragmentationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(IonTypeXName, typeof(IonTypeType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Reference to the PeptideEvidence element identified. If a specific sequence can be assigned to multiple proteins and or positions in a protein all possible PeptideEvidence elements should be referenced here.
    /// </para>
    /// </summary>
    public partial class PeptideEvidenceRefType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName peptideEvidence_refXName = System.Xml.Linq.XName.Get("peptideEvidence_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PeptideEvidenceRefType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
		public static explicit operator PeptideEvidenceRefType(XElement xe) { return XTypedServices.ToXTypedElement<PeptideEvidenceRefType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Reference to the PeptideEvidence element identified. If a specific sequence can be assigned to multiple proteins and or positions in a protein all possible PeptideEvidence elements should be referenced here.
        /// </para>
        /// </summary>
        public PeptideEvidenceRefType() {
        }
        
        /// <summary>
        /// <para>
        /// A reference to the PeptideEvidenceItem element(s).
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string peptideEvidence_ref {
            get {
                XAttribute x = this.Attribute(peptideEvidence_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(peptideEvidence_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PeptideEvidenceRefType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// An identification of a single (poly)peptide, resulting from querying an input spectra, along with the set of confidence values for that identification.
    ///PeptideEvidence elements should be given for all mappings of the corresponding Peptide sequence within protein sequences. 
    /// </para>
    /// <para>
    /// Regular expression: (PeptideEvidenceRef*, Fragmentation?, (cvParam | userParam)*)
    /// </para>
    /// </summary>
    public partial class SpectrumIdentificationItemType : global::psidev.info.psi.pi.mzIdentML.Item1.Item2.IdentifiableType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PeptideEvidenceRefXName = System.Xml.Linq.XName.Get("PeptideEvidenceRef", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PeptideEvidenceRefType> PeptideEvidenceRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FragmentationXName = System.Xml.Linq.XName.Get("Fragmentation", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CVParamType> cvParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userParamXName = System.Xml.Linq.XName.Get("userParam", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserParamType> userParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName chargeStateXName = System.Xml.Linq.XName.Get("chargeState", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName experimentalMassToChargeXName = System.Xml.Linq.XName.Get("experimentalMassToCharge", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName calculatedMassToChargeXName = System.Xml.Linq.XName.Get("calculatedMassToCharge", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName calculatedPIXName = System.Xml.Linq.XName.Get("calculatedPI", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName peptide_refXName = System.Xml.Linq.XName.Get("peptide_ref", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rankXName = System.Xml.Linq.XName.Get("rank", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName passThresholdXName = System.Xml.Linq.XName.Get("passThreshold", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName massTable_refXName = System.Xml.Linq.XName.Get("massTable_ref", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sample_refXName = System.Xml.Linq.XName.Get("sample_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SpectrumIdentificationItemType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SpectrumIdentificationItemType(XElement xe) { return XTypedServices.ToXTypedElement<SpectrumIdentificationItemType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SpectrumIdentificationItemType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PeptideEvidenceRefXName), new NamedContentModelEntity(FragmentationXName), new ChoiceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName)));
        }
        
        /// <summary>
        /// <para>
        /// An identification of a single (poly)peptide, resulting from querying an input spectra, along with the set of confidence values for that identification.
        ///PeptideEvidence elements should be given for all mappings of the corresponding Peptide sequence within protein sequences. 
        /// </para>
        /// <para>
        /// Regular expression: (PeptideEvidenceRef*, Fragmentation?, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public SpectrumIdentificationItemType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (PeptideEvidenceRef*, Fragmentation?, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public virtual IList<PeptideEvidenceRefType> PeptideEvidenceRef {
            get {
                if ((this.PeptideEvidenceRefField == null)) {
                    this.PeptideEvidenceRefField = new XTypedList<PeptideEvidenceRefType>(this, LinqToXsdTypeManager.Instance, PeptideEvidenceRefXName);
                }
                return this.PeptideEvidenceRefField;
            }
            set {
                if ((value == null)) {
                    this.PeptideEvidenceRefField = null;
                }
                else {
                    if ((this.PeptideEvidenceRefField == null)) {
                        this.PeptideEvidenceRefField = XTypedList<PeptideEvidenceRefType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PeptideEvidenceRefXName);
                    }
                    else {
                        XTypedServices.SetList<PeptideEvidenceRefType>(this.PeptideEvidenceRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PeptideEvidenceRef*, Fragmentation?, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public virtual FragmentationType Fragmentation {
            get {
                XElement x = this.GetElement(FragmentationXName);
                return ((FragmentationType)(x));
            }
            set {
                this.SetElement(FragmentationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (PeptideEvidenceRef*, Fragmentation?, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public virtual IList<CVParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<CVParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<CVParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<CVParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (PeptideEvidenceRef*, Fragmentation?, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public virtual IList<UserParamType> userParam {
            get {
                if ((this.userParamField == null)) {
                    this.userParamField = new XTypedList<UserParamType>(this, LinqToXsdTypeManager.Instance, userParamXName);
                }
                return this.userParamField;
            }
            set {
                if ((value == null)) {
                    this.userParamField = null;
                }
                else {
                    if ((this.userParamField == null)) {
                        this.userParamField = XTypedList<UserParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, userParamXName);
                    }
                    else {
                        XTypedServices.SetList<UserParamType>(this.userParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The charge state of the identified peptide.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual int chargeState {
            get {
                XAttribute x = this.Attribute(chargeStateXName);
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(chargeStateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The mass-to-charge value measured in the experiment in Daltons / charge. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double experimentalMassToCharge {
            get {
                XAttribute x = this.Attribute(experimentalMassToChargeXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(experimentalMassToChargeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The theoretical mass-to-charge value calculated for the peptide in Daltons / charge. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? calculatedMassToCharge {
            get {
                XAttribute x = this.Attribute(calculatedMassToChargeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(calculatedMassToChargeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The calculated isoelectric point of the (poly)peptide, with relevant modifications included. Do not supply this value if the PI cannot be calcuated properly. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Single? calculatedPI {
            get {
                XAttribute x = this.Attribute(calculatedPIXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
            set {
                this.SetAttribute(calculatedPIXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A reference to the identified (poly)peptide sequence in the Peptide element. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string peptide_ref {
            get {
                XAttribute x = this.Attribute(peptide_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(peptide_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// For an MS/MS result set, this is the rank of the identification quality as scored by the search engine. 1 is the top rank. If multiple identifications have the same top score, they should all be assigned rank =1. For PMF data, the rank attribute may be meaningless and values of rank = 0 should be given. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual int rank {
            get {
                XAttribute x = this.Attribute(rankXName);
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(rankXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Set to true if the producers of the file has deemed that the identification has passed a given threshold or been validated as correct. If no such threshold has been set, value of true should be given for all results. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual bool passThreshold {
            get {
                XAttribute x = this.Attribute(passThresholdXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(passThresholdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A reference should be given to the MassTable used to calculate the sequenceMass only if more than one MassTable has been given.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string massTable_ref {
            get {
                XAttribute x = this.Attribute(massTable_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(massTable_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A reference should be provided to link the SpectrumIdentificationItem to a Sample if more than one sample has been described in the AnalysisSampleCollection. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string sample_ref {
            get {
                XAttribute x = this.Attribute(sample_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sample_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SpectrumIdentificationItemType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PeptideEvidenceRefXName, typeof(PeptideEvidenceRefType));
            localElementDictionary.Add(FragmentationXName, typeof(FragmentationType));
            localElementDictionary.Add(cvParamXName, typeof(CVParamType));
            localElementDictionary.Add(userParamXName, typeof(UserParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// All identifications made from searching one spectrum. For PMF data, all peptide identifications will be listed underneath as SpectrumIdentificationItems. For MS/MS data, there will be ranked SpectrumIdentificationItems corresponding to possible different peptide IDs.
    /// </para>
    /// <para>
    /// Regular expression: (SpectrumIdentificationItem+, (cvParam | userParam)*)
    /// </para>
    /// </summary>
    public partial class SpectrumIdentificationResultType : global::psidev.info.psi.pi.mzIdentML.Item1.Item2.IdentifiableType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SpectrumIdentificationItemXName = System.Xml.Linq.XName.Get("SpectrumIdentificationItem", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SpectrumIdentificationItemType> SpectrumIdentificationItemField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CVParamType> cvParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userParamXName = System.Xml.Linq.XName.Get("userParam", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserParamType> userParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName spectrumIDXName = System.Xml.Linq.XName.Get("spectrumID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName spectraData_refXName = System.Xml.Linq.XName.Get("spectraData_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SpectrumIdentificationResultType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SpectrumIdentificationResultType(XElement xe) { return XTypedServices.ToXTypedElement<SpectrumIdentificationResultType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SpectrumIdentificationResultType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SpectrumIdentificationItemXName), new ChoiceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName)));
        }
        
        /// <summary>
        /// <para>
        /// All identifications made from searching one spectrum. For PMF data, all peptide identifications will be listed underneath as SpectrumIdentificationItems. For MS/MS data, there will be ranked SpectrumIdentificationItems corresponding to possible different peptide IDs.
        /// </para>
        /// <para>
        /// Regular expression: (SpectrumIdentificationItem+, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public SpectrumIdentificationResultType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SpectrumIdentificationItem+, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public virtual IList<SpectrumIdentificationItemType> SpectrumIdentificationItem {
            get {
                if ((this.SpectrumIdentificationItemField == null)) {
                    this.SpectrumIdentificationItemField = new XTypedList<SpectrumIdentificationItemType>(this, LinqToXsdTypeManager.Instance, SpectrumIdentificationItemXName);
                }
                return this.SpectrumIdentificationItemField;
            }
            set {
                if ((value == null)) {
                    this.SpectrumIdentificationItemField = null;
                }
                else {
                    if ((this.SpectrumIdentificationItemField == null)) {
                        this.SpectrumIdentificationItemField = XTypedList<SpectrumIdentificationItemType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SpectrumIdentificationItemXName);
                    }
                    else {
                        XTypedServices.SetList<SpectrumIdentificationItemType>(this.SpectrumIdentificationItemField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (SpectrumIdentificationItem+, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public virtual IList<CVParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<CVParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<CVParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<CVParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (SpectrumIdentificationItem+, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public virtual IList<UserParamType> userParam {
            get {
                if ((this.userParamField == null)) {
                    this.userParamField = new XTypedList<UserParamType>(this, LinqToXsdTypeManager.Instance, userParamXName);
                }
                return this.userParamField;
            }
            set {
                if ((value == null)) {
                    this.userParamField = null;
                }
                else {
                    if ((this.userParamField == null)) {
                        this.userParamField = XTypedList<UserParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, userParamXName);
                    }
                    else {
                        XTypedServices.SetList<UserParamType>(this.userParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The locally unique id for the spectrum in the spectra data set specified by SpectraData_ref. External guidelines are provided on the use of consistent identifiers for spectra in different external formats. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string spectrumID {
            get {
                XAttribute x = this.Attribute(spectrumIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(spectrumIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A reference to a spectra data set (e.g. a spectra file).
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string spectraData_ref {
            get {
                XAttribute x = this.Attribute(spectraData_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(spectraData_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SpectrumIdentificationResultType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SpectrumIdentificationItemXName, typeof(SpectrumIdentificationItemType));
            localElementDictionary.Add(cvParamXName, typeof(CVParamType));
            localElementDictionary.Add(userParamXName, typeof(UserParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The lists of spectrum identifications that are input to the protein detection process. 
    /// </para>
    /// </summary>
    public partial class InputSpectrumIdentificationsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName spectrumIdentificationList_refXName = System.Xml.Linq.XName.Get("spectrumIdentificationList_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("InputSpectrumIdentificationsType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
		public static explicit operator InputSpectrumIdentificationsType(XElement xe) { return XTypedServices.ToXTypedElement<InputSpectrumIdentificationsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// The lists of spectrum identifications that are input to the protein detection process. 
        /// </para>
        /// </summary>
        public InputSpectrumIdentificationsType() {
        }
        
        /// <summary>
        /// <para>
        /// A reference to the list of spectrum identifications that were input to the process. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string spectrumIdentificationList_ref {
            get {
                XAttribute x = this.Attribute(spectrumIdentificationList_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(spectrumIdentificationList_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<InputSpectrumIdentificationsType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// An Analysis which assembles a set of peptides (e.g. from a spectra search analysis) to proteins. 
    /// </para>
    /// <para>
    /// Regular expression: (InputSpectrumIdentifications+)
    /// </para>
    /// </summary>
    public partial class ProteinDetectionType : global::psidev.info.psi.pi.mzIdentML.Item1.Item2.ProtocolApplicationType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InputSpectrumIdentificationsXName = System.Xml.Linq.XName.Get("InputSpectrumIdentifications", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<InputSpectrumIdentificationsType> InputSpectrumIdentificationsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName proteinDetectionList_refXName = System.Xml.Linq.XName.Get("proteinDetectionList_ref", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName proteinDetectionProtocol_refXName = System.Xml.Linq.XName.Get("proteinDetectionProtocol_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ProteinDetectionType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ProteinDetectionType(XElement xe) { return XTypedServices.ToXTypedElement<ProteinDetectionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ProteinDetectionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(InputSpectrumIdentificationsXName));
        }
        
        /// <summary>
        /// <para>
        /// An Analysis which assembles a set of peptides (e.g. from a spectra search analysis) to proteins. 
        /// </para>
        /// <para>
        /// Regular expression: (InputSpectrumIdentifications+)
        /// </para>
        /// </summary>
        public ProteinDetectionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (InputSpectrumIdentifications+)
        /// </para>
        /// </summary>
        public virtual IList<InputSpectrumIdentificationsType> InputSpectrumIdentifications {
            get {
                if ((this.InputSpectrumIdentificationsField == null)) {
                    this.InputSpectrumIdentificationsField = new XTypedList<InputSpectrumIdentificationsType>(this, LinqToXsdTypeManager.Instance, InputSpectrumIdentificationsXName);
                }
                return this.InputSpectrumIdentificationsField;
            }
            set {
                if ((value == null)) {
                    this.InputSpectrumIdentificationsField = null;
                }
                else {
                    if ((this.InputSpectrumIdentificationsField == null)) {
                        this.InputSpectrumIdentificationsField = XTypedList<InputSpectrumIdentificationsType>.Initialize(this, LinqToXsdTypeManager.Instance, value, InputSpectrumIdentificationsXName);
                    }
                    else {
                        XTypedServices.SetList<InputSpectrumIdentificationsType>(this.InputSpectrumIdentificationsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A reference to the ProteinDetectionList in the DataCollection section. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string proteinDetectionList_ref {
            get {
                XAttribute x = this.Attribute(proteinDetectionList_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(proteinDetectionList_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A reference to the detection protocol used for this ProteinDetection. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string proteinDetectionProtocol_ref {
            get {
                XAttribute x = this.Attribute(proteinDetectionProtocol_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(proteinDetectionProtocol_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ProteinDetectionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(InputSpectrumIdentificationsXName, typeof(InputSpectrumIdentificationsType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The parameters and settings of a ProteinDetection process.
    /// </para>
    /// <para>
    /// Regular expression: (AnalysisParams?, Threshold)
    /// </para>
    /// </summary>
    public partial class ProteinDetectionProtocolType : global::psidev.info.psi.pi.mzIdentML.Item1.Item2.IdentifiableType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AnalysisParamsXName = System.Xml.Linq.XName.Get("AnalysisParams", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ThresholdXName = System.Xml.Linq.XName.Get("Threshold", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName analysisSoftware_refXName = System.Xml.Linq.XName.Get("analysisSoftware_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ProteinDetectionProtocolType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ProteinDetectionProtocolType(XElement xe) { return XTypedServices.ToXTypedElement<ProteinDetectionProtocolType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ProteinDetectionProtocolType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AnalysisParamsXName), new NamedContentModelEntity(ThresholdXName));
        }
        
        /// <summary>
        /// <para>
        /// The parameters and settings of a ProteinDetection process.
        /// </para>
        /// <para>
        /// Regular expression: (AnalysisParams?, Threshold)
        /// </para>
        /// </summary>
        public ProteinDetectionProtocolType() {
        }
        
        /// <summary>
        /// <para>
        /// The parameters and settings for the protein detection given as CV terms. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AnalysisParams?, Threshold)
        /// </para>
        /// </summary>
        public virtual ParamListType AnalysisParams {
            get {
                XElement x = this.GetElement(AnalysisParamsXName);
                return ((ParamListType)(x));
            }
            set {
                this.SetElement(AnalysisParamsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The threshold(s) applied to determine that a result is significant. If multiple terms are used it is assumed that all conditions are satisfied by the passing results.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AnalysisParams?, Threshold)
        /// </para>
        /// </summary>
        public virtual ParamListType Threshold {
            get {
                XElement x = this.GetElement(ThresholdXName);
                return ((ParamListType)(x));
            }
            set {
                this.SetElement(ThresholdXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The protein detection software used, given as a reference to the SoftwareCollection section. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string analysisSoftware_ref {
            get {
                XAttribute x = this.Attribute(analysisSoftware_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(analysisSoftware_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ProteinDetectionProtocolType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AnalysisParamsXName, typeof(ParamListType));
            localElementDictionary.Add(ThresholdXName, typeof(ParamListType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The protein list resulting from a protein detection process.
    /// </para>
    /// <para>
    /// Regular expression: (ProteinAmbiguityGroup*, (cvParam | userParam)*)
    /// </para>
    /// </summary>
    public partial class ProteinDetectionListType : global::psidev.info.psi.pi.mzIdentML.Item1.Item2.IdentifiableType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProteinAmbiguityGroupXName = System.Xml.Linq.XName.Get("ProteinAmbiguityGroup", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ProteinAmbiguityGroupType> ProteinAmbiguityGroupField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CVParamType> cvParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userParamXName = System.Xml.Linq.XName.Get("userParam", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserParamType> userParamField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ProteinDetectionListType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ProteinDetectionListType(XElement xe) { return XTypedServices.ToXTypedElement<ProteinDetectionListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ProteinDetectionListType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ProteinAmbiguityGroupXName), new ChoiceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName)));
        }
        
        /// <summary>
        /// <para>
        /// The protein list resulting from a protein detection process.
        /// </para>
        /// <para>
        /// Regular expression: (ProteinAmbiguityGroup*, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public ProteinDetectionListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ProteinAmbiguityGroup*, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public virtual IList<ProteinAmbiguityGroupType> ProteinAmbiguityGroup {
            get {
                if ((this.ProteinAmbiguityGroupField == null)) {
                    this.ProteinAmbiguityGroupField = new XTypedList<ProteinAmbiguityGroupType>(this, LinqToXsdTypeManager.Instance, ProteinAmbiguityGroupXName);
                }
                return this.ProteinAmbiguityGroupField;
            }
            set {
                if ((value == null)) {
                    this.ProteinAmbiguityGroupField = null;
                }
                else {
                    if ((this.ProteinAmbiguityGroupField == null)) {
                        this.ProteinAmbiguityGroupField = XTypedList<ProteinAmbiguityGroupType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ProteinAmbiguityGroupXName);
                    }
                    else {
                        XTypedServices.SetList<ProteinAmbiguityGroupType>(this.ProteinAmbiguityGroupField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (ProteinAmbiguityGroup*, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public virtual IList<CVParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<CVParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<CVParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<CVParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (ProteinAmbiguityGroup*, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public virtual IList<UserParamType> userParam {
            get {
                if ((this.userParamField == null)) {
                    this.userParamField = new XTypedList<UserParamType>(this, LinqToXsdTypeManager.Instance, userParamXName);
                }
                return this.userParamField;
            }
            set {
                if ((value == null)) {
                    this.userParamField = null;
                }
                else {
                    if ((this.userParamField == null)) {
                        this.userParamField = XTypedList<UserParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, userParamXName);
                    }
                    else {
                        XTypedServices.SetList<UserParamType>(this.userParamField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ProteinDetectionListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ProteinAmbiguityGroupXName, typeof(ProteinAmbiguityGroupType));
            localElementDictionary.Add(cvParamXName, typeof(CVParamType));
            localElementDictionary.Add(userParamXName, typeof(UserParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Reference(s) to the SpectrumIdentificationItem element(s) that support the given PeptideEvidence element. Using these references it is possible to indicate which spectra were actually accepted as evidence for this peptide identification in the given protein.
    /// </para>
    /// </summary>
    public partial class SpectrumIdentificationItemRefType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName spectrumIdentificationItem_refXName = System.Xml.Linq.XName.Get("spectrumIdentificationItem_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SpectrumIdentificationItemRefType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
		public static explicit operator SpectrumIdentificationItemRefType(XElement xe) { return XTypedServices.ToXTypedElement<SpectrumIdentificationItemRefType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Reference(s) to the SpectrumIdentificationItem element(s) that support the given PeptideEvidence element. Using these references it is possible to indicate which spectra were actually accepted as evidence for this peptide identification in the given protein.
        /// </para>
        /// </summary>
        public SpectrumIdentificationItemRefType() {
        }
        
        /// <summary>
        /// <para>
        /// A reference to the SpectrumIdentificationItem element(s).
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string spectrumIdentificationItem_ref {
            get {
                XAttribute x = this.Attribute(spectrumIdentificationItem_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(spectrumIdentificationItem_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SpectrumIdentificationItemRefType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Peptide evidence on which this ProteinHypothesis is based by reference to a PeptideEvidence element. 
    /// </para>
    /// <para>
    /// Regular expression: (SpectrumIdentificationItemRef+)
    /// </para>
    /// </summary>
    public partial class PeptideHypothesisType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SpectrumIdentificationItemRefXName = System.Xml.Linq.XName.Get("SpectrumIdentificationItemRef", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SpectrumIdentificationItemRefType> SpectrumIdentificationItemRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName peptideEvidence_refXName = System.Xml.Linq.XName.Get("peptideEvidence_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PeptideHypothesisType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PeptideHypothesisType(XElement xe) { return XTypedServices.ToXTypedElement<PeptideHypothesisType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PeptideHypothesisType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SpectrumIdentificationItemRefXName));
        }
        
        /// <summary>
        /// <para>
        /// Peptide evidence on which this ProteinHypothesis is based by reference to a PeptideEvidence element. 
        /// </para>
        /// <para>
        /// Regular expression: (SpectrumIdentificationItemRef+)
        /// </para>
        /// </summary>
        public PeptideHypothesisType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SpectrumIdentificationItemRef+)
        /// </para>
        /// </summary>
        public virtual IList<SpectrumIdentificationItemRefType> SpectrumIdentificationItemRef {
            get {
                if ((this.SpectrumIdentificationItemRefField == null)) {
                    this.SpectrumIdentificationItemRefField = new XTypedList<SpectrumIdentificationItemRefType>(this, LinqToXsdTypeManager.Instance, SpectrumIdentificationItemRefXName);
                }
                return this.SpectrumIdentificationItemRefField;
            }
            set {
                if ((value == null)) {
                    this.SpectrumIdentificationItemRefField = null;
                }
                else {
                    if ((this.SpectrumIdentificationItemRefField == null)) {
                        this.SpectrumIdentificationItemRefField = XTypedList<SpectrumIdentificationItemRefType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SpectrumIdentificationItemRefXName);
                    }
                    else {
                        XTypedServices.SetList<SpectrumIdentificationItemRefType>(this.SpectrumIdentificationItemRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A reference to the PeptideEvidence element on which this hypothesis is based. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string peptideEvidence_ref {
            get {
                XAttribute x = this.Attribute(peptideEvidence_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(peptideEvidence_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PeptideHypothesisType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SpectrumIdentificationItemRefXName, typeof(SpectrumIdentificationItemRefType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A single result of the ProteinDetection analysis (i.e. a protein).
    /// </para>
    /// <para>
    /// Regular expression: (PeptideHypothesis+, (cvParam | userParam)*)
    /// </para>
    /// </summary>
    public partial class ProteinDetectionHypothesisType : global::psidev.info.psi.pi.mzIdentML.Item1.Item2.IdentifiableType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PeptideHypothesisXName = System.Xml.Linq.XName.Get("PeptideHypothesis", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PeptideHypothesisType> PeptideHypothesisField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CVParamType> cvParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userParamXName = System.Xml.Linq.XName.Get("userParam", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserParamType> userParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dBSequence_refXName = System.Xml.Linq.XName.Get("dBSequence_ref", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName passThresholdXName = System.Xml.Linq.XName.Get("passThreshold", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ProteinDetectionHypothesisType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ProteinDetectionHypothesisType(XElement xe) { return XTypedServices.ToXTypedElement<ProteinDetectionHypothesisType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ProteinDetectionHypothesisType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PeptideHypothesisXName), new ChoiceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName)));
        }
        
        /// <summary>
        /// <para>
        /// A single result of the ProteinDetection analysis (i.e. a protein).
        /// </para>
        /// <para>
        /// Regular expression: (PeptideHypothesis+, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public ProteinDetectionHypothesisType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (PeptideHypothesis+, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public virtual IList<PeptideHypothesisType> PeptideHypothesis {
            get {
                if ((this.PeptideHypothesisField == null)) {
                    this.PeptideHypothesisField = new XTypedList<PeptideHypothesisType>(this, LinqToXsdTypeManager.Instance, PeptideHypothesisXName);
                }
                return this.PeptideHypothesisField;
            }
            set {
                if ((value == null)) {
                    this.PeptideHypothesisField = null;
                }
                else {
                    if ((this.PeptideHypothesisField == null)) {
                        this.PeptideHypothesisField = XTypedList<PeptideHypothesisType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PeptideHypothesisXName);
                    }
                    else {
                        XTypedServices.SetList<PeptideHypothesisType>(this.PeptideHypothesisField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (PeptideHypothesis+, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public virtual IList<CVParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<CVParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<CVParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<CVParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (PeptideHypothesis+, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public virtual IList<UserParamType> userParam {
            get {
                if ((this.userParamField == null)) {
                    this.userParamField = new XTypedList<UserParamType>(this, LinqToXsdTypeManager.Instance, userParamXName);
                }
                return this.userParamField;
            }
            set {
                if ((value == null)) {
                    this.userParamField = null;
                }
                else {
                    if ((this.userParamField == null)) {
                        this.userParamField = XTypedList<UserParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, userParamXName);
                    }
                    else {
                        XTypedServices.SetList<UserParamType>(this.userParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A reference to the corresponding DBSequence entry. Note - this attribute was optional in mzIdentML 1.1 but is now mandatory in mzIdentML 1.2. Consuming software should assume that the DBSequence entry referenced here is the definitive identifier for the protein. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string dBSequence_ref {
            get {
                XAttribute x = this.Attribute(dBSequence_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(dBSequence_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Set to true if the producers of the file has deemed that the ProteinDetectionHypothesis has passed a given threshold or been validated as correct. If no such threshold has been set, value of true should be given for all results. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual bool passThreshold {
            get {
                XAttribute x = this.Attribute(passThresholdXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(passThresholdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ProteinDetectionHypothesisType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PeptideHypothesisXName, typeof(PeptideHypothesisType));
            localElementDictionary.Add(cvParamXName, typeof(CVParamType));
            localElementDictionary.Add(userParamXName, typeof(UserParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A set of logically related results from a protein detection, for example to represent conflicting assignments of peptides to proteins.
    ///			
    /// </para>
    /// <para>
    /// Regular expression: (ProteinDetectionHypothesis+, (cvParam | userParam)*)
    /// </para>
    /// </summary>
    public partial class ProteinAmbiguityGroupType : global::psidev.info.psi.pi.mzIdentML.Item1.Item2.IdentifiableType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProteinDetectionHypothesisXName = System.Xml.Linq.XName.Get("ProteinDetectionHypothesis", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ProteinDetectionHypothesisType> ProteinDetectionHypothesisField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CVParamType> cvParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userParamXName = System.Xml.Linq.XName.Get("userParam", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserParamType> userParamField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ProteinAmbiguityGroupType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ProteinAmbiguityGroupType(XElement xe) { return XTypedServices.ToXTypedElement<ProteinAmbiguityGroupType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ProteinAmbiguityGroupType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ProteinDetectionHypothesisXName), new ChoiceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName)));
        }
        
        /// <summary>
        /// <para>
        /// A set of logically related results from a protein detection, for example to represent conflicting assignments of peptides to proteins.
        ///			
        /// </para>
        /// <para>
        /// Regular expression: (ProteinDetectionHypothesis+, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public ProteinAmbiguityGroupType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ProteinDetectionHypothesis+, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public virtual IList<ProteinDetectionHypothesisType> ProteinDetectionHypothesis {
            get {
                if ((this.ProteinDetectionHypothesisField == null)) {
                    this.ProteinDetectionHypothesisField = new XTypedList<ProteinDetectionHypothesisType>(this, LinqToXsdTypeManager.Instance, ProteinDetectionHypothesisXName);
                }
                return this.ProteinDetectionHypothesisField;
            }
            set {
                if ((value == null)) {
                    this.ProteinDetectionHypothesisField = null;
                }
                else {
                    if ((this.ProteinDetectionHypothesisField == null)) {
                        this.ProteinDetectionHypothesisField = XTypedList<ProteinDetectionHypothesisType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ProteinDetectionHypothesisXName);
                    }
                    else {
                        XTypedServices.SetList<ProteinDetectionHypothesisType>(this.ProteinDetectionHypothesisField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (ProteinDetectionHypothesis+, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public virtual IList<CVParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<CVParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<CVParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<CVParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (ProteinDetectionHypothesis+, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public virtual IList<UserParamType> userParam {
            get {
                if ((this.userParamField == null)) {
                    this.userParamField = new XTypedList<UserParamType>(this, LinqToXsdTypeManager.Instance, userParamXName);
                }
                return this.userParamField;
            }
            set {
                if ((value == null)) {
                    this.userParamField = null;
                }
                else {
                    if ((this.userParamField == null)) {
                        this.userParamField = XTypedList<UserParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, userParamXName);
                    }
                    else {
                        XTypedServices.SetList<UserParamType>(this.userParamField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ProteinAmbiguityGroupType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ProteinDetectionHypothesisXName, typeof(ProteinDetectionHypothesisType));
            localElementDictionary.Add(cvParamXName, typeof(CVParamType));
            localElementDictionary.Add(userParamXName, typeof(UserParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A molecule modification specification. If n modifications have been found on a peptide, there should be n instances of Modification. If multiple modifications are provided as cvParams, it is assumed that the modification is ambiguous i.e. one modification or another. A cvParam must be provided with the identification of the modification sourced from a suitable CV e.g. UNIMOD. If the modification is not present in the CV (and this will be checked by the semantic validator within a given tolerance window), there is a â€œunknown modificationâ€ CV term that must be used instead. A neutral loss should be defined as an additional CVParam within Modification. If more complex information should be given about neutral losses (such as presence/absence on particular product ions), this can additionally be encoded within the FragmentationArray. 
    /// </para>
    /// <para>
    /// Regular expression: (cvParam+)
    /// </para>
    /// </summary>
    public partial class ModificationType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CVParamType> cvParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locationXName = System.Xml.Linq.XName.Get("location", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName residuesXName = System.Xml.Linq.XName.Get("residues", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName avgMassDeltaXName = System.Xml.Linq.XName.Get("avgMassDelta", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName monoisotopicMassDeltaXName = System.Xml.Linq.XName.Get("monoisotopicMassDelta", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ModificationType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ModificationType(XElement xe) { return XTypedServices.ToXTypedElement<ModificationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ModificationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(cvParamXName));
        }
        
        /// <summary>
        /// <para>
        /// A molecule modification specification. If n modifications have been found on a peptide, there should be n instances of Modification. If multiple modifications are provided as cvParams, it is assumed that the modification is ambiguous i.e. one modification or another. A cvParam must be provided with the identification of the modification sourced from a suitable CV e.g. UNIMOD. If the modification is not present in the CV (and this will be checked by the semantic validator within a given tolerance window), there is a â€œunknown modificationâ€ CV term that must be used instead. A neutral loss should be defined as an additional CVParam within Modification. If more complex information should be given about neutral losses (such as presence/absence on particular product ions), this can additionally be encoded within the FragmentationArray. 
        /// </para>
        /// <para>
        /// Regular expression: (cvParam+)
        /// </para>
        /// </summary>
        public ModificationType() {
        }
        
        /// <summary>
        /// <para>
        /// CV terms capturing the modification, sourced from an appropriate controlled vocabulary.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam+)
        /// </para>
        /// </summary>
        public virtual IList<CVParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<CVParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<CVParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<CVParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Location of the modification within the peptide - position in peptide sequence, counted from the N-terminus residue, starting at position 1. Specific modifications to the N-terminus should be given the location 0. Modification to the C-terminus should be given as peptide length + 1. If the modification location is unknown e.g. for PMF data, this attribute should be omitted.	
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? location {
            get {
                XAttribute x = this.Attribute(locationXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(locationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Specification of the residue (amino acid) on which the modification occurs. If multiple values are given, it is assumed that the exact residue modified is unknown i.e. the modification is to ONE of the residues listed. Multiple residues would usually only be specified for PMF data.
        ///				
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> residues {
            get {
                XAttribute x = this.Attribute(residuesXName);
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetListAttribute(residuesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Atomic mass delta considering the natural distribution of isotopes in Daltons. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? avgMassDelta {
            get {
                XAttribute x = this.Attribute(avgMassDeltaXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(avgMassDeltaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Atomic mass delta when assuming only the most common isotope of elements in Daltons. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? monoisotopicMassDelta {
            get {
                XAttribute x = this.Attribute(monoisotopicMassDeltaXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(monoisotopicMassDeltaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ModificationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(cvParamXName, typeof(CVParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// One (poly)peptide (a sequence with modifications). The combination of Peptide sequence and modifications must be unique in the file.
    /// </para>
    /// <para>
    /// Regular expression: (PeptideSequence, Modification*, SubstitutionModification*, (cvParam | userParam)*)
    /// </para>
    /// </summary>
    public partial class PeptideType : global::psidev.info.psi.pi.mzIdentML.Item1.Item2.IdentifiableType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PeptideSequenceXName = System.Xml.Linq.XName.Get("PeptideSequence", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ModificationXName = System.Xml.Linq.XName.Get("Modification", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ModificationType> ModificationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SubstitutionModificationXName = System.Xml.Linq.XName.Get("SubstitutionModification", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SubstitutionModificationType> SubstitutionModificationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CVParamType> cvParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userParamXName = System.Xml.Linq.XName.Get("userParam", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserParamType> userParamField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PeptideType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PeptideType(XElement xe) { return XTypedServices.ToXTypedElement<PeptideType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PeptideType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PeptideSequenceXName), new NamedContentModelEntity(ModificationXName), new NamedContentModelEntity(SubstitutionModificationXName), new ChoiceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName)));
        }
        
        /// <summary>
        /// <para>
        /// One (poly)peptide (a sequence with modifications). The combination of Peptide sequence and modifications must be unique in the file.
        /// </para>
        /// <para>
        /// Regular expression: (PeptideSequence, Modification*, SubstitutionModification*, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public PeptideType() {
        }
        
        /// <summary>
        /// <para>
        /// The amino acid sequence of the (poly)peptide. If a substitution modification has been found, the original sequence
        ///should be reported. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (PeptideSequence, Modification*, SubstitutionModification*, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public virtual string PeptideSequence {
            get {
                XElement x = this.GetElement(PeptideSequenceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(PeptideSequenceXName, value, "PeptideSequence", global::psidev.info.psi.pi.mzIdentML.Item1.Item2.sequence.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (PeptideSequence, Modification*, SubstitutionModification*, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public virtual IList<ModificationType> Modification {
            get {
                if ((this.ModificationField == null)) {
                    this.ModificationField = new XTypedList<ModificationType>(this, LinqToXsdTypeManager.Instance, ModificationXName);
                }
                return this.ModificationField;
            }
            set {
                if ((value == null)) {
                    this.ModificationField = null;
                }
                else {
                    if ((this.ModificationField == null)) {
                        this.ModificationField = XTypedList<ModificationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ModificationXName);
                    }
                    else {
                        XTypedServices.SetList<ModificationType>(this.ModificationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (PeptideSequence, Modification*, SubstitutionModification*, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public virtual IList<SubstitutionModificationType> SubstitutionModification {
            get {
                if ((this.SubstitutionModificationField == null)) {
                    this.SubstitutionModificationField = new XTypedList<SubstitutionModificationType>(this, LinqToXsdTypeManager.Instance, SubstitutionModificationXName);
                }
                return this.SubstitutionModificationField;
            }
            set {
                if ((value == null)) {
                    this.SubstitutionModificationField = null;
                }
                else {
                    if ((this.SubstitutionModificationField == null)) {
                        this.SubstitutionModificationField = XTypedList<SubstitutionModificationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SubstitutionModificationXName);
                    }
                    else {
                        XTypedServices.SetList<SubstitutionModificationType>(this.SubstitutionModificationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (PeptideSequence, Modification*, SubstitutionModification*, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public virtual IList<CVParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<CVParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<CVParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<CVParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (PeptideSequence, Modification*, SubstitutionModification*, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public virtual IList<UserParamType> userParam {
            get {
                if ((this.userParamField == null)) {
                    this.userParamField = new XTypedList<UserParamType>(this, LinqToXsdTypeManager.Instance, userParamXName);
                }
                return this.userParamField;
            }
            set {
                if ((value == null)) {
                    this.userParamField = null;
                }
                else {
                    if ((this.userParamField == null)) {
                        this.userParamField = XTypedList<UserParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, userParamXName);
                    }
                    else {
                        XTypedServices.SetList<UserParamType>(this.userParamField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PeptideType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PeptideSequenceXName, typeof(string));
            localElementDictionary.Add(ModificationXName, typeof(ModificationType));
            localElementDictionary.Add(SubstitutionModificationXName, typeof(SubstitutionModificationType));
            localElementDictionary.Add(cvParamXName, typeof(CVParamType));
            localElementDictionary.Add(userParamXName, typeof(UserParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A modification where one residue is substituted by another (amino acid change). 
    /// </para>
    /// </summary>
    public partial class SubstitutionModificationType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName originalResidueXName = System.Xml.Linq.XName.Get("originalResidue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName replacementResidueXName = System.Xml.Linq.XName.Get("replacementResidue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locationXName = System.Xml.Linq.XName.Get("location", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName avgMassDeltaXName = System.Xml.Linq.XName.Get("avgMassDelta", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName monoisotopicMassDeltaXName = System.Xml.Linq.XName.Get("monoisotopicMassDelta", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SubstitutionModificationType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
		public static explicit operator SubstitutionModificationType(XElement xe) { return XTypedServices.ToXTypedElement<SubstitutionModificationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A modification where one residue is substituted by another (amino acid change). 
        /// </para>
        /// </summary>
        public SubstitutionModificationType() {
        }
        
        /// <summary>
        /// <para>
        /// The original residue before replacement.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string originalResidue {
            get {
                XAttribute x = this.Attribute(originalResidueXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(originalResidueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The residue that replaced the originalResidue.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string replacementResidue {
            get {
                XAttribute x = this.Attribute(replacementResidueXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(replacementResidueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Location of the modification within the peptide - position in peptide sequence, counted from the N-terminus residue, starting at position 1.
        ///Specific modifications to the N-terminus should be given the location 0.
        ///Modification to the C-terminus should be given as peptide length + 1.		
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? location {
            get {
                XAttribute x = this.Attribute(locationXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(locationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Atomic mass delta considering the natural distribution of isotopes in Daltons. This should only be reported if the original amino acid is known i.e. it is not "X" 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? avgMassDelta {
            get {
                XAttribute x = this.Attribute(avgMassDeltaXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(avgMassDeltaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Atomic mass delta when assuming only the most common isotope of elements in Daltons. This should only be reported if the original amino acid is known i.e. it is not "X" 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? monoisotopicMassDelta {
            get {
                XAttribute x = this.Attribute(monoisotopicMassDeltaXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(monoisotopicMassDeltaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SubstitutionModificationType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A data set containing spectra data (consisting of one or more spectra). 
    /// </para>
    /// <para>
    /// Regular expression: (ExternalFormatDocumentation?, FileFormat, SpectrumIDFormat)
    /// </para>
    /// </summary>
    public partial class SpectraDataType : global::psidev.info.psi.pi.mzIdentML.Item1.Item2.ExternalDataType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SpectrumIDFormatXName = System.Xml.Linq.XName.Get("SpectrumIDFormat", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SpectraDataType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SpectraDataType(XElement xe) { return XTypedServices.ToXTypedElement<SpectraDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SpectraDataType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ExternalFormatDocumentationXName), new NamedContentModelEntity(FileFormatXName), new NamedContentModelEntity(SpectrumIDFormatXName));
        }
        
        /// <summary>
        /// <para>
        /// A data set containing spectra data (consisting of one or more spectra). 
        /// </para>
        /// <para>
        /// Regular expression: (ExternalFormatDocumentation?, FileFormat, SpectrumIDFormat)
        /// </para>
        /// </summary>
        public SpectraDataType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ExternalFormatDocumentation?, FileFormat, SpectrumIDFormat)
        /// </para>
        /// </summary>
        public virtual SpectrumIDFormatType SpectrumIDFormat {
            get {
                XElement x = this.GetElement(SpectrumIDFormatXName);
                return ((SpectrumIDFormatType)(x));
            }
            set {
                this.SetElement(SpectrumIDFormatXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SpectraDataType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ExternalFormatDocumentationXName, typeof(System.Uri));
            localElementDictionary.Add(FileFormatXName, typeof(FileFormatType));
            localElementDictionary.Add(SpectrumIDFormatXName, typeof(SpectrumIDFormatType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The software used for performing the analyses.
    /// </para>
    /// <para>
    /// Regular expression: (ContactRole?, SoftwareName, Customizations?)
    /// </para>
    /// </summary>
    public partial class AnalysisSoftwareType : global::psidev.info.psi.pi.mzIdentML.Item1.Item2.IdentifiableType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ContactRoleXName = System.Xml.Linq.XName.Get("ContactRole", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SoftwareNameXName = System.Xml.Linq.XName.Get("SoftwareName", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CustomizationsXName = System.Xml.Linq.XName.Get("Customizations", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName versionXName = System.Xml.Linq.XName.Get("version", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uriXName = System.Xml.Linq.XName.Get("uri", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AnalysisSoftwareType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AnalysisSoftwareType(XElement xe) { return XTypedServices.ToXTypedElement<AnalysisSoftwareType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AnalysisSoftwareType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ContactRoleXName), new NamedContentModelEntity(SoftwareNameXName), new NamedContentModelEntity(CustomizationsXName));
        }
        
        /// <summary>
        /// <para>
        /// The software used for performing the analyses.
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole?, SoftwareName, Customizations?)
        /// </para>
        /// </summary>
        public AnalysisSoftwareType() {
        }
        
        /// <summary>
        /// <para>
        /// The contact details of the organisation or person that produced the software
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole?, SoftwareName, Customizations?)
        /// </para>
        /// </summary>
        public virtual ContactRoleType ContactRole {
            get {
                XElement x = this.GetElement(ContactRoleXName);
                return ((ContactRoleType)(x));
            }
            set {
                this.SetElement(ContactRoleXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The name of the analysis software package, sourced from a CV if available. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole?, SoftwareName, Customizations?)
        /// </para>
        /// </summary>
        public virtual ParamType SoftwareName {
            get {
                XElement x = this.GetElement(SoftwareNameXName);
                return ((ParamType)(x));
            }
            set {
                this.SetElement(SoftwareNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Any customizations to the software, such as alternative scoring mechanisms implemented, should be documented here as free text. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole?, SoftwareName, Customizations?)
        /// </para>
        /// </summary>
        public virtual string Customizations {
            get {
                XElement x = this.GetElement(CustomizationsXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(CustomizationsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The version of Software used.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string version {
            get {
                XAttribute x = this.Attribute(versionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(versionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// URI of the analysis software e.g. manufacturer's website
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri uri {
            get {
                XAttribute x = this.Attribute(uriXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(uriXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AnalysisSoftwareType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ContactRoleXName, typeof(ContactRoleType));
            localElementDictionary.Add(SoftwareNameXName, typeof(ParamType));
            localElementDictionary.Add(CustomizationsXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The details of an individual cleavage enzyme should be provided by giving a regular expression or a CV term if a "standard" enzyme cleavage has been performed. 
    /// </para>
    /// <para>
    /// Regular expression: (SiteRegexp?, EnzymeName?)
    /// </para>
    /// </summary>
    public partial class EnzymeType : global::psidev.info.psi.pi.mzIdentML.Item1.Item2.IdentifiableType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SiteRegexpXName = System.Xml.Linq.XName.Get("SiteRegexp", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EnzymeNameXName = System.Xml.Linq.XName.Get("EnzymeName", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nTermGainXName = System.Xml.Linq.XName.Get("nTermGain", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cTermGainXName = System.Xml.Linq.XName.Get("cTermGain", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName semiSpecificXName = System.Xml.Linq.XName.Get("semiSpecific", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName missedCleavagesXName = System.Xml.Linq.XName.Get("missedCleavages", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName minDistanceXName = System.Xml.Linq.XName.Get("minDistance", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EnzymeType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator EnzymeType(XElement xe) { return XTypedServices.ToXTypedElement<EnzymeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static EnzymeType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SiteRegexpXName), new NamedContentModelEntity(EnzymeNameXName));
        }
        
        /// <summary>
        /// <para>
        /// The details of an individual cleavage enzyme should be provided by giving a regular expression or a CV term if a "standard" enzyme cleavage has been performed. 
        /// </para>
        /// <para>
        /// Regular expression: (SiteRegexp?, EnzymeName?)
        /// </para>
        /// </summary>
        public EnzymeType() {
        }
        
        /// <summary>
        /// <para>
        /// Regular expression for specifying the enzyme cleavage site.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SiteRegexp?, EnzymeName?)
        /// </para>
        /// </summary>
        public virtual string SiteRegexp {
            get {
                XElement x = this.GetElement(SiteRegexpXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(SiteRegexpXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The name of the enzyme from a CV.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SiteRegexp?, EnzymeName?)
        /// </para>
        /// </summary>
        public virtual ParamListType EnzymeName {
            get {
                XElement x = this.GetElement(EnzymeNameXName);
                return ((ParamListType)(x));
            }
            set {
                this.SetElement(EnzymeNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Element formula gained at NTerm.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string nTermGain {
            get {
                XAttribute x = this.Attribute(nTermGainXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nTermGainXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Element formula gained at CTerm.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string cTermGain {
            get {
                XAttribute x = this.Attribute(cTermGainXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(cTermGainXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Set to true if the enzyme cleaves semi-specifically (i.e. one terminus must cleave according to the rules, the other can cleave at any residue), false if the enzyme cleavage is assumed to be specific to both termini (accepting for any missed cleavages). 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? semiSpecific {
            get {
                XAttribute x = this.Attribute(semiSpecificXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(semiSpecificXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The number of missed cleavage sites allowed by the search. The attribute must be provided if an enzyme has been used.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? missedCleavages {
            get {
                XAttribute x = this.Attribute(missedCleavagesXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(missedCleavagesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Minimal distance for another cleavage (minimum: 1).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? minDistance {
            get {
                XAttribute x = this.Attribute(minDistanceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(minDistanceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<EnzymeType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SiteRegexpXName, typeof(string));
            localElementDictionary.Add(EnzymeNameXName, typeof(ParamListType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The list of enzymes used in experiment
    /// </para>
    /// <para>
    /// Regular expression: (Enzyme+)
    /// </para>
    /// </summary>
    public partial class EnzymesType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EnzymeXName = System.Xml.Linq.XName.Get("Enzyme", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<EnzymeType> EnzymeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName independentXName = System.Xml.Linq.XName.Get("independent", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EnzymesType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator EnzymesType(XElement xe) { return XTypedServices.ToXTypedElement<EnzymesType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static EnzymesType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(EnzymeXName));
        }
        
        /// <summary>
        /// <para>
        /// The list of enzymes used in experiment
        /// </para>
        /// <para>
        /// Regular expression: (Enzyme+)
        /// </para>
        /// </summary>
        public EnzymesType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Enzyme+)
        /// </para>
        /// </summary>
        public virtual IList<EnzymeType> Enzyme {
            get {
                if ((this.EnzymeField == null)) {
                    this.EnzymeField = new XTypedList<EnzymeType>(this, LinqToXsdTypeManager.Instance, EnzymeXName);
                }
                return this.EnzymeField;
            }
            set {
                if ((value == null)) {
                    this.EnzymeField = null;
                }
                else {
                    if ((this.EnzymeField == null)) {
                        this.EnzymeField = XTypedList<EnzymeType>.Initialize(this, LinqToXsdTypeManager.Instance, value, EnzymeXName);
                    }
                    else {
                        XTypedServices.SetList<EnzymeType>(this.EnzymeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// If there are multiple enzymes specified, this attribute is set to true if cleavage with different enzymes is performed independently.		
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? independent {
            get {
                XAttribute x = this.Attribute(independentXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(independentXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<EnzymesType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(EnzymeXName, typeof(EnzymeType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class ResidueType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeXName = System.Xml.Linq.XName.Get("code", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName massXName = System.Xml.Linq.XName.Get("mass", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ResidueType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
		public static explicit operator ResidueType(XElement xe) { return XTypedServices.ToXTypedElement<ResidueType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ResidueType() {
        }
        
        /// <summary>
        /// <para>
        /// The single letter code for the residue.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string code {
            get {
                XAttribute x = this.Attribute(codeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(codeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The residue mass in Daltons (not including any fixed modifications). 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual float mass {
            get {
                XAttribute x = this.Attribute(massXName);
                return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
            set {
                this.SetAttribute(massXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ResidueType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Ambiguous residues e.g. X can be specified by the Code attribute and a set of parameters for example giving the different masses that will be used in the search. 
    /// </para>
    /// <para>
    /// Regular expression: ((cvParam | userParam)+)
    /// </para>
    /// </summary>
    public partial class AmbiguousResidueType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CVParamType> cvParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userParamXName = System.Xml.Linq.XName.Get("userParam", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserParamType> userParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeXName = System.Xml.Linq.XName.Get("code", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AmbiguousResidueType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AmbiguousResidueType(XElement xe) { return XTypedServices.ToXTypedElement<AmbiguousResidueType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AmbiguousResidueType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName)));
        }
        
        /// <summary>
        /// <para>
        /// Ambiguous residues e.g. X can be specified by the Code attribute and a set of parameters for example giving the different masses that will be used in the search. 
        /// </para>
        /// <para>
        /// Regular expression: ((cvParam | userParam)+)
        /// </para>
        /// </summary>
        public AmbiguousResidueType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((cvParam | userParam)+)
        /// </para>
        /// </summary>
        public virtual IList<CVParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<CVParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<CVParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<CVParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((cvParam | userParam)+)
        /// </para>
        /// </summary>
        public virtual IList<UserParamType> userParam {
            get {
                if ((this.userParamField == null)) {
                    this.userParamField = new XTypedList<UserParamType>(this, LinqToXsdTypeManager.Instance, userParamXName);
                }
                return this.userParamField;
            }
            set {
                if ((value == null)) {
                    this.userParamField = null;
                }
                else {
                    if ((this.userParamField == null)) {
                        this.userParamField = XTypedList<UserParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, userParamXName);
                    }
                    else {
                        XTypedServices.SetList<UserParamType>(this.userParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The single letter code of the ambiguous residue e.g. X.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string code {
            get {
                XAttribute x = this.Attribute(codeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(codeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AmbiguousResidueType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(cvParamXName, typeof(CVParamType));
            localElementDictionary.Add(userParamXName, typeof(UserParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The masses of residues used in the search.
    /// </para>
    /// <para>
    /// Regular expression: (Residue*, AmbiguousResidue*, (cvParam | userParam)*)
    /// </para>
    /// </summary>
    public partial class MassTableType : global::psidev.info.psi.pi.mzIdentML.Item1.Item2.IdentifiableType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ResidueXName = System.Xml.Linq.XName.Get("Residue", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ResidueType> ResidueField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AmbiguousResidueXName = System.Xml.Linq.XName.Get("AmbiguousResidue", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AmbiguousResidueType> AmbiguousResidueField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CVParamType> cvParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userParamXName = System.Xml.Linq.XName.Get("userParam", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserParamType> userParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName msLevelXName = System.Xml.Linq.XName.Get("msLevel", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("MassTableType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator MassTableType(XElement xe) { return XTypedServices.ToXTypedElement<MassTableType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MassTableType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ResidueXName), new NamedContentModelEntity(AmbiguousResidueXName), new ChoiceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName)));
        }
        
        /// <summary>
        /// <para>
        /// The masses of residues used in the search.
        /// </para>
        /// <para>
        /// Regular expression: (Residue*, AmbiguousResidue*, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public MassTableType() {
        }
        
        /// <summary>
        /// <para>
        /// The specification of a single residue within the mass table. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Residue*, AmbiguousResidue*, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public virtual IList<ResidueType> Residue {
            get {
                if ((this.ResidueField == null)) {
                    this.ResidueField = new XTypedList<ResidueType>(this, LinqToXsdTypeManager.Instance, ResidueXName);
                }
                return this.ResidueField;
            }
            set {
                if ((value == null)) {
                    this.ResidueField = null;
                }
                else {
                    if ((this.ResidueField == null)) {
                        this.ResidueField = XTypedList<ResidueType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ResidueXName);
                    }
                    else {
                        XTypedServices.SetList<ResidueType>(this.ResidueField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Residue*, AmbiguousResidue*, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public virtual IList<AmbiguousResidueType> AmbiguousResidue {
            get {
                if ((this.AmbiguousResidueField == null)) {
                    this.AmbiguousResidueField = new XTypedList<AmbiguousResidueType>(this, LinqToXsdTypeManager.Instance, AmbiguousResidueXName);
                }
                return this.AmbiguousResidueField;
            }
            set {
                if ((value == null)) {
                    this.AmbiguousResidueField = null;
                }
                else {
                    if ((this.AmbiguousResidueField == null)) {
                        this.AmbiguousResidueField = XTypedList<AmbiguousResidueType>.Initialize(this, LinqToXsdTypeManager.Instance, value, AmbiguousResidueXName);
                    }
                    else {
                        XTypedServices.SetList<AmbiguousResidueType>(this.AmbiguousResidueField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Residue*, AmbiguousResidue*, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public virtual IList<CVParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<CVParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<CVParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<CVParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Residue*, AmbiguousResidue*, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public virtual IList<UserParamType> userParam {
            get {
                if ((this.userParamField == null)) {
                    this.userParamField = new XTypedList<UserParamType>(this, LinqToXsdTypeManager.Instance, userParamXName);
                }
                return this.userParamField;
            }
            set {
                if ((value == null)) {
                    this.userParamField = null;
                }
                else {
                    if ((this.userParamField == null)) {
                        this.userParamField = XTypedList<UserParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, userParamXName);
                    }
                    else {
                        XTypedServices.SetList<UserParamType>(this.userParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The MS spectrum that the MassTable refers to e.g. "1" for MS1 "2" for MS2 or "1 2" for MS1 or MS2.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual IList<decimal> msLevel {
            get {
                XAttribute x = this.Attribute(msLevelXName);
                return XTypedServices.ParseListValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetListAttribute(msLevelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MassTableType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ResidueXName, typeof(ResidueType));
            localElementDictionary.Add(AmbiguousResidueXName, typeof(AmbiguousResidueType));
            localElementDictionary.Add(cvParamXName, typeof(CVParamType));
            localElementDictionary.Add(userParamXName, typeof(UserParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// PeptideEvidence links a specific Peptide element to a specific position in a DBSequence. There must only be one PeptideEvidence item per Peptide-to-DBSequence-position. 
    /// </para>
    /// <para>
    /// Regular expression: ((cvParam | userParam)*)
    /// </para>
    /// </summary>
    public partial class PeptideEvidenceType : global::psidev.info.psi.pi.mzIdentML.Item1.Item2.IdentifiableType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CVParamType> cvParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userParamXName = System.Xml.Linq.XName.Get("userParam", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserParamType> userParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dBSequence_refXName = System.Xml.Linq.XName.Get("dBSequence_ref", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName peptide_refXName = System.Xml.Linq.XName.Get("peptide_ref", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName startXName = System.Xml.Linq.XName.Get("start", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName endXName = System.Xml.Linq.XName.Get("end", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName preXName = System.Xml.Linq.XName.Get("pre", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName postXName = System.Xml.Linq.XName.Get("post", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName translationTable_refXName = System.Xml.Linq.XName.Get("translationTable_ref", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName frameXName = System.Xml.Linq.XName.Get("frame", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName isDecoyXName = System.Xml.Linq.XName.Get("isDecoy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static bool isDecoyDefaultValue = System.Xml.XmlConvert.ToBoolean("false");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PeptideEvidenceType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PeptideEvidenceType(XElement xe) { return XTypedServices.ToXTypedElement<PeptideEvidenceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PeptideEvidenceType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName)));
        }
        
        /// <summary>
        /// <para>
        /// PeptideEvidence links a specific Peptide element to a specific position in a DBSequence. There must only be one PeptideEvidence item per Peptide-to-DBSequence-position. 
        /// </para>
        /// <para>
        /// Regular expression: ((cvParam | userParam)*)
        /// </para>
        /// </summary>
        public PeptideEvidenceType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((cvParam | userParam)*)
        /// </para>
        /// </summary>
        public virtual IList<CVParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<CVParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<CVParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<CVParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((cvParam | userParam)*)
        /// </para>
        /// </summary>
        public virtual IList<UserParamType> userParam {
            get {
                if ((this.userParamField == null)) {
                    this.userParamField = new XTypedList<UserParamType>(this, LinqToXsdTypeManager.Instance, userParamXName);
                }
                return this.userParamField;
            }
            set {
                if ((value == null)) {
                    this.userParamField = null;
                }
                else {
                    if ((this.userParamField == null)) {
                        this.userParamField = XTypedList<UserParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, userParamXName);
                    }
                    else {
                        XTypedServices.SetList<UserParamType>(this.userParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// A reference to the protein sequence in which the specified peptide has been linked. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string dBSequence_ref {
            get {
                XAttribute x = this.Attribute(dBSequence_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(dBSequence_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A reference to the identified (poly)peptide sequence in the Peptide element. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string peptide_ref {
            get {
                XAttribute x = this.Attribute(peptide_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(peptide_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Start position of the peptide inside the protein sequence, where the first amino acid of the protein sequence is position 1. Must be provided unless this is a de novo search.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? start {
            get {
                XAttribute x = this.Attribute(startXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(startXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The index position of the last amino acid of the peptide inside the protein sequence, where the first amino acid of the protein sequence is position 1. Must be provided unless this is a de novo search. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? end {
            get {
                XAttribute x = this.Attribute(endXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(endXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Previous flanking residue. If the peptide is N-terminal, pre="-" and not pre="". If for any reason it is unknown (e.g. denovo), pre="?" should be used. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string pre {
            get {
                XAttribute x = this.Attribute(preXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(preXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Post flanking residue. If the peptide is C-terminal, post="-" and not post="". If for any reason it is unknown (e.g. denovo), post="?" should be used. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string post {
            get {
                XAttribute x = this.Attribute(postXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(postXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// A reference to the translation table used if this is PeptideEvidence derived from nucleic acid sequence 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string translationTable_ref {
            get {
                XAttribute x = this.Attribute(translationTable_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(translationTable_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The translation frame of this sequence if this is PeptideEvidence derived from nucleic acid sequence 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? frame {
            get {
                XAttribute x = this.Attribute(frameXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(frameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Set to true if the peptide is matched to a decoy sequence. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual bool isDecoy {
            get {
                XAttribute x = this.Attribute(isDecoyXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype, isDecoyDefaultValue);
            }
            set {
                this.SetAttribute(isDecoyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PeptideEvidenceType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(cvParamXName, typeof(CVParamType));
            localElementDictionary.Add(userParamXName, typeof(UserParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The tolerance of the search given as a plus and minus value with units. 
    /// </para>
    /// <para>
    /// Regular expression: (cvParam+)
    /// </para>
    /// </summary>
    public partial class ToleranceType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CVParamType> cvParamField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ToleranceType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ToleranceType(XElement xe) { return XTypedServices.ToXTypedElement<ToleranceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ToleranceType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(cvParamXName));
        }
        
        /// <summary>
        /// <para>
        /// The tolerance of the search given as a plus and minus value with units. 
        /// </para>
        /// <para>
        /// Regular expression: (cvParam+)
        /// </para>
        /// </summary>
        public ToleranceType() {
        }
        
        /// <summary>
        /// <para>
        /// CV terms capturing the tolerance plus and minus values.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvParam+)
        /// </para>
        /// </summary>
        public virtual IList<CVParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<CVParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<CVParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<CVParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ToleranceType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(cvParamXName, typeof(CVParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The format of the spectrum identifier within the source file
    /// </para>
    /// <para>
    /// Regular expression: (cvParam)
    /// </para>
    /// </summary>
    public partial class SpectrumIDFormatType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SpectrumIDFormatType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SpectrumIDFormatType(XElement xe) { return XTypedServices.ToXTypedElement<SpectrumIDFormatType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SpectrumIDFormatType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(cvParamXName));
        }
        
        /// <summary>
        /// <para>
        /// The format of the spectrum identifier within the source file
        /// </para>
        /// <para>
        /// Regular expression: (cvParam)
        /// </para>
        /// </summary>
        public SpectrumIDFormatType() {
        }
        
        /// <summary>
        /// <para>
        /// CV term capturing the type of identifier used.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (cvParam)
        /// </para>
        /// </summary>
        public virtual CVParamType cvParam {
            get {
                XElement x = this.GetElement(cvParamXName);
                return ((CVParamType)(x));
            }
            set {
                this.SetElement(cvParamXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SpectrumIDFormatType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(cvParamXName, typeof(CVParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A database sequence from the specified SearchDatabase (nucleic acid or amino acid). If the sequence is nucleic acid, the source nucleic acid sequence
    ///should be given in the seq attribute rather than a translated sequence.	
    /// </para>
    /// <para>
    /// Regular expression: (Seq?, (cvParam | userParam)*)
    /// </para>
    /// </summary>
    public partial class DBSequenceType : global::psidev.info.psi.pi.mzIdentML.Item1.Item2.IdentifiableType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SeqXName = System.Xml.Linq.XName.Get("Seq", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CVParamType> cvParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userParamXName = System.Xml.Linq.XName.Get("userParam", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserParamType> userParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lengthXName = System.Xml.Linq.XName.Get("length", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName searchDatabase_refXName = System.Xml.Linq.XName.Get("searchDatabase_ref", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName accessionXName = System.Xml.Linq.XName.Get("accession", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DBSequenceType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DBSequenceType(XElement xe) { return XTypedServices.ToXTypedElement<DBSequenceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DBSequenceType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SeqXName), new ChoiceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName)));
        }
        
        /// <summary>
        /// <para>
        /// A database sequence from the specified SearchDatabase (nucleic acid or amino acid). If the sequence is nucleic acid, the source nucleic acid sequence
        ///should be given in the seq attribute rather than a translated sequence.	
        /// </para>
        /// <para>
        /// Regular expression: (Seq?, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public DBSequenceType() {
        }
        
        /// <summary>
        /// <para>
        /// The actual sequence of amino acids or nucleic acid.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Seq?, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public virtual string Seq {
            get {
                XElement x = this.GetElement(SeqXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SeqXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(SeqXName, value, "Seq", global::psidev.info.psi.pi.mzIdentML.Item1.Item2.sequence.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Seq?, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public virtual IList<CVParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<CVParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<CVParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<CVParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Seq?, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public virtual IList<UserParamType> userParam {
            get {
                if ((this.userParamField == null)) {
                    this.userParamField = new XTypedList<UserParamType>(this, LinqToXsdTypeManager.Instance, userParamXName);
                }
                return this.userParamField;
            }
            set {
                if ((value == null)) {
                    this.userParamField = null;
                }
                else {
                    if ((this.userParamField == null)) {
                        this.userParamField = XTypedList<UserParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, userParamXName);
                    }
                    else {
                        XTypedServices.SetList<UserParamType>(this.userParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The length of the sequence as a number of bases or residues. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? length {
            get {
                XAttribute x = this.Attribute(lengthXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(lengthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The source database of this sequence.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string searchDatabase_ref {
            get {
                XAttribute x = this.Attribute(searchDatabase_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(searchDatabase_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The unique accession of this sequence.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string accession {
            get {
                XAttribute x = this.Attribute(accessionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(accessionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DBSequenceType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SeqXName, typeof(string));
            localElementDictionary.Add(cvParamXName, typeof(CVParamType));
            localElementDictionary.Add(userParamXName, typeof(UserParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    ///  A description of the sample analysed by mass spectrometry using CVParams or UserParams. If a composite sample has been analysed, a parent sample should be defined, which references subsamples. This represents any kind of substance used in an experimental workflow, such as whole organisms, cells, DNA, solutions, compounds and experimental substances (gels, arrays etc.).	
    /// </para>
    /// <para>
    /// Regular expression: (ContactRole*, SubSample*, (cvParam | userParam)*)
    /// </para>
    /// </summary>
    public partial class SampleType : global::psidev.info.psi.pi.mzIdentML.Item1.Item2.IdentifiableType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ContactRoleXName = System.Xml.Linq.XName.Get("ContactRole", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ContactRoleType> ContactRoleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SubSampleXName = System.Xml.Linq.XName.Get("SubSample", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SubSampleType> SubSampleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CVParamType> cvParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userParamXName = System.Xml.Linq.XName.Get("userParam", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserParamType> userParamField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SampleType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SampleType(XElement xe) { return XTypedServices.ToXTypedElement<SampleType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SampleType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ContactRoleXName), new NamedContentModelEntity(SubSampleXName), new ChoiceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName)));
        }
        
        /// <summary>
        /// <para>
        ///  A description of the sample analysed by mass spectrometry using CVParams or UserParams. If a composite sample has been analysed, a parent sample should be defined, which references subsamples. This represents any kind of substance used in an experimental workflow, such as whole organisms, cells, DNA, solutions, compounds and experimental substances (gels, arrays etc.).	
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole*, SubSample*, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public SampleType() {
        }
        
        /// <summary>
        /// <para>
        /// Contact details for the Material. The association to ContactRole could specify, for example, the creator or provider of the Material. 
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole*, SubSample*, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public virtual IList<ContactRoleType> ContactRole {
            get {
                if ((this.ContactRoleField == null)) {
                    this.ContactRoleField = new XTypedList<ContactRoleType>(this, LinqToXsdTypeManager.Instance, ContactRoleXName);
                }
                return this.ContactRoleField;
            }
            set {
                if ((value == null)) {
                    this.ContactRoleField = null;
                }
                else {
                    if ((this.ContactRoleField == null)) {
                        this.ContactRoleField = XTypedList<ContactRoleType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ContactRoleXName);
                    }
                    else {
                        XTypedServices.SetList<ContactRoleType>(this.ContactRoleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole*, SubSample*, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public virtual IList<SubSampleType> SubSample {
            get {
                if ((this.SubSampleField == null)) {
                    this.SubSampleField = new XTypedList<SubSampleType>(this, LinqToXsdTypeManager.Instance, SubSampleXName);
                }
                return this.SubSampleField;
            }
            set {
                if ((value == null)) {
                    this.SubSampleField = null;
                }
                else {
                    if ((this.SubSampleField == null)) {
                        this.SubSampleField = XTypedList<SubSampleType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SubSampleXName);
                    }
                    else {
                        XTypedServices.SetList<SubSampleType>(this.SubSampleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole*, SubSample*, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public virtual IList<CVParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<CVParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<CVParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<CVParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole*, SubSample*, (cvParam | userParam)*)
        /// </para>
        /// </summary>
        public virtual IList<UserParamType> userParam {
            get {
                if ((this.userParamField == null)) {
                    this.userParamField = new XTypedList<UserParamType>(this, LinqToXsdTypeManager.Instance, userParamXName);
                }
                return this.userParamField;
            }
            set {
                if ((value == null)) {
                    this.userParamField = null;
                }
                else {
                    if ((this.userParamField == null)) {
                        this.userParamField = XTypedList<UserParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, userParamXName);
                    }
                    else {
                        XTypedServices.SetList<UserParamType>(this.userParamField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SampleType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ContactRoleXName, typeof(ContactRoleType));
            localElementDictionary.Add(SubSampleXName, typeof(SubSampleType));
            localElementDictionary.Add(cvParamXName, typeof(CVParamType));
            localElementDictionary.Add(userParamXName, typeof(UserParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// References to the individual component samples within a mixed parent sample. 
    /// </para>
    /// </summary>
    public partial class SubSampleType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sample_refXName = System.Xml.Linq.XName.Get("sample_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SubSampleType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
		public static explicit operator SubSampleType(XElement xe) { return XTypedServices.ToXTypedElement<SubSampleType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// References to the individual component samples within a mixed parent sample. 
        /// </para>
        /// </summary>
        public SubSampleType() {
        }
        
        /// <summary>
        /// <para>
        /// A reference to the child sample.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string sample_ref {
            get {
                XAttribute x = this.Attribute(sample_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sample_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SubSampleType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class listOfIntegers {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.ListSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), null, new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), null));
        
        private listOfIntegers() {
        }
    }
    
    public sealed class listOfFloats {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.ListSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float), null, new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float), null));
        
        private listOfFloats() {
        }
    }
    
    public sealed class listOfChars {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.ListSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null, psidev.info.psi.pi.mzIdentML.Item1.Item2.chars.TypeDefinition);
        
        private listOfChars() {
        }
    }
    
    public sealed class listOfCharsOrAny {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.UnionSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType), null, new Xml.Schema.Linq.SimpleTypeValidator[] {
                    new Xml.Schema.Linq.ListSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null, psidev.info.psi.pi.mzIdentML.Item1.Item2.chars.TypeDefinition),
                    new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    "."}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve))});
        
        private listOfCharsOrAny() {
        }
    }
    
    public sealed class chars {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[ABCDEFGHIJKLMNOPQRSTUVWXYZ]{1}"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private chars() {
        }
    }
    
    public sealed class sequence {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[ABCDEFGHIJKLMNOPQRSTUVWXYZ]*"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private sequence() {
        }
    }
    
    public sealed class allowed_frames {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        3,
                        2,
                        1,
                        -3,
                        -2,
                        -1}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private allowed_frames() {
        }
    }
    
    public sealed class listOfAllowedFrames {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.ListSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int), null, psidev.info.psi.pi.mzIdentML.Item1.Item2.allowed_frames.TypeDefinition);
        
        private listOfAllowedFrames() {
        }
    }
    
    public sealed class versionRegex {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "(1\\.2\\.\\d+)"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private versionRegex() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Data external to the XML instance document. The location of the data file is given in the location attribute. 
    /// </para>
    /// <para>
    /// Regular expression: (ExternalFormatDocumentation?, FileFormat)
    /// </para>
    /// </summary>
    public partial class ExternalDataType : global::psidev.info.psi.pi.mzIdentML.Item1.Item2.IdentifiableType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExternalFormatDocumentationXName = System.Xml.Linq.XName.Get("ExternalFormatDocumentation", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FileFormatXName = System.Xml.Linq.XName.Get("FileFormat", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locationXName = System.Xml.Linq.XName.Get("location", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ExternalDataType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ExternalDataType(XElement xe) { return XTypedServices.ToXTypedElement<ExternalDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ExternalDataType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ExternalFormatDocumentationXName), new NamedContentModelEntity(FileFormatXName));
        }
        
        /// <summary>
        /// <para>
        /// Data external to the XML instance document. The location of the data file is given in the location attribute. 
        /// </para>
        /// <para>
        /// Regular expression: (ExternalFormatDocumentation?, FileFormat)
        /// </para>
        /// </summary>
        public ExternalDataType() {
        }
        
        /// <summary>
        /// <para>
        /// A URI to access documentation and tools to interpret the external format of the ExternalData instance. For example, XML Schema or static libraries (APIs) to access binary formats.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ExternalFormatDocumentation?, FileFormat)
        /// </para>
        /// </summary>
        public virtual System.Uri ExternalFormatDocumentation {
            get {
                XElement x = this.GetElement(ExternalFormatDocumentationXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetElement(ExternalFormatDocumentationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ExternalFormatDocumentation?, FileFormat)
        /// </para>
        /// </summary>
        public virtual FileFormatType FileFormat {
            get {
                XElement x = this.GetElement(FileFormatXName);
                return ((FileFormatType)(x));
            }
            set {
                this.SetElement(FileFormatXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The location of the data file.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual System.Uri location {
            get {
                XAttribute x = this.Attribute(locationXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(locationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ExternalDataType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ExternalFormatDocumentationXName, typeof(System.Uri));
            localElementDictionary.Add(FileFormatXName, typeof(FileFormatType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The format of the ExternalData file, for example "tiff" for image files. 
    /// </para>
    /// <para>
    /// Regular expression: (cvParam)
    /// </para>
    /// </summary>
    public partial class FileFormatType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FileFormatType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FileFormatType(XElement xe) { return XTypedServices.ToXTypedElement<FileFormatType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FileFormatType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(cvParamXName));
        }
        
        /// <summary>
        /// <para>
        /// The format of the ExternalData file, for example "tiff" for image files. 
        /// </para>
        /// <para>
        /// Regular expression: (cvParam)
        /// </para>
        /// </summary>
        public FileFormatType() {
        }
        
        /// <summary>
        /// <para>
        /// cvParam capturing file formats
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (cvParam)
        /// </para>
        /// </summary>
        public virtual CVParamType cvParam {
            get {
                XElement x = this.GetElement(cvParamXName);
                return ((CVParamType)(x));
            }
            set {
                this.SetElement(cvParamXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FileFormatType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(cvParamXName, typeof(CVParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// A person's name and contact details. Any additional information such as the address, contact email etc. should be supplied using CV parameters or user parameters.
    /// </para>
    /// <para>
    /// Regular expression: ((cvParam | userParam)*, Affiliation*)
    /// </para>
    /// </summary>
    public partial class PersonType : global::psidev.info.psi.pi.mzIdentML.Item1.Item2.AbstractContactType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AffiliationXName = System.Xml.Linq.XName.Get("Affiliation", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AffiliationType> AffiliationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lastNameXName = System.Xml.Linq.XName.Get("lastName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName firstNameXName = System.Xml.Linq.XName.Get("firstName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midInitialsXName = System.Xml.Linq.XName.Get("midInitials", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PersonType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PersonType(XElement xe) { return XTypedServices.ToXTypedElement<PersonType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PersonType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName)), new NamedContentModelEntity(AffiliationXName));
        }
        
        /// <summary>
        /// <para>
        /// A person's name and contact details. Any additional information such as the address, contact email etc. should be supplied using CV parameters or user parameters.
        /// </para>
        /// <para>
        /// Regular expression: ((cvParam | userParam)*, Affiliation*)
        /// </para>
        /// </summary>
        public PersonType() {
        }
        
        /// <summary>
        /// <para>
        /// The organization a person belongs to.
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((cvParam | userParam)*, Affiliation*)
        /// </para>
        /// </summary>
        public virtual IList<AffiliationType> Affiliation {
            get {
                if ((this.AffiliationField == null)) {
                    this.AffiliationField = new XTypedList<AffiliationType>(this, LinqToXsdTypeManager.Instance, AffiliationXName);
                }
                return this.AffiliationField;
            }
            set {
                if ((value == null)) {
                    this.AffiliationField = null;
                }
                else {
                    if ((this.AffiliationField == null)) {
                        this.AffiliationField = XTypedList<AffiliationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, AffiliationXName);
                    }
                    else {
                        XTypedServices.SetList<AffiliationType>(this.AffiliationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The Person's last/family name.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string lastName {
            get {
                XAttribute x = this.Attribute(lastNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(lastNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The Person's first name.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string firstName {
            get {
                XAttribute x = this.Attribute(firstNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(firstNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The Person's middle initial.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string midInitials {
            get {
                XAttribute x = this.Attribute(midInitialsXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midInitialsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PersonType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(cvParamXName, typeof(CVParamType));
            localElementDictionary.Add(userParamXName, typeof(UserParamType));
            localElementDictionary.Add(AffiliationXName, typeof(AffiliationType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class AffiliationType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName organization_refXName = System.Xml.Linq.XName.Get("organization_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AffiliationType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
		public static explicit operator AffiliationType(XElement xe) { return XTypedServices.ToXTypedElement<AffiliationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public AffiliationType() {
        }
        
        /// <summary>
        /// <para>
        /// A reference to the organization this contact belongs to.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string organization_ref {
            get {
                XAttribute x = this.Attribute(organization_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(organization_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AffiliationType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Organizations are entities like companies, universities, government agencies. Any additional information such as the address, email etc. should be supplied either as CV parameters or as user parameters. 
    /// </para>
    /// <para>
    /// Regular expression: ((cvParam | userParam)*, Parent?)
    /// </para>
    /// </summary>
    public partial class OrganizationType : global::psidev.info.psi.pi.mzIdentML.Item1.Item2.AbstractContactType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ParentXName = System.Xml.Linq.XName.Get("Parent", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OrganizationType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator OrganizationType(XElement xe) { return XTypedServices.ToXTypedElement<OrganizationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static OrganizationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName)), new NamedContentModelEntity(ParentXName));
        }
        
        /// <summary>
        /// <para>
        /// Organizations are entities like companies, universities, government agencies. Any additional information such as the address, email etc. should be supplied either as CV parameters or as user parameters. 
        /// </para>
        /// <para>
        /// Regular expression: ((cvParam | userParam)*, Parent?)
        /// </para>
        /// </summary>
        public OrganizationType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((cvParam | userParam)*, Parent?)
        /// </para>
        /// </summary>
        public virtual ParentOrganizationType Parent {
            get {
                XElement x = this.GetElement(ParentXName);
                return ((ParentOrganizationType)(x));
            }
            set {
                this.SetElement(ParentXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OrganizationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(cvParamXName, typeof(CVParamType));
            localElementDictionary.Add(userParamXName, typeof(UserParamType));
            localElementDictionary.Add(ParentXName, typeof(ParentOrganizationType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The containing organization (the university or business which a lab belongs to, etc.) 
    /// </para>
    /// </summary>
    public partial class ParentOrganizationType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName organization_refXName = System.Xml.Linq.XName.Get("organization_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ParentOrganizationType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
		public static explicit operator ParentOrganizationType(XElement xe) { return XTypedServices.ToXTypedElement<ParentOrganizationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// The containing organization (the university or business which a lab belongs to, etc.) 
        /// </para>
        /// </summary>
        public ParentOrganizationType() {
        }
        
        /// <summary>
        /// <para>
        /// A reference to the organization this contact belongs to.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string organization_ref {
            get {
                XAttribute x = this.Attribute(organization_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(organization_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ParentOrganizationType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A contact is either a person or an organization.
    /// </para>
    /// <para>
    /// Regular expression: ((cvParam | userParam)*)
    /// </para>
    /// </summary>
    public abstract partial class AbstractContactType : global::psidev.info.psi.pi.mzIdentML.Item1.Item2.IdentifiableType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CVParamType> cvParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userParamXName = System.Xml.Linq.XName.Get("userParam", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserParamType> userParamField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AbstractContactType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AbstractContactType(XElement xe) {  return (AbstractContactType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AbstractContactType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName)));
        }
        
        /// <summary>
        /// <para>
        /// A contact is either a person or an organization.
        /// </para>
        /// <para>
        /// Regular expression: ((cvParam | userParam)*)
        /// </para>
        /// </summary>
        public AbstractContactType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((cvParam | userParam)*)
        /// </para>
        /// </summary>
        public virtual IList<CVParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<CVParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<CVParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<CVParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((cvParam | userParam)*)
        /// </para>
        /// </summary>
        public virtual IList<UserParamType> userParam {
            get {
                if ((this.userParamField == null)) {
                    this.userParamField = new XTypedList<UserParamType>(this, LinqToXsdTypeManager.Instance, userParamXName);
                }
                return this.userParamField;
            }
            set {
                if ((value == null)) {
                    this.userParamField = null;
                }
                else {
                    if ((this.userParamField == null)) {
                        this.userParamField = XTypedList<UserParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, userParamXName);
                    }
                    else {
                        XTypedServices.SetList<UserParamType>(this.userParamField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(cvParamXName, typeof(CVParamType));
            localElementDictionary.Add(userParamXName, typeof(UserParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The role that a Contact plays in an organization or with respect to the associating class. A Contact may have several Roles within scope, and as such,
    ///associations to ContactRole allow the use of a Contact in a certain manner. Examples
    ///might include a provider, or a data analyst. 
    /// </para>
    /// <para>
    /// Regular expression: (Role)
    /// </para>
    /// </summary>
    public partial class ContactRoleType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RoleXName = System.Xml.Linq.XName.Get("Role", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName contact_refXName = System.Xml.Linq.XName.Get("contact_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ContactRoleType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ContactRoleType(XElement xe) { return XTypedServices.ToXTypedElement<ContactRoleType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ContactRoleType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RoleXName));
        }
        
        /// <summary>
        /// <para>
        /// The role that a Contact plays in an organization or with respect to the associating class. A Contact may have several Roles within scope, and as such,
        ///associations to ContactRole allow the use of a Contact in a certain manner. Examples
        ///might include a provider, or a data analyst. 
        /// </para>
        /// <para>
        /// Regular expression: (Role)
        /// </para>
        /// </summary>
        public ContactRoleType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Role)
        /// </para>
        /// </summary>
        public virtual RoleType Role {
            get {
                XElement x = this.GetElement(RoleXName);
                return ((RoleType)(x));
            }
            set {
                this.SetElement(RoleXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// When a ContactRole is used, it specifies which Contact the role is associated with. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string contact_ref {
            get {
                XAttribute x = this.Attribute(contact_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(contact_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ContactRoleType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RoleXName, typeof(RoleType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The roles (lab equipment sales, contractor, etc.) the Contact fills.
    ///			
    /// </para>
    /// <para>
    /// Regular expression: (cvParam)
    /// </para>
    /// </summary>
    public partial class RoleType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RoleType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RoleType(XElement xe) { return XTypedServices.ToXTypedElement<RoleType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RoleType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(cvParamXName));
        }
        
        /// <summary>
        /// <para>
        /// The roles (lab equipment sales, contractor, etc.) the Contact fills.
        ///			
        /// </para>
        /// <para>
        /// Regular expression: (cvParam)
        /// </para>
        /// </summary>
        public RoleType() {
        }
        
        /// <summary>
        /// <para>
        /// CV term for contact roles, such as software provider.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (cvParam)
        /// </para>
        /// </summary>
        public virtual CVParamType cvParam {
            get {
                XElement x = this.GetElement(cvParamXName);
                return ((CVParamType)(x));
            }
            set {
                this.SetElement(cvParamXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RoleType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(cvParamXName, typeof(CVParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Represents bibliographic references. 
    /// </para>
    /// </summary>
    public partial class BibliographicReferenceType : global::psidev.info.psi.pi.mzIdentML.Item1.Item2.IdentifiableType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName authorsXName = System.Xml.Linq.XName.Get("authors", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName publicationXName = System.Xml.Linq.XName.Get("publication", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName publisherXName = System.Xml.Linq.XName.Get("publisher", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName editorXName = System.Xml.Linq.XName.Get("editor", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName yearXName = System.Xml.Linq.XName.Get("year", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName volumeXName = System.Xml.Linq.XName.Get("volume", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName issueXName = System.Xml.Linq.XName.Get("issue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pagesXName = System.Xml.Linq.XName.Get("pages", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleXName = System.Xml.Linq.XName.Get("title", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName doiXName = System.Xml.Linq.XName.Get("doi", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BibliographicReferenceType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
		public static explicit operator BibliographicReferenceType(XElement xe) { return XTypedServices.ToXTypedElement<BibliographicReferenceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Represents bibliographic references. 
        /// </para>
        /// </summary>
        public BibliographicReferenceType() {
        }
        
        /// <summary>
        /// <para>
        /// The names of the authors of the reference.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string authors {
            get {
                XAttribute x = this.Attribute(authorsXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(authorsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The name of the journal, book etc.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string publication {
            get {
                XAttribute x = this.Attribute(publicationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(publicationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The publisher of the publication.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string publisher {
            get {
                XAttribute x = this.Attribute(publisherXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(publisherXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The editor(s) of the reference.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string editor {
            get {
                XAttribute x = this.Attribute(editorXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(editorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The year of publication.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? year {
            get {
                XAttribute x = this.Attribute(yearXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(yearXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The volume name or number.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string volume {
            get {
                XAttribute x = this.Attribute(volumeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(volumeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The issue name or number.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string issue {
            get {
                XAttribute x = this.Attribute(issueXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(issueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The page numbers.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string pages {
            get {
                XAttribute x = this.Attribute(pagesXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(pagesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The title of the BibliographicReference.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string title {
            get {
                XAttribute x = this.Attribute(titleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(titleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The DOI of the referenced publication.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string doi {
            get {
                XAttribute x = this.Attribute(doiXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(doiXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BibliographicReferenceType>(this);
        }
    }
    
    /// <summary>
    /// <para>
    /// The use of a protocol with the requisite Parameters and ParameterValues. ProtocolApplications can take Material or Data (or both) as input
    ///and produce Material or Data (or both) as output. 
    /// </para>
    /// </summary>
    public abstract partial class ProtocolApplicationType : global::psidev.info.psi.pi.mzIdentML.Item1.Item2.IdentifiableType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName activityDateXName = System.Xml.Linq.XName.Get("activityDate", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ProtocolApplicationType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
		public static explicit operator ProtocolApplicationType(XElement xe) {  return (ProtocolApplicationType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// The use of a protocol with the requisite Parameters and ParameterValues. ProtocolApplications can take Material or Data (or both) as input
        ///and produce Material or Data (or both) as output. 
        /// </para>
        /// </summary>
        public ProtocolApplicationType() {
        }
        
        /// <summary>
        /// <para>
        /// When the protocol was applied.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? activityDate {
            get {
                XAttribute x = this.Attribute(activityDateXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetAttribute(activityDateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Abstract entity allowing either cvParam or userParam to be referenced in other schemas. 
    /// </para>
    /// </summary>
    public abstract partial class AbstractParamType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valueXName = System.Xml.Linq.XName.Get("value", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unitAccessionXName = System.Xml.Linq.XName.Get("unitAccession", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unitNameXName = System.Xml.Linq.XName.Get("unitName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unitCvRefXName = System.Xml.Linq.XName.Get("unitCvRef", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AbstractParamType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
		public static explicit operator AbstractParamType(XElement xe) {  return (AbstractParamType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Abstract entity allowing either cvParam or userParam to be referenced in other schemas. 
        /// </para>
        /// </summary>
        public AbstractParamType() {
        }
        
        /// <summary>
        /// <para>
        /// The name of the parameter.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The user-entered value of the parameter.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string value {
            get {
                XAttribute x = this.Attribute(valueXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(valueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// An accession number identifying the unit within the OBO foundry Unit CV. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string unitAccession {
            get {
                XAttribute x = this.Attribute(unitAccessionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(unitAccessionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The name of the unit.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string unitName {
            get {
                XAttribute x = this.Attribute(unitNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(unitNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// If a unit term is referenced, this attribute must refer to the CV 'id' attribute defined in the cvList in this file. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string unitCvRef {
            get {
                XAttribute x = this.Attribute(unitCvRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(unitCvRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A single user-defined parameter.
    /// </para>
    /// </summary>
    public partial class UserParamType : global::psidev.info.psi.pi.mzIdentML.Item1.Item2.AbstractParamType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("UserParamType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
		public static explicit operator UserParamType(XElement xe) { return XTypedServices.ToXTypedElement<UserParamType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A single user-defined parameter.
        /// </para>
        /// </summary>
        public UserParamType() {
        }
        
        /// <summary>
        /// <para>
        /// The datatype of the parameter, where appropriate (e.g.: xsd:float).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UserParamType>(this);
        }
    }
    
    /// <summary>
    /// <para>
    /// A single entry from an ontology or a controlled
    ///vocabulary.
    /// </para>
    /// </summary>
    public partial class CVParamType : global::psidev.info.psi.pi.mzIdentML.Item1.Item2.AbstractParamType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvRefXName = System.Xml.Linq.XName.Get("cvRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName accessionXName = System.Xml.Linq.XName.Get("accession", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CVParamType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
		public static explicit operator CVParamType(XElement xe) { return XTypedServices.ToXTypedElement<CVParamType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A single entry from an ontology or a controlled
        ///vocabulary.
        /// </para>
        /// </summary>
        public CVParamType() {
        }
        
        /// <summary>
        /// <para>
        /// A reference to the cv element from which this term originates. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string cvRef {
            get {
                XAttribute x = this.Attribute(cvRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(cvRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The accession or ID number of this CV term in the source CV. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string accession {
            get {
                XAttribute x = this.Attribute(accessionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(accessionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CVParamType>(this);
        }
    }
    
    /// <summary>
    /// <para>
    /// A source controlled vocabulary from which cvParams will be obtained.
    /// </para>
    /// </summary>
    public partial class cvType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName fullNameXName = System.Xml.Linq.XName.Get("fullName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName versionXName = System.Xml.Linq.XName.Get("version", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uriXName = System.Xml.Linq.XName.Get("uri", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("cvType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
		public static explicit operator cvType(XElement xe) { return XTypedServices.ToXTypedElement<cvType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A source controlled vocabulary from which cvParams will be obtained.
        /// </para>
        /// </summary>
        public cvType() {
        }
        
        /// <summary>
        /// <para>
        /// The full name of the CV.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string fullName {
            get {
                XAttribute x = this.Attribute(fullNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(fullNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The version of the CV.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string version {
            get {
                XAttribute x = this.Attribute(versionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(versionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The URI of the source CV.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual System.Uri uri {
            get {
                XAttribute x = this.Attribute(uriXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(uriXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The unique identifier of this cv within the document to be referenced by cvParam elements. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<cvType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Other classes in the model can be specified as sub-classes, inheriting from Identifiable. Identifiable gives classes a unique identifier within the scope and a name that need not be unique.
    /// </para>
    /// </summary>
    public abstract partial class IdentifiableType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("IdentifiableType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
		public static explicit operator IdentifiableType(XElement xe) {  return (IdentifiableType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Other classes in the model can be specified as sub-classes, inheriting from Identifiable. Identifiable gives classes a unique identifier within the scope and a name that need not be unique.
        /// </para>
        /// </summary>
        public IdentifiableType() {
        }
        
        /// <summary>
        /// <para>
        /// An identifier is an unambiguous string that is unique within the scope (i.e. a document, a set of related documents, or a repository) of its use.		
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The potentially ambiguous common identifier, such as a human-readable name for the instance. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// The complete set of Contacts (people and organisations) for this file. 
    /// </para>
    /// <para>
    /// Regular expression: (Person | Organization)+
    /// </para>
    /// </summary>
    public partial class AuditCollectionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PersonXName = System.Xml.Linq.XName.Get("Person", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PersonType> PersonField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OrganizationXName = System.Xml.Linq.XName.Get("Organization", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<OrganizationType> OrganizationField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AuditCollectionType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AuditCollectionType(XElement xe) { return XTypedServices.ToXTypedElement<AuditCollectionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AuditCollectionType() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(PersonXName), new NamedContentModelEntity(OrganizationXName));
        }
        
        /// <summary>
        /// <para>
        /// The complete set of Contacts (people and organisations) for this file. 
        /// </para>
        /// <para>
        /// Regular expression: (Person | Organization)+
        /// </para>
        /// </summary>
        public AuditCollectionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Person | Organization)+
        /// </para>
        /// </summary>
        public virtual IList<PersonType> Person {
            get {
                if ((this.PersonField == null)) {
                    this.PersonField = new XTypedList<PersonType>(this, LinqToXsdTypeManager.Instance, PersonXName);
                }
                return this.PersonField;
            }
            set {
                if ((value == null)) {
                    this.PersonField = null;
                }
                else {
                    if ((this.PersonField == null)) {
                        this.PersonField = XTypedList<PersonType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PersonXName);
                    }
                    else {
                        XTypedServices.SetList<PersonType>(this.PersonField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Person | Organization)+
        /// </para>
        /// </summary>
        public virtual IList<OrganizationType> Organization {
            get {
                if ((this.OrganizationField == null)) {
                    this.OrganizationField = new XTypedList<OrganizationType>(this, LinqToXsdTypeManager.Instance, OrganizationXName);
                }
                return this.OrganizationField;
            }
            set {
                if ((value == null)) {
                    this.OrganizationField = null;
                }
                else {
                    if ((this.OrganizationField == null)) {
                        this.OrganizationField = XTypedList<OrganizationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, OrganizationXName);
                    }
                    else {
                        XTypedServices.SetList<OrganizationType>(this.OrganizationField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AuditCollectionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PersonXName, typeof(PersonType));
            localElementDictionary.Add(OrganizationXName, typeof(OrganizationType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The provider of the document in terms of the Contact and the software the produced the document instance. 
    /// </para>
    /// <para>
    /// Regular expression: (ContactRole?)
    /// </para>
    /// </summary>
    public partial class ProviderType : global::psidev.info.psi.pi.mzIdentML.Item1.Item2.IdentifiableType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ContactRoleXName = System.Xml.Linq.XName.Get("ContactRole", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName analysisSoftware_refXName = System.Xml.Linq.XName.Get("analysisSoftware_ref", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ProviderType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ProviderType(XElement xe) { return XTypedServices.ToXTypedElement<ProviderType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ProviderType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ContactRoleXName));
        }
        
        /// <summary>
        /// <para>
        /// The provider of the document in terms of the Contact and the software the produced the document instance. 
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole?)
        /// </para>
        /// </summary>
        public ProviderType() {
        }
        
        /// <summary>
        /// <para>
        /// The Contact that provided the document instance.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ContactRole?)
        /// </para>
        /// </summary>
        public virtual ContactRoleType ContactRole {
            get {
                XElement x = this.GetElement(ContactRoleXName);
                return ((ContactRoleType)(x));
            }
            set {
                this.SetElement(ContactRoleXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The Software that produced the document instance.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string analysisSoftware_ref {
            get {
                XAttribute x = this.Attribute(analysisSoftware_refXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(analysisSoftware_refXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ProviderType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ContactRoleXName, typeof(ContactRoleType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Helper type to allow multiple cvParams or userParams to be given for an element.
    /// </para>
    /// <para>
    /// Regular expression: (cvParam | userParam)+
    /// </para>
    /// </summary>
    public partial class ParamListType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CVParamType> cvParamField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userParamXName = System.Xml.Linq.XName.Get("userParam", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UserParamType> userParamField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ParamListType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ParamListType(XElement xe) { return XTypedServices.ToXTypedElement<ParamListType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ParamListType() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName));
        }
        
        /// <summary>
        /// <para>
        /// Helper type to allow multiple cvParams or userParams to be given for an element.
        /// </para>
        /// <para>
        /// Regular expression: (cvParam | userParam)+
        /// </para>
        /// </summary>
        public ParamListType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (cvParam | userParam)+
        /// </para>
        /// </summary>
        public virtual IList<CVParamType> cvParam {
            get {
                if ((this.cvParamField == null)) {
                    this.cvParamField = new XTypedList<CVParamType>(this, LinqToXsdTypeManager.Instance, cvParamXName);
                }
                return this.cvParamField;
            }
            set {
                if ((value == null)) {
                    this.cvParamField = null;
                }
                else {
                    if ((this.cvParamField == null)) {
                        this.cvParamField = XTypedList<CVParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, cvParamXName);
                    }
                    else {
                        XTypedServices.SetList<CVParamType>(this.cvParamField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (cvParam | userParam)+
        /// </para>
        /// </summary>
        public virtual IList<UserParamType> userParam {
            get {
                if ((this.userParamField == null)) {
                    this.userParamField = new XTypedList<UserParamType>(this, LinqToXsdTypeManager.Instance, userParamXName);
                }
                return this.userParamField;
            }
            set {
                if ((value == null)) {
                    this.userParamField = null;
                }
                else {
                    if ((this.userParamField == null)) {
                        this.userParamField = XTypedList<UserParamType>.Initialize(this, LinqToXsdTypeManager.Instance, value, userParamXName);
                    }
                    else {
                        XTypedServices.SetList<UserParamType>(this.userParamField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ParamListType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(cvParamXName, typeof(CVParamType));
            localElementDictionary.Add(userParamXName, typeof(UserParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Helper type to allow either a cvParam or a userParam to be provided for an element.
    /// </para>
    /// <para>
    /// Regular expression: (cvParam | userParam)
    /// </para>
    /// </summary>
    public partial class ParamType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cvParamXName = System.Xml.Linq.XName.Get("cvParam", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName userParamXName = System.Xml.Linq.XName.Get("userParam", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ParamType", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ParamType(XElement xe) { return XTypedServices.ToXTypedElement<ParamType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ParamType() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(cvParamXName), new NamedContentModelEntity(userParamXName));
        }
        
        /// <summary>
        /// <para>
        /// Helper type to allow either a cvParam or a userParam to be provided for an element.
        /// </para>
        /// <para>
        /// Regular expression: (cvParam | userParam)
        /// </para>
        /// </summary>
        public ParamType() {
        }
        
        public ParamType(CVParamType cvParam) {
            this.cvParam = cvParam;
        }
        
        public ParamType(UserParamType userParam) {
            this.userParam = userParam;
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (cvParam | userParam)
        /// </para>
        /// </summary>
        public virtual CVParamType cvParam {
            get {
                XElement x = this.GetElement(cvParamXName);
                return ((CVParamType)(x));
            }
            set {
                this.SetElement(cvParamXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (cvParam | userParam)
        /// </para>
        /// </summary>
        public virtual UserParamType userParam {
            get {
                XElement x = this.GetElement(userParamXName);
                return ((UserParamType)(x));
            }
            set {
                this.SetElement(userParamXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ParamType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(cvParamXName, typeof(CVParamType));
            localElementDictionary.Add(userParamXName, typeof(UserParamType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// The upper-most hierarchy level of mzIdentML with sub-containers for example describing software, protocols and search results (spectrum identifications or protein detection results). 
    /// </para>
    /// </summary>
    public partial class MzIdentML : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private MzIdentMLType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("MzIdentML", "http://psidev.info/psi/pi/mzIdentML/1.2");
        
		public static explicit operator MzIdentML(XElement xe) { return XTypedServices.ToXTypedElement<MzIdentML, MzIdentMLType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// The upper-most hierarchy level of mzIdentML with sub-containers for example describing software, protocols and search results (spectrum identifications or protein detection results). 
        /// </para>
        /// </summary>
        public MzIdentML() {
            SetInnerType(new MzIdentMLType());
        }
        
        /// <summary>
        /// <para>
        /// The upper-most hierarchy level of mzIdentML with sub-containers for example describing software, protocols and search results (spectrum identifications or protein detection results). 
        /// </para>
        /// </summary>
        public MzIdentML(MzIdentMLType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual MzIdentMLType Content {
            get {
                return ContentField;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (cvList, AnalysisSoftwareList?, Provider?, AuditCollection?, AnalysisSampleCollection?, SequenceCollection?, AnalysisCollection, AnalysisProtocolCollection, DataCollection, BibliographicReference*)
        /// </para>
        /// </summary>
        public virtual CVListType cvList {
            get {
                return this.ContentField.cvList;
            }
            set {
                this.ContentField.cvList = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (cvList, AnalysisSoftwareList?, Provider?, AuditCollection?, AnalysisSampleCollection?, SequenceCollection?, AnalysisCollection, AnalysisProtocolCollection, DataCollection, BibliographicReference*)
        /// </para>
        /// </summary>
        public virtual AnalysisSoftwareListType AnalysisSoftwareList {
            get {
                return this.ContentField.AnalysisSoftwareList;
            }
            set {
                this.ContentField.AnalysisSoftwareList = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// The Provider of the mzIdentML record in terms of the contact and software. 
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (cvList, AnalysisSoftwareList?, Provider?, AuditCollection?, AnalysisSampleCollection?, SequenceCollection?, AnalysisCollection, AnalysisProtocolCollection, DataCollection, BibliographicReference*)
        /// </para>
        /// </summary>
        public virtual ProviderType Provider {
            get {
                return this.ContentField.Provider;
            }
            set {
                this.ContentField.Provider = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (cvList, AnalysisSoftwareList?, Provider?, AuditCollection?, AnalysisSampleCollection?, SequenceCollection?, AnalysisCollection, AnalysisProtocolCollection, DataCollection, BibliographicReference*)
        /// </para>
        /// </summary>
        public virtual AuditCollectionType AuditCollection {
            get {
                return this.ContentField.AuditCollection;
            }
            set {
                this.ContentField.AuditCollection = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (cvList, AnalysisSoftwareList?, Provider?, AuditCollection?, AnalysisSampleCollection?, SequenceCollection?, AnalysisCollection, AnalysisProtocolCollection, DataCollection, BibliographicReference*)
        /// </para>
        /// </summary>
        public virtual AnalysisSampleCollectionType AnalysisSampleCollection {
            get {
                return this.ContentField.AnalysisSampleCollection;
            }
            set {
                this.ContentField.AnalysisSampleCollection = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (cvList, AnalysisSoftwareList?, Provider?, AuditCollection?, AnalysisSampleCollection?, SequenceCollection?, AnalysisCollection, AnalysisProtocolCollection, DataCollection, BibliographicReference*)
        /// </para>
        /// </summary>
        public virtual SequenceCollectionType SequenceCollection {
            get {
                return this.ContentField.SequenceCollection;
            }
            set {
                this.ContentField.SequenceCollection = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (cvList, AnalysisSoftwareList?, Provider?, AuditCollection?, AnalysisSampleCollection?, SequenceCollection?, AnalysisCollection, AnalysisProtocolCollection, DataCollection, BibliographicReference*)
        /// </para>
        /// </summary>
        public virtual AnalysisCollectionType AnalysisCollection {
            get {
                return this.ContentField.AnalysisCollection;
            }
            set {
                this.ContentField.AnalysisCollection = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (cvList, AnalysisSoftwareList?, Provider?, AuditCollection?, AnalysisSampleCollection?, SequenceCollection?, AnalysisCollection, AnalysisProtocolCollection, DataCollection, BibliographicReference*)
        /// </para>
        /// </summary>
        public virtual AnalysisProtocolCollectionType AnalysisProtocolCollection {
            get {
                return this.ContentField.AnalysisProtocolCollection;
            }
            set {
                this.ContentField.AnalysisProtocolCollection = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (cvList, AnalysisSoftwareList?, Provider?, AuditCollection?, AnalysisSampleCollection?, SequenceCollection?, AnalysisCollection, AnalysisProtocolCollection, DataCollection, BibliographicReference*)
        /// </para>
        /// </summary>
        public virtual DataCollectionType DataCollection {
            get {
                return this.ContentField.DataCollection;
            }
            set {
                this.ContentField.DataCollection = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Any bibliographic references associated with the file
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (cvList, AnalysisSoftwareList?, Provider?, AuditCollection?, AnalysisSampleCollection?, SequenceCollection?, AnalysisCollection, AnalysisProtocolCollection, DataCollection, BibliographicReference*)
        /// </para>
        /// </summary>
        public virtual IList<BibliographicReferenceType> BibliographicReference {
            get {
                return this.ContentField.BibliographicReference;
            }
            set {
                this.ContentField.BibliographicReference = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// The date on which the file was produced.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? creationDate {
            get {
                return this.ContentField.creationDate;
            }
            set {
                this.ContentField.creationDate = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// The version of the schema this instance document refers to, in the format x.y.z. Changes to z should not affect prevent instance documents from validating. 
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string version {
            get {
                return this.ContentField.version;
            }
            set {
                this.ContentField.version = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static MzIdentML Load(string xmlFile) {
            return XTypedServices.Load<MzIdentML, MzIdentMLType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static MzIdentML Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<MzIdentML, MzIdentMLType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static MzIdentML Parse(string xml) {
            return XTypedServices.Parse<MzIdentML, MzIdentMLType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new MzIdentML(((MzIdentMLType)(this.Content.Clone())));
        }
        
        private void SetInnerType(MzIdentMLType ContentField) {
            this.ContentField = ((MzIdentMLType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> typeDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> elementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static Dictionary<System.Type, System.Type> wrapperDictionary = new Dictionary<System.Type, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
            BuildWrapperDictionary();
        }
        
        private LinqToXsdTypeManager() {
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return wrapperDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(System.Xml.Linq.XName.Get("CVListType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.CVListType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AnalysisSoftwareListType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.AnalysisSoftwareListType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AnalysisSampleCollectionType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.AnalysisSampleCollectionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SequenceCollectionType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.SequenceCollectionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AnalysisCollectionType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.AnalysisCollectionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AnalysisProtocolCollectionType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.AnalysisProtocolCollectionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("InputsType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.InputsType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AnalysisDataType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.AnalysisDataType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DataCollectionType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.DataCollectionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("MzIdentMLType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.MzIdentMLType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SearchDatabaseType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.SearchDatabaseType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SourceFileType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.SourceFileType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ModificationParamsType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.ModificationParamsType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FilterType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.FilterType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DatabaseFiltersType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.DatabaseFiltersType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TranslationTableType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.TranslationTableType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DatabaseTranslationType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.DatabaseTranslationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SpectrumIdentificationProtocolType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.SpectrumIdentificationProtocolType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("InputSpectraType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.InputSpectraType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SearchDatabaseRefType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.SearchDatabaseRefType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SpectrumIdentificationType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.SpectrumIdentificationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("MeasureType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.MeasureType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FragmentationTableType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.FragmentationTableType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SpectrumIdentificationListType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.SpectrumIdentificationListType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SpecificityRulesType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.SpecificityRulesType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SearchModificationType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.SearchModificationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FragmentArrayType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.FragmentArrayType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("IonTypeType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.IonTypeType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FragmentationType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.FragmentationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PeptideEvidenceRefType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.PeptideEvidenceRefType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SpectrumIdentificationItemType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.SpectrumIdentificationItemType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SpectrumIdentificationResultType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.SpectrumIdentificationResultType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("InputSpectrumIdentificationsType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.InputSpectrumIdentificationsType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ProteinDetectionType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.ProteinDetectionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ProteinDetectionProtocolType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.ProteinDetectionProtocolType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ProteinDetectionListType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.ProteinDetectionListType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SpectrumIdentificationItemRefType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.SpectrumIdentificationItemRefType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PeptideHypothesisType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.PeptideHypothesisType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ProteinDetectionHypothesisType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.ProteinDetectionHypothesisType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ProteinAmbiguityGroupType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.ProteinAmbiguityGroupType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ModificationType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.ModificationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PeptideType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.PeptideType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SubstitutionModificationType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.SubstitutionModificationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SpectraDataType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.SpectraDataType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AnalysisSoftwareType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.AnalysisSoftwareType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("EnzymeType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.EnzymeType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("EnzymesType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.EnzymesType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ResidueType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.ResidueType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AmbiguousResidueType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.AmbiguousResidueType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("MassTableType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.MassTableType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PeptideEvidenceType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.PeptideEvidenceType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ToleranceType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.ToleranceType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SpectrumIDFormatType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.SpectrumIDFormatType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DBSequenceType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.DBSequenceType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SampleType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.SampleType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SubSampleType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.SubSampleType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ExternalDataType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.ExternalDataType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FileFormatType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.FileFormatType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PersonType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.PersonType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AffiliationType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.AffiliationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("OrganizationType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.OrganizationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ParentOrganizationType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.ParentOrganizationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AbstractContactType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.AbstractContactType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ContactRoleType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.ContactRoleType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RoleType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.RoleType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("BibliographicReferenceType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.BibliographicReferenceType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ProtocolApplicationType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.ProtocolApplicationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AbstractParamType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.AbstractParamType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("UserParamType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.UserParamType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CVParamType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.CVParamType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("cvType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.cvType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("IdentifiableType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.IdentifiableType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AuditCollectionType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.AuditCollectionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ProviderType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.ProviderType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ParamListType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.ParamListType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ParamType", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.ParamType));
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(System.Xml.Linq.XName.Get("MzIdentML", "http://psidev.info/psi/pi/mzIdentML/1.2"), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.MzIdentML));
        }
        
        private static void BuildWrapperDictionary() {
            wrapperDictionary.Add(typeof(psidev.info.psi.pi.mzIdentML.Item1.Item2.MzIdentML), typeof(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.MzIdentMLType));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[System.Xml.Linq.XName.Get("MzIdentML", "http://psidev.info/psi/pi/mzIdentML/1.2")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public MzIdentML MzIdentML {  get {return rootObject as MzIdentML; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(MzIdentML root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public global::psidev.info.psi.pi.mzIdentML.Item1.Item2.MzIdentML MzIdentML {  get {return rootObject as global::psidev.info.psi.pi.mzIdentML.Item1.Item2.MzIdentML; } }
        
        private XRoot() {
        }
        
        public XRoot(global::psidev.info.psi.pi.mzIdentML.Item1.Item2.MzIdentML root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
