//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Schemas.Project2007 {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
    /// </para>
    /// </summary>
    public partial class Project : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SaveVersionXName = System.Xml.Linq.XName.Get("SaveVersion", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UIDXName = System.Xml.Linq.XName.Get("UID", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TitleXName = System.Xml.Linq.XName.Get("Title", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SubjectXName = System.Xml.Linq.XName.Get("Subject", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CategoryXName = System.Xml.Linq.XName.Get("Category", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CompanyXName = System.Xml.Linq.XName.Get("Company", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ManagerXName = System.Xml.Linq.XName.Get("Manager", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AuthorXName = System.Xml.Linq.XName.Get("Author", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CreationDateXName = System.Xml.Linq.XName.Get("CreationDate", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RevisionXName = System.Xml.Linq.XName.Get("Revision", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LastSavedXName = System.Xml.Linq.XName.Get("LastSaved", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ScheduleFromStartXName = System.Xml.Linq.XName.Get("ScheduleFromStart", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StartDateXName = System.Xml.Linq.XName.Get("StartDate", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FinishDateXName = System.Xml.Linq.XName.Get("FinishDate", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FYStartDateXName = System.Xml.Linq.XName.Get("FYStartDate", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CriticalSlackLimitXName = System.Xml.Linq.XName.Get("CriticalSlackLimit", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CurrencyDigitsXName = System.Xml.Linq.XName.Get("CurrencyDigits", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CurrencySymbolXName = System.Xml.Linq.XName.Get("CurrencySymbol", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CurrencyCodeXName = System.Xml.Linq.XName.Get("CurrencyCode", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CurrencySymbolPositionXName = System.Xml.Linq.XName.Get("CurrencySymbolPosition", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CalendarUIDXName = System.Xml.Linq.XName.Get("CalendarUID", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DefaultStartTimeXName = System.Xml.Linq.XName.Get("DefaultStartTime", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DefaultFinishTimeXName = System.Xml.Linq.XName.Get("DefaultFinishTime", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MinutesPerDayXName = System.Xml.Linq.XName.Get("MinutesPerDay", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MinutesPerWeekXName = System.Xml.Linq.XName.Get("MinutesPerWeek", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DaysPerMonthXName = System.Xml.Linq.XName.Get("DaysPerMonth", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DefaultTaskTypeXName = System.Xml.Linq.XName.Get("DefaultTaskType", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DefaultFixedCostAccrualXName = System.Xml.Linq.XName.Get("DefaultFixedCostAccrual", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DefaultStandardRateXName = System.Xml.Linq.XName.Get("DefaultStandardRate", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DefaultOvertimeRateXName = System.Xml.Linq.XName.Get("DefaultOvertimeRate", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DurationFormatXName = System.Xml.Linq.XName.Get("DurationFormat", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WorkFormatXName = System.Xml.Linq.XName.Get("WorkFormat", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EditableActualCostsXName = System.Xml.Linq.XName.Get("EditableActualCosts", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HonorConstraintsXName = System.Xml.Linq.XName.Get("HonorConstraints", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EarnedValueMethodXName = System.Xml.Linq.XName.Get("EarnedValueMethod", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InsertedProjectsLikeSummaryXName = System.Xml.Linq.XName.Get("InsertedProjectsLikeSummary", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MultipleCriticalPathsXName = System.Xml.Linq.XName.Get("MultipleCriticalPaths", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NewTasksEffortDrivenXName = System.Xml.Linq.XName.Get("NewTasksEffortDriven", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NewTasksEstimatedXName = System.Xml.Linq.XName.Get("NewTasksEstimated", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SplitsInProgressTasksXName = System.Xml.Linq.XName.Get("SplitsInProgressTasks", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SpreadActualCostXName = System.Xml.Linq.XName.Get("SpreadActualCost", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SpreadPercentCompleteXName = System.Xml.Linq.XName.Get("SpreadPercentComplete", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TaskUpdatesResourceXName = System.Xml.Linq.XName.Get("TaskUpdatesResource", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FiscalYearStartXName = System.Xml.Linq.XName.Get("FiscalYearStart", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WeekStartDayXName = System.Xml.Linq.XName.Get("WeekStartDay", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MoveCompletedEndsBackXName = System.Xml.Linq.XName.Get("MoveCompletedEndsBack", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MoveRemainingStartsBackXName = System.Xml.Linq.XName.Get("MoveRemainingStartsBack", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MoveRemainingStartsForwardXName = System.Xml.Linq.XName.Get("MoveRemainingStartsForward", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MoveCompletedEndsForwardXName = System.Xml.Linq.XName.Get("MoveCompletedEndsForward", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BaselineForEarnedValueXName = System.Xml.Linq.XName.Get("BaselineForEarnedValue", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AutoAddNewResourcesAndTasksXName = System.Xml.Linq.XName.Get("AutoAddNewResourcesAndTasks", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StatusDateXName = System.Xml.Linq.XName.Get("StatusDate", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CurrentDateXName = System.Xml.Linq.XName.Get("CurrentDate", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MicrosoftProjectServerURLXName = System.Xml.Linq.XName.Get("MicrosoftProjectServerURL", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AutolinkXName = System.Xml.Linq.XName.Get("Autolink", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NewTaskStartDateXName = System.Xml.Linq.XName.Get("NewTaskStartDate", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DefaultTaskEVMethodXName = System.Xml.Linq.XName.Get("DefaultTaskEVMethod", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProjectExternallyEditedXName = System.Xml.Linq.XName.Get("ProjectExternallyEdited", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExtendedCreationDateXName = System.Xml.Linq.XName.Get("ExtendedCreationDate", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ActualsInSyncXName = System.Xml.Linq.XName.Get("ActualsInSync", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RemoveFilePropertiesXName = System.Xml.Linq.XName.Get("RemoveFileProperties", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AdminProjectXName = System.Xml.Linq.XName.Get("AdminProject", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OutlineCodesXName = System.Xml.Linq.XName.Get("OutlineCodes", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WBSMasksXName = System.Xml.Linq.XName.Get("WBSMasks", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExtendedAttributesXName = System.Xml.Linq.XName.Get("ExtendedAttributes", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CalendarsXName = System.Xml.Linq.XName.Get("Calendars", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TasksXName = System.Xml.Linq.XName.Get("Tasks", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ResourcesXName = System.Xml.Linq.XName.Get("Resources", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AssignmentsXName = System.Xml.Linq.XName.Get("Assignments", "http://schemas.microsoft.com/project/2007");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Project", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Project(XElement xe) { return XTypedServices.ToXTypedElement<Project>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Project() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SaveVersionXName), new NamedContentModelEntity(UIDXName), new NamedContentModelEntity(NameXName), new NamedContentModelEntity(TitleXName), new NamedContentModelEntity(SubjectXName), new NamedContentModelEntity(CategoryXName), new NamedContentModelEntity(CompanyXName), new NamedContentModelEntity(ManagerXName), new NamedContentModelEntity(AuthorXName), new NamedContentModelEntity(CreationDateXName), new NamedContentModelEntity(RevisionXName), new NamedContentModelEntity(LastSavedXName), new NamedContentModelEntity(ScheduleFromStartXName), new NamedContentModelEntity(StartDateXName), new NamedContentModelEntity(FinishDateXName), new NamedContentModelEntity(FYStartDateXName), new NamedContentModelEntity(CriticalSlackLimitXName), new NamedContentModelEntity(CurrencyDigitsXName), new NamedContentModelEntity(CurrencySymbolXName), new NamedContentModelEntity(CurrencyCodeXName), new NamedContentModelEntity(CurrencySymbolPositionXName), new NamedContentModelEntity(CalendarUIDXName), new NamedContentModelEntity(DefaultStartTimeXName), new NamedContentModelEntity(DefaultFinishTimeXName), new NamedContentModelEntity(MinutesPerDayXName), new NamedContentModelEntity(MinutesPerWeekXName), new NamedContentModelEntity(DaysPerMonthXName), new NamedContentModelEntity(DefaultTaskTypeXName), new NamedContentModelEntity(DefaultFixedCostAccrualXName), new NamedContentModelEntity(DefaultStandardRateXName), new NamedContentModelEntity(DefaultOvertimeRateXName), new NamedContentModelEntity(DurationFormatXName), new NamedContentModelEntity(WorkFormatXName), new NamedContentModelEntity(EditableActualCostsXName), new NamedContentModelEntity(HonorConstraintsXName), new NamedContentModelEntity(EarnedValueMethodXName), new NamedContentModelEntity(InsertedProjectsLikeSummaryXName), new NamedContentModelEntity(MultipleCriticalPathsXName), new NamedContentModelEntity(NewTasksEffortDrivenXName), new NamedContentModelEntity(NewTasksEstimatedXName), new NamedContentModelEntity(SplitsInProgressTasksXName), new NamedContentModelEntity(SpreadActualCostXName), new NamedContentModelEntity(SpreadPercentCompleteXName), new NamedContentModelEntity(TaskUpdatesResourceXName), new NamedContentModelEntity(FiscalYearStartXName), new NamedContentModelEntity(WeekStartDayXName), new NamedContentModelEntity(MoveCompletedEndsBackXName), new NamedContentModelEntity(MoveRemainingStartsBackXName), new NamedContentModelEntity(MoveRemainingStartsForwardXName), new NamedContentModelEntity(MoveCompletedEndsForwardXName), new NamedContentModelEntity(BaselineForEarnedValueXName), new NamedContentModelEntity(AutoAddNewResourcesAndTasksXName), new NamedContentModelEntity(StatusDateXName), new NamedContentModelEntity(CurrentDateXName), new NamedContentModelEntity(MicrosoftProjectServerURLXName), new NamedContentModelEntity(AutolinkXName), new NamedContentModelEntity(NewTaskStartDateXName), new NamedContentModelEntity(DefaultTaskEVMethodXName), new NamedContentModelEntity(ProjectExternallyEditedXName), new NamedContentModelEntity(ExtendedCreationDateXName), new NamedContentModelEntity(ActualsInSyncXName), new NamedContentModelEntity(RemoveFilePropertiesXName), new NamedContentModelEntity(AdminProjectXName), new NamedContentModelEntity(OutlineCodesXName), new NamedContentModelEntity(WBSMasksXName), new NamedContentModelEntity(ExtendedAttributesXName), new NamedContentModelEntity(CalendarsXName), new NamedContentModelEntity(TasksXName), new NamedContentModelEntity(ResourcesXName), new NamedContentModelEntity(AssignmentsXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public Project() {
        }
        
        /// <summary>
        /// <para>
        /// The version of Microsoft Office Project from which the project was saved. Values are: 12=Project 2007.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual decimal SaveVersion {
            get {
                XElement x = this.GetElement(SaveVersionXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(SaveVersionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The unique ID of the project.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual string UID {
            get {
                XElement x = this.GetElement(UIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(UIDXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(UIDXName, value, "UID", UIDLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The name of the project.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual string Name {
            get {
                XElement x = this.GetElement(NameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(NameXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(NameXName, value, "Name", NameLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The title of the project.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual string Title {
            get {
                XElement x = this.GetElement(TitleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(TitleXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(TitleXName, value, "Title", TitleLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The subject of the project.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual string Subject {
            get {
                XElement x = this.GetElement(SubjectXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SubjectXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(SubjectXName, value, "Subject", SubjectLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The category of the project.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual string Category {
            get {
                XElement x = this.GetElement(CategoryXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(CategoryXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(CategoryXName, value, "Category", CategoryLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The company that owns the project.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual string Company {
            get {
                XElement x = this.GetElement(CompanyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(CompanyXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(CompanyXName, value, "Company", CompanyLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The manager of the project.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual string Manager {
            get {
                XElement x = this.GetElement(ManagerXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ManagerXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(ManagerXName, value, "Manager", ManagerLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The author of the project.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual string Author {
            get {
                XElement x = this.GetElement(AuthorXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AuthorXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(AuthorXName, value, "Author", AuthorLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The date that the project was created.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? CreationDate {
            get {
                XElement x = this.GetElement(CreationDateXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetElement(CreationDateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The number of times a project has been saved.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Revision {
            get {
                XElement x = this.GetElement(RevisionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(RevisionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The date that the project was last saved.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? LastSaved {
            get {
                XElement x = this.GetElement(LastSavedXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetElement(LastSavedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Whether the project is schduled from the start date or finish date.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? ScheduleFromStart {
            get {
                XElement x = this.GetElement(ScheduleFromStartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(ScheduleFromStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The start date of the project. Required if ScheduleFromStart is true.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? StartDate {
            get {
                XElement x = this.GetElement(StartDateXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetElement(StartDateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The finish date of the project. Required if ScheduleFromStart is false.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? FinishDate {
            get {
                XElement x = this.GetElement(FinishDateXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetElement(FinishDateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The Fiscal Year starting month. Values are: 1=January, 2=February, 3=March, 4=April, 5=May, 6=June, 7=July, 8=August, 9=September, 10=October, 11=November, 12=December.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? FYStartDate {
            get {
                XElement x = this.GetElement(FYStartDateXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(FYStartDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(FYStartDateXName, value, "FYStartDate", FYStartDateLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The number of days past its end date that a task can go before Microsoft Project marks that task as a critical task.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? CriticalSlackLimit {
            get {
                XElement x = this.GetElement(CriticalSlackLimitXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(CriticalSlackLimitXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The number of digits after the decimal symbol.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? CurrencyDigits {
            get {
                XElement x = this.GetElement(CurrencyDigitsXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(CurrencyDigitsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The currency symbol used in the project.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual string CurrencySymbol {
            get {
                XElement x = this.GetElement(CurrencySymbolXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(CurrencySymbolXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(CurrencySymbolXName, value, "CurrencySymbol", CurrencySymbolLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The three letter currency character code as defined in ISO 4217. Valid values are: USD.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual string CurrencyCode {
            get {
                XElement x = this.GetElement(CurrencyCodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(CurrencyCodeXName, value, "CurrencyCode", CurrencyCodeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// The position of the currency symbol.  Values are: 0=Before, 1=After, 2=Before With Space, 3=After with space.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? CurrencySymbolPosition {
            get {
                XElement x = this.GetElement(CurrencySymbolPositionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(CurrencySymbolPositionXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(CurrencySymbolPositionXName, value, "CurrencySymbolPosition", CurrencySymbolPositionLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The project calendar.  Refers to a valid UID in the Calendars element of the Microsoft Project XML Schema.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? CalendarUID {
            get {
                XElement x = this.GetElement(CalendarUIDXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(CalendarUIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The default start time of new tasks.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? DefaultStartTime {
            get {
                XElement x = this.GetElement(DefaultStartTimeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
            }
            set {
                this.SetElement(DefaultStartTimeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The default finish time of new tasks.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? DefaultFinishTime {
            get {
                XElement x = this.GetElement(DefaultFinishTimeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
            }
            set {
                this.SetElement(DefaultFinishTimeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The number of minutes per day.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? MinutesPerDay {
            get {
                XElement x = this.GetElement(MinutesPerDayXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(MinutesPerDayXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The number of minutes per week.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? MinutesPerWeek {
            get {
                XElement x = this.GetElement(MinutesPerWeekXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(MinutesPerWeekXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The number of days per month.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? DaysPerMonth {
            get {
                XElement x = this.GetElement(DaysPerMonthXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(DaysPerMonthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The default type of new tasks. Values are: 0=Fixed Units, 1=Fixed Duration, 2=Fixed Work.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? DefaultTaskType {
            get {
                XElement x = this.GetElement(DefaultTaskTypeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(DefaultTaskTypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(DefaultTaskTypeXName, value, "DefaultTaskType", DefaultTaskTypeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The default from where fixed costs are accrued.  Values are: 1=Start, 2=Prorated, 3=End.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? DefaultFixedCostAccrual {
            get {
                XElement x = this.GetElement(DefaultFixedCostAccrualXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(DefaultFixedCostAccrualXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(DefaultFixedCostAccrualXName, value, "DefaultFixedCostAccrual", DefaultFixedCostAccrualLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The default standard rate for new resources.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.Single? DefaultStandardRate {
            get {
                XElement x = this.GetElement(DefaultStandardRateXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
            set {
                this.SetElement(DefaultStandardRateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The default overtime rate for new resources.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.Single? DefaultOvertimeRate {
            get {
                XElement x = this.GetElement(DefaultOvertimeRateXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
            set {
                this.SetElement(DefaultOvertimeRateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The format for expressing the bulk duration.  Values are: 3=m, 4=em, 5=h, 6=eh, 7=d, 8=ed, 9=w, 10=ew, 11=mo, 12=emo, 19=%, 20=e%, 21=null, 35=m?, 36=em?, 37=h?, 38=eh?, 39=d?, 40=ed?, 41=w?, 42=ew?, 43=mo?, 44=emo?, 51=%?, 52=e%? and 53=null.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? DurationFormat {
            get {
                XElement x = this.GetElement(DurationFormatXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(DurationFormatXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(DurationFormatXName, value, "DurationFormat", DurationFormatLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The default work unit format. Values are: 1=m, 2=h, 3=d, 4=w, 5=mo.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? WorkFormat {
            get {
                XElement x = this.GetElement(WorkFormatXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(WorkFormatXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(WorkFormatXName, value, "WorkFormat", WorkFormatLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Whether or not actual costs are editable.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? EditableActualCosts {
            get {
                XElement x = this.GetElement(EditableActualCostsXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(EditableActualCostsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Whether tasks honour their constraint dates.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? HonorConstraints {
            get {
                XElement x = this.GetElement(HonorConstraintsXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(HonorConstraintsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The default method for calculating earned value. Values are: 0=Percent Complete, 1=Physical Percent Complete.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? EarnedValueMethod {
            get {
                XElement x = this.GetElement(EarnedValueMethodXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(EarnedValueMethodXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(EarnedValueMethodXName, value, "EarnedValueMethod", EarnedValueMethodLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Whether to calculate subtasks as summary tasks.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? InsertedProjectsLikeSummary {
            get {
                XElement x = this.GetElement(InsertedProjectsLikeSummaryXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(InsertedProjectsLikeSummaryXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Whether multiple critical paths are calculated.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? MultipleCriticalPaths {
            get {
                XElement x = this.GetElement(MultipleCriticalPathsXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(MultipleCriticalPathsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Whether new tasks are effort driven.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? NewTasksEffortDriven {
            get {
                XElement x = this.GetElement(NewTasksEffortDrivenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(NewTasksEffortDrivenXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Whether to show the estimated duration by default.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? NewTasksEstimated {
            get {
                XElement x = this.GetElement(NewTasksEstimatedXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(NewTasksEstimatedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Whether in-progress tasks can be split.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? SplitsInProgressTasks {
            get {
                XElement x = this.GetElement(SplitsInProgressTasksXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(SplitsInProgressTasksXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Whether actual costs are spread to the status date.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? SpreadActualCost {
            get {
                XElement x = this.GetElement(SpreadActualCostXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(SpreadActualCostXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Whether percent complete is spread to the status date.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? SpreadPercentComplete {
            get {
                XElement x = this.GetElement(SpreadPercentCompleteXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(SpreadPercentCompleteXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Whether updates to tasks update resources.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? TaskUpdatesResource {
            get {
                XElement x = this.GetElement(TaskUpdatesResourceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(TaskUpdatesResourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Whether to use fiscal year numbering.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? FiscalYearStart {
            get {
                XElement x = this.GetElement(FiscalYearStartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(FiscalYearStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Start day of the week. Values are: 0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? WeekStartDay {
            get {
                XElement x = this.GetElement(WeekStartDayXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(WeekStartDayXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(WeekStartDayXName, value, "WeekStartDay", WeekStartDayLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///              Whether the end of completed portions of tasks scheduled to begin after the status date but begun early should be moved back to the status date.
        ///            
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? MoveCompletedEndsBack {
            get {
                XElement x = this.GetElement(MoveCompletedEndsBackXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(MoveCompletedEndsBackXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///              Whether the beginning of remaining portions of tasks scheduled to begin after the status date but begun early should be moved back to the status date.
        ///            
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? MoveRemainingStartsBack {
            get {
                XElement x = this.GetElement(MoveRemainingStartsBackXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(MoveRemainingStartsBackXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///              Whether the beginning of remaining portions of tasks scheduled to have begun late should be moved up to the status date.
        ///            
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? MoveRemainingStartsForward {
            get {
                XElement x = this.GetElement(MoveRemainingStartsForwardXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(MoveRemainingStartsForwardXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// 
        ///              Whether the end of completed portions of tasks scheduled to have been completed before the status date but begun late should be moved up to the status date.
        ///            
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? MoveCompletedEndsForward {
            get {
                XElement x = this.GetElement(MoveCompletedEndsForwardXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(MoveCompletedEndsForwardXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The specific baseline used to calculate Variance values.  Values are: 0=Baseline, 1=Baseline 1, 2=Baseline 2, 3=Baseline 3, 4=Baseline 4, 5=Baseline 5, 6=Baseline 6, 7=Baseline 7, 8=Baseline 8, 9=Baseline 9, 10=Baseline 10.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? BaselineForEarnedValue {
            get {
                XElement x = this.GetElement(BaselineForEarnedValueXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BaselineForEarnedValueXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(BaselineForEarnedValueXName, value, "BaselineForEarnedValue", BaselineForEarnedValueLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Whether to automatically add new resources to the resource pool.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? AutoAddNewResourcesAndTasks {
            get {
                XElement x = this.GetElement(AutoAddNewResourcesAndTasksXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(AutoAddNewResourcesAndTasksXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Date used for calculation and reporting.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? StatusDate {
            get {
                XElement x = this.GetElement(StatusDateXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetElement(StatusDateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The system date that the XML was generated.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? CurrentDate {
            get {
                XElement x = this.GetElement(CurrentDateXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetElement(CurrentDateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Whether the project was created by a Project Server user as opposed to an NT user.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? MicrosoftProjectServerURL {
            get {
                XElement x = this.GetElement(MicrosoftProjectServerURLXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(MicrosoftProjectServerURLXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Whether to autolink inserted or moved tasks.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? Autolink {
            get {
                XElement x = this.GetElement(AutolinkXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(AutolinkXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The default date for new tasks start.  Values are: 0=Project Start Date, 1=Current Date.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? NewTaskStartDate {
            get {
                XElement x = this.GetElement(NewTaskStartDateXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(NewTaskStartDateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(NewTaskStartDateXName, value, "NewTaskStartDate", NewTaskStartDateLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The default earned value method for tasks.  Values are: 0=Percent Complete, 1=Physical Percent Complete.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? DefaultTaskEVMethod {
            get {
                XElement x = this.GetElement(DefaultTaskEVMethodXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(DefaultTaskEVMethodXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(DefaultTaskEVMethodXName, value, "DefaultTaskEVMethod", DefaultTaskEVMethodLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Whether the project XML was edited.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? ProjectExternallyEdited {
            get {
                XElement x = this.GetElement(ProjectExternallyEditedXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(ProjectExternallyEditedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Date used for calculation and reporting.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? ExtendedCreationDate {
            get {
                XElement x = this.GetElement(ExtendedCreationDateXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetElement(ExtendedCreationDateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Whether all actual work has been synchronized with the project.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? ActualsInSync {
            get {
                XElement x = this.GetElement(ActualsInSyncXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(ActualsInSyncXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Whether to remove all file properties on save.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? RemoveFileProperties {
            get {
                XElement x = this.GetElement(RemoveFilePropertiesXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(RemoveFilePropertiesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Whether the project is an administrative project.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? AdminProject {
            get {
                XElement x = this.GetElement(AdminProjectXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(AdminProjectXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The collection of outline code definitions associated with the project.  These codes may be associated only with this project, or may be common among several projects (enterprise codes).
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual OutlineCodesLocalType OutlineCodes {
            get {
                XElement x = this.GetElement(OutlineCodesXName);
                return ((OutlineCodesLocalType)(x));
            }
            set {
                this.SetElement(OutlineCodesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The table of entries that define the outline code mask.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual WBSMasksLocalType WBSMasks {
            get {
                XElement x = this.GetElement(WBSMasksXName);
                return ((WBSMasksLocalType)(x));
            }
            set {
                this.SetElement(WBSMasksXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The collection of extended attribute (custom field) definitions associated with the project.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual ExtendedAttributesLocalType ExtendedAttributes {
            get {
                XElement x = this.GetElement(ExtendedAttributesXName);
                return ((ExtendedAttributesLocalType)(x));
            }
            set {
                this.SetElement(ExtendedAttributesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The collection of calendars that is associated with the project.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual CalendarsLocalType Calendars {
            get {
                XElement x = this.GetElement(CalendarsXName);
                return ((CalendarsLocalType)(x));
            }
            set {
                this.SetElement(CalendarsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The collection of tasks that make up the project.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual TasksLocalType Tasks {
            get {
                XElement x = this.GetElement(TasksXName);
                return ((TasksLocalType)(x));
            }
            set {
                this.SetElement(TasksXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The collection of resources that make up the project.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual ResourcesLocalType Resources {
            get {
                XElement x = this.GetElement(ResourcesXName);
                return ((ResourcesLocalType)(x));
            }
            set {
                this.SetElement(ResourcesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// The collection of assignments that make up the project.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaveVersion, UID?, Name?, Title?, Subject?, Category?, Company?, Manager?, Author?, CreationDate?, Revision?, LastSaved?, ScheduleFromStart?, StartDate?, FinishDate?, FYStartDate?, CriticalSlackLimit?, CurrencyDigits?, CurrencySymbol?, CurrencyCode, CurrencySymbolPosition?, CalendarUID?, DefaultStartTime?, DefaultFinishTime?, MinutesPerDay?, MinutesPerWeek?, DaysPerMonth?, DefaultTaskType?, DefaultFixedCostAccrual?, DefaultStandardRate?, DefaultOvertimeRate?, DurationFormat?, WorkFormat?, EditableActualCosts?, HonorConstraints?, EarnedValueMethod?, InsertedProjectsLikeSummary?, MultipleCriticalPaths?, NewTasksEffortDriven?, NewTasksEstimated?, SplitsInProgressTasks?, SpreadActualCost?, SpreadPercentComplete?, TaskUpdatesResource?, FiscalYearStart?, WeekStartDay?, MoveCompletedEndsBack?, MoveRemainingStartsBack?, MoveRemainingStartsForward?, MoveCompletedEndsForward?, BaselineForEarnedValue?, AutoAddNewResourcesAndTasks?, StatusDate?, CurrentDate?, MicrosoftProjectServerURL?, Autolink?, NewTaskStartDate?, DefaultTaskEVMethod?, ProjectExternallyEdited?, ExtendedCreationDate?, ActualsInSync?, RemoveFileProperties?, AdminProject?, OutlineCodes?, WBSMasks?, ExtendedAttributes?, Calendars?, Tasks?, Resources?, Assignments?)
        /// </para>
        /// </summary>
        public virtual AssignmentsLocalType Assignments {
            get {
                XElement x = this.GetElement(AssignmentsXName);
                return ((AssignmentsLocalType)(x));
            }
            set {
                this.SetElement(AssignmentsXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Project Load(string xmlFile) {
            return XTypedServices.Load<Project>(xmlFile);
        }
        
        public static Project Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Project>(xmlFile);
        }
        
        public static Project Parse(string xml) {
            return XTypedServices.Parse<Project>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Project>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SaveVersionXName, typeof(decimal));
            localElementDictionary.Add(UIDXName, typeof(string));
            localElementDictionary.Add(NameXName, typeof(string));
            localElementDictionary.Add(TitleXName, typeof(string));
            localElementDictionary.Add(SubjectXName, typeof(string));
            localElementDictionary.Add(CategoryXName, typeof(string));
            localElementDictionary.Add(CompanyXName, typeof(string));
            localElementDictionary.Add(ManagerXName, typeof(string));
            localElementDictionary.Add(AuthorXName, typeof(string));
            localElementDictionary.Add(CreationDateXName, typeof(System.DateTime));
            localElementDictionary.Add(RevisionXName, typeof(decimal));
            localElementDictionary.Add(LastSavedXName, typeof(System.DateTime));
            localElementDictionary.Add(ScheduleFromStartXName, typeof(bool));
            localElementDictionary.Add(StartDateXName, typeof(System.DateTime));
            localElementDictionary.Add(FinishDateXName, typeof(System.DateTime));
            localElementDictionary.Add(FYStartDateXName, typeof(decimal));
            localElementDictionary.Add(CriticalSlackLimitXName, typeof(decimal));
            localElementDictionary.Add(CurrencyDigitsXName, typeof(decimal));
            localElementDictionary.Add(CurrencySymbolXName, typeof(string));
            localElementDictionary.Add(CurrencyCodeXName, typeof(string));
            localElementDictionary.Add(CurrencySymbolPositionXName, typeof(decimal));
            localElementDictionary.Add(CalendarUIDXName, typeof(decimal));
            localElementDictionary.Add(DefaultStartTimeXName, typeof(System.DateTime));
            localElementDictionary.Add(DefaultFinishTimeXName, typeof(System.DateTime));
            localElementDictionary.Add(MinutesPerDayXName, typeof(decimal));
            localElementDictionary.Add(MinutesPerWeekXName, typeof(decimal));
            localElementDictionary.Add(DaysPerMonthXName, typeof(decimal));
            localElementDictionary.Add(DefaultTaskTypeXName, typeof(decimal));
            localElementDictionary.Add(DefaultFixedCostAccrualXName, typeof(decimal));
            localElementDictionary.Add(DefaultStandardRateXName, typeof(float));
            localElementDictionary.Add(DefaultOvertimeRateXName, typeof(float));
            localElementDictionary.Add(DurationFormatXName, typeof(decimal));
            localElementDictionary.Add(WorkFormatXName, typeof(decimal));
            localElementDictionary.Add(EditableActualCostsXName, typeof(bool));
            localElementDictionary.Add(HonorConstraintsXName, typeof(bool));
            localElementDictionary.Add(EarnedValueMethodXName, typeof(decimal));
            localElementDictionary.Add(InsertedProjectsLikeSummaryXName, typeof(bool));
            localElementDictionary.Add(MultipleCriticalPathsXName, typeof(bool));
            localElementDictionary.Add(NewTasksEffortDrivenXName, typeof(bool));
            localElementDictionary.Add(NewTasksEstimatedXName, typeof(bool));
            localElementDictionary.Add(SplitsInProgressTasksXName, typeof(bool));
            localElementDictionary.Add(SpreadActualCostXName, typeof(bool));
            localElementDictionary.Add(SpreadPercentCompleteXName, typeof(bool));
            localElementDictionary.Add(TaskUpdatesResourceXName, typeof(bool));
            localElementDictionary.Add(FiscalYearStartXName, typeof(bool));
            localElementDictionary.Add(WeekStartDayXName, typeof(decimal));
            localElementDictionary.Add(MoveCompletedEndsBackXName, typeof(bool));
            localElementDictionary.Add(MoveRemainingStartsBackXName, typeof(bool));
            localElementDictionary.Add(MoveRemainingStartsForwardXName, typeof(bool));
            localElementDictionary.Add(MoveCompletedEndsForwardXName, typeof(bool));
            localElementDictionary.Add(BaselineForEarnedValueXName, typeof(decimal));
            localElementDictionary.Add(AutoAddNewResourcesAndTasksXName, typeof(bool));
            localElementDictionary.Add(StatusDateXName, typeof(System.DateTime));
            localElementDictionary.Add(CurrentDateXName, typeof(System.DateTime));
            localElementDictionary.Add(MicrosoftProjectServerURLXName, typeof(bool));
            localElementDictionary.Add(AutolinkXName, typeof(bool));
            localElementDictionary.Add(NewTaskStartDateXName, typeof(decimal));
            localElementDictionary.Add(DefaultTaskEVMethodXName, typeof(decimal));
            localElementDictionary.Add(ProjectExternallyEditedXName, typeof(bool));
            localElementDictionary.Add(ExtendedCreationDateXName, typeof(System.DateTime));
            localElementDictionary.Add(ActualsInSyncXName, typeof(bool));
            localElementDictionary.Add(RemoveFilePropertiesXName, typeof(bool));
            localElementDictionary.Add(AdminProjectXName, typeof(bool));
            localElementDictionary.Add(OutlineCodesXName, typeof(OutlineCodesLocalType));
            localElementDictionary.Add(WBSMasksXName, typeof(WBSMasksLocalType));
            localElementDictionary.Add(ExtendedAttributesXName, typeof(ExtendedAttributesLocalType));
            localElementDictionary.Add(CalendarsXName, typeof(CalendarsLocalType));
            localElementDictionary.Add(TasksXName, typeof(TasksLocalType));
            localElementDictionary.Add(ResourcesXName, typeof(ResourcesLocalType));
            localElementDictionary.Add(AssignmentsXName, typeof(AssignmentsLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class UIDLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 16, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private UIDLocalType() {
            }
        }
        
        private class NameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 255, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private NameLocalType() {
            }
        }
        
        private class TitleLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 512, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private TitleLocalType() {
            }
        }
        
        private class SubjectLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 512, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private SubjectLocalType() {
            }
        }
        
        private class CategoryLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 512, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private CategoryLocalType() {
            }
        }
        
        private class CompanyLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 512, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private CompanyLocalType() {
            }
        }
        
        private class ManagerLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 512, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private ManagerLocalType() {
            }
        }
        
        private class AuthorLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 512, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private AuthorLocalType() {
            }
        }
        
        private class FYStartDateLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            1m,
                            2m,
                            3m,
                            4m,
                            5m,
                            6m,
                            7m,
                            8m,
                            9m,
                            10m,
                            11m,
                            12m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
            
            private FYStartDateLocalType() {
            }
        }
        
        private class CurrencySymbolLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 20, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private CurrencySymbolLocalType() {
            }
        }
        
        private class CurrencyCodeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 3, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private CurrencyCodeLocalType() {
            }
        }
        
        private class CurrencySymbolPositionLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            0m,
                            1m,
                            2m,
                            3m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
            
            private CurrencySymbolPositionLocalType() {
            }
        }
        
        private class DefaultTaskTypeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            0m,
                            1m,
                            2m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
            
            private DefaultTaskTypeLocalType() {
            }
        }
        
        private class DefaultFixedCostAccrualLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            1m,
                            2m,
                            3m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
            
            private DefaultFixedCostAccrualLocalType() {
            }
        }
        
        private class DurationFormatLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            3m,
                            4m,
                            5m,
                            6m,
                            7m,
                            8m,
                            9m,
                            10m,
                            11m,
                            12m,
                            19m,
                            20m,
                            21m,
                            35m,
                            36m,
                            37m,
                            38m,
                            39m,
                            40m,
                            41m,
                            42m,
                            43m,
                            44m,
                            51m,
                            52m,
                            53m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
            
            private DurationFormatLocalType() {
            }
        }
        
        private class WorkFormatLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            1m,
                            2m,
                            3m,
                            4m,
                            5m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
            
            private WorkFormatLocalType() {
            }
        }
        
        private class EarnedValueMethodLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            0m,
                            1m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
            
            private EarnedValueMethodLocalType() {
            }
        }
        
        private class WeekStartDayLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            0m,
                            1m,
                            2m,
                            3m,
                            4m,
                            5m,
                            6m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
            
            private WeekStartDayLocalType() {
            }
        }
        
        private class BaselineForEarnedValueLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            0m,
                            1m,
                            2m,
                            3m,
                            4m,
                            5m,
                            6m,
                            7m,
                            8m,
                            9m,
                            10m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
            
            private BaselineForEarnedValueLocalType() {
            }
        }
        
        private class NewTaskStartDateLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            0m,
                            1m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
            
            private NewTaskStartDateLocalType() {
            }
        }
        
        private class DefaultTaskEVMethodLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            0m,
                            1m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
            
            private DefaultTaskEVMethodLocalType() {
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (OutlineCode*)
        /// </para>
        /// </summary>
        public partial class OutlineCodesLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OutlineCodeXName = System.Xml.Linq.XName.Get("OutlineCode", "http://schemas.microsoft.com/project/2007");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<OutlineCodeLocalType> OutlineCodeField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OutlineCodes", "http://schemas.microsoft.com/project/2007");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator OutlineCodesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<OutlineCodesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static OutlineCodesLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(OutlineCodeXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (OutlineCode*)
            /// </para>
            /// </summary>
            public OutlineCodesLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// The specific outline code definition.
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (OutlineCode*)
            /// </para>
            /// </summary>
            public virtual IList<Microsoft.Schemas.Project2007.Project.OutlineCodesLocalType.OutlineCodeLocalType> OutlineCode {
                get {
                    if ((this.OutlineCodeField == null)) {
                        this.OutlineCodeField = new XTypedList<OutlineCodeLocalType>(this, LinqToXsdTypeManager.Instance, OutlineCodeXName);
                    }
                    return this.OutlineCodeField;
                }
                set {
                    if ((value == null)) {
                        this.OutlineCodeField = null;
                    }
                    else {
                        if ((this.OutlineCodeField == null)) {
                            this.OutlineCodeField = XTypedList<OutlineCodeLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, OutlineCodeXName);
                        }
                        else {
                            XTypedServices.SetList<OutlineCodeLocalType>(this.OutlineCodeField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<OutlineCodesLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(OutlineCodeXName, typeof(OutlineCodeLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Guid, FieldID?, FieldName?, Alias?, PhoneticAlias?, Values?, Enterprise?, EnterpriseOutlineCodeAlias?, ResourceSubstitutionEnabled?, LeafOnly?, AllLevelsRequired?, OnlyTableValuesAllowed?, Masks?)
            /// </para>
            /// </summary>
            public partial class OutlineCodeLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName GuidXName = System.Xml.Linq.XName.Get("Guid", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName FieldIDXName = System.Xml.Linq.XName.Get("FieldID", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName FieldNameXName = System.Xml.Linq.XName.Get("FieldName", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName AliasXName = System.Xml.Linq.XName.Get("Alias", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName PhoneticAliasXName = System.Xml.Linq.XName.Get("PhoneticAlias", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ValuesXName = System.Xml.Linq.XName.Get("Values", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName EnterpriseXName = System.Xml.Linq.XName.Get("Enterprise", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName EnterpriseOutlineCodeAliasXName = System.Xml.Linq.XName.Get("EnterpriseOutlineCodeAlias", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ResourceSubstitutionEnabledXName = System.Xml.Linq.XName.Get("ResourceSubstitutionEnabled", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName LeafOnlyXName = System.Xml.Linq.XName.Get("LeafOnly", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName AllLevelsRequiredXName = System.Xml.Linq.XName.Get("AllLevelsRequired", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName OnlyTableValuesAllowedXName = System.Xml.Linq.XName.Get("OnlyTableValuesAllowed", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName MasksXName = System.Xml.Linq.XName.Get("Masks", "http://schemas.microsoft.com/project/2007");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OutlineCode", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator OutlineCodeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<OutlineCodeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static OutlineCodeLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(GuidXName), new NamedContentModelEntity(FieldIDXName), new NamedContentModelEntity(FieldNameXName), new NamedContentModelEntity(AliasXName), new NamedContentModelEntity(PhoneticAliasXName), new NamedContentModelEntity(ValuesXName), new NamedContentModelEntity(EnterpriseXName), new NamedContentModelEntity(EnterpriseOutlineCodeAliasXName), new NamedContentModelEntity(ResourceSubstitutionEnabledXName), new NamedContentModelEntity(LeafOnlyXName), new NamedContentModelEntity(AllLevelsRequiredXName), new NamedContentModelEntity(OnlyTableValuesAllowedXName), new NamedContentModelEntity(MasksXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (Guid, FieldID?, FieldName?, Alias?, PhoneticAlias?, Values?, Enterprise?, EnterpriseOutlineCodeAlias?, ResourceSubstitutionEnabled?, LeafOnly?, AllLevelsRequired?, OnlyTableValuesAllowed?, Masks?)
                /// </para>
                /// </summary>
                public OutlineCodeLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// The GUID of the outline code.
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (Guid, FieldID?, FieldName?, Alias?, PhoneticAlias?, Values?, Enterprise?, EnterpriseOutlineCodeAlias?, ResourceSubstitutionEnabled?, LeafOnly?, AllLevelsRequired?, OnlyTableValuesAllowed?, Masks?)
                /// </para>
                /// </summary>
                public virtual string Guid {
                    get {
                        XElement x = this.GetElement(GuidXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(GuidXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Corresponds to the field number of the outline code.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (Guid, FieldID?, FieldName?, Alias?, PhoneticAlias?, Values?, Enterprise?, EnterpriseOutlineCodeAlias?, ResourceSubstitutionEnabled?, LeafOnly?, AllLevelsRequired?, OnlyTableValuesAllowed?, Masks?)
                /// </para>
                /// </summary>
                public virtual string FieldID {
                    get {
                        XElement x = this.GetElement(FieldIDXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(FieldIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The name of the custom outline code.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (Guid, FieldID?, FieldName?, Alias?, PhoneticAlias?, Values?, Enterprise?, EnterpriseOutlineCodeAlias?, ResourceSubstitutionEnabled?, LeafOnly?, AllLevelsRequired?, OnlyTableValuesAllowed?, Masks?)
                /// </para>
                /// </summary>
                public virtual string FieldName {
                    get {
                        XElement x = this.GetElement(FieldNameXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(FieldNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The alias of the custom outline code.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (Guid, FieldID?, FieldName?, Alias?, PhoneticAlias?, Values?, Enterprise?, EnterpriseOutlineCodeAlias?, ResourceSubstitutionEnabled?, LeafOnly?, AllLevelsRequired?, OnlyTableValuesAllowed?, Masks?)
                /// </para>
                /// </summary>
                public virtual string Alias {
                    get {
                        XElement x = this.GetElement(AliasXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(AliasXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The phonetic pronunciation of the alias of the custom outline code.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (Guid, FieldID?, FieldName?, Alias?, PhoneticAlias?, Values?, Enterprise?, EnterpriseOutlineCodeAlias?, ResourceSubstitutionEnabled?, LeafOnly?, AllLevelsRequired?, OnlyTableValuesAllowed?, Masks?)
                /// </para>
                /// </summary>
                public virtual string PhoneticAlias {
                    get {
                        XElement x = this.GetElement(PhoneticAliasXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(PhoneticAliasXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The values of the table associated with this outline code.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (Guid, FieldID?, FieldName?, Alias?, PhoneticAlias?, Values?, Enterprise?, EnterpriseOutlineCodeAlias?, ResourceSubstitutionEnabled?, LeafOnly?, AllLevelsRequired?, OnlyTableValuesAllowed?, Masks?)
                /// </para>
                /// </summary>
                public virtual ValuesLocalType Values {
                    get {
                        XElement x = this.GetElement(ValuesXName);
                        return ((ValuesLocalType)(x));
                    }
                    set {
                        this.SetElement(ValuesXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether the custom outline code is an enterprise custom outline code.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (Guid, FieldID?, FieldName?, Alias?, PhoneticAlias?, Values?, Enterprise?, EnterpriseOutlineCodeAlias?, ResourceSubstitutionEnabled?, LeafOnly?, AllLevelsRequired?, OnlyTableValuesAllowed?, Masks?)
                /// </para>
                /// </summary>
                public virtual System.Boolean? Enterprise {
                    get {
                        XElement x = this.GetElement(EnterpriseXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(EnterpriseXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// A reference to another custom field for which this is an alias.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (Guid, FieldID?, FieldName?, Alias?, PhoneticAlias?, Values?, Enterprise?, EnterpriseOutlineCodeAlias?, ResourceSubstitutionEnabled?, LeafOnly?, AllLevelsRequired?, OnlyTableValuesAllowed?, Masks?)
                /// </para>
                /// </summary>
                public virtual System.Decimal? EnterpriseOutlineCodeAlias {
                    get {
                        XElement x = this.GetElement(EnterpriseOutlineCodeAliasXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        this.SetElement(EnterpriseOutlineCodeAliasXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether the custom outline code can be used by the Resource Substitution Wizard in Microsoft Project.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (Guid, FieldID?, FieldName?, Alias?, PhoneticAlias?, Values?, Enterprise?, EnterpriseOutlineCodeAlias?, ResourceSubstitutionEnabled?, LeafOnly?, AllLevelsRequired?, OnlyTableValuesAllowed?, Masks?)
                /// </para>
                /// </summary>
                public virtual System.Boolean? ResourceSubstitutionEnabled {
                    get {
                        XElement x = this.GetElement(ResourceSubstitutionEnabledXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(ResourceSubstitutionEnabledXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether or not values specified in this outline code field must be leaf values.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (Guid, FieldID?, FieldName?, Alias?, PhoneticAlias?, Values?, Enterprise?, EnterpriseOutlineCodeAlias?, ResourceSubstitutionEnabled?, LeafOnly?, AllLevelsRequired?, OnlyTableValuesAllowed?, Masks?)
                /// </para>
                /// </summary>
                public virtual System.Boolean? LeafOnly {
                    get {
                        XElement x = this.GetElement(LeafOnlyXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(LeafOnlyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether new codes must have all levels present.  Not available for Enterprise Codes.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (Guid, FieldID?, FieldName?, Alias?, PhoneticAlias?, Values?, Enterprise?, EnterpriseOutlineCodeAlias?, ResourceSubstitutionEnabled?, LeafOnly?, AllLevelsRequired?, OnlyTableValuesAllowed?, Masks?)
                /// </para>
                /// </summary>
                public virtual System.Boolean? AllLevelsRequired {
                    get {
                        XElement x = this.GetElement(AllLevelsRequiredXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(AllLevelsRequiredXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether values specified must come from values table.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (Guid, FieldID?, FieldName?, Alias?, PhoneticAlias?, Values?, Enterprise?, EnterpriseOutlineCodeAlias?, ResourceSubstitutionEnabled?, LeafOnly?, AllLevelsRequired?, OnlyTableValuesAllowed?, Masks?)
                /// </para>
                /// </summary>
                public virtual System.Boolean? OnlyTableValuesAllowed {
                    get {
                        XElement x = this.GetElement(OnlyTableValuesAllowedXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(OnlyTableValuesAllowedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The table of entries that define the outline code mask.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (Guid, FieldID?, FieldName?, Alias?, PhoneticAlias?, Values?, Enterprise?, EnterpriseOutlineCodeAlias?, ResourceSubstitutionEnabled?, LeafOnly?, AllLevelsRequired?, OnlyTableValuesAllowed?, Masks?)
                /// </para>
                /// </summary>
                public virtual MasksLocalType Masks {
                    get {
                        XElement x = this.GetElement(MasksXName);
                        return ((MasksLocalType)(x));
                    }
                    set {
                        this.SetElement(MasksXName, value);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<OutlineCodeLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(GuidXName, typeof(string));
                    localElementDictionary.Add(FieldIDXName, typeof(string));
                    localElementDictionary.Add(FieldNameXName, typeof(string));
                    localElementDictionary.Add(AliasXName, typeof(string));
                    localElementDictionary.Add(PhoneticAliasXName, typeof(string));
                    localElementDictionary.Add(ValuesXName, typeof(ValuesLocalType));
                    localElementDictionary.Add(EnterpriseXName, typeof(bool));
                    localElementDictionary.Add(EnterpriseOutlineCodeAliasXName, typeof(decimal));
                    localElementDictionary.Add(ResourceSubstitutionEnabledXName, typeof(bool));
                    localElementDictionary.Add(LeafOnlyXName, typeof(bool));
                    localElementDictionary.Add(AllLevelsRequiredXName, typeof(bool));
                    localElementDictionary.Add(OnlyTableValuesAllowedXName, typeof(bool));
                    localElementDictionary.Add(MasksXName, typeof(MasksLocalType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (Value)*
                /// </para>
                /// </summary>
                public partial class ValuesLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName ValueXName = System.Xml.Linq.XName.Get("Value", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<ValueLocalType> ValueField;
                    
                    private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Values", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
		public static explicit operator ValuesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ValuesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static ValuesLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ValueXName));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (Value)*
                    /// </para>
                    /// </summary>
                    public ValuesLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The individual values.
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (Value)*
                    /// </para>
                    /// </summary>
                    public virtual IList<Microsoft.Schemas.Project2007.Project.OutlineCodesLocalType.OutlineCodeLocalType.ValuesLocalType.ValueLocalType> Value {
                        get {
                            if ((this.ValueField == null)) {
                                this.ValueField = new XTypedList<ValueLocalType>(this, LinqToXsdTypeManager.Instance, ValueXName);
                            }
                            return this.ValueField;
                        }
                        set {
                            if ((value == null)) {
                                this.ValueField = null;
                            }
                            else {
                                if ((this.ValueField == null)) {
                                    this.ValueField = XTypedList<ValueLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ValueXName);
                                }
                                else {
                                    XTypedServices.SetList<ValueLocalType>(this.ValueField, value);
                                }
                            }
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    System.Xml.Linq.XName IXMetaData.SchemaName {
                        get {
                            return xName;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<ValuesLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(ValueXName, typeof(ValueLocalType));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (ValueID?, FieldGUID, Type, ParentValueID?, Value?, Description?)
                    /// </para>
                    /// </summary>
                    public partial class ValueLocalType : XTypedElement, IXMetaData {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName ValueIDXName = System.Xml.Linq.XName.Get("ValueID", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName FieldGUIDXName = System.Xml.Linq.XName.Get("FieldGUID", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName TypeXName = System.Xml.Linq.XName.Get("Type", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName ParentValueIDXName = System.Xml.Linq.XName.Get("ParentValueID", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName ValueXName = System.Xml.Linq.XName.Get("Value", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName DescriptionXName = System.Xml.Linq.XName.Get("Description", "http://schemas.microsoft.com/project/2007");
                        
                        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Value", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                        
		public static explicit operator ValueLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ValueLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                        
                        static ValueLocalType() {
                            BuildElementDictionary();
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (ValueID?, FieldGUID, Type, ParentValueID?, Value?, Description?)
                        /// </para>
                        /// </summary>
                        public ValueLocalType() {
                        }
                        
                        /// <summary>
                        /// <para>
                        /// The unique ID of the outline code value within the project.
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (ValueID?, FieldGUID, Type, ParentValueID?, Value?, Description?)
                        /// </para>
                        /// </summary>
                        public virtual System.Decimal? ValueID {
                            get {
                                XElement x = this.GetElement(ValueIDXName);
                                if ((x == null)) {
                                    return null;
                                }
                                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                            }
                            set {
                                this.SetElement(ValueIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// The GUID of the outline code value.
                        /// </para>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (ValueID?, FieldGUID, Type, ParentValueID?, Value?, Description?)
                        /// </para>
                        /// </summary>
                        public virtual string FieldGUID {
                            get {
                                XElement x = this.GetElement(FieldGUIDXName);
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElement(FieldGUIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// The outline code type. Values are: 4=Date, 6=Duration, 9=Cost, 15=Number, 17=Flag, 21=Text, 27=Finish date.
                        /// </para>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (ValueID?, FieldGUID, Type, ParentValueID?, Value?, Description?)
                        /// </para>
                        /// </summary>
                        public virtual decimal Type {
                            get {
                                XElement x = this.GetElement(TypeXName);
                                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                            }
                            set {
                                this.SetElementWithValidation(TypeXName, value, "Type", TypeLocalType.TypeDefinition);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// The value of the parent node of the outline code.
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (ValueID?, FieldGUID, Type, ParentValueID?, Value?, Description?)
                        /// </para>
                        /// </summary>
                        public virtual System.Decimal? ParentValueID {
                            get {
                                XElement x = this.GetElement(ParentValueIDXName);
                                if ((x == null)) {
                                    return null;
                                }
                                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                            }
                            set {
                                this.SetElement(ParentValueIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// The actual value.
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (ValueID?, FieldGUID, Type, ParentValueID?, Value?, Description?)
                        /// </para>
                        /// </summary>
                        public virtual string Value {
                            get {
                                XElement x = this.GetElement(ValueXName);
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElement(ValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// A description of this value.
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (ValueID?, FieldGUID, Type, ParentValueID?, Value?, Description?)
                        /// </para>
                        /// </summary>
                        public virtual string Description {
                            get {
                                XElement x = this.GetElement(DescriptionXName);
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElement(DescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                            get {
                                return localElementDictionary;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        System.Xml.Linq.XName IXMetaData.SchemaName {
                            get {
                                return xName;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin {
                            get {
                                return SchemaOrigin.Fragment;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager {
                            get {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }
                        
                        public override XTypedElement Clone() {
                            return XTypedServices.CloneXTypedElement<ValueLocalType>(this);
                        }
                        
                        private static void BuildElementDictionary() {
                            localElementDictionary.Add(ValueIDXName, typeof(decimal));
                            localElementDictionary.Add(FieldGUIDXName, typeof(string));
                            localElementDictionary.Add(TypeXName, typeof(decimal));
                            localElementDictionary.Add(ParentValueIDXName, typeof(decimal));
                            localElementDictionary.Add(ValueXName, typeof(string));
                            localElementDictionary.Add(DescriptionXName, typeof(string));
                        }
                        
                        ContentModelEntity IXMetaData.GetContentModel() {
                            return ContentModelEntity.Default;
                        }
                        
                        private class TypeLocalType {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                            4m,
                                            6m,
                                            9m,
                                            15m,
                                            17m,
                                            21m,
                                            27m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
                            
                            private TypeLocalType() {
                            }
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (Mask*)
                /// </para>
                /// </summary>
                public partial class MasksLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName MaskXName = System.Xml.Linq.XName.Get("Mask", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<MaskLocalType> MaskField;
                    
                    private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Masks", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
		public static explicit operator MasksLocalType(XElement xe) { return XTypedServices.ToXTypedElement<MasksLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static MasksLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(MaskXName));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (Mask*)
                    /// </para>
                    /// </summary>
                    public MasksLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The four elements of the mask constitute the format in which the outline code must appear.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (Mask*)
                    /// </para>
                    /// </summary>
                    public virtual IList<Microsoft.Schemas.Project2007.Project.OutlineCodesLocalType.OutlineCodeLocalType.MasksLocalType.MaskLocalType> Mask {
                        get {
                            if ((this.MaskField == null)) {
                                this.MaskField = new XTypedList<MaskLocalType>(this, LinqToXsdTypeManager.Instance, MaskXName);
                            }
                            return this.MaskField;
                        }
                        set {
                            if ((value == null)) {
                                this.MaskField = null;
                            }
                            else {
                                if ((this.MaskField == null)) {
                                    this.MaskField = XTypedList<MaskLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, MaskXName);
                                }
                                else {
                                    XTypedServices.SetList<MaskLocalType>(this.MaskField, value);
                                }
                            }
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    System.Xml.Linq.XName IXMetaData.SchemaName {
                        get {
                            return xName;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<MasksLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(MaskXName, typeof(MaskLocalType));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (Level?, Type?, Length?, Separator?)
                    /// </para>
                    /// </summary>
                    public partial class MaskLocalType : XTypedElement, IXMetaData {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName LevelXName = System.Xml.Linq.XName.Get("Level", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName TypeXName = System.Xml.Linq.XName.Get("Type", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName LengthXName = System.Xml.Linq.XName.Get("Length", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName SeparatorXName = System.Xml.Linq.XName.Get("Separator", "http://schemas.microsoft.com/project/2007");
                        
                        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Mask", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;
                        
		public static explicit operator MaskLocalType(XElement xe) { return XTypedServices.ToXTypedElement<MaskLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                        
                        static MaskLocalType() {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(LevelXName), new NamedContentModelEntity(TypeXName), new NamedContentModelEntity(LengthXName), new NamedContentModelEntity(SeparatorXName));
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (Level?, Type?, Length?, Separator?)
                        /// </para>
                        /// </summary>
                        public MaskLocalType() {
                        }
                        
                        /// <summary>
                        /// <para>
                        /// The level of the mask.
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (Level?, Type?, Length?, Separator?)
                        /// </para>
                        /// </summary>
                        public virtual System.Decimal? Level {
                            get {
                                XElement x = this.GetElement(LevelXName);
                                if ((x == null)) {
                                    return null;
                                }
                                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                            }
                            set {
                                this.SetElement(LevelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// The type of mask. Values are: 0=Numbers, 1=Upper Case Letters, 2=Lower Case Letters, 3=Characters.
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (Level?, Type?, Length?, Separator?)
                        /// </para>
                        /// </summary>
                        public virtual System.Decimal? Type {
                            get {
                                XElement x = this.GetElement(TypeXName);
                                if ((x == null)) {
                                    return null;
                                }
                                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                            }
                            set {
                                if (value == null) {
                                    this.SetElement(TypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                                }
                                else {
                                    this.SetElementWithValidation(TypeXName, value, "Type", TypeLocalType.TypeDefinition);
                                }
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// The maximum length in characters of the outline code values.  If length is any, the value is zero.
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (Level?, Type?, Length?, Separator?)
                        /// </para>
                        /// </summary>
                        public virtual System.Decimal? Length {
                            get {
                                XElement x = this.GetElement(LengthXName);
                                if ((x == null)) {
                                    return null;
                                }
                                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                            }
                            set {
                                this.SetElement(LengthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// The separator value of the code values.
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (Level?, Type?, Length?, Separator?)
                        /// </para>
                        /// </summary>
                        public virtual string Separator {
                            get {
                                XElement x = this.GetElement(SeparatorXName);
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElement(SeparatorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                            get {
                                return localElementDictionary;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        System.Xml.Linq.XName IXMetaData.SchemaName {
                            get {
                                return xName;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin {
                            get {
                                return SchemaOrigin.Fragment;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager {
                            get {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }
                        
                        public override XTypedElement Clone() {
                            return XTypedServices.CloneXTypedElement<MaskLocalType>(this);
                        }
                        
                        private static void BuildElementDictionary() {
                            localElementDictionary.Add(LevelXName, typeof(decimal));
                            localElementDictionary.Add(TypeXName, typeof(decimal));
                            localElementDictionary.Add(LengthXName, typeof(decimal));
                            localElementDictionary.Add(SeparatorXName, typeof(string));
                        }
                        
                        ContentModelEntity IXMetaData.GetContentModel() {
                            return contentModel;
                        }
                        
                        private class TypeLocalType {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                            0m,
                                            1m,
                                            2m,
                                            3m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
                            
                            private TypeLocalType() {
                            }
                        }
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (VerifyUniqueCodes?, GenerateCodes?, Prefix?, WBSMask*)
        /// </para>
        /// </summary>
        public partial class WBSMasksLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName VerifyUniqueCodesXName = System.Xml.Linq.XName.Get("VerifyUniqueCodes", "http://schemas.microsoft.com/project/2007");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName GenerateCodesXName = System.Xml.Linq.XName.Get("GenerateCodes", "http://schemas.microsoft.com/project/2007");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PrefixXName = System.Xml.Linq.XName.Get("Prefix", "http://schemas.microsoft.com/project/2007");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName WBSMaskXName = System.Xml.Linq.XName.Get("WBSMask", "http://schemas.microsoft.com/project/2007");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<WBSMaskLocalType> WBSMaskField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("WBSMasks", "http://schemas.microsoft.com/project/2007");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator WBSMasksLocalType(XElement xe) { return XTypedServices.ToXTypedElement<WBSMasksLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static WBSMasksLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(VerifyUniqueCodesXName), new NamedContentModelEntity(GenerateCodesXName), new NamedContentModelEntity(PrefixXName), new NamedContentModelEntity(WBSMaskXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (VerifyUniqueCodes?, GenerateCodes?, Prefix?, WBSMask*)
            /// </para>
            /// </summary>
            public WBSMasksLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Whether WBS codes are unique for new tasks.
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (VerifyUniqueCodes?, GenerateCodes?, Prefix?, WBSMask*)
            /// </para>
            /// </summary>
            public virtual System.Boolean? VerifyUniqueCodes {
                get {
                    XElement x = this.GetElement(VerifyUniqueCodesXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                }
                set {
                    this.SetElement(VerifyUniqueCodesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// Whether WBS codes are generated for new tasks.
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (VerifyUniqueCodes?, GenerateCodes?, Prefix?, WBSMask*)
            /// </para>
            /// </summary>
            public virtual System.Boolean? GenerateCodes {
                get {
                    XElement x = this.GetElement(GenerateCodesXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                }
                set {
                    this.SetElement(GenerateCodesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                }
            }
            
            /// <summary>
            /// <para>
            /// The prefix for all WBS codes.
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (VerifyUniqueCodes?, GenerateCodes?, Prefix?, WBSMask*)
            /// </para>
            /// </summary>
            public virtual string Prefix {
                get {
                    XElement x = this.GetElement(PrefixXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(PrefixXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(PrefixXName, value, "Prefix", PrefixLocalType.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// The WBS Mask that is applied to all tasks in the Project.
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (VerifyUniqueCodes?, GenerateCodes?, Prefix?, WBSMask*)
            /// </para>
            /// </summary>
            public virtual IList<Microsoft.Schemas.Project2007.Project.WBSMasksLocalType.WBSMaskLocalType> WBSMask {
                get {
                    if ((this.WBSMaskField == null)) {
                        this.WBSMaskField = new XTypedList<WBSMaskLocalType>(this, LinqToXsdTypeManager.Instance, WBSMaskXName);
                    }
                    return this.WBSMaskField;
                }
                set {
                    if ((value == null)) {
                        this.WBSMaskField = null;
                    }
                    else {
                        if ((this.WBSMaskField == null)) {
                            this.WBSMaskField = XTypedList<WBSMaskLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, WBSMaskXName);
                        }
                        else {
                            XTypedServices.SetList<WBSMaskLocalType>(this.WBSMaskField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<WBSMasksLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(VerifyUniqueCodesXName, typeof(bool));
                localElementDictionary.Add(GenerateCodesXName, typeof(bool));
                localElementDictionary.Add(PrefixXName, typeof(string));
                localElementDictionary.Add(WBSMaskXName, typeof(WBSMaskLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class PrefixLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 50, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private PrefixLocalType() {
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Level, Type, Length, Separator)
            /// </para>
            /// </summary>
            public partial class WBSMaskLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName LevelXName = System.Xml.Linq.XName.Get("Level", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName TypeXName = System.Xml.Linq.XName.Get("Type", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName LengthXName = System.Xml.Linq.XName.Get("Length", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName SeparatorXName = System.Xml.Linq.XName.Get("Separator", "http://schemas.microsoft.com/project/2007");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("WBSMask", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator WBSMaskLocalType(XElement xe) { return XTypedServices.ToXTypedElement<WBSMaskLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static WBSMaskLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(LevelXName), new NamedContentModelEntity(TypeXName), new NamedContentModelEntity(LengthXName), new NamedContentModelEntity(SeparatorXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (Level, Type, Length, Separator)
                /// </para>
                /// </summary>
                public WBSMaskLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// The level of the mask.
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (Level, Type, Length, Separator)
                /// </para>
                /// </summary>
                public virtual decimal Level {
                    get {
                        XElement x = this.GetElement(LevelXName);
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        this.SetElement(LevelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The type of the node value.  The values are: 0=Numbers, 1=Uppercase Letters, 2=Lowercase Letters, 3=Characters.
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (Level, Type, Length, Separator)
                /// </para>
                /// </summary>
                public virtual decimal Type {
                    get {
                        XElement x = this.GetElement(TypeXName);
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(TypeXName, value, "Type", TypeLocalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The maximum length in characters.  This element is omitted when length is "any".
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (Level, Type, Length, Separator)
                /// </para>
                /// </summary>
                public virtual string Length {
                    get {
                        XElement x = this.GetElement(LengthXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(LengthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The separator character of the node.
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (Level, Type, Length, Separator)
                /// </para>
                /// </summary>
                public virtual string Separator {
                    get {
                        XElement x = this.GetElement(SeparatorXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(SeparatorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<WBSMaskLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(LevelXName, typeof(decimal));
                    localElementDictionary.Add(TypeXName, typeof(decimal));
                    localElementDictionary.Add(LengthXName, typeof(string));
                    localElementDictionary.Add(SeparatorXName, typeof(string));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                private class TypeLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    0m,
                                    1m,
                                    2m,
                                    3m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
                    
                    private TypeLocalType() {
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ExtendedAttribute*)
        /// </para>
        /// </summary>
        public partial class ExtendedAttributesLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ExtendedAttributeXName = System.Xml.Linq.XName.Get("ExtendedAttribute", "http://schemas.microsoft.com/project/2007");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<ExtendedAttributeLocalType> ExtendedAttributeField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ExtendedAttributes", "http://schemas.microsoft.com/project/2007");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator ExtendedAttributesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ExtendedAttributesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static ExtendedAttributesLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ExtendedAttributeXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (ExtendedAttribute*)
            /// </para>
            /// </summary>
            public ExtendedAttributesLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Each of the individual entries in the extended attributes definition collection.  There are no limits to the number of children that may appear, but Project only understands Flag1-Flag10, etc.  There must be at least one ExtendedAttribute in each ExtendedAttributes collection.
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (ExtendedAttribute*)
            /// </para>
            /// </summary>
            public virtual IList<Microsoft.Schemas.Project2007.Project.ExtendedAttributesLocalType.ExtendedAttributeLocalType> ExtendedAttribute {
                get {
                    if ((this.ExtendedAttributeField == null)) {
                        this.ExtendedAttributeField = new XTypedList<ExtendedAttributeLocalType>(this, LinqToXsdTypeManager.Instance, ExtendedAttributeXName);
                    }
                    return this.ExtendedAttributeField;
                }
                set {
                    if ((value == null)) {
                        this.ExtendedAttributeField = null;
                    }
                    else {
                        if ((this.ExtendedAttributeField == null)) {
                            this.ExtendedAttributeField = XTypedList<ExtendedAttributeLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ExtendedAttributeXName);
                        }
                        else {
                            XTypedServices.SetList<ExtendedAttributeLocalType>(this.ExtendedAttributeField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ExtendedAttributesLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(ExtendedAttributeXName, typeof(ExtendedAttributeLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (FieldID?, FieldName?, CFType?, Guid?, ElemType?, MaxMultiValues?, UserDef?, Alias?, SecondaryPID?, AutoRollDown?, DefaultGuid?, Ltuid?, PhoneticAlias?, RollupType?, CalculationType?, Formula?, RestrictValues?, ValuelistSortOrder?, AppendNewValues?, Default?, ValueList?)
            /// </para>
            /// </summary>
            public partial class ExtendedAttributeLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName FieldIDXName = System.Xml.Linq.XName.Get("FieldID", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName FieldNameXName = System.Xml.Linq.XName.Get("FieldName", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName CFTypeXName = System.Xml.Linq.XName.Get("CFType", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName GuidXName = System.Xml.Linq.XName.Get("Guid", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ElemTypeXName = System.Xml.Linq.XName.Get("ElemType", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName MaxMultiValuesXName = System.Xml.Linq.XName.Get("MaxMultiValues", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName UserDefXName = System.Xml.Linq.XName.Get("UserDef", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName AliasXName = System.Xml.Linq.XName.Get("Alias", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName SecondaryPIDXName = System.Xml.Linq.XName.Get("SecondaryPID", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName AutoRollDownXName = System.Xml.Linq.XName.Get("AutoRollDown", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName DefaultGuidXName = System.Xml.Linq.XName.Get("DefaultGuid", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName LtuidXName = System.Xml.Linq.XName.Get("Ltuid", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName PhoneticAliasXName = System.Xml.Linq.XName.Get("PhoneticAlias", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName RollupTypeXName = System.Xml.Linq.XName.Get("RollupType", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName CalculationTypeXName = System.Xml.Linq.XName.Get("CalculationType", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName FormulaXName = System.Xml.Linq.XName.Get("Formula", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName RestrictValuesXName = System.Xml.Linq.XName.Get("RestrictValues", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ValuelistSortOrderXName = System.Xml.Linq.XName.Get("ValuelistSortOrder", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName AppendNewValuesXName = System.Xml.Linq.XName.Get("AppendNewValues", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName DefaultXName = System.Xml.Linq.XName.Get("Default", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ValueListXName = System.Xml.Linq.XName.Get("ValueList", "http://schemas.microsoft.com/project/2007");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ExtendedAttribute", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator ExtendedAttributeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ExtendedAttributeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static ExtendedAttributeLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FieldIDXName), new NamedContentModelEntity(FieldNameXName), new NamedContentModelEntity(CFTypeXName), new NamedContentModelEntity(GuidXName), new NamedContentModelEntity(ElemTypeXName), new NamedContentModelEntity(MaxMultiValuesXName), new NamedContentModelEntity(UserDefXName), new NamedContentModelEntity(AliasXName), new NamedContentModelEntity(SecondaryPIDXName), new NamedContentModelEntity(AutoRollDownXName), new NamedContentModelEntity(DefaultGuidXName), new NamedContentModelEntity(LtuidXName), new NamedContentModelEntity(PhoneticAliasXName), new NamedContentModelEntity(RollupTypeXName), new NamedContentModelEntity(CalculationTypeXName), new NamedContentModelEntity(FormulaXName), new NamedContentModelEntity(RestrictValuesXName), new NamedContentModelEntity(ValuelistSortOrderXName), new NamedContentModelEntity(AppendNewValuesXName), new NamedContentModelEntity(DefaultXName), new NamedContentModelEntity(ValueListXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (FieldID?, FieldName?, CFType?, Guid?, ElemType?, MaxMultiValues?, UserDef?, Alias?, SecondaryPID?, AutoRollDown?, DefaultGuid?, Ltuid?, PhoneticAlias?, RollupType?, CalculationType?, Formula?, RestrictValues?, ValuelistSortOrder?, AppendNewValues?, Default?, ValueList?)
                /// </para>
                /// </summary>
                public ExtendedAttributeLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// This corresponds to the PID of the custom field.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (FieldID?, FieldName?, CFType?, Guid?, ElemType?, MaxMultiValues?, UserDef?, Alias?, SecondaryPID?, AutoRollDown?, DefaultGuid?, Ltuid?, PhoneticAlias?, RollupType?, CalculationType?, Formula?, RestrictValues?, ValuelistSortOrder?, AppendNewValues?, Default?, ValueList?)
                /// </para>
                /// </summary>
                public virtual string FieldID {
                    get {
                        XElement x = this.GetElement(FieldIDXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(FieldIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The name of the custom field.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (FieldID?, FieldName?, CFType?, Guid?, ElemType?, MaxMultiValues?, UserDef?, Alias?, SecondaryPID?, AutoRollDown?, DefaultGuid?, Ltuid?, PhoneticAlias?, RollupType?, CalculationType?, Formula?, RestrictValues?, ValuelistSortOrder?, AppendNewValues?, Default?, ValueList?)
                /// </para>
                /// </summary>
                public virtual string FieldName {
                    get {
                        XElement x = this.GetElement(FieldNameXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(FieldNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The custom field type. Values are: 0=Cost, 1=Date, 2=Duration, 3=Finish, 4=Flag, 5=Number, 6=Start, 7=Text.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (FieldID?, FieldName?, CFType?, Guid?, ElemType?, MaxMultiValues?, UserDef?, Alias?, SecondaryPID?, AutoRollDown?, DefaultGuid?, Ltuid?, PhoneticAlias?, RollupType?, CalculationType?, Formula?, RestrictValues?, ValuelistSortOrder?, AppendNewValues?, Default?, ValueList?)
                /// </para>
                /// </summary>
                public virtual System.Decimal? CFType {
                    get {
                        XElement x = this.GetElement(CFTypeXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(CFTypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(CFTypeXName, value, "CFType", CFTypeLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// The GUID of the custom field.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (FieldID?, FieldName?, CFType?, Guid?, ElemType?, MaxMultiValues?, UserDef?, Alias?, SecondaryPID?, AutoRollDown?, DefaultGuid?, Ltuid?, PhoneticAlias?, RollupType?, CalculationType?, Formula?, RestrictValues?, ValuelistSortOrder?, AppendNewValues?, Default?, ValueList?)
                /// </para>
                /// </summary>
                public virtual string Guid {
                    get {
                        XElement x = this.GetElement(GuidXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(GuidXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether the extended attribute is associated with a task, a resource, or an assignment. Values are: 20=Task, 21=Resource, 22=Calendar, 23=Assignment.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (FieldID?, FieldName?, CFType?, Guid?, ElemType?, MaxMultiValues?, UserDef?, Alias?, SecondaryPID?, AutoRollDown?, DefaultGuid?, Ltuid?, PhoneticAlias?, RollupType?, CalculationType?, Formula?, RestrictValues?, ValuelistSortOrder?, AppendNewValues?, Default?, ValueList?)
                /// </para>
                /// </summary>
                public virtual System.Decimal? ElemType {
                    get {
                        XElement x = this.GetElement(ElemTypeXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(ElemTypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(ElemTypeXName, value, "ElemType", ElemTypeLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// The maximum number of values you can set in a picklist.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (FieldID?, FieldName?, CFType?, Guid?, ElemType?, MaxMultiValues?, UserDef?, Alias?, SecondaryPID?, AutoRollDown?, DefaultGuid?, Ltuid?, PhoneticAlias?, RollupType?, CalculationType?, Formula?, RestrictValues?, ValuelistSortOrder?, AppendNewValues?, Default?, ValueList?)
                /// </para>
                /// </summary>
                public virtual System.Decimal? MaxMultiValues {
                    get {
                        XElement x = this.GetElement(MaxMultiValuesXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        this.SetElement(MaxMultiValuesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether the custom field is user defined.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (FieldID?, FieldName?, CFType?, Guid?, ElemType?, MaxMultiValues?, UserDef?, Alias?, SecondaryPID?, AutoRollDown?, DefaultGuid?, Ltuid?, PhoneticAlias?, RollupType?, CalculationType?, Formula?, RestrictValues?, ValuelistSortOrder?, AppendNewValues?, Default?, ValueList?)
                /// </para>
                /// </summary>
                public virtual System.Boolean? UserDef {
                    get {
                        XElement x = this.GetElement(UserDefXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(UserDefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The alias of the custom field.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (FieldID?, FieldName?, CFType?, Guid?, ElemType?, MaxMultiValues?, UserDef?, Alias?, SecondaryPID?, AutoRollDown?, DefaultGuid?, Ltuid?, PhoneticAlias?, RollupType?, CalculationType?, Formula?, RestrictValues?, ValuelistSortOrder?, AppendNewValues?, Default?, ValueList?)
                /// </para>
                /// </summary>
                public virtual string Alias {
                    get {
                        XElement x = this.GetElement(AliasXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(AliasXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(AliasXName, value, "Alias", AliasLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// The secondary PID of the custom field.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (FieldID?, FieldName?, CFType?, Guid?, ElemType?, MaxMultiValues?, UserDef?, Alias?, SecondaryPID?, AutoRollDown?, DefaultGuid?, Ltuid?, PhoneticAlias?, RollupType?, CalculationType?, Formula?, RestrictValues?, ValuelistSortOrder?, AppendNewValues?, Default?, ValueList?)
                /// </para>
                /// </summary>
                public virtual string SecondaryPID {
                    get {
                        XElement x = this.GetElement(SecondaryPIDXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(SecondaryPIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether automatic rolldown to assignments is enabled.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (FieldID?, FieldName?, CFType?, Guid?, ElemType?, MaxMultiValues?, UserDef?, Alias?, SecondaryPID?, AutoRollDown?, DefaultGuid?, Ltuid?, PhoneticAlias?, RollupType?, CalculationType?, Formula?, RestrictValues?, ValuelistSortOrder?, AppendNewValues?, Default?, ValueList?)
                /// </para>
                /// </summary>
                public virtual System.Boolean? AutoRollDown {
                    get {
                        XElement x = this.GetElement(AutoRollDownXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(AutoRollDownXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The GUID of the default lookup table entry.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (FieldID?, FieldName?, CFType?, Guid?, ElemType?, MaxMultiValues?, UserDef?, Alias?, SecondaryPID?, AutoRollDown?, DefaultGuid?, Ltuid?, PhoneticAlias?, RollupType?, CalculationType?, Formula?, RestrictValues?, ValuelistSortOrder?, AppendNewValues?, Default?, ValueList?)
                /// </para>
                /// </summary>
                public virtual string DefaultGuid {
                    get {
                        XElement x = this.GetElement(DefaultGuidXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(DefaultGuidXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The GUID of the lookup table associated with the custom field.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (FieldID?, FieldName?, CFType?, Guid?, ElemType?, MaxMultiValues?, UserDef?, Alias?, SecondaryPID?, AutoRollDown?, DefaultGuid?, Ltuid?, PhoneticAlias?, RollupType?, CalculationType?, Formula?, RestrictValues?, ValuelistSortOrder?, AppendNewValues?, Default?, ValueList?)
                /// </para>
                /// </summary>
                public virtual string Ltuid {
                    get {
                        XElement x = this.GetElement(LtuidXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(LtuidXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The phonetic pronunciation of the alias of the custom field.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (FieldID?, FieldName?, CFType?, Guid?, ElemType?, MaxMultiValues?, UserDef?, Alias?, SecondaryPID?, AutoRollDown?, DefaultGuid?, Ltuid?, PhoneticAlias?, RollupType?, CalculationType?, Formula?, RestrictValues?, ValuelistSortOrder?, AppendNewValues?, Default?, ValueList?)
                /// </para>
                /// </summary>
                public virtual string PhoneticAlias {
                    get {
                        XElement x = this.GetElement(PhoneticAliasXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(PhoneticAliasXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(PhoneticAliasXName, value, "PhoneticAlias", PhoneticAliasLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// The way rollups are calculated. Values are: 0=Maximum (OR for flag fields), 1=Minimum (AND for flag fields), 2=Count all, 3=Sum, 4=Average, 5=Average First Sublevel, 6=Count First Sublevel, 7=Count Nonsummaries.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (FieldID?, FieldName?, CFType?, Guid?, ElemType?, MaxMultiValues?, UserDef?, Alias?, SecondaryPID?, AutoRollDown?, DefaultGuid?, Ltuid?, PhoneticAlias?, RollupType?, CalculationType?, Formula?, RestrictValues?, ValuelistSortOrder?, AppendNewValues?, Default?, ValueList?)
                /// </para>
                /// </summary>
                public virtual System.Decimal? RollupType {
                    get {
                        XElement x = this.GetElement(RollupTypeXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(RollupTypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(RollupTypeXName, value, "RollupType", RollupTypeLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether rollups are calculated for task and group summary rows. Values are: 0=None, 1=Rollup, 2=Calculation.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (FieldID?, FieldName?, CFType?, Guid?, ElemType?, MaxMultiValues?, UserDef?, Alias?, SecondaryPID?, AutoRollDown?, DefaultGuid?, Ltuid?, PhoneticAlias?, RollupType?, CalculationType?, Formula?, RestrictValues?, ValuelistSortOrder?, AppendNewValues?, Default?, ValueList?)
                /// </para>
                /// </summary>
                public virtual System.Decimal? CalculationType {
                    get {
                        XElement x = this.GetElement(CalculationTypeXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(CalculationTypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(CalculationTypeXName, value, "CalculationType", CalculationTypeLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// The formula that Microsoft Project uses to populate the custom task field.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (FieldID?, FieldName?, CFType?, Guid?, ElemType?, MaxMultiValues?, UserDef?, Alias?, SecondaryPID?, AutoRollDown?, DefaultGuid?, Ltuid?, PhoneticAlias?, RollupType?, CalculationType?, Formula?, RestrictValues?, ValuelistSortOrder?, AppendNewValues?, Default?, ValueList?)
                /// </para>
                /// </summary>
                public virtual string Formula {
                    get {
                        XElement x = this.GetElement(FormulaXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(FormulaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether only values in the list are allowed in the file.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (FieldID?, FieldName?, CFType?, Guid?, ElemType?, MaxMultiValues?, UserDef?, Alias?, SecondaryPID?, AutoRollDown?, DefaultGuid?, Ltuid?, PhoneticAlias?, RollupType?, CalculationType?, Formula?, RestrictValues?, ValuelistSortOrder?, AppendNewValues?, Default?, ValueList?)
                /// </para>
                /// </summary>
                public virtual System.Boolean? RestrictValues {
                    get {
                        XElement x = this.GetElement(RestrictValuesXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(RestrictValuesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The way value lists are sorted. Values are: 0=Descending, 1=Ascending.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (FieldID?, FieldName?, CFType?, Guid?, ElemType?, MaxMultiValues?, UserDef?, Alias?, SecondaryPID?, AutoRollDown?, DefaultGuid?, Ltuid?, PhoneticAlias?, RollupType?, CalculationType?, Formula?, RestrictValues?, ValuelistSortOrder?, AppendNewValues?, Default?, ValueList?)
                /// </para>
                /// </summary>
                public virtual System.Decimal? ValuelistSortOrder {
                    get {
                        XElement x = this.GetElement(ValuelistSortOrderXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(ValuelistSortOrderXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(ValuelistSortOrderXName, value, "ValuelistSortOrder", ValuelistSortOrderLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether new values added to the project are automatically added to the list.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (FieldID?, FieldName?, CFType?, Guid?, ElemType?, MaxMultiValues?, UserDef?, Alias?, SecondaryPID?, AutoRollDown?, DefaultGuid?, Ltuid?, PhoneticAlias?, RollupType?, CalculationType?, Formula?, RestrictValues?, ValuelistSortOrder?, AppendNewValues?, Default?, ValueList?)
                /// </para>
                /// </summary>
                public virtual System.Boolean? AppendNewValues {
                    get {
                        XElement x = this.GetElement(AppendNewValuesXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(AppendNewValuesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The default value in the list.  Not present if no default is set.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (FieldID?, FieldName?, CFType?, Guid?, ElemType?, MaxMultiValues?, UserDef?, Alias?, SecondaryPID?, AutoRollDown?, DefaultGuid?, Ltuid?, PhoneticAlias?, RollupType?, CalculationType?, Formula?, RestrictValues?, ValuelistSortOrder?, AppendNewValues?, Default?, ValueList?)
                /// </para>
                /// </summary>
                public virtual string Default {
                    get {
                        XElement x = this.GetElement(DefaultXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(DefaultXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// When values of extended attributes are specified as properties of elements in the schema, they may either be specified by values or by references to the values contained in this list.  Applications may assume ordering of the list by ordering specified here.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (FieldID?, FieldName?, CFType?, Guid?, ElemType?, MaxMultiValues?, UserDef?, Alias?, SecondaryPID?, AutoRollDown?, DefaultGuid?, Ltuid?, PhoneticAlias?, RollupType?, CalculationType?, Formula?, RestrictValues?, ValuelistSortOrder?, AppendNewValues?, Default?, ValueList?)
                /// </para>
                /// </summary>
                public virtual ValueListLocalType ValueList {
                    get {
                        XElement x = this.GetElement(ValueListXName);
                        return ((ValueListLocalType)(x));
                    }
                    set {
                        this.SetElement(ValueListXName, value);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<ExtendedAttributeLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(FieldIDXName, typeof(string));
                    localElementDictionary.Add(FieldNameXName, typeof(string));
                    localElementDictionary.Add(CFTypeXName, typeof(decimal));
                    localElementDictionary.Add(GuidXName, typeof(string));
                    localElementDictionary.Add(ElemTypeXName, typeof(decimal));
                    localElementDictionary.Add(MaxMultiValuesXName, typeof(decimal));
                    localElementDictionary.Add(UserDefXName, typeof(bool));
                    localElementDictionary.Add(AliasXName, typeof(string));
                    localElementDictionary.Add(SecondaryPIDXName, typeof(string));
                    localElementDictionary.Add(AutoRollDownXName, typeof(bool));
                    localElementDictionary.Add(DefaultGuidXName, typeof(string));
                    localElementDictionary.Add(LtuidXName, typeof(string));
                    localElementDictionary.Add(PhoneticAliasXName, typeof(string));
                    localElementDictionary.Add(RollupTypeXName, typeof(decimal));
                    localElementDictionary.Add(CalculationTypeXName, typeof(decimal));
                    localElementDictionary.Add(FormulaXName, typeof(string));
                    localElementDictionary.Add(RestrictValuesXName, typeof(bool));
                    localElementDictionary.Add(ValuelistSortOrderXName, typeof(decimal));
                    localElementDictionary.Add(AppendNewValuesXName, typeof(bool));
                    localElementDictionary.Add(DefaultXName, typeof(string));
                    localElementDictionary.Add(ValueListXName, typeof(ValueListLocalType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                private class CFTypeLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    0m,
                                    1m,
                                    2m,
                                    3m,
                                    4m,
                                    5m,
                                    6m,
                                    7m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
                    
                    private CFTypeLocalType() {
                    }
                }
                
                private class ElemTypeLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    20m,
                                    21m,
                                    22m,
                                    23m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
                    
                    private ElemTypeLocalType() {
                    }
                }
                
                private class AliasLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 50, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private AliasLocalType() {
                    }
                }
                
                private class PhoneticAliasLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 50, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private PhoneticAliasLocalType() {
                    }
                }
                
                private class RollupTypeLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    0m,
                                    1m,
                                    2m,
                                    3m,
                                    4m,
                                    5m,
                                    6m,
                                    7m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
                    
                    private RollupTypeLocalType() {
                    }
                }
                
                private class CalculationTypeLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    0m,
                                    1m,
                                    2m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
                    
                    private CalculationTypeLocalType() {
                    }
                }
                
                private class ValuelistSortOrderLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    0m,
                                    1m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
                    
                    private ValuelistSortOrderLocalType() {
                    }
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (Value+)
                /// </para>
                /// </summary>
                public partial class ValueListLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName ValueXName = System.Xml.Linq.XName.Get("Value", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<ValueLocalType> ValueField;
                    
                    private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ValueList", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
		public static explicit operator ValueListLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ValueListLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static ValueListLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ValueXName));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (Value+)
                    /// </para>
                    /// </summary>
                    public ValueListLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The values that make up the value list.
                    /// </para>
                    /// <para>
                    /// Occurrence: required, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (Value+)
                    /// </para>
                    /// </summary>
                    public virtual IList<Microsoft.Schemas.Project2007.Project.ExtendedAttributesLocalType.ExtendedAttributeLocalType.ValueListLocalType.ValueLocalType> Value {
                        get {
                            if ((this.ValueField == null)) {
                                this.ValueField = new XTypedList<ValueLocalType>(this, LinqToXsdTypeManager.Instance, ValueXName);
                            }
                            return this.ValueField;
                        }
                        set {
                            if ((value == null)) {
                                this.ValueField = null;
                            }
                            else {
                                if ((this.ValueField == null)) {
                                    this.ValueField = XTypedList<ValueLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ValueXName);
                                }
                                else {
                                    XTypedServices.SetList<ValueLocalType>(this.ValueField, value);
                                }
                            }
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    System.Xml.Linq.XName IXMetaData.SchemaName {
                        get {
                            return xName;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<ValueListLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(ValueXName, typeof(ValueLocalType));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (ID, Value?, Description?, Phonetic?)
                    /// </para>
                    /// </summary>
                    public partial class ValueLocalType : XTypedElement, IXMetaData {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName IDXName = System.Xml.Linq.XName.Get("ID", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName ValueXName = System.Xml.Linq.XName.Get("Value", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName DescriptionXName = System.Xml.Linq.XName.Get("Description", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName PhoneticXName = System.Xml.Linq.XName.Get("Phonetic", "http://schemas.microsoft.com/project/2007");
                        
                        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Value", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                        
		public static explicit operator ValueLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ValueLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                        
                        static ValueLocalType() {
                            BuildElementDictionary();
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (ID, Value?, Description?, Phonetic?)
                        /// </para>
                        /// </summary>
                        public ValueLocalType() {
                        }
                        
                        /// <summary>
                        /// <para>
                        /// The unique ID of value across the project.
                        /// </para>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (ID, Value?, Description?, Phonetic?)
                        /// </para>
                        /// </summary>
                        public virtual decimal ID {
                            get {
                                XElement x = this.GetElement(IDXName);
                                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                            }
                            set {
                                this.SetElement(IDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// The actual value.
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (ID, Value?, Description?, Phonetic?)
                        /// </para>
                        /// </summary>
                        public virtual string Value {
                            get {
                                XElement x = this.GetElement(ValueXName);
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElement(ValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// The description of the value in the list.
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (ID, Value?, Description?, Phonetic?)
                        /// </para>
                        /// </summary>
                        public virtual string Description {
                            get {
                                XElement x = this.GetElement(DescriptionXName);
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElement(DescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// The phonetic information for custom field names.
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (ID, Value?, Description?, Phonetic?)
                        /// </para>
                        /// </summary>
                        public virtual string Phonetic {
                            get {
                                XElement x = this.GetElement(PhoneticXName);
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                this.SetElement(PhoneticXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                            get {
                                return localElementDictionary;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        System.Xml.Linq.XName IXMetaData.SchemaName {
                            get {
                                return xName;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin {
                            get {
                                return SchemaOrigin.Fragment;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager {
                            get {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }
                        
                        public override XTypedElement Clone() {
                            return XTypedServices.CloneXTypedElement<ValueLocalType>(this);
                        }
                        
                        private static void BuildElementDictionary() {
                            localElementDictionary.Add(IDXName, typeof(decimal));
                            localElementDictionary.Add(ValueXName, typeof(string));
                            localElementDictionary.Add(DescriptionXName, typeof(string));
                            localElementDictionary.Add(PhoneticXName, typeof(string));
                        }
                        
                        ContentModelEntity IXMetaData.GetContentModel() {
                            return ContentModelEntity.Default;
                        }
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Calendar+)
        /// </para>
        /// </summary>
        public partial class CalendarsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName CalendarXName = System.Xml.Linq.XName.Get("Calendar", "http://schemas.microsoft.com/project/2007");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<CalendarLocalType> CalendarField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Calendars", "http://schemas.microsoft.com/project/2007");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator CalendarsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CalendarsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static CalendarsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(CalendarXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Calendar+)
            /// </para>
            /// </summary>
            public CalendarsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Calendars are used to define standard working and non-working times. Projects must have one base calendar. Tasks and resources can have their own non-base calendars that are based on a base calendar.
            /// </para>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Calendar+)
            /// </para>
            /// </summary>
            public virtual IList<Microsoft.Schemas.Project2007.Project.CalendarsLocalType.CalendarLocalType> Calendar {
                get {
                    if ((this.CalendarField == null)) {
                        this.CalendarField = new XTypedList<CalendarLocalType>(this, LinqToXsdTypeManager.Instance, CalendarXName);
                    }
                    return this.CalendarField;
                }
                set {
                    if ((value == null)) {
                        this.CalendarField = null;
                    }
                    else {
                        if ((this.CalendarField == null)) {
                            this.CalendarField = XTypedList<CalendarLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, CalendarXName);
                        }
                        else {
                            XTypedServices.SetList<CalendarLocalType>(this.CalendarField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<CalendarsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(CalendarXName, typeof(CalendarLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (UID, Name?, IsBaseCalendar?, BaseCalendarUID?, WeekDays?, Exceptions?, WorkWeeks?)
            /// </para>
            /// </summary>
            public partial class CalendarLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName UIDXName = System.Xml.Linq.XName.Get("UID", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName IsBaseCalendarXName = System.Xml.Linq.XName.Get("IsBaseCalendar", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName BaseCalendarUIDXName = System.Xml.Linq.XName.Get("BaseCalendarUID", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName WeekDaysXName = System.Xml.Linq.XName.Get("WeekDays", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ExceptionsXName = System.Xml.Linq.XName.Get("Exceptions", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName WorkWeeksXName = System.Xml.Linq.XName.Get("WorkWeeks", "http://schemas.microsoft.com/project/2007");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Calendar", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator CalendarLocalType(XElement xe) { return XTypedServices.ToXTypedElement<CalendarLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static CalendarLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(UIDXName), new NamedContentModelEntity(NameXName), new NamedContentModelEntity(IsBaseCalendarXName), new NamedContentModelEntity(BaseCalendarUIDXName), new NamedContentModelEntity(WeekDaysXName), new NamedContentModelEntity(ExceptionsXName), new NamedContentModelEntity(WorkWeeksXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (UID, Name?, IsBaseCalendar?, BaseCalendarUID?, WeekDays?, Exceptions?, WorkWeeks?)
                /// </para>
                /// </summary>
                public CalendarLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// The unique identifier of the calendar.
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (UID, Name?, IsBaseCalendar?, BaseCalendarUID?, WeekDays?, Exceptions?, WorkWeeks?)
                /// </para>
                /// </summary>
                public virtual decimal UID {
                    get {
                        XElement x = this.GetElement(UIDXName);
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        this.SetElement(UIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The name of the calendar.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, Name?, IsBaseCalendar?, BaseCalendarUID?, WeekDays?, Exceptions?, WorkWeeks?)
                /// </para>
                /// </summary>
                public virtual string Name {
                    get {
                        XElement x = this.GetElement(NameXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(NameXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(NameXName, value, "Name", NameLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether the calendar is a base calendar.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, Name?, IsBaseCalendar?, BaseCalendarUID?, WeekDays?, Exceptions?, WorkWeeks?)
                /// </para>
                /// </summary>
                public virtual System.Boolean? IsBaseCalendar {
                    get {
                        XElement x = this.GetElement(IsBaseCalendarXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(IsBaseCalendarXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The unique identifier of the base calendar on which this calendar depends. Only applicable if the calendar is not a base calendar.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, Name?, IsBaseCalendar?, BaseCalendarUID?, WeekDays?, Exceptions?, WorkWeeks?)
                /// </para>
                /// </summary>
                public virtual System.Decimal? BaseCalendarUID {
                    get {
                        XElement x = this.GetElement(BaseCalendarUIDXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        this.SetElement(BaseCalendarUIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The collection of weekdays that defines this calendar.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, Name?, IsBaseCalendar?, BaseCalendarUID?, WeekDays?, Exceptions?, WorkWeeks?)
                /// </para>
                /// </summary>
                public virtual WeekDaysLocalType WeekDays {
                    get {
                        XElement x = this.GetElement(WeekDaysXName);
                        return ((WeekDaysLocalType)(x));
                    }
                    set {
                        this.SetElement(WeekDaysXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The collection of exceptions that is associated with the calendar.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, Name?, IsBaseCalendar?, BaseCalendarUID?, WeekDays?, Exceptions?, WorkWeeks?)
                /// </para>
                /// </summary>
                public virtual ExceptionsLocalType Exceptions {
                    get {
                        XElement x = this.GetElement(ExceptionsXName);
                        return ((ExceptionsLocalType)(x));
                    }
                    set {
                        this.SetElement(ExceptionsXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The collection of effective work weeks associated with the calendar.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, Name?, IsBaseCalendar?, BaseCalendarUID?, WeekDays?, Exceptions?, WorkWeeks?)
                /// </para>
                /// </summary>
                public virtual WorkWeeksLocalType WorkWeeks {
                    get {
                        XElement x = this.GetElement(WorkWeeksXName);
                        return ((WorkWeeksLocalType)(x));
                    }
                    set {
                        this.SetElement(WorkWeeksXName, value);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<CalendarLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(UIDXName, typeof(decimal));
                    localElementDictionary.Add(NameXName, typeof(string));
                    localElementDictionary.Add(IsBaseCalendarXName, typeof(bool));
                    localElementDictionary.Add(BaseCalendarUIDXName, typeof(decimal));
                    localElementDictionary.Add(WeekDaysXName, typeof(WeekDaysLocalType));
                    localElementDictionary.Add(ExceptionsXName, typeof(ExceptionsLocalType));
                    localElementDictionary.Add(WorkWeeksXName, typeof(WorkWeeksLocalType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                private class NameLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 512, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private NameLocalType() {
                    }
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (WeekDay*)
                /// </para>
                /// </summary>
                public partial class WeekDaysLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName WeekDayXName = System.Xml.Linq.XName.Get("WeekDay", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<WeekDayLocalType> WeekDayField;
                    
                    private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("WeekDays", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
		public static explicit operator WeekDaysLocalType(XElement xe) { return XTypedServices.ToXTypedElement<WeekDaysLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static WeekDaysLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(WeekDayXName));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (WeekDay*)
                    /// </para>
                    /// </summary>
                    public WeekDaysLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// A weekday either defines regular days of the week or exception days in the calendar.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (WeekDay*)
                    /// </para>
                    /// </summary>
                    public virtual IList<Microsoft.Schemas.Project2007.Project.CalendarsLocalType.CalendarLocalType.WeekDaysLocalType.WeekDayLocalType> WeekDay {
                        get {
                            if ((this.WeekDayField == null)) {
                                this.WeekDayField = new XTypedList<WeekDayLocalType>(this, LinqToXsdTypeManager.Instance, WeekDayXName);
                            }
                            return this.WeekDayField;
                        }
                        set {
                            if ((value == null)) {
                                this.WeekDayField = null;
                            }
                            else {
                                if ((this.WeekDayField == null)) {
                                    this.WeekDayField = XTypedList<WeekDayLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, WeekDayXName);
                                }
                                else {
                                    XTypedServices.SetList<WeekDayLocalType>(this.WeekDayField, value);
                                }
                            }
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    System.Xml.Linq.XName IXMetaData.SchemaName {
                        get {
                            return xName;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<WeekDaysLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(WeekDayXName, typeof(WeekDayLocalType));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (DayType, DayWorking?, TimePeriod?, WorkingTimes?)
                    /// </para>
                    /// </summary>
                    public partial class WeekDayLocalType : XTypedElement, IXMetaData {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName DayTypeXName = System.Xml.Linq.XName.Get("DayType", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName DayWorkingXName = System.Xml.Linq.XName.Get("DayWorking", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName TimePeriodXName = System.Xml.Linq.XName.Get("TimePeriod", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName WorkingTimesXName = System.Xml.Linq.XName.Get("WorkingTimes", "http://schemas.microsoft.com/project/2007");
                        
                        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("WeekDay", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;
                        
		public static explicit operator WeekDayLocalType(XElement xe) { return XTypedServices.ToXTypedElement<WeekDayLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                        
                        static WeekDayLocalType() {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DayTypeXName), new NamedContentModelEntity(DayWorkingXName), new NamedContentModelEntity(TimePeriodXName), new NamedContentModelEntity(WorkingTimesXName));
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (DayType, DayWorking?, TimePeriod?, WorkingTimes?)
                        /// </para>
                        /// </summary>
                        public WeekDayLocalType() {
                        }
                        
                        /// <summary>
                        /// <para>
                        /// The type of day. Values are: 0=Exception, 1=Sunday, 2=Monday, 3=Tuesday, 4=Wednesday, 5=Thursday, 6=Friday, 7=Saturday.
                        /// </para>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (DayType, DayWorking?, TimePeriod?, WorkingTimes?)
                        /// </para>
                        /// </summary>
                        public virtual decimal DayType {
                            get {
                                XElement x = this.GetElement(DayTypeXName);
                                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                            }
                            set {
                                this.SetElementWithValidation(DayTypeXName, value, "DayType", DayTypeLocalType.TypeDefinition);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Whether the specified date or day type is working.
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (DayType, DayWorking?, TimePeriod?, WorkingTimes?)
                        /// </para>
                        /// </summary>
                        public virtual System.Boolean? DayWorking {
                            get {
                                XElement x = this.GetElement(DayWorkingXName);
                                if ((x == null)) {
                                    return null;
                                }
                                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                            }
                            set {
                                this.SetElement(DayWorkingXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Defines a contiguous set of exception days.
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (DayType, DayWorking?, TimePeriod?, WorkingTimes?)
                        /// </para>
                        /// </summary>
                        public virtual TimePeriodLocalType TimePeriod {
                            get {
                                XElement x = this.GetElement(TimePeriodXName);
                                return ((TimePeriodLocalType)(x));
                            }
                            set {
                                this.SetElement(TimePeriodXName, value);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// The collection of working times that define the time worked on the weekday. One of these must be present, and there can be no more than five.
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (DayType, DayWorking?, TimePeriod?, WorkingTimes?)
                        /// </para>
                        /// </summary>
                        public virtual WorkingTimesLocalType WorkingTimes {
                            get {
                                XElement x = this.GetElement(WorkingTimesXName);
                                return ((WorkingTimesLocalType)(x));
                            }
                            set {
                                this.SetElement(WorkingTimesXName, value);
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                            get {
                                return localElementDictionary;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        System.Xml.Linq.XName IXMetaData.SchemaName {
                            get {
                                return xName;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin {
                            get {
                                return SchemaOrigin.Fragment;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager {
                            get {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }
                        
                        public override XTypedElement Clone() {
                            return XTypedServices.CloneXTypedElement<WeekDayLocalType>(this);
                        }
                        
                        private static void BuildElementDictionary() {
                            localElementDictionary.Add(DayTypeXName, typeof(decimal));
                            localElementDictionary.Add(DayWorkingXName, typeof(bool));
                            localElementDictionary.Add(TimePeriodXName, typeof(TimePeriodLocalType));
                            localElementDictionary.Add(WorkingTimesXName, typeof(WorkingTimesLocalType));
                        }
                        
                        ContentModelEntity IXMetaData.GetContentModel() {
                            return contentModel;
                        }
                        
                        private class DayTypeLocalType {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                            0m,
                                            1m,
                                            2m,
                                            3m,
                                            4m,
                                            5m,
                                            6m,
                                            7m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
                            
                            private DayTypeLocalType() {
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (FromDate?, ToDate?)
                        /// </para>
                        /// </summary>
                        public partial class TimePeriodLocalType : XTypedElement, IXMetaData {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            [EditorBrowsable(EditorBrowsableState.Never)]
                            internal static readonly System.Xml.Linq.XName FromDateXName = System.Xml.Linq.XName.Get("FromDate", "http://schemas.microsoft.com/project/2007");
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            [EditorBrowsable(EditorBrowsableState.Never)]
                            internal static readonly System.Xml.Linq.XName ToDateXName = System.Xml.Linq.XName.Get("ToDate", "http://schemas.microsoft.com/project/2007");
                            
                            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TimePeriod", "http://schemas.microsoft.com/project/2007");
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;
                            
		public static explicit operator TimePeriodLocalType(XElement xe) { return XTypedServices.ToXTypedElement<TimePeriodLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                            
                            static TimePeriodLocalType() {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FromDateXName), new NamedContentModelEntity(ToDateXName));
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Regular expression: (FromDate?, ToDate?)
                            /// </para>
                            /// </summary>
                            public TimePeriodLocalType() {
                            }
                            
                            /// <summary>
                            /// <para>
                            /// The beginning of the exception time.
                            /// </para>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// <para>
                            /// Regular expression: (FromDate?, ToDate?)
                            /// </para>
                            /// </summary>
                            public virtual System.DateTime? FromDate {
                                get {
                                    XElement x = this.GetElement(FromDateXName);
                                    if ((x == null)) {
                                        return null;
                                    }
                                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                                }
                                set {
                                    this.SetElement(FromDateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                                }
                            }
                            
                            /// <summary>
                            /// <para>
                            /// The end of the exception time.
                            /// </para>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// <para>
                            /// Regular expression: (FromDate?, ToDate?)
                            /// </para>
                            /// </summary>
                            public virtual System.DateTime? ToDate {
                                get {
                                    XElement x = this.GetElement(ToDateXName);
                                    if ((x == null)) {
                                        return null;
                                    }
                                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                                }
                                set {
                                    this.SetElement(ToDateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                                get {
                                    return localElementDictionary;
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            System.Xml.Linq.XName IXMetaData.SchemaName {
                                get {
                                    return xName;
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin {
                                get {
                                    return SchemaOrigin.Fragment;
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager {
                                get {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }
                            
                            public override XTypedElement Clone() {
                                return XTypedServices.CloneXTypedElement<TimePeriodLocalType>(this);
                            }
                            
                            private static void BuildElementDictionary() {
                                localElementDictionary.Add(FromDateXName, typeof(System.DateTime));
                                localElementDictionary.Add(ToDateXName, typeof(System.DateTime));
                            }
                            
                            ContentModelEntity IXMetaData.GetContentModel() {
                                return contentModel;
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (WorkingTime*)
                        /// </para>
                        /// </summary>
                        public partial class WorkingTimesLocalType : XTypedElement, IXMetaData {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            [EditorBrowsable(EditorBrowsableState.Never)]
                            internal static readonly System.Xml.Linq.XName WorkingTimeXName = System.Xml.Linq.XName.Get("WorkingTime", "http://schemas.microsoft.com/project/2007");
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private XTypedList<WorkingTimeLocalType> WorkingTimeField;
                            
                            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("WorkingTimes", "http://schemas.microsoft.com/project/2007");
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;
                            
		public static explicit operator WorkingTimesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<WorkingTimesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                            
                            static WorkingTimesLocalType() {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(WorkingTimeXName));
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Regular expression: (WorkingTime*)
                            /// </para>
                            /// </summary>
                            public WorkingTimesLocalType() {
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Defines the working time during the weekday.
                            /// </para>
                            /// <para>
                            /// Occurrence: optional, repeating
                            /// </para>
                            /// <para>
                            /// Regular expression: (WorkingTime*)
                            /// </para>
                            /// </summary>
                            public virtual IList<Microsoft.Schemas.Project2007.Project.CalendarsLocalType.CalendarLocalType.WeekDaysLocalType.WeekDayLocalType.WorkingTimesLocalType.WorkingTimeLocalType> WorkingTime {
                                get {
                                    if ((this.WorkingTimeField == null)) {
                                        this.WorkingTimeField = new XTypedList<WorkingTimeLocalType>(this, LinqToXsdTypeManager.Instance, WorkingTimeXName);
                                    }
                                    return this.WorkingTimeField;
                                }
                                set {
                                    if ((value == null)) {
                                        this.WorkingTimeField = null;
                                    }
                                    else {
                                        if ((this.WorkingTimeField == null)) {
                                            this.WorkingTimeField = XTypedList<WorkingTimeLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, WorkingTimeXName);
                                        }
                                        else {
                                            XTypedServices.SetList<WorkingTimeLocalType>(this.WorkingTimeField, value);
                                        }
                                    }
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                                get {
                                    return localElementDictionary;
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            System.Xml.Linq.XName IXMetaData.SchemaName {
                                get {
                                    return xName;
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin {
                                get {
                                    return SchemaOrigin.Fragment;
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager {
                                get {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }
                            
                            public override XTypedElement Clone() {
                                return XTypedServices.CloneXTypedElement<WorkingTimesLocalType>(this);
                            }
                            
                            private static void BuildElementDictionary() {
                                localElementDictionary.Add(WorkingTimeXName, typeof(WorkingTimeLocalType));
                            }
                            
                            ContentModelEntity IXMetaData.GetContentModel() {
                                return contentModel;
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Regular expression: (FromTime?, ToTime?)
                            /// </para>
                            /// </summary>
                            public partial class WorkingTimeLocalType : XTypedElement, IXMetaData {
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                [EditorBrowsable(EditorBrowsableState.Never)]
                                internal static readonly System.Xml.Linq.XName FromTimeXName = System.Xml.Linq.XName.Get("FromTime", "http://schemas.microsoft.com/project/2007");
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                [EditorBrowsable(EditorBrowsableState.Never)]
                                internal static readonly System.Xml.Linq.XName ToTimeXName = System.Xml.Linq.XName.Get("ToTime", "http://schemas.microsoft.com/project/2007");
                                
                                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("WorkingTime", "http://schemas.microsoft.com/project/2007");
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                private static ContentModelEntity contentModel;
                                
		public static explicit operator WorkingTimeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<WorkingTimeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                                
                                static WorkingTimeLocalType() {
                                    BuildElementDictionary();
                                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FromTimeXName), new NamedContentModelEntity(ToTimeXName));
                                }
                                
                                /// <summary>
                                /// <para>
                                /// Regular expression: (FromTime?, ToTime?)
                                /// </para>
                                /// </summary>
                                public WorkingTimeLocalType() {
                                }
                                
                                /// <summary>
                                /// <para>
                                /// The beginning of the working time.
                                /// </para>
                                /// <para>
                                /// Occurrence: optional
                                /// </para>
                                /// <para>
                                /// Regular expression: (FromTime?, ToTime?)
                                /// </para>
                                /// </summary>
                                public virtual System.DateTime? FromTime {
                                    get {
                                        XElement x = this.GetElement(FromTimeXName);
                                        if ((x == null)) {
                                            return null;
                                        }
                                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                                    }
                                    set {
                                        this.SetElement(FromTimeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                                    }
                                }
                                
                                /// <summary>
                                /// <para>
                                /// The end of the working time.
                                /// </para>
                                /// <para>
                                /// Occurrence: optional
                                /// </para>
                                /// <para>
                                /// Regular expression: (FromTime?, ToTime?)
                                /// </para>
                                /// </summary>
                                public virtual System.DateTime? ToTime {
                                    get {
                                        XElement x = this.GetElement(ToTimeXName);
                                        if ((x == null)) {
                                            return null;
                                        }
                                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                                    }
                                    set {
                                        this.SetElement(ToTimeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                                    }
                                }
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                                    get {
                                        return localElementDictionary;
                                    }
                                }
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                System.Xml.Linq.XName IXMetaData.SchemaName {
                                    get {
                                        return xName;
                                    }
                                }
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                SchemaOrigin IXMetaData.TypeOrigin {
                                    get {
                                        return SchemaOrigin.Fragment;
                                    }
                                }
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                ILinqToXsdTypeManager IXMetaData.TypeManager {
                                    get {
                                        return LinqToXsdTypeManager.Instance;
                                    }
                                }
                                
                                public override XTypedElement Clone() {
                                    return XTypedServices.CloneXTypedElement<WorkingTimeLocalType>(this);
                                }
                                
                                private static void BuildElementDictionary() {
                                    localElementDictionary.Add(FromTimeXName, typeof(System.DateTime));
                                    localElementDictionary.Add(ToTimeXName, typeof(System.DateTime));
                                }
                                
                                ContentModelEntity IXMetaData.GetContentModel() {
                                    return contentModel;
                                }
                            }
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (Exception*)
                /// </para>
                /// </summary>
                public partial class ExceptionsLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName ExceptionXName = System.Xml.Linq.XName.Get("Exception", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<ExceptionLocalType> ExceptionField;
                    
                    private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Exceptions", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
		public static explicit operator ExceptionsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ExceptionsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static ExceptionsLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ExceptionXName));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (Exception*)
                    /// </para>
                    /// </summary>
                    public ExceptionsLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Exceptions are used to define an exception sub-calendar.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (Exception*)
                    /// </para>
                    /// </summary>
                    public virtual IList<Microsoft.Schemas.Project2007.Project.CalendarsLocalType.CalendarLocalType.ExceptionsLocalType.ExceptionLocalType> Exception {
                        get {
                            if ((this.ExceptionField == null)) {
                                this.ExceptionField = new XTypedList<ExceptionLocalType>(this, LinqToXsdTypeManager.Instance, ExceptionXName);
                            }
                            return this.ExceptionField;
                        }
                        set {
                            if ((value == null)) {
                                this.ExceptionField = null;
                            }
                            else {
                                if ((this.ExceptionField == null)) {
                                    this.ExceptionField = XTypedList<ExceptionLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ExceptionXName);
                                }
                                else {
                                    XTypedServices.SetList<ExceptionLocalType>(this.ExceptionField, value);
                                }
                            }
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    System.Xml.Linq.XName IXMetaData.SchemaName {
                        get {
                            return xName;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<ExceptionsLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(ExceptionXName, typeof(ExceptionLocalType));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (EnteredByOccurrences?, TimePeriod?, Occurrences?, Name?, Type?, Period?, DaysOfWeek?, MonthItem?, MonthPosition?, Month?, MonthDay?, DayWorking?, WorkingTimes?)
                    /// </para>
                    /// </summary>
                    public partial class ExceptionLocalType : XTypedElement, IXMetaData {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName EnteredByOccurrencesXName = System.Xml.Linq.XName.Get("EnteredByOccurrences", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName TimePeriodXName = System.Xml.Linq.XName.Get("TimePeriod", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName OccurrencesXName = System.Xml.Linq.XName.Get("Occurrences", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName TypeXName = System.Xml.Linq.XName.Get("Type", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName PeriodXName = System.Xml.Linq.XName.Get("Period", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName DaysOfWeekXName = System.Xml.Linq.XName.Get("DaysOfWeek", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName MonthItemXName = System.Xml.Linq.XName.Get("MonthItem", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName MonthPositionXName = System.Xml.Linq.XName.Get("MonthPosition", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName MonthXName = System.Xml.Linq.XName.Get("Month", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName MonthDayXName = System.Xml.Linq.XName.Get("MonthDay", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName DayWorkingXName = System.Xml.Linq.XName.Get("DayWorking", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName WorkingTimesXName = System.Xml.Linq.XName.Get("WorkingTimes", "http://schemas.microsoft.com/project/2007");
                        
                        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Exception", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;
                        
		public static explicit operator ExceptionLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ExceptionLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                        
                        static ExceptionLocalType() {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(EnteredByOccurrencesXName), new NamedContentModelEntity(TimePeriodXName), new NamedContentModelEntity(OccurrencesXName), new NamedContentModelEntity(NameXName), new NamedContentModelEntity(TypeXName), new NamedContentModelEntity(PeriodXName), new NamedContentModelEntity(DaysOfWeekXName), new NamedContentModelEntity(MonthItemXName), new NamedContentModelEntity(MonthPositionXName), new NamedContentModelEntity(MonthXName), new NamedContentModelEntity(MonthDayXName), new NamedContentModelEntity(DayWorkingXName), new NamedContentModelEntity(WorkingTimesXName));
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (EnteredByOccurrences?, TimePeriod?, Occurrences?, Name?, Type?, Period?, DaysOfWeek?, MonthItem?, MonthPosition?, Month?, MonthDay?, DayWorking?, WorkingTimes?)
                        /// </para>
                        /// </summary>
                        public ExceptionLocalType() {
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Whether the range of recurrence is defined by entering a number of occurrences. False specifies that the range of recurrence is defined by entering a finish date.
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (EnteredByOccurrences?, TimePeriod?, Occurrences?, Name?, Type?, Period?, DaysOfWeek?, MonthItem?, MonthPosition?, Month?, MonthDay?, DayWorking?, WorkingTimes?)
                        /// </para>
                        /// </summary>
                        public virtual System.Boolean? EnteredByOccurrences {
                            get {
                                XElement x = this.GetElement(EnteredByOccurrencesXName);
                                if ((x == null)) {
                                    return null;
                                }
                                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                            }
                            set {
                                this.SetElement(EnteredByOccurrencesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Defines a contiguous set of exception days.
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (EnteredByOccurrences?, TimePeriod?, Occurrences?, Name?, Type?, Period?, DaysOfWeek?, MonthItem?, MonthPosition?, Month?, MonthDay?, DayWorking?, WorkingTimes?)
                        /// </para>
                        /// </summary>
                        public virtual TimePeriodLocalType TimePeriod {
                            get {
                                XElement x = this.GetElement(TimePeriodXName);
                                return ((TimePeriodLocalType)(x));
                            }
                            set {
                                this.SetElement(TimePeriodXName, value);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// The number of occurrences for which the calendar exception is valid.
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (EnteredByOccurrences?, TimePeriod?, Occurrences?, Name?, Type?, Period?, DaysOfWeek?, MonthItem?, MonthPosition?, Month?, MonthDay?, DayWorking?, WorkingTimes?)
                        /// </para>
                        /// </summary>
                        public virtual System.Decimal? Occurrences {
                            get {
                                XElement x = this.GetElement(OccurrencesXName);
                                if ((x == null)) {
                                    return null;
                                }
                                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                            }
                            set {
                                this.SetElement(OccurrencesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// The name of the exception.
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (EnteredByOccurrences?, TimePeriod?, Occurrences?, Name?, Type?, Period?, DaysOfWeek?, MonthItem?, MonthPosition?, Month?, MonthDay?, DayWorking?, WorkingTimes?)
                        /// </para>
                        /// </summary>
                        public virtual string Name {
                            get {
                                XElement x = this.GetElement(NameXName);
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                if (value == null) {
                                    this.SetElement(NameXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                else {
                                    this.SetElementWithValidation(NameXName, value, "Name", NameLocalType.TypeDefinition);
                                }
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// The exception type. Values are: 1=Daily, 2=Yearly by day of the month, 3=Yearly by position, 4=Monthly by day of the month, 5=Monthly by position, 6=Weekly, 7=By day count, 8=By weekday count, 9=No exception type.
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (EnteredByOccurrences?, TimePeriod?, Occurrences?, Name?, Type?, Period?, DaysOfWeek?, MonthItem?, MonthPosition?, Month?, MonthDay?, DayWorking?, WorkingTimes?)
                        /// </para>
                        /// </summary>
                        public virtual System.Decimal? Type {
                            get {
                                XElement x = this.GetElement(TypeXName);
                                if ((x == null)) {
                                    return null;
                                }
                                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                            }
                            set {
                                if (value == null) {
                                    this.SetElement(TypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                                }
                                else {
                                    this.SetElementWithValidation(TypeXName, value, "Type", TypeLocalType.TypeDefinition);
                                }
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// The period of recurrence for the exception.
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (EnteredByOccurrences?, TimePeriod?, Occurrences?, Name?, Type?, Period?, DaysOfWeek?, MonthItem?, MonthPosition?, Month?, MonthDay?, DayWorking?, WorkingTimes?)
                        /// </para>
                        /// </summary>
                        public virtual System.Decimal? Period {
                            get {
                                XElement x = this.GetElement(PeriodXName);
                                if ((x == null)) {
                                    return null;
                                }
                                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                            }
                            set {
                                this.SetElement(PeriodXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// The days of the week on which the exception is valid. Values are: 1=Sunday, 2=Monday, 4=Tuesday, 8=Wednesday, 16=Thursday, 32=Friday, 64=Saturday.
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (EnteredByOccurrences?, TimePeriod?, Occurrences?, Name?, Type?, Period?, DaysOfWeek?, MonthItem?, MonthPosition?, Month?, MonthDay?, DayWorking?, WorkingTimes?)
                        /// </para>
                        /// </summary>
                        public virtual System.Decimal? DaysOfWeek {
                            get {
                                XElement x = this.GetElement(DaysOfWeekXName);
                                if ((x == null)) {
                                    return null;
                                }
                                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                            }
                            set {
                                this.SetElement(DaysOfWeekXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// The month item for which an exception recurrence is scheduled. Values are: 0=Day, 1=Weekday, 2=WeekendDay, 3=Sunday, 4=Monday, 5=Tuesday, 6=Wednesday, 7=Thursday, 8=Friday, 9=Saturday.
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (EnteredByOccurrences?, TimePeriod?, Occurrences?, Name?, Type?, Period?, DaysOfWeek?, MonthItem?, MonthPosition?, Month?, MonthDay?, DayWorking?, WorkingTimes?)
                        /// </para>
                        /// </summary>
                        public virtual System.Decimal? MonthItem {
                            get {
                                XElement x = this.GetElement(MonthItemXName);
                                if ((x == null)) {
                                    return null;
                                }
                                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                            }
                            set {
                                if (value == null) {
                                    this.SetElement(MonthItemXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                                }
                                else {
                                    this.SetElementWithValidation(MonthItemXName, value, "MonthItem", MonthItemLocalType.TypeDefinition);
                                }
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// The position of a month item within a month. Values are: 0=First position, 1=Second position, 2=Third position, 3=Fourth position, 4=Last position.
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (EnteredByOccurrences?, TimePeriod?, Occurrences?, Name?, Type?, Period?, DaysOfWeek?, MonthItem?, MonthPosition?, Month?, MonthDay?, DayWorking?, WorkingTimes?)
                        /// </para>
                        /// </summary>
                        public virtual System.Decimal? MonthPosition {
                            get {
                                XElement x = this.GetElement(MonthPositionXName);
                                if ((x == null)) {
                                    return null;
                                }
                                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                            }
                            set {
                                if (value == null) {
                                    this.SetElement(MonthPositionXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                                }
                                else {
                                    this.SetElementWithValidation(MonthPositionXName, value, "MonthPosition", MonthPositionLocalType.TypeDefinition);
                                }
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// The month for which an exception recurrence is scheduled. Values are: 0=January, 1=February, 2=March, 3=April, 4=May, 5=June, 6=July, 7=August, 8=September, 9=October, 10=November, 11=December.
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (EnteredByOccurrences?, TimePeriod?, Occurrences?, Name?, Type?, Period?, DaysOfWeek?, MonthItem?, MonthPosition?, Month?, MonthDay?, DayWorking?, WorkingTimes?)
                        /// </para>
                        /// </summary>
                        public virtual System.Decimal? Month {
                            get {
                                XElement x = this.GetElement(MonthXName);
                                if ((x == null)) {
                                    return null;
                                }
                                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                            }
                            set {
                                if (value == null) {
                                    this.SetElement(MonthXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                                }
                                else {
                                    this.SetElementWithValidation(MonthXName, value, "Month", MonthLocalType.TypeDefinition);
                                }
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// The day of the month on which an exception recurrence is scheduled.
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (EnteredByOccurrences?, TimePeriod?, Occurrences?, Name?, Type?, Period?, DaysOfWeek?, MonthItem?, MonthPosition?, Month?, MonthDay?, DayWorking?, WorkingTimes?)
                        /// </para>
                        /// </summary>
                        public virtual System.Decimal? MonthDay {
                            get {
                                XElement x = this.GetElement(MonthDayXName);
                                if ((x == null)) {
                                    return null;
                                }
                                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                            }
                            set {
                                this.SetElement(MonthDayXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Whether the specified date or day type is working.
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (EnteredByOccurrences?, TimePeriod?, Occurrences?, Name?, Type?, Period?, DaysOfWeek?, MonthItem?, MonthPosition?, Month?, MonthDay?, DayWorking?, WorkingTimes?)
                        /// </para>
                        /// </summary>
                        public virtual System.Boolean? DayWorking {
                            get {
                                XElement x = this.GetElement(DayWorkingXName);
                                if ((x == null)) {
                                    return null;
                                }
                                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                            }
                            set {
                                this.SetElement(DayWorkingXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// The collection of working times that define the time worked on the weekday.  One of these must be present, and there can be no more than five.
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (EnteredByOccurrences?, TimePeriod?, Occurrences?, Name?, Type?, Period?, DaysOfWeek?, MonthItem?, MonthPosition?, Month?, MonthDay?, DayWorking?, WorkingTimes?)
                        /// </para>
                        /// </summary>
                        public virtual WorkingTimesLocalType WorkingTimes {
                            get {
                                XElement x = this.GetElement(WorkingTimesXName);
                                return ((WorkingTimesLocalType)(x));
                            }
                            set {
                                this.SetElement(WorkingTimesXName, value);
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                            get {
                                return localElementDictionary;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        System.Xml.Linq.XName IXMetaData.SchemaName {
                            get {
                                return xName;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin {
                            get {
                                return SchemaOrigin.Fragment;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager {
                            get {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }
                        
                        public override XTypedElement Clone() {
                            return XTypedServices.CloneXTypedElement<ExceptionLocalType>(this);
                        }
                        
                        private static void BuildElementDictionary() {
                            localElementDictionary.Add(EnteredByOccurrencesXName, typeof(bool));
                            localElementDictionary.Add(TimePeriodXName, typeof(TimePeriodLocalType));
                            localElementDictionary.Add(OccurrencesXName, typeof(decimal));
                            localElementDictionary.Add(NameXName, typeof(string));
                            localElementDictionary.Add(TypeXName, typeof(decimal));
                            localElementDictionary.Add(PeriodXName, typeof(decimal));
                            localElementDictionary.Add(DaysOfWeekXName, typeof(decimal));
                            localElementDictionary.Add(MonthItemXName, typeof(decimal));
                            localElementDictionary.Add(MonthPositionXName, typeof(decimal));
                            localElementDictionary.Add(MonthXName, typeof(decimal));
                            localElementDictionary.Add(MonthDayXName, typeof(decimal));
                            localElementDictionary.Add(DayWorkingXName, typeof(bool));
                            localElementDictionary.Add(WorkingTimesXName, typeof(WorkingTimesLocalType));
                        }
                        
                        ContentModelEntity IXMetaData.GetContentModel() {
                            return contentModel;
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (FromDate?, ToDate?)
                        /// </para>
                        /// </summary>
                        public partial class TimePeriodLocalType : XTypedElement, IXMetaData {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            [EditorBrowsable(EditorBrowsableState.Never)]
                            internal static readonly System.Xml.Linq.XName FromDateXName = System.Xml.Linq.XName.Get("FromDate", "http://schemas.microsoft.com/project/2007");
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            [EditorBrowsable(EditorBrowsableState.Never)]
                            internal static readonly System.Xml.Linq.XName ToDateXName = System.Xml.Linq.XName.Get("ToDate", "http://schemas.microsoft.com/project/2007");
                            
                            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TimePeriod", "http://schemas.microsoft.com/project/2007");
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;
                            
		public static explicit operator TimePeriodLocalType(XElement xe) { return XTypedServices.ToXTypedElement<TimePeriodLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                            
                            static TimePeriodLocalType() {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FromDateXName), new NamedContentModelEntity(ToDateXName));
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Regular expression: (FromDate?, ToDate?)
                            /// </para>
                            /// </summary>
                            public TimePeriodLocalType() {
                            }
                            
                            /// <summary>
                            /// <para>
                            /// The beginning of the exception time.
                            /// </para>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// <para>
                            /// Regular expression: (FromDate?, ToDate?)
                            /// </para>
                            /// </summary>
                            public virtual System.DateTime? FromDate {
                                get {
                                    XElement x = this.GetElement(FromDateXName);
                                    if ((x == null)) {
                                        return null;
                                    }
                                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                                }
                                set {
                                    this.SetElement(FromDateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                                }
                            }
                            
                            /// <summary>
                            /// <para>
                            /// The end of the exception time.
                            /// </para>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// <para>
                            /// Regular expression: (FromDate?, ToDate?)
                            /// </para>
                            /// </summary>
                            public virtual System.DateTime? ToDate {
                                get {
                                    XElement x = this.GetElement(ToDateXName);
                                    if ((x == null)) {
                                        return null;
                                    }
                                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                                }
                                set {
                                    this.SetElement(ToDateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                                get {
                                    return localElementDictionary;
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            System.Xml.Linq.XName IXMetaData.SchemaName {
                                get {
                                    return xName;
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin {
                                get {
                                    return SchemaOrigin.Fragment;
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager {
                                get {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }
                            
                            public override XTypedElement Clone() {
                                return XTypedServices.CloneXTypedElement<TimePeriodLocalType>(this);
                            }
                            
                            private static void BuildElementDictionary() {
                                localElementDictionary.Add(FromDateXName, typeof(System.DateTime));
                                localElementDictionary.Add(ToDateXName, typeof(System.DateTime));
                            }
                            
                            ContentModelEntity IXMetaData.GetContentModel() {
                                return contentModel;
                            }
                        }
                        
                        private class NameLocalType {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 512, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                            
                            private NameLocalType() {
                            }
                        }
                        
                        private class TypeLocalType {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                            1m,
                                            2m,
                                            3m,
                                            4m,
                                            5m,
                                            6m,
                                            7m,
                                            8m,
                                            9m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
                            
                            private TypeLocalType() {
                            }
                        }
                        
                        private class MonthItemLocalType {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                            0m,
                                            1m,
                                            2m,
                                            3m,
                                            4m,
                                            5m,
                                            6m,
                                            7m,
                                            8m,
                                            9m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
                            
                            private MonthItemLocalType() {
                            }
                        }
                        
                        private class MonthPositionLocalType {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                            0m,
                                            1m,
                                            2m,
                                            3m,
                                            4m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
                            
                            private MonthPositionLocalType() {
                            }
                        }
                        
                        private class MonthLocalType {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                            0m,
                                            1m,
                                            2m,
                                            3m,
                                            4m,
                                            5m,
                                            6m,
                                            7m,
                                            8m,
                                            9m,
                                            10m,
                                            11m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
                            
                            private MonthLocalType() {
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (WorkingTime*)
                        /// </para>
                        /// </summary>
                        public partial class WorkingTimesLocalType : XTypedElement, IXMetaData {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            [EditorBrowsable(EditorBrowsableState.Never)]
                            internal static readonly System.Xml.Linq.XName WorkingTimeXName = System.Xml.Linq.XName.Get("WorkingTime", "http://schemas.microsoft.com/project/2007");
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private XTypedList<WorkingTimeLocalType> WorkingTimeField;
                            
                            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("WorkingTimes", "http://schemas.microsoft.com/project/2007");
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;
                            
		public static explicit operator WorkingTimesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<WorkingTimesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                            
                            static WorkingTimesLocalType() {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(WorkingTimeXName));
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Regular expression: (WorkingTime*)
                            /// </para>
                            /// </summary>
                            public WorkingTimesLocalType() {
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Defines the working time during the weekday.
                            /// </para>
                            /// <para>
                            /// Occurrence: optional, repeating
                            /// </para>
                            /// <para>
                            /// Regular expression: (WorkingTime*)
                            /// </para>
                            /// </summary>
                            public virtual IList<Microsoft.Schemas.Project2007.Project.CalendarsLocalType.CalendarLocalType.ExceptionsLocalType.ExceptionLocalType.WorkingTimesLocalType.WorkingTimeLocalType> WorkingTime {
                                get {
                                    if ((this.WorkingTimeField == null)) {
                                        this.WorkingTimeField = new XTypedList<WorkingTimeLocalType>(this, LinqToXsdTypeManager.Instance, WorkingTimeXName);
                                    }
                                    return this.WorkingTimeField;
                                }
                                set {
                                    if ((value == null)) {
                                        this.WorkingTimeField = null;
                                    }
                                    else {
                                        if ((this.WorkingTimeField == null)) {
                                            this.WorkingTimeField = XTypedList<WorkingTimeLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, WorkingTimeXName);
                                        }
                                        else {
                                            XTypedServices.SetList<WorkingTimeLocalType>(this.WorkingTimeField, value);
                                        }
                                    }
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                                get {
                                    return localElementDictionary;
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            System.Xml.Linq.XName IXMetaData.SchemaName {
                                get {
                                    return xName;
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin {
                                get {
                                    return SchemaOrigin.Fragment;
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager {
                                get {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }
                            
                            public override XTypedElement Clone() {
                                return XTypedServices.CloneXTypedElement<WorkingTimesLocalType>(this);
                            }
                            
                            private static void BuildElementDictionary() {
                                localElementDictionary.Add(WorkingTimeXName, typeof(WorkingTimeLocalType));
                            }
                            
                            ContentModelEntity IXMetaData.GetContentModel() {
                                return contentModel;
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Regular expression: (FromTime?, ToTime?)
                            /// </para>
                            /// </summary>
                            public partial class WorkingTimeLocalType : XTypedElement, IXMetaData {
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                [EditorBrowsable(EditorBrowsableState.Never)]
                                internal static readonly System.Xml.Linq.XName FromTimeXName = System.Xml.Linq.XName.Get("FromTime", "http://schemas.microsoft.com/project/2007");
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                [EditorBrowsable(EditorBrowsableState.Never)]
                                internal static readonly System.Xml.Linq.XName ToTimeXName = System.Xml.Linq.XName.Get("ToTime", "http://schemas.microsoft.com/project/2007");
                                
                                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("WorkingTime", "http://schemas.microsoft.com/project/2007");
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                private static ContentModelEntity contentModel;
                                
		public static explicit operator WorkingTimeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<WorkingTimeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                                
                                static WorkingTimeLocalType() {
                                    BuildElementDictionary();
                                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FromTimeXName), new NamedContentModelEntity(ToTimeXName));
                                }
                                
                                /// <summary>
                                /// <para>
                                /// Regular expression: (FromTime?, ToTime?)
                                /// </para>
                                /// </summary>
                                public WorkingTimeLocalType() {
                                }
                                
                                /// <summary>
                                /// <para>
                                /// The beginning of the working time.
                                /// </para>
                                /// <para>
                                /// Occurrence: optional
                                /// </para>
                                /// <para>
                                /// Regular expression: (FromTime?, ToTime?)
                                /// </para>
                                /// </summary>
                                public virtual System.DateTime? FromTime {
                                    get {
                                        XElement x = this.GetElement(FromTimeXName);
                                        if ((x == null)) {
                                            return null;
                                        }
                                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                                    }
                                    set {
                                        this.SetElement(FromTimeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                                    }
                                }
                                
                                /// <summary>
                                /// <para>
                                /// The end of the working time.
                                /// </para>
                                /// <para>
                                /// Occurrence: optional
                                /// </para>
                                /// <para>
                                /// Regular expression: (FromTime?, ToTime?)
                                /// </para>
                                /// </summary>
                                public virtual System.DateTime? ToTime {
                                    get {
                                        XElement x = this.GetElement(ToTimeXName);
                                        if ((x == null)) {
                                            return null;
                                        }
                                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                                    }
                                    set {
                                        this.SetElement(ToTimeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
                                    }
                                }
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                                    get {
                                        return localElementDictionary;
                                    }
                                }
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                System.Xml.Linq.XName IXMetaData.SchemaName {
                                    get {
                                        return xName;
                                    }
                                }
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                SchemaOrigin IXMetaData.TypeOrigin {
                                    get {
                                        return SchemaOrigin.Fragment;
                                    }
                                }
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                ILinqToXsdTypeManager IXMetaData.TypeManager {
                                    get {
                                        return LinqToXsdTypeManager.Instance;
                                    }
                                }
                                
                                public override XTypedElement Clone() {
                                    return XTypedServices.CloneXTypedElement<WorkingTimeLocalType>(this);
                                }
                                
                                private static void BuildElementDictionary() {
                                    localElementDictionary.Add(FromTimeXName, typeof(System.DateTime));
                                    localElementDictionary.Add(ToTimeXName, typeof(System.DateTime));
                                }
                                
                                ContentModelEntity IXMetaData.GetContentModel() {
                                    return contentModel;
                                }
                            }
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (WorkWeek*)
                /// </para>
                /// </summary>
                public partial class WorkWeeksLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName WorkWeekXName = System.Xml.Linq.XName.Get("WorkWeek", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<WorkWeekLocalType> WorkWeekField;
                    
                    private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("WorkWeeks", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
		public static explicit operator WorkWeeksLocalType(XElement xe) { return XTypedServices.ToXTypedElement<WorkWeeksLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static WorkWeeksLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(WorkWeekXName));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (WorkWeek*)
                    /// </para>
                    /// </summary>
                    public WorkWeeksLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Defines an effective work week.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (WorkWeek*)
                    /// </para>
                    /// </summary>
                    public virtual IList<Microsoft.Schemas.Project2007.Project.CalendarsLocalType.CalendarLocalType.WorkWeeksLocalType.WorkWeekLocalType> WorkWeek {
                        get {
                            if ((this.WorkWeekField == null)) {
                                this.WorkWeekField = new XTypedList<WorkWeekLocalType>(this, LinqToXsdTypeManager.Instance, WorkWeekXName);
                            }
                            return this.WorkWeekField;
                        }
                        set {
                            if ((value == null)) {
                                this.WorkWeekField = null;
                            }
                            else {
                                if ((this.WorkWeekField == null)) {
                                    this.WorkWeekField = XTypedList<WorkWeekLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, WorkWeekXName);
                                }
                                else {
                                    XTypedServices.SetList<WorkWeekLocalType>(this.WorkWeekField, value);
                                }
                            }
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    System.Xml.Linq.XName IXMetaData.SchemaName {
                        get {
                            return xName;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<WorkWeeksLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(WorkWeekXName, typeof(WorkWeekLocalType));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (TimePeriod?, Name?, WeekDay*)
                    /// </para>
                    /// </summary>
                    public partial class WorkWeekLocalType : XTypedElement, IXMetaData {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName TimePeriodXName = System.Xml.Linq.XName.Get("TimePeriod", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName WeekDayXName = System.Xml.Linq.XName.Get("WeekDay", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private XTypedList<WeekDayLocalType> WeekDayField;
                        
                        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("WorkWeek", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;
                        
		public static explicit operator WorkWeekLocalType(XElement xe) { return XTypedServices.ToXTypedElement<WorkWeekLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                        
                        static WorkWeekLocalType() {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TimePeriodXName), new NamedContentModelEntity(NameXName), new NamedContentModelEntity(WeekDayXName));
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (TimePeriod?, Name?, WeekDay*)
                        /// </para>
                        /// </summary>
                        public WorkWeekLocalType() {
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Defines a contiguous set of exception days.
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (TimePeriod?, Name?, WeekDay*)
                        /// </para>
                        /// </summary>
                        public virtual TimePeriodLocalType TimePeriod {
                            get {
                                XElement x = this.GetElement(TimePeriodXName);
                                return ((TimePeriodLocalType)(x));
                            }
                            set {
                                this.SetElement(TimePeriodXName, value);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// The name of the effective week.
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (TimePeriod?, Name?, WeekDay*)
                        /// </para>
                        /// </summary>
                        public virtual string Name {
                            get {
                                XElement x = this.GetElement(NameXName);
                                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                            }
                            set {
                                if (value == null) {
                                    this.SetElement(NameXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                                }
                                else {
                                    this.SetElementWithValidation(NameXName, value, "Name", NameLocalType.TypeDefinition);
                                }
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// A weekday either defines regular days of the week or exception days in the calendar.
                        /// </para>
                        /// <para>
                        /// Occurrence: optional, repeating
                        /// </para>
                        /// <para>
                        /// Regular expression: (TimePeriod?, Name?, WeekDay*)
                        /// </para>
                        /// </summary>
                        public virtual IList<Microsoft.Schemas.Project2007.Project.CalendarsLocalType.CalendarLocalType.WorkWeeksLocalType.WorkWeekLocalType.WeekDayLocalType> WeekDay {
                            get {
                                if ((this.WeekDayField == null)) {
                                    this.WeekDayField = new XTypedList<WeekDayLocalType>(this, LinqToXsdTypeManager.Instance, WeekDayXName);
                                }
                                return this.WeekDayField;
                            }
                            set {
                                if ((value == null)) {
                                    this.WeekDayField = null;
                                }
                                else {
                                    if ((this.WeekDayField == null)) {
                                        this.WeekDayField = XTypedList<WeekDayLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, WeekDayXName);
                                    }
                                    else {
                                        XTypedServices.SetList<WeekDayLocalType>(this.WeekDayField, value);
                                    }
                                }
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                            get {
                                return localElementDictionary;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        System.Xml.Linq.XName IXMetaData.SchemaName {
                            get {
                                return xName;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin {
                            get {
                                return SchemaOrigin.Fragment;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager {
                            get {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }
                        
                        public override XTypedElement Clone() {
                            return XTypedServices.CloneXTypedElement<WorkWeekLocalType>(this);
                        }
                        
                        private static void BuildElementDictionary() {
                            localElementDictionary.Add(TimePeriodXName, typeof(TimePeriodLocalType));
                            localElementDictionary.Add(NameXName, typeof(string));
                            localElementDictionary.Add(WeekDayXName, typeof(WeekDayLocalType));
                        }
                        
                        ContentModelEntity IXMetaData.GetContentModel() {
                            return contentModel;
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (FromDate?, ToDate?)
                        /// </para>
                        /// </summary>
                        public partial class TimePeriodLocalType : XTypedElement, IXMetaData {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            [EditorBrowsable(EditorBrowsableState.Never)]
                            internal static readonly System.Xml.Linq.XName FromDateXName = System.Xml.Linq.XName.Get("FromDate", "http://schemas.microsoft.com/project/2007");
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            [EditorBrowsable(EditorBrowsableState.Never)]
                            internal static readonly System.Xml.Linq.XName ToDateXName = System.Xml.Linq.XName.Get("ToDate", "http://schemas.microsoft.com/project/2007");
                            
                            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TimePeriod", "http://schemas.microsoft.com/project/2007");
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;
                            
		public static explicit operator TimePeriodLocalType(XElement xe) { return XTypedServices.ToXTypedElement<TimePeriodLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                            
                            static TimePeriodLocalType() {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FromDateXName), new NamedContentModelEntity(ToDateXName));
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Regular expression: (FromDate?, ToDate?)
                            /// </para>
                            /// </summary>
                            public TimePeriodLocalType() {
                            }
                            
                            /// <summary>
                            /// <para>
                            /// The beginning of the exception time.
                            /// </para>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// <para>
                            /// Regular expression: (FromDate?, ToDate?)
                            /// </para>
                            /// </summary>
                            public virtual System.DateTime? FromDate {
                                get {
                                    XElement x = this.GetElement(FromDateXName);
                                    if ((x == null)) {
                                        return null;
                                    }
                                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                                }
                                set {
                                    this.SetElement(FromDateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                                }
                            }
                            
                            /// <summary>
                            /// <para>
                            /// The end of the exception time.
                            /// </para>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// <para>
                            /// Regular expression: (FromDate?, ToDate?)
                            /// </para>
                            /// </summary>
                            public virtual System.DateTime? ToDate {
                                get {
                                    XElement x = this.GetElement(ToDateXName);
                                    if ((x == null)) {
                                        return null;
                                    }
                                    return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                                }
                                set {
                                    this.SetElement(ToDateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                                get {
                                    return localElementDictionary;
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            System.Xml.Linq.XName IXMetaData.SchemaName {
                                get {
                                    return xName;
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin {
                                get {
                                    return SchemaOrigin.Fragment;
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager {
                                get {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }
                            
                            public override XTypedElement Clone() {
                                return XTypedServices.CloneXTypedElement<TimePeriodLocalType>(this);
                            }
                            
                            private static void BuildElementDictionary() {
                                localElementDictionary.Add(FromDateXName, typeof(System.DateTime));
                                localElementDictionary.Add(ToDateXName, typeof(System.DateTime));
                            }
                            
                            ContentModelEntity IXMetaData.GetContentModel() {
                                return contentModel;
                            }
                        }
                        
                        private class NameLocalType {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 512, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                            
                            private NameLocalType() {
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (DayType, DayWorking?)
                        /// </para>
                        /// </summary>
                        public partial class WeekDayLocalType : XTypedElement, IXMetaData {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            [EditorBrowsable(EditorBrowsableState.Never)]
                            internal static readonly System.Xml.Linq.XName DayTypeXName = System.Xml.Linq.XName.Get("DayType", "http://schemas.microsoft.com/project/2007");
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            [EditorBrowsable(EditorBrowsableState.Never)]
                            internal static readonly System.Xml.Linq.XName DayWorkingXName = System.Xml.Linq.XName.Get("DayWorking", "http://schemas.microsoft.com/project/2007");
                            
                            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("WeekDay", "http://schemas.microsoft.com/project/2007");
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            private static ContentModelEntity contentModel;
                            
		public static explicit operator WeekDayLocalType(XElement xe) { return XTypedServices.ToXTypedElement<WeekDayLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                            
                            static WeekDayLocalType() {
                                BuildElementDictionary();
                                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DayTypeXName), new NamedContentModelEntity(DayWorkingXName));
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Regular expression: (DayType, DayWorking?)
                            /// </para>
                            /// </summary>
                            public WeekDayLocalType() {
                            }
                            
                            /// <summary>
                            /// <para>
                            /// The type of day. Values are: 0=Exception, 1=Sunday, 2=Monday, 3=Tuesday, 4=Wednesday, 5=Thursday, 6=Friday, 7=Saturday.
                            /// </para>
                            /// <para>
                            /// Occurrence: required
                            /// </para>
                            /// <para>
                            /// Regular expression: (DayType, DayWorking?)
                            /// </para>
                            /// </summary>
                            public virtual decimal DayType {
                                get {
                                    XElement x = this.GetElement(DayTypeXName);
                                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                                }
                                set {
                                    this.SetElementWithValidation(DayTypeXName, value, "DayType", DayTypeLocalType.TypeDefinition);
                                }
                            }
                            
                            /// <summary>
                            /// <para>
                            /// Whether the specified date or day type is working.
                            /// </para>
                            /// <para>
                            /// Occurrence: optional
                            /// </para>
                            /// <para>
                            /// Regular expression: (DayType, DayWorking?)
                            /// </para>
                            /// </summary>
                            public virtual System.Boolean? DayWorking {
                                get {
                                    XElement x = this.GetElement(DayWorkingXName);
                                    if ((x == null)) {
                                        return null;
                                    }
                                    return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                                }
                                set {
                                    this.SetElement(DayWorkingXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                                get {
                                    return localElementDictionary;
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            System.Xml.Linq.XName IXMetaData.SchemaName {
                                get {
                                    return xName;
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            SchemaOrigin IXMetaData.TypeOrigin {
                                get {
                                    return SchemaOrigin.Fragment;
                                }
                            }
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            ILinqToXsdTypeManager IXMetaData.TypeManager {
                                get {
                                    return LinqToXsdTypeManager.Instance;
                                }
                            }
                            
                            public override XTypedElement Clone() {
                                return XTypedServices.CloneXTypedElement<WeekDayLocalType>(this);
                            }
                            
                            private static void BuildElementDictionary() {
                                localElementDictionary.Add(DayTypeXName, typeof(decimal));
                                localElementDictionary.Add(DayWorkingXName, typeof(bool));
                            }
                            
                            ContentModelEntity IXMetaData.GetContentModel() {
                                return contentModel;
                            }
                            
                            private class DayTypeLocalType {
                                
                                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                                0m,
                                                1m,
                                                2m,
                                                3m,
                                                4m,
                                                5m,
                                                6m,
                                                7m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
                                
                                private DayTypeLocalType() {
                                }
                            }
                        }
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Task*)
        /// </para>
        /// </summary>
        public partial class TasksLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName TaskXName = System.Xml.Linq.XName.Get("Task", "http://schemas.microsoft.com/project/2007");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<TaskLocalType> TaskField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Tasks", "http://schemas.microsoft.com/project/2007");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator TasksLocalType(XElement xe) { return XTypedServices.ToXTypedElement<TasksLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static TasksLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TaskXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Task*)
            /// </para>
            /// </summary>
            public TasksLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// There must be at least one task in each Tasks collection.
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Task*)
            /// </para>
            /// </summary>
            public virtual IList<Microsoft.Schemas.Project2007.Project.TasksLocalType.TaskLocalType> Task {
                get {
                    if ((this.TaskField == null)) {
                        this.TaskField = new XTypedList<TaskLocalType>(this, LinqToXsdTypeManager.Instance, TaskXName);
                    }
                    return this.TaskField;
                }
                set {
                    if ((value == null)) {
                        this.TaskField = null;
                    }
                    else {
                        if ((this.TaskField == null)) {
                            this.TaskField = XTypedList<TaskLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, TaskXName);
                        }
                        else {
                            XTypedServices.SetList<TaskLocalType>(this.TaskField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<TasksLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(TaskXName, typeof(TaskLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
            /// </para>
            /// </summary>
            public partial class TaskLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName UIDXName = System.Xml.Linq.XName.Get("UID", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName IDXName = System.Xml.Linq.XName.Get("ID", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName TypeXName = System.Xml.Linq.XName.Get("Type", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName IsNullXName = System.Xml.Linq.XName.Get("IsNull", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName CreateDateXName = System.Xml.Linq.XName.Get("CreateDate", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ContactXName = System.Xml.Linq.XName.Get("Contact", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName WBSXName = System.Xml.Linq.XName.Get("WBS", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName WBSLevelXName = System.Xml.Linq.XName.Get("WBSLevel", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName OutlineNumberXName = System.Xml.Linq.XName.Get("OutlineNumber", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName OutlineLevelXName = System.Xml.Linq.XName.Get("OutlineLevel", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName PriorityXName = System.Xml.Linq.XName.Get("Priority", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName StartXName = System.Xml.Linq.XName.Get("Start", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName FinishXName = System.Xml.Linq.XName.Get("Finish", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName DurationXName = System.Xml.Linq.XName.Get("Duration", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName DurationFormatXName = System.Xml.Linq.XName.Get("DurationFormat", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName WorkXName = System.Xml.Linq.XName.Get("Work", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName StopXName = System.Xml.Linq.XName.Get("Stop", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ResumeXName = System.Xml.Linq.XName.Get("Resume", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ResumeValidXName = System.Xml.Linq.XName.Get("ResumeValid", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName EffortDrivenXName = System.Xml.Linq.XName.Get("EffortDriven", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName RecurringXName = System.Xml.Linq.XName.Get("Recurring", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName OverAllocatedXName = System.Xml.Linq.XName.Get("OverAllocated", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName EstimatedXName = System.Xml.Linq.XName.Get("Estimated", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName MilestoneXName = System.Xml.Linq.XName.Get("Milestone", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName SummaryXName = System.Xml.Linq.XName.Get("Summary", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName CriticalXName = System.Xml.Linq.XName.Get("Critical", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName IsSubprojectXName = System.Xml.Linq.XName.Get("IsSubproject", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName IsSubprojectReadOnlyXName = System.Xml.Linq.XName.Get("IsSubprojectReadOnly", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName SubprojectNameXName = System.Xml.Linq.XName.Get("SubprojectName", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ExternalTaskXName = System.Xml.Linq.XName.Get("ExternalTask", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ExternalTaskProjectXName = System.Xml.Linq.XName.Get("ExternalTaskProject", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName EarlyStartXName = System.Xml.Linq.XName.Get("EarlyStart", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName EarlyFinishXName = System.Xml.Linq.XName.Get("EarlyFinish", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName LateStartXName = System.Xml.Linq.XName.Get("LateStart", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName LateFinishXName = System.Xml.Linq.XName.Get("LateFinish", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName StartVarianceXName = System.Xml.Linq.XName.Get("StartVariance", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName FinishVarianceXName = System.Xml.Linq.XName.Get("FinishVariance", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName WorkVarianceXName = System.Xml.Linq.XName.Get("WorkVariance", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName FreeSlackXName = System.Xml.Linq.XName.Get("FreeSlack", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName TotalSlackXName = System.Xml.Linq.XName.Get("TotalSlack", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName FixedCostXName = System.Xml.Linq.XName.Get("FixedCost", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName FixedCostAccrualXName = System.Xml.Linq.XName.Get("FixedCostAccrual", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName PercentCompleteXName = System.Xml.Linq.XName.Get("PercentComplete", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName PercentWorkCompleteXName = System.Xml.Linq.XName.Get("PercentWorkComplete", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName CostXName = System.Xml.Linq.XName.Get("Cost", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName OvertimeCostXName = System.Xml.Linq.XName.Get("OvertimeCost", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName OvertimeWorkXName = System.Xml.Linq.XName.Get("OvertimeWork", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ActualStartXName = System.Xml.Linq.XName.Get("ActualStart", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ActualFinishXName = System.Xml.Linq.XName.Get("ActualFinish", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ActualDurationXName = System.Xml.Linq.XName.Get("ActualDuration", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ActualCostXName = System.Xml.Linq.XName.Get("ActualCost", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ActualOvertimeCostXName = System.Xml.Linq.XName.Get("ActualOvertimeCost", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ActualWorkXName = System.Xml.Linq.XName.Get("ActualWork", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ActualOvertimeWorkXName = System.Xml.Linq.XName.Get("ActualOvertimeWork", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName RegularWorkXName = System.Xml.Linq.XName.Get("RegularWork", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName RemainingDurationXName = System.Xml.Linq.XName.Get("RemainingDuration", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName RemainingCostXName = System.Xml.Linq.XName.Get("RemainingCost", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName RemainingWorkXName = System.Xml.Linq.XName.Get("RemainingWork", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName RemainingOvertimeCostXName = System.Xml.Linq.XName.Get("RemainingOvertimeCost", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName RemainingOvertimeWorkXName = System.Xml.Linq.XName.Get("RemainingOvertimeWork", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ACWPXName = System.Xml.Linq.XName.Get("ACWP", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName CVXName = System.Xml.Linq.XName.Get("CV", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ConstraintTypeXName = System.Xml.Linq.XName.Get("ConstraintType", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName CalendarUIDXName = System.Xml.Linq.XName.Get("CalendarUID", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ConstraintDateXName = System.Xml.Linq.XName.Get("ConstraintDate", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName DeadlineXName = System.Xml.Linq.XName.Get("Deadline", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName LevelAssignmentsXName = System.Xml.Linq.XName.Get("LevelAssignments", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName LevelingCanSplitXName = System.Xml.Linq.XName.Get("LevelingCanSplit", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName LevelingDelayXName = System.Xml.Linq.XName.Get("LevelingDelay", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName LevelingDelayFormatXName = System.Xml.Linq.XName.Get("LevelingDelayFormat", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName PreLeveledStartXName = System.Xml.Linq.XName.Get("PreLeveledStart", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName PreLeveledFinishXName = System.Xml.Linq.XName.Get("PreLeveledFinish", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName HyperlinkXName = System.Xml.Linq.XName.Get("Hyperlink", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName HyperlinkAddressXName = System.Xml.Linq.XName.Get("HyperlinkAddress", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName HyperlinkSubAddressXName = System.Xml.Linq.XName.Get("HyperlinkSubAddress", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName IgnoreResourceCalendarXName = System.Xml.Linq.XName.Get("IgnoreResourceCalendar", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName NotesXName = System.Xml.Linq.XName.Get("Notes", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName HideBarXName = System.Xml.Linq.XName.Get("HideBar", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName RollupXName = System.Xml.Linq.XName.Get("Rollup", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName BCWSXName = System.Xml.Linq.XName.Get("BCWS", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName BCWPXName = System.Xml.Linq.XName.Get("BCWP", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName PhysicalPercentCompleteXName = System.Xml.Linq.XName.Get("PhysicalPercentComplete", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName EarnedValueMethodXName = System.Xml.Linq.XName.Get("EarnedValueMethod", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName PredecessorLinkXName = System.Xml.Linq.XName.Get("PredecessorLink", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<PredecessorLinkLocalType> PredecessorLinkField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ActualWorkProtectedXName = System.Xml.Linq.XName.Get("ActualWorkProtected", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ActualOvertimeWorkProtectedXName = System.Xml.Linq.XName.Get("ActualOvertimeWorkProtected", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ExtendedAttributeXName = System.Xml.Linq.XName.Get("ExtendedAttribute", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<ExtendedAttributeLocalType> ExtendedAttributeField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName BaselineXName = System.Xml.Linq.XName.Get("Baseline", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<BaselineLocalType> BaselineField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName OutlineCodeXName = System.Xml.Linq.XName.Get("OutlineCode", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<OutlineCodeLocalType> OutlineCodeField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName IsPublishedXName = System.Xml.Linq.XName.Get("IsPublished", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName StatusManagerXName = System.Xml.Linq.XName.Get("StatusManager", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName CommitmentStartXName = System.Xml.Linq.XName.Get("CommitmentStart", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName CommitmentFinishXName = System.Xml.Linq.XName.Get("CommitmentFinish", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName CommitmentTypeXName = System.Xml.Linq.XName.Get("CommitmentType", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName TimephasedDataXName = System.Xml.Linq.XName.Get("TimephasedData", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<TimephasedDataType> TimephasedDataField;
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Task", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator TaskLocalType(XElement xe) { return XTypedServices.ToXTypedElement<TaskLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static TaskLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(UIDXName), new NamedContentModelEntity(IDXName), new NamedContentModelEntity(NameXName), new NamedContentModelEntity(TypeXName), new NamedContentModelEntity(IsNullXName), new NamedContentModelEntity(CreateDateXName), new NamedContentModelEntity(ContactXName), new NamedContentModelEntity(WBSXName), new NamedContentModelEntity(WBSLevelXName), new NamedContentModelEntity(OutlineNumberXName), new NamedContentModelEntity(OutlineLevelXName), new NamedContentModelEntity(PriorityXName), new NamedContentModelEntity(StartXName), new NamedContentModelEntity(FinishXName), new NamedContentModelEntity(DurationXName), new NamedContentModelEntity(DurationFormatXName), new NamedContentModelEntity(WorkXName), new NamedContentModelEntity(StopXName), new NamedContentModelEntity(ResumeXName), new NamedContentModelEntity(ResumeValidXName), new NamedContentModelEntity(EffortDrivenXName), new NamedContentModelEntity(RecurringXName), new NamedContentModelEntity(OverAllocatedXName), new NamedContentModelEntity(EstimatedXName), new NamedContentModelEntity(MilestoneXName), new NamedContentModelEntity(SummaryXName), new NamedContentModelEntity(CriticalXName), new NamedContentModelEntity(IsSubprojectXName), new NamedContentModelEntity(IsSubprojectReadOnlyXName), new NamedContentModelEntity(SubprojectNameXName), new NamedContentModelEntity(ExternalTaskXName), new NamedContentModelEntity(ExternalTaskProjectXName), new NamedContentModelEntity(EarlyStartXName), new NamedContentModelEntity(EarlyFinishXName), new NamedContentModelEntity(LateStartXName), new NamedContentModelEntity(LateFinishXName), new NamedContentModelEntity(StartVarianceXName), new NamedContentModelEntity(FinishVarianceXName), new NamedContentModelEntity(WorkVarianceXName), new NamedContentModelEntity(FreeSlackXName), new NamedContentModelEntity(TotalSlackXName), new NamedContentModelEntity(FixedCostXName), new NamedContentModelEntity(FixedCostAccrualXName), new NamedContentModelEntity(PercentCompleteXName), new NamedContentModelEntity(PercentWorkCompleteXName), new NamedContentModelEntity(CostXName), new NamedContentModelEntity(OvertimeCostXName), new NamedContentModelEntity(OvertimeWorkXName), new NamedContentModelEntity(ActualStartXName), new NamedContentModelEntity(ActualFinishXName), new NamedContentModelEntity(ActualDurationXName), new NamedContentModelEntity(ActualCostXName), new NamedContentModelEntity(ActualOvertimeCostXName), new NamedContentModelEntity(ActualWorkXName), new NamedContentModelEntity(ActualOvertimeWorkXName), new NamedContentModelEntity(RegularWorkXName), new NamedContentModelEntity(RemainingDurationXName), new NamedContentModelEntity(RemainingCostXName), new NamedContentModelEntity(RemainingWorkXName), new NamedContentModelEntity(RemainingOvertimeCostXName), new NamedContentModelEntity(RemainingOvertimeWorkXName), new NamedContentModelEntity(ACWPXName), new NamedContentModelEntity(CVXName), new NamedContentModelEntity(ConstraintTypeXName), new NamedContentModelEntity(CalendarUIDXName), new NamedContentModelEntity(ConstraintDateXName), new NamedContentModelEntity(DeadlineXName), new NamedContentModelEntity(LevelAssignmentsXName), new NamedContentModelEntity(LevelingCanSplitXName), new NamedContentModelEntity(LevelingDelayXName), new NamedContentModelEntity(LevelingDelayFormatXName), new NamedContentModelEntity(PreLeveledStartXName), new NamedContentModelEntity(PreLeveledFinishXName), new NamedContentModelEntity(HyperlinkXName), new NamedContentModelEntity(HyperlinkAddressXName), new NamedContentModelEntity(HyperlinkSubAddressXName), new NamedContentModelEntity(IgnoreResourceCalendarXName), new NamedContentModelEntity(NotesXName), new NamedContentModelEntity(HideBarXName), new NamedContentModelEntity(RollupXName), new NamedContentModelEntity(BCWSXName), new NamedContentModelEntity(BCWPXName), new NamedContentModelEntity(PhysicalPercentCompleteXName), new NamedContentModelEntity(EarnedValueMethodXName), new NamedContentModelEntity(PredecessorLinkXName), new NamedContentModelEntity(ActualWorkProtectedXName), new NamedContentModelEntity(ActualOvertimeWorkProtectedXName), new NamedContentModelEntity(ExtendedAttributeXName), new NamedContentModelEntity(BaselineXName), new NamedContentModelEntity(OutlineCodeXName), new NamedContentModelEntity(IsPublishedXName), new NamedContentModelEntity(StatusManagerXName), new NamedContentModelEntity(CommitmentStartXName), new NamedContentModelEntity(CommitmentFinishXName), new NamedContentModelEntity(CommitmentTypeXName), new NamedContentModelEntity(TimephasedDataXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public TaskLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// The unique ID of the task.
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual decimal UID {
                    get {
                        XElement x = this.GetElement(UIDXName);
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        this.SetElement(UIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The position identifier of the task within the list of tasks.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? ID {
                    get {
                        XElement x = this.GetElement(IDXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        this.SetElement(IDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The name of the task.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual string Name {
                    get {
                        XElement x = this.GetElement(NameXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(NameXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(NameXName, value, "Name", NameLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// The type of task. Values are: 0=Fixed Units, 1=Fixed Duration, 2=Fixed Work.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? Type {
                    get {
                        XElement x = this.GetElement(TypeXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(TypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(TypeXName, value, "Type", TypeLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether the task is null.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Boolean? IsNull {
                    get {
                        XElement x = this.GetElement(IsNullXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(IsNullXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The date that the task was created.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.DateTime? CreateDate {
                    get {
                        XElement x = this.GetElement(CreateDateXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                    set {
                        this.SetElement(CreateDateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The contact person for the task.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual string Contact {
                    get {
                        XElement x = this.GetElement(ContactXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(ContactXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(ContactXName, value, "Contact", ContactLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// The work breakdown structure code of the task.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual string WBS {
                    get {
                        XElement x = this.GetElement(WBSXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(WBSXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The rightmost WBS level of the task. 
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual string WBSLevel {
                    get {
                        XElement x = this.GetElement(WBSLevelXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(WBSLevelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The outline number of the task.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual string OutlineNumber {
                    get {
                        XElement x = this.GetElement(OutlineNumberXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(OutlineNumberXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(OutlineNumberXName, value, "OutlineNumber", OutlineNumberLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// The outline level of the task.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? OutlineLevel {
                    get {
                        XElement x = this.GetElement(OutlineLevelXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        this.SetElement(OutlineLevelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The priority of the task from 0 to 1000.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? Priority {
                    get {
                        XElement x = this.GetElement(PriorityXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        this.SetElement(PriorityXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The scheduled start date of the task.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.DateTime? Start {
                    get {
                        XElement x = this.GetElement(StartXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                    set {
                        this.SetElement(StartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The scheduled finish date of the task.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.DateTime? Finish {
                    get {
                        XElement x = this.GetElement(FinishXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                    set {
                        this.SetElement(FinishXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The planned duration of the task.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.TimeSpan? Duration {
                    get {
                        XElement x = this.GetElement(DurationXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                    set {
                        this.SetElement(DurationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The format for expressing the Duration of the Task.  Values are: 3=m, 4=em, 5=h, 6=eh, 7=d, 8=ed, 9=w, 10=ew, 11=mo, 12=emo, 19=%, 20=e%, 21=null, 35=m?, 36=em?, 37=h?, 38=eh?, 39=d?, 40=ed?, 41=w?, 42=ew?, 43=mo?, 44=emo?, 51=%?, 52=e%? and 53=null.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? DurationFormat {
                    get {
                        XElement x = this.GetElement(DurationFormatXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(DurationFormatXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(DurationFormatXName, value, "DurationFormat", DurationFormatLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// The amount of scheduled work for the task.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.TimeSpan? Work {
                    get {
                        XElement x = this.GetElement(WorkXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                    set {
                        this.SetElement(WorkXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The date that the task was stopped.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.DateTime? Stop {
                    get {
                        XElement x = this.GetElement(StopXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                    set {
                        this.SetElement(StopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The date that the task resumed.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.DateTime? Resume {
                    get {
                        XElement x = this.GetElement(ResumeXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                    set {
                        this.SetElement(ResumeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether the task can be resumed.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Boolean? ResumeValid {
                    get {
                        XElement x = this.GetElement(ResumeValidXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(ResumeValidXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether the task is effort-driven.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Boolean? EffortDriven {
                    get {
                        XElement x = this.GetElement(EffortDrivenXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(EffortDrivenXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether the task is a recurring task.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Boolean? Recurring {
                    get {
                        XElement x = this.GetElement(RecurringXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(RecurringXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether the task is overallocated. This element is informational only.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Boolean? OverAllocated {
                    get {
                        XElement x = this.GetElement(OverAllocatedXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(OverAllocatedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether the task is estimated.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Boolean? Estimated {
                    get {
                        XElement x = this.GetElement(EstimatedXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(EstimatedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether the task is a milestone.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Boolean? Milestone {
                    get {
                        XElement x = this.GetElement(MilestoneXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(MilestoneXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether the task is a summary task.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Boolean? Summary {
                    get {
                        XElement x = this.GetElement(SummaryXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(SummaryXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether the task is in the critical chain.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Boolean? Critical {
                    get {
                        XElement x = this.GetElement(CriticalXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(CriticalXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether the task is an inserted project.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Boolean? IsSubproject {
                    get {
                        XElement x = this.GetElement(IsSubprojectXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(IsSubprojectXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether the inserted project is read-only.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Boolean? IsSubprojectReadOnly {
                    get {
                        XElement x = this.GetElement(IsSubprojectReadOnlyXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(IsSubprojectReadOnlyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The source location of the inserted project.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual string SubprojectName {
                    get {
                        XElement x = this.GetElement(SubprojectNameXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(SubprojectNameXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(SubprojectNameXName, value, "SubprojectName", SubprojectNameLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether the task is external.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Boolean? ExternalTask {
                    get {
                        XElement x = this.GetElement(ExternalTaskXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(ExternalTaskXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The source location and task identifier of the external task.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual string ExternalTaskProject {
                    get {
                        XElement x = this.GetElement(ExternalTaskProjectXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(ExternalTaskProjectXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(ExternalTaskProjectXName, value, "ExternalTaskProject", ExternalTaskProjectLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// The early start date of the task.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.DateTime? EarlyStart {
                    get {
                        XElement x = this.GetElement(EarlyStartXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                    set {
                        this.SetElement(EarlyStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The early finish date of the task.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.DateTime? EarlyFinish {
                    get {
                        XElement x = this.GetElement(EarlyFinishXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                    set {
                        this.SetElement(EarlyFinishXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The late start date of the task.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.DateTime? LateStart {
                    get {
                        XElement x = this.GetElement(LateStartXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                    set {
                        this.SetElement(LateStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The late finish date of the task.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.DateTime? LateFinish {
                    get {
                        XElement x = this.GetElement(LateFinishXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                    set {
                        this.SetElement(LateFinishXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The variance of the task start date from the baseline start date as minutes x 1000.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? StartVariance {
                    get {
                        XElement x = this.GetElement(StartVarianceXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        this.SetElement(StartVarianceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The variance of the task finish date from the baseline finish date as minutes x 1000.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? FinishVariance {
                    get {
                        XElement x = this.GetElement(FinishVarianceXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        this.SetElement(FinishVarianceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The variance of task work from the baseline task work as minutes x 1000.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Single? WorkVariance {
                    get {
                        XElement x = this.GetElement(WorkVarianceXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                    set {
                        this.SetElement(WorkVarianceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The amount of free slack.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? FreeSlack {
                    get {
                        XElement x = this.GetElement(FreeSlackXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        this.SetElement(FreeSlackXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The amount of total slack.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? TotalSlack {
                    get {
                        XElement x = this.GetElement(TotalSlackXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        this.SetElement(TotalSlackXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The fixed cost of the task.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Single? FixedCost {
                    get {
                        XElement x = this.GetElement(FixedCostXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                    set {
                        this.SetElement(FixedCostXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// How the fixed cost is accrued against the task. Values are: 1=Start, 2=Prorated and 3=End.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual string FixedCostAccrual {
                    get {
                        XElement x = this.GetElement(FixedCostAccrualXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(FixedCostAccrualXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(FixedCostAccrualXName, value, "FixedCostAccrual", FixedCostAccrualLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// The percentage of the task duration completed.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? PercentComplete {
                    get {
                        XElement x = this.GetElement(PercentCompleteXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        this.SetElement(PercentCompleteXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The percentage of the task work completed.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? PercentWorkComplete {
                    get {
                        XElement x = this.GetElement(PercentWorkCompleteXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        this.SetElement(PercentWorkCompleteXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The projected or scheduled cost of the task.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? Cost {
                    get {
                        XElement x = this.GetElement(CostXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElement(CostXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The sum of the actual and remaining overtime cost of the task.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? OvertimeCost {
                    get {
                        XElement x = this.GetElement(OvertimeCostXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElement(OvertimeCostXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The amount of overtime work scheduled for the task.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.TimeSpan? OvertimeWork {
                    get {
                        XElement x = this.GetElement(OvertimeWorkXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                    set {
                        this.SetElement(OvertimeWorkXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The actual start date of the task.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.DateTime? ActualStart {
                    get {
                        XElement x = this.GetElement(ActualStartXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                    set {
                        this.SetElement(ActualStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The actual finish date of the task.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.DateTime? ActualFinish {
                    get {
                        XElement x = this.GetElement(ActualFinishXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                    set {
                        this.SetElement(ActualFinishXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The actual duration of the task.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.TimeSpan? ActualDuration {
                    get {
                        XElement x = this.GetElement(ActualDurationXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                    set {
                        this.SetElement(ActualDurationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The actual cost of the task.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? ActualCost {
                    get {
                        XElement x = this.GetElement(ActualCostXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElement(ActualCostXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The actual overtime cost of the task.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? ActualOvertimeCost {
                    get {
                        XElement x = this.GetElement(ActualOvertimeCostXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElement(ActualOvertimeCostXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The actual work for the task.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.TimeSpan? ActualWork {
                    get {
                        XElement x = this.GetElement(ActualWorkXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                    set {
                        this.SetElement(ActualWorkXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The actual overtime work for the task.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.TimeSpan? ActualOvertimeWork {
                    get {
                        XElement x = this.GetElement(ActualOvertimeWorkXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                    set {
                        this.SetElement(ActualOvertimeWorkXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The amount of non-overtime work scheduled for the task.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.TimeSpan? RegularWork {
                    get {
                        XElement x = this.GetElement(RegularWorkXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                    set {
                        this.SetElement(RegularWorkXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The amount of time required to complete the unfinished portion of the task.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.TimeSpan? RemainingDuration {
                    get {
                        XElement x = this.GetElement(RemainingDurationXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                    set {
                        this.SetElement(RemainingDurationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The remaining projected cost of completing the task.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? RemainingCost {
                    get {
                        XElement x = this.GetElement(RemainingCostXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElement(RemainingCostXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The remaining work scheduled to complete the task.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.TimeSpan? RemainingWork {
                    get {
                        XElement x = this.GetElement(RemainingWorkXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                    set {
                        this.SetElement(RemainingWorkXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The remaining overtime cost projected to finish the task.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? RemainingOvertimeCost {
                    get {
                        XElement x = this.GetElement(RemainingOvertimeCostXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElement(RemainingOvertimeCostXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The remaining overtime work scheduled to finish the task.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.TimeSpan? RemainingOvertimeWork {
                    get {
                        XElement x = this.GetElement(RemainingOvertimeWorkXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                    set {
                        this.SetElement(RemainingOvertimeWorkXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The actual cost of work performed on the task to-date.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Single? ACWP {
                    get {
                        XElement x = this.GetElement(ACWPXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                    set {
                        this.SetElement(ACWPXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The earned value cost variance.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Single? CV {
                    get {
                        XElement x = this.GetElement(CVXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                    set {
                        this.SetElement(CVXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The constraint on the start or finish date of the task. Values are: 0=As Soon As Possible, 1=As Late As Possible, 2=Must Start On, 3=Must Finish On, 4=Start No Earlier Than, 5=Start No Later Than, 6=Finish No Earlier Than and 7=Finish No Later Than.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? ConstraintType {
                    get {
                        XElement x = this.GetElement(ConstraintTypeXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(ConstraintTypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(ConstraintTypeXName, value, "ConstraintType", ConstraintTypeLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// The task calendar.Refers to a valid UID in the Calendars element of the Microsoft Project XML Schema.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? CalendarUID {
                    get {
                        XElement x = this.GetElement(CalendarUIDXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        this.SetElement(CalendarUIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The date argument for the task constraint type.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.DateTime? ConstraintDate {
                    get {
                        XElement x = this.GetElement(ConstraintDateXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                    set {
                        this.SetElement(ConstraintDateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The deadline for the task to be completed.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.DateTime? Deadline {
                    get {
                        XElement x = this.GetElement(DeadlineXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                    set {
                        this.SetElement(DeadlineXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether leveling can adjust assignments.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Boolean? LevelAssignments {
                    get {
                        XElement x = this.GetElement(LevelAssignmentsXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(LevelAssignmentsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether leveling can split the task.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Boolean? LevelingCanSplit {
                    get {
                        XElement x = this.GetElement(LevelingCanSplitXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(LevelingCanSplitXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The delay caused by leveling the task.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? LevelingDelay {
                    get {
                        XElement x = this.GetElement(LevelingDelayXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        this.SetElement(LevelingDelayXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The format for expressing the duration of the delay.  Values are: 3=m, 4=em, 5=h, 6=eh, 7=d, 8=ed, 9=w, 10=ew, 11=mo, 12=emo, 19=%, 20=e%, 21=null, 35=m?, 36=em?, 37=h?, 38=eh?, 39=d?, 40=ed?, 41=w?, 42=ew?, 43=mo?, 44=emo?, 51=%?, 52=e%? and 53=null.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? LevelingDelayFormat {
                    get {
                        XElement x = this.GetElement(LevelingDelayFormatXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(LevelingDelayFormatXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(LevelingDelayFormatXName, value, "LevelingDelayFormat", LevelingDelayFormatLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// The start date of the task before it was leveled.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.DateTime? PreLeveledStart {
                    get {
                        XElement x = this.GetElement(PreLeveledStartXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                    set {
                        this.SetElement(PreLeveledStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The finish date of the task before it was leveled.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.DateTime? PreLeveledFinish {
                    get {
                        XElement x = this.GetElement(PreLeveledFinishXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                    set {
                        this.SetElement(PreLeveledFinishXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The title of the hyperlink associated with the task.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual string Hyperlink {
                    get {
                        XElement x = this.GetElement(HyperlinkXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(HyperlinkXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(HyperlinkXName, value, "Hyperlink", HyperlinkLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// The hyperlink associated with the task.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual string HyperlinkAddress {
                    get {
                        XElement x = this.GetElement(HyperlinkAddressXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(HyperlinkAddressXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(HyperlinkAddressXName, value, "HyperlinkAddress", HyperlinkAddressLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// The document bookmark of the hyperlink associated with the task.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual string HyperlinkSubAddress {
                    get {
                        XElement x = this.GetElement(HyperlinkSubAddressXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(HyperlinkSubAddressXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(HyperlinkSubAddressXName, value, "HyperlinkSubAddress", HyperlinkSubAddressLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether the task ignores the resource calendar.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Boolean? IgnoreResourceCalendar {
                    get {
                        XElement x = this.GetElement(IgnoreResourceCalendarXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(IgnoreResourceCalendarXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The text notes associated with the task.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual string Notes {
                    get {
                        XElement x = this.GetElement(NotesXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(NotesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether the GANTT bar of the task is hidden when displayed in Microsoft Project.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Boolean? HideBar {
                    get {
                        XElement x = this.GetElement(HideBarXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(HideBarXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether the task is rolled up.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Boolean? Rollup {
                    get {
                        XElement x = this.GetElement(RollupXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(RollupXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The budgeted cost of work scheduled for the task.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Single? BCWS {
                    get {
                        XElement x = this.GetElement(BCWSXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                    set {
                        this.SetElement(BCWSXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The budgeted cost of work performed on the task to-date.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Single? BCWP {
                    get {
                        XElement x = this.GetElement(BCWPXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                    set {
                        this.SetElement(BCWPXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The percentage complete value entered by the Project Manager.  This can be used as an alternative for calculating BCWP.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? PhysicalPercentComplete {
                    get {
                        XElement x = this.GetElement(PhysicalPercentCompleteXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        this.SetElement(PhysicalPercentCompleteXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The method for calculating earned value. Values are: 0=Percent Complete, 1=Physical Percent Complete.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? EarnedValueMethod {
                    get {
                        XElement x = this.GetElement(EarnedValueMethodXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(EarnedValueMethodXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(EarnedValueMethodXName, value, "EarnedValueMethod", EarnedValueMethodLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Defines the predecessor task of the task that contains it.
                /// </para>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual IList<Microsoft.Schemas.Project2007.Project.TasksLocalType.TaskLocalType.PredecessorLinkLocalType> PredecessorLink {
                    get {
                        if ((this.PredecessorLinkField == null)) {
                            this.PredecessorLinkField = new XTypedList<PredecessorLinkLocalType>(this, LinqToXsdTypeManager.Instance, PredecessorLinkXName);
                        }
                        return this.PredecessorLinkField;
                    }
                    set {
                        if ((value == null)) {
                            this.PredecessorLinkField = null;
                        }
                        else {
                            if ((this.PredecessorLinkField == null)) {
                                this.PredecessorLinkField = XTypedList<PredecessorLinkLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PredecessorLinkXName);
                            }
                            else {
                                XTypedServices.SetList<PredecessorLinkLocalType>(this.PredecessorLinkField, value);
                            }
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// The duration through which actual work is protected.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.TimeSpan? ActualWorkProtected {
                    get {
                        XElement x = this.GetElement(ActualWorkProtectedXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                    set {
                        this.SetElement(ActualWorkProtectedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The duration through which actual overtime work is protected.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.TimeSpan? ActualOvertimeWorkProtected {
                    get {
                        XElement x = this.GetElement(ActualOvertimeWorkProtectedXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                    set {
                        this.SetElement(ActualOvertimeWorkProtectedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The value of an extended attribute.  Two pieces of data are necessary - a pointer back to the extended attribute table which is specified either by the unique ID or the Field ID, and the value which is specified either with the value, or a pointer back to the value list.
                /// </para>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual IList<Microsoft.Schemas.Project2007.Project.TasksLocalType.TaskLocalType.ExtendedAttributeLocalType> ExtendedAttribute {
                    get {
                        if ((this.ExtendedAttributeField == null)) {
                            this.ExtendedAttributeField = new XTypedList<ExtendedAttributeLocalType>(this, LinqToXsdTypeManager.Instance, ExtendedAttributeXName);
                        }
                        return this.ExtendedAttributeField;
                    }
                    set {
                        if ((value == null)) {
                            this.ExtendedAttributeField = null;
                        }
                        else {
                            if ((this.ExtendedAttributeField == null)) {
                                this.ExtendedAttributeField = XTypedList<ExtendedAttributeLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ExtendedAttributeXName);
                            }
                            else {
                                XTypedServices.SetList<ExtendedAttributeLocalType>(this.ExtendedAttributeField, value);
                            }
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// The collection of baseline values of the task.
                /// </para>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual IList<Microsoft.Schemas.Project2007.Project.TasksLocalType.TaskLocalType.BaselineLocalType> Baseline {
                    get {
                        if ((this.BaselineField == null)) {
                            this.BaselineField = new XTypedList<BaselineLocalType>(this, LinqToXsdTypeManager.Instance, BaselineXName);
                        }
                        return this.BaselineField;
                    }
                    set {
                        if ((value == null)) {
                            this.BaselineField = null;
                        }
                        else {
                            if ((this.BaselineField == null)) {
                                this.BaselineField = XTypedList<BaselineLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, BaselineXName);
                            }
                            else {
                                XTypedServices.SetList<BaselineLocalType>(this.BaselineField, value);
                            }
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// The value of an outline code.  Two pieces of data are necessary - a pointer to the outline code table that is specified by the FieldID, and the value that is specified either by the ValueID or ValueGUID pointer to the value list.
                /// </para>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual IList<Microsoft.Schemas.Project2007.Project.TasksLocalType.TaskLocalType.OutlineCodeLocalType> OutlineCode {
                    get {
                        if ((this.OutlineCodeField == null)) {
                            this.OutlineCodeField = new XTypedList<OutlineCodeLocalType>(this, LinqToXsdTypeManager.Instance, OutlineCodeXName);
                        }
                        return this.OutlineCodeField;
                    }
                    set {
                        if ((value == null)) {
                            this.OutlineCodeField = null;
                        }
                        else {
                            if ((this.OutlineCodeField == null)) {
                                this.OutlineCodeField = XTypedList<OutlineCodeLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, OutlineCodeXName);
                            }
                            else {
                                XTypedServices.SetList<OutlineCodeLocalType>(this.OutlineCodeField, value);
                            }
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether the task is published.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Boolean? IsPublished {
                    get {
                        XElement x = this.GetElement(IsPublishedXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(IsPublishedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The name of the task status manager.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual string StatusManager {
                    get {
                        XElement x = this.GetElement(StatusManagerXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(StatusManagerXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The start date of the deliverable.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.DateTime? CommitmentStart {
                    get {
                        XElement x = this.GetElement(CommitmentStartXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                    set {
                        this.SetElement(CommitmentStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The finish date of the deliverable.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.DateTime? CommitmentFinish {
                    get {
                        XElement x = this.GetElement(CommitmentFinishXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                    set {
                        this.SetElement(CommitmentFinishXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether the task has an associated deliverable or a dependency on an associated deliverable. Values are: 0=The task has no deliverable or dependency on a deliverable, 1=The task has an associated deliverable, 2=The task has a dependency on an associated deliverable.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? CommitmentType {
                    get {
                        XElement x = this.GetElement(CommitmentTypeXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(CommitmentTypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(CommitmentTypeXName, value, "CommitmentType", CommitmentTypeLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// The time phased data block associated with the task.
                /// </para>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, CreateDate?, Contact?, WBS?, WBSLevel?, OutlineNumber?, OutlineLevel?, Priority?, Start?, Finish?, Duration?, DurationFormat?, Work?, Stop?, Resume?, ResumeValid?, EffortDriven?, Recurring?, OverAllocated?, Estimated?, Milestone?, Summary?, Critical?, IsSubproject?, IsSubprojectReadOnly?, SubprojectName?, ExternalTask?, ExternalTaskProject?, EarlyStart?, EarlyFinish?, LateStart?, LateFinish?, StartVariance?, FinishVariance?, WorkVariance?, FreeSlack?, TotalSlack?, FixedCost?, FixedCostAccrual?, PercentComplete?, PercentWorkComplete?, Cost?, OvertimeCost?, OvertimeWork?, ActualStart?, ActualFinish?, ActualDuration?, ActualCost?, ActualOvertimeCost?, ActualWork?, ActualOvertimeWork?, RegularWork?, RemainingDuration?, RemainingCost?, RemainingWork?, RemainingOvertimeCost?, RemainingOvertimeWork?, ACWP?, CV?, ConstraintType?, CalendarUID?, ConstraintDate?, Deadline?, LevelAssignments?, LevelingCanSplit?, LevelingDelay?, LevelingDelayFormat?, PreLeveledStart?, PreLeveledFinish?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, IgnoreResourceCalendar?, Notes?, HideBar?, Rollup?, BCWS?, BCWP?, PhysicalPercentComplete?, EarnedValueMethod?, PredecessorLink*, ActualWorkProtected?, ActualOvertimeWorkProtected?, ExtendedAttribute*, Baseline*, OutlineCode*, IsPublished?, StatusManager?, CommitmentStart?, CommitmentFinish?, CommitmentType?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual IList<TimephasedDataType> TimephasedData {
                    get {
                        if ((this.TimephasedDataField == null)) {
                            this.TimephasedDataField = new XTypedList<TimephasedDataType>(this, LinqToXsdTypeManager.Instance, TimephasedDataXName);
                        }
                        return this.TimephasedDataField;
                    }
                    set {
                        if ((value == null)) {
                            this.TimephasedDataField = null;
                        }
                        else {
                            if ((this.TimephasedDataField == null)) {
                                this.TimephasedDataField = XTypedList<TimephasedDataType>.Initialize(this, LinqToXsdTypeManager.Instance, value, TimephasedDataXName);
                            }
                            else {
                                XTypedServices.SetList<TimephasedDataType>(this.TimephasedDataField, value);
                            }
                        }
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<TaskLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(UIDXName, typeof(decimal));
                    localElementDictionary.Add(IDXName, typeof(decimal));
                    localElementDictionary.Add(NameXName, typeof(string));
                    localElementDictionary.Add(TypeXName, typeof(decimal));
                    localElementDictionary.Add(IsNullXName, typeof(bool));
                    localElementDictionary.Add(CreateDateXName, typeof(System.DateTime));
                    localElementDictionary.Add(ContactXName, typeof(string));
                    localElementDictionary.Add(WBSXName, typeof(string));
                    localElementDictionary.Add(WBSLevelXName, typeof(string));
                    localElementDictionary.Add(OutlineNumberXName, typeof(string));
                    localElementDictionary.Add(OutlineLevelXName, typeof(decimal));
                    localElementDictionary.Add(PriorityXName, typeof(decimal));
                    localElementDictionary.Add(StartXName, typeof(System.DateTime));
                    localElementDictionary.Add(FinishXName, typeof(System.DateTime));
                    localElementDictionary.Add(DurationXName, typeof(System.TimeSpan));
                    localElementDictionary.Add(DurationFormatXName, typeof(decimal));
                    localElementDictionary.Add(WorkXName, typeof(System.TimeSpan));
                    localElementDictionary.Add(StopXName, typeof(System.DateTime));
                    localElementDictionary.Add(ResumeXName, typeof(System.DateTime));
                    localElementDictionary.Add(ResumeValidXName, typeof(bool));
                    localElementDictionary.Add(EffortDrivenXName, typeof(bool));
                    localElementDictionary.Add(RecurringXName, typeof(bool));
                    localElementDictionary.Add(OverAllocatedXName, typeof(bool));
                    localElementDictionary.Add(EstimatedXName, typeof(bool));
                    localElementDictionary.Add(MilestoneXName, typeof(bool));
                    localElementDictionary.Add(SummaryXName, typeof(bool));
                    localElementDictionary.Add(CriticalXName, typeof(bool));
                    localElementDictionary.Add(IsSubprojectXName, typeof(bool));
                    localElementDictionary.Add(IsSubprojectReadOnlyXName, typeof(bool));
                    localElementDictionary.Add(SubprojectNameXName, typeof(string));
                    localElementDictionary.Add(ExternalTaskXName, typeof(bool));
                    localElementDictionary.Add(ExternalTaskProjectXName, typeof(string));
                    localElementDictionary.Add(EarlyStartXName, typeof(System.DateTime));
                    localElementDictionary.Add(EarlyFinishXName, typeof(System.DateTime));
                    localElementDictionary.Add(LateStartXName, typeof(System.DateTime));
                    localElementDictionary.Add(LateFinishXName, typeof(System.DateTime));
                    localElementDictionary.Add(StartVarianceXName, typeof(decimal));
                    localElementDictionary.Add(FinishVarianceXName, typeof(decimal));
                    localElementDictionary.Add(WorkVarianceXName, typeof(float));
                    localElementDictionary.Add(FreeSlackXName, typeof(decimal));
                    localElementDictionary.Add(TotalSlackXName, typeof(decimal));
                    localElementDictionary.Add(FixedCostXName, typeof(float));
                    localElementDictionary.Add(FixedCostAccrualXName, typeof(string));
                    localElementDictionary.Add(PercentCompleteXName, typeof(decimal));
                    localElementDictionary.Add(PercentWorkCompleteXName, typeof(decimal));
                    localElementDictionary.Add(CostXName, typeof(decimal));
                    localElementDictionary.Add(OvertimeCostXName, typeof(decimal));
                    localElementDictionary.Add(OvertimeWorkXName, typeof(System.TimeSpan));
                    localElementDictionary.Add(ActualStartXName, typeof(System.DateTime));
                    localElementDictionary.Add(ActualFinishXName, typeof(System.DateTime));
                    localElementDictionary.Add(ActualDurationXName, typeof(System.TimeSpan));
                    localElementDictionary.Add(ActualCostXName, typeof(decimal));
                    localElementDictionary.Add(ActualOvertimeCostXName, typeof(decimal));
                    localElementDictionary.Add(ActualWorkXName, typeof(System.TimeSpan));
                    localElementDictionary.Add(ActualOvertimeWorkXName, typeof(System.TimeSpan));
                    localElementDictionary.Add(RegularWorkXName, typeof(System.TimeSpan));
                    localElementDictionary.Add(RemainingDurationXName, typeof(System.TimeSpan));
                    localElementDictionary.Add(RemainingCostXName, typeof(decimal));
                    localElementDictionary.Add(RemainingWorkXName, typeof(System.TimeSpan));
                    localElementDictionary.Add(RemainingOvertimeCostXName, typeof(decimal));
                    localElementDictionary.Add(RemainingOvertimeWorkXName, typeof(System.TimeSpan));
                    localElementDictionary.Add(ACWPXName, typeof(float));
                    localElementDictionary.Add(CVXName, typeof(float));
                    localElementDictionary.Add(ConstraintTypeXName, typeof(decimal));
                    localElementDictionary.Add(CalendarUIDXName, typeof(decimal));
                    localElementDictionary.Add(ConstraintDateXName, typeof(System.DateTime));
                    localElementDictionary.Add(DeadlineXName, typeof(System.DateTime));
                    localElementDictionary.Add(LevelAssignmentsXName, typeof(bool));
                    localElementDictionary.Add(LevelingCanSplitXName, typeof(bool));
                    localElementDictionary.Add(LevelingDelayXName, typeof(decimal));
                    localElementDictionary.Add(LevelingDelayFormatXName, typeof(decimal));
                    localElementDictionary.Add(PreLeveledStartXName, typeof(System.DateTime));
                    localElementDictionary.Add(PreLeveledFinishXName, typeof(System.DateTime));
                    localElementDictionary.Add(HyperlinkXName, typeof(string));
                    localElementDictionary.Add(HyperlinkAddressXName, typeof(string));
                    localElementDictionary.Add(HyperlinkSubAddressXName, typeof(string));
                    localElementDictionary.Add(IgnoreResourceCalendarXName, typeof(bool));
                    localElementDictionary.Add(NotesXName, typeof(string));
                    localElementDictionary.Add(HideBarXName, typeof(bool));
                    localElementDictionary.Add(RollupXName, typeof(bool));
                    localElementDictionary.Add(BCWSXName, typeof(float));
                    localElementDictionary.Add(BCWPXName, typeof(float));
                    localElementDictionary.Add(PhysicalPercentCompleteXName, typeof(decimal));
                    localElementDictionary.Add(EarnedValueMethodXName, typeof(decimal));
                    localElementDictionary.Add(PredecessorLinkXName, typeof(PredecessorLinkLocalType));
                    localElementDictionary.Add(ActualWorkProtectedXName, typeof(System.TimeSpan));
                    localElementDictionary.Add(ActualOvertimeWorkProtectedXName, typeof(System.TimeSpan));
                    localElementDictionary.Add(ExtendedAttributeXName, typeof(ExtendedAttributeLocalType));
                    localElementDictionary.Add(BaselineXName, typeof(BaselineLocalType));
                    localElementDictionary.Add(OutlineCodeXName, typeof(OutlineCodeLocalType));
                    localElementDictionary.Add(IsPublishedXName, typeof(bool));
                    localElementDictionary.Add(StatusManagerXName, typeof(string));
                    localElementDictionary.Add(CommitmentStartXName, typeof(System.DateTime));
                    localElementDictionary.Add(CommitmentFinishXName, typeof(System.DateTime));
                    localElementDictionary.Add(CommitmentTypeXName, typeof(decimal));
                    localElementDictionary.Add(TimephasedDataXName, typeof(TimephasedDataType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                private class NameLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 512, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private NameLocalType() {
                    }
                }
                
                private class TypeLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    0m,
                                    1m,
                                    2m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
                    
                    private TypeLocalType() {
                    }
                }
                
                private class ContactLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 512, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private ContactLocalType() {
                    }
                }
                
                private class OutlineNumberLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 512, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private OutlineNumberLocalType() {
                    }
                }
                
                private class DurationFormatLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    3m,
                                    4m,
                                    5m,
                                    6m,
                                    7m,
                                    8m,
                                    9m,
                                    10m,
                                    11m,
                                    12m,
                                    19m,
                                    20m,
                                    21m,
                                    35m,
                                    36m,
                                    37m,
                                    38m,
                                    39m,
                                    40m,
                                    41m,
                                    42m,
                                    43m,
                                    44m,
                                    51m,
                                    52m,
                                    53m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
                    
                    private DurationFormatLocalType() {
                    }
                }
                
                private class SubprojectNameLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 512, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private SubprojectNameLocalType() {
                    }
                }
                
                private class ExternalTaskProjectLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 512, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private ExternalTaskProjectLocalType() {
                    }
                }
                
                private class FixedCostAccrualLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    "1",
                                    "2",
                                    "3"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private FixedCostAccrualLocalType() {
                    }
                }
                
                private class ConstraintTypeLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    0m,
                                    1m,
                                    2m,
                                    3m,
                                    4m,
                                    5m,
                                    6m,
                                    7m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
                    
                    private ConstraintTypeLocalType() {
                    }
                }
                
                private class LevelingDelayFormatLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    3m,
                                    4m,
                                    5m,
                                    6m,
                                    7m,
                                    8m,
                                    9m,
                                    10m,
                                    11m,
                                    12m,
                                    19m,
                                    20m,
                                    21m,
                                    35m,
                                    36m,
                                    37m,
                                    38m,
                                    39m,
                                    40m,
                                    41m,
                                    42m,
                                    43m,
                                    44m,
                                    51m,
                                    52m,
                                    53m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
                    
                    private LevelingDelayFormatLocalType() {
                    }
                }
                
                private class HyperlinkLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 512, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private HyperlinkLocalType() {
                    }
                }
                
                private class HyperlinkAddressLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 512, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private HyperlinkAddressLocalType() {
                    }
                }
                
                private class HyperlinkSubAddressLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 512, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private HyperlinkSubAddressLocalType() {
                    }
                }
                
                private class EarnedValueMethodLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    0m,
                                    1m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
                    
                    private EarnedValueMethodLocalType() {
                    }
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (PredecessorUID?, Type?, CrossProject?, CrossProjectName?, LinkLag?, LagFormat?)
                /// </para>
                /// </summary>
                public partial class PredecessorLinkLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName PredecessorUIDXName = System.Xml.Linq.XName.Get("PredecessorUID", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName TypeXName = System.Xml.Linq.XName.Get("Type", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName CrossProjectXName = System.Xml.Linq.XName.Get("CrossProject", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName CrossProjectNameXName = System.Xml.Linq.XName.Get("CrossProjectName", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName LinkLagXName = System.Xml.Linq.XName.Get("LinkLag", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName LagFormatXName = System.Xml.Linq.XName.Get("LagFormat", "http://schemas.microsoft.com/project/2007");
                    
                    private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PredecessorLink", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
		public static explicit operator PredecessorLinkLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PredecessorLinkLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static PredecessorLinkLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PredecessorUIDXName), new NamedContentModelEntity(TypeXName), new NamedContentModelEntity(CrossProjectXName), new NamedContentModelEntity(CrossProjectNameXName), new NamedContentModelEntity(LinkLagXName), new NamedContentModelEntity(LagFormatXName));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (PredecessorUID?, Type?, CrossProject?, CrossProjectName?, LinkLag?, LagFormat?)
                    /// </para>
                    /// </summary>
                    public PredecessorLinkLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The unique identifier of the predecessor task.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (PredecessorUID?, Type?, CrossProject?, CrossProjectName?, LinkLag?, LagFormat?)
                    /// </para>
                    /// </summary>
                    public virtual System.Decimal? PredecessorUID {
                        get {
                            XElement x = this.GetElement(PredecessorUIDXName);
                            if ((x == null)) {
                                return null;
                            }
                            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                        set {
                            this.SetElement(PredecessorUIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The link type.  Values are 0=FF, 1=FS, 2=SF and 3=SS.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (PredecessorUID?, Type?, CrossProject?, CrossProjectName?, LinkLag?, LagFormat?)
                    /// </para>
                    /// </summary>
                    public virtual System.Decimal? Type {
                        get {
                            XElement x = this.GetElement(TypeXName);
                            if ((x == null)) {
                                return null;
                            }
                            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                        set {
                            if (value == null) {
                                this.SetElement(TypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                            }
                            else {
                                this.SetElementWithValidation(TypeXName, value, "Type", TypeLocalType.TypeDefinition);
                            }
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Whether the predecessor is part of another project.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (PredecessorUID?, Type?, CrossProject?, CrossProjectName?, LinkLag?, LagFormat?)
                    /// </para>
                    /// </summary>
                    public virtual System.Boolean? CrossProject {
                        get {
                            XElement x = this.GetElement(CrossProjectXName);
                            if ((x == null)) {
                                return null;
                            }
                            return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                        }
                        set {
                            this.SetElement(CrossProjectXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The external predecessor project.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (PredecessorUID?, Type?, CrossProject?, CrossProjectName?, LinkLag?, LagFormat?)
                    /// </para>
                    /// </summary>
                    public virtual string CrossProjectName {
                        get {
                            XElement x = this.GetElement(CrossProjectNameXName);
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetElement(CrossProjectNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The amount of lag in tenths of a minute.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (PredecessorUID?, Type?, CrossProject?, CrossProjectName?, LinkLag?, LagFormat?)
                    /// </para>
                    /// </summary>
                    public virtual System.Decimal? LinkLag {
                        get {
                            XElement x = this.GetElement(LinkLagXName);
                            if ((x == null)) {
                                return null;
                            }
                            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                        set {
                            this.SetElement(LinkLagXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The format for expressing the lag format.  Values are: 3=m, 4=em, 5=h, 6=eh, 7=d, 8=ed, 9=w, 10=ew, 11=mo, 12=emo, 19=%, 20=e%, 35=m?, 36=em?, 37=h?, 38=eh?, 39=d?, 40=ed?, 41=w?, 42=ew?, 43=mo?, 44=emo?, 51=%? and 52=e%?.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (PredecessorUID?, Type?, CrossProject?, CrossProjectName?, LinkLag?, LagFormat?)
                    /// </para>
                    /// </summary>
                    public virtual System.Decimal? LagFormat {
                        get {
                            XElement x = this.GetElement(LagFormatXName);
                            if ((x == null)) {
                                return null;
                            }
                            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                        set {
                            if (value == null) {
                                this.SetElement(LagFormatXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                            }
                            else {
                                this.SetElementWithValidation(LagFormatXName, value, "LagFormat", LagFormatLocalType.TypeDefinition);
                            }
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    System.Xml.Linq.XName IXMetaData.SchemaName {
                        get {
                            return xName;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<PredecessorLinkLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(PredecessorUIDXName, typeof(decimal));
                        localElementDictionary.Add(TypeXName, typeof(decimal));
                        localElementDictionary.Add(CrossProjectXName, typeof(bool));
                        localElementDictionary.Add(CrossProjectNameXName, typeof(string));
                        localElementDictionary.Add(LinkLagXName, typeof(decimal));
                        localElementDictionary.Add(LagFormatXName, typeof(decimal));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                    
                    private class TypeLocalType {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                        0m,
                                        1m,
                                        2m,
                                        3m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
                        
                        private TypeLocalType() {
                        }
                    }
                    
                    private class LagFormatLocalType {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                        3m,
                                        4m,
                                        5m,
                                        6m,
                                        7m,
                                        8m,
                                        9m,
                                        10m,
                                        11m,
                                        12m,
                                        19m,
                                        20m,
                                        35m,
                                        36m,
                                        37m,
                                        38m,
                                        39m,
                                        40m,
                                        41m,
                                        42m,
                                        43m,
                                        44m,
                                        51m,
                                        52m,
                                        53m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
                        
                        private LagFormatLocalType() {
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (FieldID?, Value?, ValueGUID?, DurationFormat?)
                /// </para>
                /// </summary>
                public partial class ExtendedAttributeLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName FieldIDXName = System.Xml.Linq.XName.Get("FieldID", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName ValueXName = System.Xml.Linq.XName.Get("Value", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName ValueGUIDXName = System.Xml.Linq.XName.Get("ValueGUID", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName DurationFormatXName = System.Xml.Linq.XName.Get("DurationFormat", "http://schemas.microsoft.com/project/2007");
                    
                    private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ExtendedAttribute", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
		public static explicit operator ExtendedAttributeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ExtendedAttributeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static ExtendedAttributeLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FieldIDXName), new NamedContentModelEntity(ValueXName), new NamedContentModelEntity(ValueGUIDXName), new NamedContentModelEntity(DurationFormatXName));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (FieldID?, Value?, ValueGUID?, DurationFormat?)
                    /// </para>
                    /// </summary>
                    public ExtendedAttributeLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The project ID (PID) of the custom field.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (FieldID?, Value?, ValueGUID?, DurationFormat?)
                    /// </para>
                    /// </summary>
                    public virtual string FieldID {
                        get {
                            XElement x = this.GetElement(FieldIDXName);
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetElement(FieldIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The actual value of the extended attribute.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (FieldID?, Value?, ValueGUID?, DurationFormat?)
                    /// </para>
                    /// </summary>
                    public virtual string Value {
                        get {
                            XElement x = this.GetElement(ValueXName);
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetElement(ValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The GUID of the value in the extended attribute lookup table.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (FieldID?, Value?, ValueGUID?, DurationFormat?)
                    /// </para>
                    /// </summary>
                    public virtual System.Decimal? ValueGUID {
                        get {
                            XElement x = this.GetElement(ValueGUIDXName);
                            if ((x == null)) {
                                return null;
                            }
                            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                        set {
                            this.SetElement(ValueGUIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The format for expressing the bulk duration.  Values are: 3=m, 4=em, 5=h, 6=eh, 7=d, 8=ed, 9=w, 10=ew, 11=mo, 12=emo, 19=%, 20=e%, 21=null, 35=m?, 36=em?, 37=h?, 38=eh?, 39=d?, 40=ed?, 41=w?, 42=ew?, 43=mo?, 44=emo?, 51=%?, 52=e%? and 53=null.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (FieldID?, Value?, ValueGUID?, DurationFormat?)
                    /// </para>
                    /// </summary>
                    public virtual System.Decimal? DurationFormat {
                        get {
                            XElement x = this.GetElement(DurationFormatXName);
                            if ((x == null)) {
                                return null;
                            }
                            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                        set {
                            if (value == null) {
                                this.SetElement(DurationFormatXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                            }
                            else {
                                this.SetElementWithValidation(DurationFormatXName, value, "DurationFormat", DurationFormatLocalType.TypeDefinition);
                            }
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    System.Xml.Linq.XName IXMetaData.SchemaName {
                        get {
                            return xName;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<ExtendedAttributeLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(FieldIDXName, typeof(string));
                        localElementDictionary.Add(ValueXName, typeof(string));
                        localElementDictionary.Add(ValueGUIDXName, typeof(decimal));
                        localElementDictionary.Add(DurationFormatXName, typeof(decimal));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                    
                    private class DurationFormatLocalType {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                        3m,
                                        4m,
                                        5m,
                                        6m,
                                        7m,
                                        8m,
                                        9m,
                                        10m,
                                        11m,
                                        12m,
                                        19m,
                                        20m,
                                        21m,
                                        35m,
                                        36m,
                                        37m,
                                        38m,
                                        39m,
                                        40m,
                                        41m,
                                        42m,
                                        43m,
                                        44m,
                                        51m,
                                        52m,
                                        53m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
                        
                        private DurationFormatLocalType() {
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (TimephasedData*, Number?, Interim?, Start?, Finish?, Duration?, DurationFormat?, EstimatedDuration?, Work?, Cost?, BCWS?, BCWP?, FixedCost?)
                /// </para>
                /// </summary>
                public partial class BaselineLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName TimephasedDataXName = System.Xml.Linq.XName.Get("TimephasedData", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<TimephasedDataType> TimephasedDataField;
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName NumberXName = System.Xml.Linq.XName.Get("Number", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName InterimXName = System.Xml.Linq.XName.Get("Interim", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName StartXName = System.Xml.Linq.XName.Get("Start", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName FinishXName = System.Xml.Linq.XName.Get("Finish", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName DurationXName = System.Xml.Linq.XName.Get("Duration", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName DurationFormatXName = System.Xml.Linq.XName.Get("DurationFormat", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName EstimatedDurationXName = System.Xml.Linq.XName.Get("EstimatedDuration", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName WorkXName = System.Xml.Linq.XName.Get("Work", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName CostXName = System.Xml.Linq.XName.Get("Cost", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName BCWSXName = System.Xml.Linq.XName.Get("BCWS", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName BCWPXName = System.Xml.Linq.XName.Get("BCWP", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName FixedCostXName = System.Xml.Linq.XName.Get("FixedCost", "http://schemas.microsoft.com/project/2007");
                    
                    private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Baseline", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
		public static explicit operator BaselineLocalType(XElement xe) { return XTypedServices.ToXTypedElement<BaselineLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static BaselineLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TimephasedDataXName), new NamedContentModelEntity(NumberXName), new NamedContentModelEntity(InterimXName), new NamedContentModelEntity(StartXName), new NamedContentModelEntity(FinishXName), new NamedContentModelEntity(DurationXName), new NamedContentModelEntity(DurationFormatXName), new NamedContentModelEntity(EstimatedDurationXName), new NamedContentModelEntity(WorkXName), new NamedContentModelEntity(CostXName), new NamedContentModelEntity(BCWSXName), new NamedContentModelEntity(BCWPXName), new NamedContentModelEntity(FixedCostXName));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (TimephasedData*, Number?, Interim?, Start?, Finish?, Duration?, DurationFormat?, EstimatedDuration?, Work?, Cost?, BCWS?, BCWP?, FixedCost?)
                    /// </para>
                    /// </summary>
                    public BaselineLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The time phased data block associated with the task baseline.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (TimephasedData*, Number?, Interim?, Start?, Finish?, Duration?, DurationFormat?, EstimatedDuration?, Work?, Cost?, BCWS?, BCWP?, FixedCost?)
                    /// </para>
                    /// </summary>
                    public virtual IList<TimephasedDataType> TimephasedData {
                        get {
                            if ((this.TimephasedDataField == null)) {
                                this.TimephasedDataField = new XTypedList<TimephasedDataType>(this, LinqToXsdTypeManager.Instance, TimephasedDataXName);
                            }
                            return this.TimephasedDataField;
                        }
                        set {
                            if ((value == null)) {
                                this.TimephasedDataField = null;
                            }
                            else {
                                if ((this.TimephasedDataField == null)) {
                                    this.TimephasedDataField = XTypedList<TimephasedDataType>.Initialize(this, LinqToXsdTypeManager.Instance, value, TimephasedDataXName);
                                }
                                else {
                                    XTypedServices.SetList<TimephasedDataType>(this.TimephasedDataField, value);
                                }
                            }
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The unique number of the baseline data record.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (TimephasedData*, Number?, Interim?, Start?, Finish?, Duration?, DurationFormat?, EstimatedDuration?, Work?, Cost?, BCWS?, BCWP?, FixedCost?)
                    /// </para>
                    /// </summary>
                    public virtual System.Decimal? Number {
                        get {
                            XElement x = this.GetElement(NumberXName);
                            if ((x == null)) {
                                return null;
                            }
                            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                        set {
                            this.SetElement(NumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Whether this is an Interim Baseline.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (TimephasedData*, Number?, Interim?, Start?, Finish?, Duration?, DurationFormat?, EstimatedDuration?, Work?, Cost?, BCWS?, BCWP?, FixedCost?)
                    /// </para>
                    /// </summary>
                    public virtual System.Boolean? Interim {
                        get {
                            XElement x = this.GetElement(InterimXName);
                            if ((x == null)) {
                                return null;
                            }
                            return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                        }
                        set {
                            this.SetElement(InterimXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The scheduled start date of the task when the baseline was saved.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (TimephasedData*, Number?, Interim?, Start?, Finish?, Duration?, DurationFormat?, EstimatedDuration?, Work?, Cost?, BCWS?, BCWP?, FixedCost?)
                    /// </para>
                    /// </summary>
                    public virtual System.DateTime? Start {
                        get {
                            XElement x = this.GetElement(StartXName);
                            if ((x == null)) {
                                return null;
                            }
                            return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                        }
                        set {
                            this.SetElement(StartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The scheduled finish date of the task when the baseline was saved.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (TimephasedData*, Number?, Interim?, Start?, Finish?, Duration?, DurationFormat?, EstimatedDuration?, Work?, Cost?, BCWS?, BCWP?, FixedCost?)
                    /// </para>
                    /// </summary>
                    public virtual System.DateTime? Finish {
                        get {
                            XElement x = this.GetElement(FinishXName);
                            if ((x == null)) {
                                return null;
                            }
                            return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                        }
                        set {
                            this.SetElement(FinishXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The scheduled duration of the task when the baseline was saved.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (TimephasedData*, Number?, Interim?, Start?, Finish?, Duration?, DurationFormat?, EstimatedDuration?, Work?, Cost?, BCWS?, BCWP?, FixedCost?)
                    /// </para>
                    /// </summary>
                    public virtual System.TimeSpan? Duration {
                        get {
                            XElement x = this.GetElement(DurationXName);
                            if ((x == null)) {
                                return null;
                            }
                            return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                        }
                        set {
                            this.SetElement(DurationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The format for expressing the Duration of the Task baseline.  Values are: 3=m, 4=em, 5=h, 6=eh, 7=d, 8=ed, 9=w, 10=ew, 11=mo, 12=emo, 19=%, 20=e%, 21=null, 35=m?, 36=em?, 37=h?, 38=eh?, 39=d?, 40=ed?, 41=w?, 42=ew?, 43=mo?, 44=emo?, 51=%?, 52=e%? and 53=null.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (TimephasedData*, Number?, Interim?, Start?, Finish?, Duration?, DurationFormat?, EstimatedDuration?, Work?, Cost?, BCWS?, BCWP?, FixedCost?)
                    /// </para>
                    /// </summary>
                    public virtual System.Decimal? DurationFormat {
                        get {
                            XElement x = this.GetElement(DurationFormatXName);
                            if ((x == null)) {
                                return null;
                            }
                            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                        set {
                            if (value == null) {
                                this.SetElement(DurationFormatXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                            }
                            else {
                                this.SetElementWithValidation(DurationFormatXName, value, "DurationFormat", DurationFormatLocalType.TypeDefinition);
                            }
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Whether the baseline duration of the task was estimated.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (TimephasedData*, Number?, Interim?, Start?, Finish?, Duration?, DurationFormat?, EstimatedDuration?, Work?, Cost?, BCWS?, BCWP?, FixedCost?)
                    /// </para>
                    /// </summary>
                    public virtual System.Boolean? EstimatedDuration {
                        get {
                            XElement x = this.GetElement(EstimatedDurationXName);
                            if ((x == null)) {
                                return null;
                            }
                            return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                        }
                        set {
                            this.SetElement(EstimatedDurationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The scheduled work of the task when the baseline was saved.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (TimephasedData*, Number?, Interim?, Start?, Finish?, Duration?, DurationFormat?, EstimatedDuration?, Work?, Cost?, BCWS?, BCWP?, FixedCost?)
                    /// </para>
                    /// </summary>
                    public virtual System.TimeSpan? Work {
                        get {
                            XElement x = this.GetElement(WorkXName);
                            if ((x == null)) {
                                return null;
                            }
                            return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                        }
                        set {
                            this.SetElement(WorkXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The projected cost of the task when the baseline was saved.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (TimephasedData*, Number?, Interim?, Start?, Finish?, Duration?, DurationFormat?, EstimatedDuration?, Work?, Cost?, BCWS?, BCWP?, FixedCost?)
                    /// </para>
                    /// </summary>
                    public virtual System.Decimal? Cost {
                        get {
                            XElement x = this.GetElement(CostXName);
                            if ((x == null)) {
                                return null;
                            }
                            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                        }
                        set {
                            this.SetElement(CostXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The budgeted cost of work scheduled for the task.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (TimephasedData*, Number?, Interim?, Start?, Finish?, Duration?, DurationFormat?, EstimatedDuration?, Work?, Cost?, BCWS?, BCWP?, FixedCost?)
                    /// </para>
                    /// </summary>
                    public virtual System.Single? BCWS {
                        get {
                            XElement x = this.GetElement(BCWSXName);
                            if ((x == null)) {
                                return null;
                            }
                            return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                        }
                        set {
                            this.SetElement(BCWSXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The budgeted cost of work performed on the task to-date.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (TimephasedData*, Number?, Interim?, Start?, Finish?, Duration?, DurationFormat?, EstimatedDuration?, Work?, Cost?, BCWS?, BCWP?, FixedCost?)
                    /// </para>
                    /// </summary>
                    public virtual System.Single? BCWP {
                        get {
                            XElement x = this.GetElement(BCWPXName);
                            if ((x == null)) {
                                return null;
                            }
                            return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                        }
                        set {
                            this.SetElement(BCWPXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The fixed cost of the task when the baseline was saved.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (TimephasedData*, Number?, Interim?, Start?, Finish?, Duration?, DurationFormat?, EstimatedDuration?, Work?, Cost?, BCWS?, BCWP?, FixedCost?)
                    /// </para>
                    /// </summary>
                    public virtual System.Single? FixedCost {
                        get {
                            XElement x = this.GetElement(FixedCostXName);
                            if ((x == null)) {
                                return null;
                            }
                            return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                        }
                        set {
                            this.SetElement(FixedCostXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    System.Xml.Linq.XName IXMetaData.SchemaName {
                        get {
                            return xName;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<BaselineLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(TimephasedDataXName, typeof(TimephasedDataType));
                        localElementDictionary.Add(NumberXName, typeof(decimal));
                        localElementDictionary.Add(InterimXName, typeof(bool));
                        localElementDictionary.Add(StartXName, typeof(System.DateTime));
                        localElementDictionary.Add(FinishXName, typeof(System.DateTime));
                        localElementDictionary.Add(DurationXName, typeof(System.TimeSpan));
                        localElementDictionary.Add(DurationFormatXName, typeof(decimal));
                        localElementDictionary.Add(EstimatedDurationXName, typeof(bool));
                        localElementDictionary.Add(WorkXName, typeof(System.TimeSpan));
                        localElementDictionary.Add(CostXName, typeof(decimal));
                        localElementDictionary.Add(BCWSXName, typeof(float));
                        localElementDictionary.Add(BCWPXName, typeof(float));
                        localElementDictionary.Add(FixedCostXName, typeof(float));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                    
                    private class DurationFormatLocalType {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                        3m,
                                        4m,
                                        5m,
                                        6m,
                                        7m,
                                        8m,
                                        9m,
                                        10m,
                                        11m,
                                        12m,
                                        19m,
                                        20m,
                                        21m,
                                        35m,
                                        36m,
                                        37m,
                                        38m,
                                        39m,
                                        40m,
                                        41m,
                                        42m,
                                        43m,
                                        44m,
                                        51m,
                                        52m,
                                        53m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
                        
                        private DurationFormatLocalType() {
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (FieldID?, ValueID?, ValueGUID?)
                /// </para>
                /// </summary>
                public partial class OutlineCodeLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName FieldIDXName = System.Xml.Linq.XName.Get("FieldID", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName ValueIDXName = System.Xml.Linq.XName.Get("ValueID", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName ValueGUIDXName = System.Xml.Linq.XName.Get("ValueGUID", "http://schemas.microsoft.com/project/2007");
                    
                    private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OutlineCode", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
		public static explicit operator OutlineCodeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<OutlineCodeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static OutlineCodeLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FieldIDXName), new NamedContentModelEntity(ValueIDXName), new NamedContentModelEntity(ValueGUIDXName));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (FieldID?, ValueID?, ValueGUID?)
                    /// </para>
                    /// </summary>
                    public OutlineCodeLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The number value of the custom field project ID (PID).
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (FieldID?, ValueID?, ValueGUID?)
                    /// </para>
                    /// </summary>
                    public virtual string FieldID {
                        get {
                            XElement x = this.GetElement(FieldIDXName);
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetElement(FieldIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The ID in the value list associated with the definition in the outline code collection.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (FieldID?, ValueID?, ValueGUID?)
                    /// </para>
                    /// </summary>
                    public virtual System.Decimal? ValueID {
                        get {
                            XElement x = this.GetElement(ValueIDXName);
                            if ((x == null)) {
                                return null;
                            }
                            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                        set {
                            this.SetElement(ValueIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The GUID of the value in the value list. The ValueGUID matches the FieldGUID in the value list.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (FieldID?, ValueID?, ValueGUID?)
                    /// </para>
                    /// </summary>
                    public virtual System.Decimal? ValueGUID {
                        get {
                            XElement x = this.GetElement(ValueGUIDXName);
                            if ((x == null)) {
                                return null;
                            }
                            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                        set {
                            this.SetElement(ValueGUIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    System.Xml.Linq.XName IXMetaData.SchemaName {
                        get {
                            return xName;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<OutlineCodeLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(FieldIDXName, typeof(string));
                        localElementDictionary.Add(ValueIDXName, typeof(decimal));
                        localElementDictionary.Add(ValueGUIDXName, typeof(decimal));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                }
                
                private class CommitmentTypeLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    0m,
                                    1m,
                                    2m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
                    
                    private CommitmentTypeLocalType() {
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Resource*)
        /// </para>
        /// </summary>
        public partial class ResourcesLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ResourceXName = System.Xml.Linq.XName.Get("Resource", "http://schemas.microsoft.com/project/2007");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<ResourceLocalType> ResourceField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Resources", "http://schemas.microsoft.com/project/2007");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator ResourcesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ResourcesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static ResourcesLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ResourceXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Resource*)
            /// </para>
            /// </summary>
            public ResourcesLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// There must be at least one resource in each Resources collection.
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Resource*)
            /// </para>
            /// </summary>
            public virtual IList<Microsoft.Schemas.Project2007.Project.ResourcesLocalType.ResourceLocalType> Resource {
                get {
                    if ((this.ResourceField == null)) {
                        this.ResourceField = new XTypedList<ResourceLocalType>(this, LinqToXsdTypeManager.Instance, ResourceXName);
                    }
                    return this.ResourceField;
                }
                set {
                    if ((value == null)) {
                        this.ResourceField = null;
                    }
                    else {
                        if ((this.ResourceField == null)) {
                            this.ResourceField = XTypedList<ResourceLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ResourceXName);
                        }
                        else {
                            XTypedServices.SetList<ResourceLocalType>(this.ResourceField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ResourcesLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(ResourceXName, typeof(ResourceLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
            /// </para>
            /// </summary>
            public partial class ResourceLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName UIDXName = System.Xml.Linq.XName.Get("UID", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName IDXName = System.Xml.Linq.XName.Get("ID", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName NameXName = System.Xml.Linq.XName.Get("Name", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName TypeXName = System.Xml.Linq.XName.Get("Type", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName IsNullXName = System.Xml.Linq.XName.Get("IsNull", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName InitialsXName = System.Xml.Linq.XName.Get("Initials", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName PhoneticsXName = System.Xml.Linq.XName.Get("Phonetics", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName NTAccountXName = System.Xml.Linq.XName.Get("NTAccount", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName MaterialLabelXName = System.Xml.Linq.XName.Get("MaterialLabel", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName CodeXName = System.Xml.Linq.XName.Get("Code", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName GroupXName = System.Xml.Linq.XName.Get("Group", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName WorkGroupXName = System.Xml.Linq.XName.Get("WorkGroup", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName EmailAddressXName = System.Xml.Linq.XName.Get("EmailAddress", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName HyperlinkXName = System.Xml.Linq.XName.Get("Hyperlink", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName HyperlinkAddressXName = System.Xml.Linq.XName.Get("HyperlinkAddress", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName HyperlinkSubAddressXName = System.Xml.Linq.XName.Get("HyperlinkSubAddress", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName MaxUnitsXName = System.Xml.Linq.XName.Get("MaxUnits", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName PeakUnitsXName = System.Xml.Linq.XName.Get("PeakUnits", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName OverAllocatedXName = System.Xml.Linq.XName.Get("OverAllocated", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName AvailableFromXName = System.Xml.Linq.XName.Get("AvailableFrom", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName AvailableToXName = System.Xml.Linq.XName.Get("AvailableTo", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName StartXName = System.Xml.Linq.XName.Get("Start", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName FinishXName = System.Xml.Linq.XName.Get("Finish", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName CanLevelXName = System.Xml.Linq.XName.Get("CanLevel", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName AccrueAtXName = System.Xml.Linq.XName.Get("AccrueAt", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName WorkXName = System.Xml.Linq.XName.Get("Work", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName RegularWorkXName = System.Xml.Linq.XName.Get("RegularWork", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName OvertimeWorkXName = System.Xml.Linq.XName.Get("OvertimeWork", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ActualWorkXName = System.Xml.Linq.XName.Get("ActualWork", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName RemainingWorkXName = System.Xml.Linq.XName.Get("RemainingWork", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ActualOvertimeWorkXName = System.Xml.Linq.XName.Get("ActualOvertimeWork", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName RemainingOvertimeWorkXName = System.Xml.Linq.XName.Get("RemainingOvertimeWork", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName PercentWorkCompleteXName = System.Xml.Linq.XName.Get("PercentWorkComplete", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName StandardRateXName = System.Xml.Linq.XName.Get("StandardRate", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName StandardRateFormatXName = System.Xml.Linq.XName.Get("StandardRateFormat", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName CostXName = System.Xml.Linq.XName.Get("Cost", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName OvertimeRateXName = System.Xml.Linq.XName.Get("OvertimeRate", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName OvertimeRateFormatXName = System.Xml.Linq.XName.Get("OvertimeRateFormat", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName OvertimeCostXName = System.Xml.Linq.XName.Get("OvertimeCost", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName CostPerUseXName = System.Xml.Linq.XName.Get("CostPerUse", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ActualCostXName = System.Xml.Linq.XName.Get("ActualCost", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ActualOvertimeCostXName = System.Xml.Linq.XName.Get("ActualOvertimeCost", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName RemainingCostXName = System.Xml.Linq.XName.Get("RemainingCost", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName RemainingOvertimeCostXName = System.Xml.Linq.XName.Get("RemainingOvertimeCost", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName WorkVarianceXName = System.Xml.Linq.XName.Get("WorkVariance", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName CostVarianceXName = System.Xml.Linq.XName.Get("CostVariance", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName SVXName = System.Xml.Linq.XName.Get("SV", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName CVXName = System.Xml.Linq.XName.Get("CV", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ACWPXName = System.Xml.Linq.XName.Get("ACWP", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName CalendarUIDXName = System.Xml.Linq.XName.Get("CalendarUID", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName NotesXName = System.Xml.Linq.XName.Get("Notes", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName BCWSXName = System.Xml.Linq.XName.Get("BCWS", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName BCWPXName = System.Xml.Linq.XName.Get("BCWP", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName IsGenericXName = System.Xml.Linq.XName.Get("IsGeneric", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName IsInactiveXName = System.Xml.Linq.XName.Get("IsInactive", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName IsEnterpriseXName = System.Xml.Linq.XName.Get("IsEnterprise", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName BookingTypeXName = System.Xml.Linq.XName.Get("BookingType", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ActualWorkProtectedXName = System.Xml.Linq.XName.Get("ActualWorkProtected", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ActualOvertimeWorkProtectedXName = System.Xml.Linq.XName.Get("ActualOvertimeWorkProtected", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ActiveDirectoryGUIDXName = System.Xml.Linq.XName.Get("ActiveDirectoryGUID", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName CreationDateXName = System.Xml.Linq.XName.Get("CreationDate", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ExtendedAttributeXName = System.Xml.Linq.XName.Get("ExtendedAttribute", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<ExtendedAttributeLocalType> ExtendedAttributeField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName BaselineXName = System.Xml.Linq.XName.Get("Baseline", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<BaselineLocalType> BaselineField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName OutlineCodeXName = System.Xml.Linq.XName.Get("OutlineCode", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<OutlineCodeLocalType> OutlineCodeField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName IsCostResourceXName = System.Xml.Linq.XName.Get("IsCostResource", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName AssnOwnerXName = System.Xml.Linq.XName.Get("AssnOwner", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName AssnOwnerGuidXName = System.Xml.Linq.XName.Get("AssnOwnerGuid", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName IsBudgetXName = System.Xml.Linq.XName.Get("IsBudget", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName AvailabilityPeriodsXName = System.Xml.Linq.XName.Get("AvailabilityPeriods", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName RatesXName = System.Xml.Linq.XName.Get("Rates", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName TimephasedDataXName = System.Xml.Linq.XName.Get("TimephasedData", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<TimephasedDataType> TimephasedDataField;
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Resource", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator ResourceLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ResourceLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static ResourceLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(UIDXName), new NamedContentModelEntity(IDXName), new NamedContentModelEntity(NameXName), new NamedContentModelEntity(TypeXName), new NamedContentModelEntity(IsNullXName), new NamedContentModelEntity(InitialsXName), new NamedContentModelEntity(PhoneticsXName), new NamedContentModelEntity(NTAccountXName), new NamedContentModelEntity(MaterialLabelXName), new NamedContentModelEntity(CodeXName), new NamedContentModelEntity(GroupXName), new NamedContentModelEntity(WorkGroupXName), new NamedContentModelEntity(EmailAddressXName), new NamedContentModelEntity(HyperlinkXName), new NamedContentModelEntity(HyperlinkAddressXName), new NamedContentModelEntity(HyperlinkSubAddressXName), new NamedContentModelEntity(MaxUnitsXName), new NamedContentModelEntity(PeakUnitsXName), new NamedContentModelEntity(OverAllocatedXName), new NamedContentModelEntity(AvailableFromXName), new NamedContentModelEntity(AvailableToXName), new NamedContentModelEntity(StartXName), new NamedContentModelEntity(FinishXName), new NamedContentModelEntity(CanLevelXName), new NamedContentModelEntity(AccrueAtXName), new NamedContentModelEntity(WorkXName), new NamedContentModelEntity(RegularWorkXName), new NamedContentModelEntity(OvertimeWorkXName), new NamedContentModelEntity(ActualWorkXName), new NamedContentModelEntity(RemainingWorkXName), new NamedContentModelEntity(ActualOvertimeWorkXName), new NamedContentModelEntity(RemainingOvertimeWorkXName), new NamedContentModelEntity(PercentWorkCompleteXName), new NamedContentModelEntity(StandardRateXName), new NamedContentModelEntity(StandardRateFormatXName), new NamedContentModelEntity(CostXName), new NamedContentModelEntity(OvertimeRateXName), new NamedContentModelEntity(OvertimeRateFormatXName), new NamedContentModelEntity(OvertimeCostXName), new NamedContentModelEntity(CostPerUseXName), new NamedContentModelEntity(ActualCostXName), new NamedContentModelEntity(ActualOvertimeCostXName), new NamedContentModelEntity(RemainingCostXName), new NamedContentModelEntity(RemainingOvertimeCostXName), new NamedContentModelEntity(WorkVarianceXName), new NamedContentModelEntity(CostVarianceXName), new NamedContentModelEntity(SVXName), new NamedContentModelEntity(CVXName), new NamedContentModelEntity(ACWPXName), new NamedContentModelEntity(CalendarUIDXName), new NamedContentModelEntity(NotesXName), new NamedContentModelEntity(BCWSXName), new NamedContentModelEntity(BCWPXName), new NamedContentModelEntity(IsGenericXName), new NamedContentModelEntity(IsInactiveXName), new NamedContentModelEntity(IsEnterpriseXName), new NamedContentModelEntity(BookingTypeXName), new NamedContentModelEntity(ActualWorkProtectedXName), new NamedContentModelEntity(ActualOvertimeWorkProtectedXName), new NamedContentModelEntity(ActiveDirectoryGUIDXName), new NamedContentModelEntity(CreationDateXName), new NamedContentModelEntity(ExtendedAttributeXName), new NamedContentModelEntity(BaselineXName), new NamedContentModelEntity(OutlineCodeXName), new NamedContentModelEntity(IsCostResourceXName), new NamedContentModelEntity(AssnOwnerXName), new NamedContentModelEntity(AssnOwnerGuidXName), new NamedContentModelEntity(IsBudgetXName), new NamedContentModelEntity(AvailabilityPeriodsXName), new NamedContentModelEntity(RatesXName), new NamedContentModelEntity(TimephasedDataXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public ResourceLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// The unique identifier of the resource.
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual decimal UID {
                    get {
                        XElement x = this.GetElement(UIDXName);
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        this.SetElement(UIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The position identifier of the resource within the list of resources.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? ID {
                    get {
                        XElement x = this.GetElement(IDXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        this.SetElement(IDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The name of the resource.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual string Name {
                    get {
                        XElement x = this.GetElement(NameXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(NameXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(NameXName, value, "Name", NameLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// The type of resource. Values are: 0=Material, 1=Work.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? Type {
                    get {
                        XElement x = this.GetElement(TypeXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(TypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(TypeXName, value, "Type", TypeLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether the resource is null.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Boolean? IsNull {
                    get {
                        XElement x = this.GetElement(IsNullXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(IsNullXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The initials of the resource.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual string Initials {
                    get {
                        XElement x = this.GetElement(InitialsXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(InitialsXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(InitialsXName, value, "Initials", InitialsLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// The phonetic spelling of the resource name.  For use with Japanese only.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual string Phonetics {
                    get {
                        XElement x = this.GetElement(PhoneticsXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(PhoneticsXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(PhoneticsXName, value, "Phonetics", PhoneticsLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// The NT account associated with the resource.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual string NTAccount {
                    get {
                        XElement x = this.GetElement(NTAccountXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(NTAccountXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(NTAccountXName, value, "NTAccount", NTAccountLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// The unit of measure for the material resource.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual string MaterialLabel {
                    get {
                        XElement x = this.GetElement(MaterialLabelXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(MaterialLabelXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(MaterialLabelXName, value, "MaterialLabel", MaterialLabelLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// The code or other information about the resource.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual string Code {
                    get {
                        XElement x = this.GetElement(CodeXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(CodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(CodeXName, value, "Code", CodeLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// The group to which the resource belongs.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual string Group {
                    get {
                        XElement x = this.GetElement(GroupXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(GroupXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(GroupXName, value, "Group", GroupLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// The type of workgroup to which the resource belongs. Values are: 0=Default, 1=None, 2=Email, 3=Web.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? WorkGroup {
                    get {
                        XElement x = this.GetElement(WorkGroupXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(WorkGroupXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(WorkGroupXName, value, "WorkGroup", WorkGroupLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// The email address of the resource.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual string EmailAddress {
                    get {
                        XElement x = this.GetElement(EmailAddressXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(EmailAddressXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(EmailAddressXName, value, "EmailAddress", EmailAddressLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// The title of the hyperlink associated with the resource.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual string Hyperlink {
                    get {
                        XElement x = this.GetElement(HyperlinkXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(HyperlinkXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(HyperlinkXName, value, "Hyperlink", HyperlinkLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// The hyperlink associated with the resource.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual string HyperlinkAddress {
                    get {
                        XElement x = this.GetElement(HyperlinkAddressXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(HyperlinkAddressXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(HyperlinkAddressXName, value, "HyperlinkAddress", HyperlinkAddressLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// The document bookmark of the hyperlink associated with the resource.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual string HyperlinkSubAddress {
                    get {
                        XElement x = this.GetElement(HyperlinkSubAddressXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(HyperlinkSubAddressXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(HyperlinkSubAddressXName, value, "HyperlinkSubAddress", HyperlinkSubAddressLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// The maximum number of units that the resource is available.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Single? MaxUnits {
                    get {
                        XElement x = this.GetElement(MaxUnitsXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                    set {
                        this.SetElement(MaxUnitsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The largest number of units assigned to the resource at any time.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Single? PeakUnits {
                    get {
                        XElement x = this.GetElement(PeakUnitsXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                    set {
                        this.SetElement(PeakUnitsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether the resource is overallocated.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Boolean? OverAllocated {
                    get {
                        XElement x = this.GetElement(OverAllocatedXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(OverAllocatedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The first date that the resource is available.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.DateTime? AvailableFrom {
                    get {
                        XElement x = this.GetElement(AvailableFromXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                    set {
                        this.SetElement(AvailableFromXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The last date the resource is available.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.DateTime? AvailableTo {
                    get {
                        XElement x = this.GetElement(AvailableToXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                    set {
                        this.SetElement(AvailableToXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The scheduled start date of the resource.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.DateTime? Start {
                    get {
                        XElement x = this.GetElement(StartXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                    set {
                        this.SetElement(StartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The scheduled finish date of the resource.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.DateTime? Finish {
                    get {
                        XElement x = this.GetElement(FinishXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                    set {
                        this.SetElement(FinishXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether the resource can be leveled.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Boolean? CanLevel {
                    get {
                        XElement x = this.GetElement(CanLevelXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(CanLevelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// How cost is accrued against the resource. Values are: 1=Start, 2=End, 3=Prorated, $New4=Invalid.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? AccrueAt {
                    get {
                        XElement x = this.GetElement(AccrueAtXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(AccrueAtXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(AccrueAtXName, value, "AccrueAt", AccrueAtLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// The total work assigned to the resource across all assigned tasks.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.TimeSpan? Work {
                    get {
                        XElement x = this.GetElement(WorkXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                    set {
                        this.SetElement(WorkXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The amount of non-overtime work assigned to the resource.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.TimeSpan? RegularWork {
                    get {
                        XElement x = this.GetElement(RegularWorkXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                    set {
                        this.SetElement(RegularWorkXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The amount of overtime work assigned to the resource.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.TimeSpan? OvertimeWork {
                    get {
                        XElement x = this.GetElement(OvertimeWorkXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                    set {
                        this.SetElement(OvertimeWorkXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The amount of actual work performed by the resource.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.TimeSpan? ActualWork {
                    get {
                        XElement x = this.GetElement(ActualWorkXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                    set {
                        this.SetElement(ActualWorkXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The amount of remaining work required to complete all assigned tasks.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.TimeSpan? RemainingWork {
                    get {
                        XElement x = this.GetElement(RemainingWorkXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                    set {
                        this.SetElement(RemainingWorkXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The amount of actual overtime work performed by the resource.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.TimeSpan? ActualOvertimeWork {
                    get {
                        XElement x = this.GetElement(ActualOvertimeWorkXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                    set {
                        this.SetElement(ActualOvertimeWorkXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The amount of remaining overtime work required to complete all tasks.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.TimeSpan? RemainingOvertimeWork {
                    get {
                        XElement x = this.GetElement(RemainingOvertimeWorkXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                    set {
                        this.SetElement(RemainingOvertimeWorkXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The percentage of work completed across all tasks.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? PercentWorkComplete {
                    get {
                        XElement x = this.GetElement(PercentWorkCompleteXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        this.SetElement(PercentWorkCompleteXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The standard rate of the resource. This value is as of the current date if a rate table exists for the resource.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? StandardRate {
                    get {
                        XElement x = this.GetElement(StandardRateXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElement(StandardRateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The units used by Microsoft Project to display the standard rate.  1=m, 2=h, 3=d, 4=w, 5=mo, 7=y, 8=material resource rate (or blank symbol specified).
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? StandardRateFormat {
                    get {
                        XElement x = this.GetElement(StandardRateFormatXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(StandardRateFormatXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(StandardRateFormatXName, value, "StandardRateFormat", StandardRateFormatLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// The total project cost for the resource across all assigned tasks.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? Cost {
                    get {
                        XElement x = this.GetElement(CostXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElement(CostXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The overtime rate of the resource. This value is as of the current date if a rate table exists for the resource.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? OvertimeRate {
                    get {
                        XElement x = this.GetElement(OvertimeRateXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElement(OvertimeRateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The units used by Microsoft Project to display the overtime rate.  1=m, 2=h, 3=d, 4=w, 5=mo, 7=y.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? OvertimeRateFormat {
                    get {
                        XElement x = this.GetElement(OvertimeRateFormatXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(OvertimeRateFormatXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(OvertimeRateFormatXName, value, "OvertimeRateFormat", OvertimeRateFormatLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// The total overtime cost for the resource including actual and remaining overtime costs.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? OvertimeCost {
                    get {
                        XElement x = this.GetElement(OvertimeCostXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElement(OvertimeCostXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The cost per use of the resource. This value is as of the current date if a rate table exists for the resource.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? CostPerUse {
                    get {
                        XElement x = this.GetElement(CostPerUseXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElement(CostPerUseXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The actual cost incurred by the resource across all assigned tasks.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? ActualCost {
                    get {
                        XElement x = this.GetElement(ActualCostXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElement(ActualCostXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The actual overtime cost incurred by the resource across all assigned tasks.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? ActualOvertimeCost {
                    get {
                        XElement x = this.GetElement(ActualOvertimeCostXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElement(ActualOvertimeCostXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The remaining projected cost of the resource to complete all assigned tasks.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? RemainingCost {
                    get {
                        XElement x = this.GetElement(RemainingCostXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElement(RemainingCostXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The remaining projected overtime cost of the resource to complete all assigned tasks.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? RemainingOvertimeCost {
                    get {
                        XElement x = this.GetElement(RemainingOvertimeCostXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElement(RemainingOvertimeCostXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The difference between the baseline work and the work as minutes x 1000.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Single? WorkVariance {
                    get {
                        XElement x = this.GetElement(WorkVarianceXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                    set {
                        this.SetElement(WorkVarianceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The difference between the baseline cost and the cost.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Single? CostVariance {
                    get {
                        XElement x = this.GetElement(CostVarianceXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                    set {
                        this.SetElement(CostVarianceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The earned value schedule variance, through the project status date.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Single? SV {
                    get {
                        XElement x = this.GetElement(SVXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                    set {
                        this.SetElement(SVXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The earned value cost variance, through the project status date.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Single? CV {
                    get {
                        XElement x = this.GetElement(CVXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                    set {
                        this.SetElement(CVXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The actual cost of the work performed by the resource for the project to-date.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Single? ACWP {
                    get {
                        XElement x = this.GetElement(ACWPXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                    set {
                        this.SetElement(ACWPXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The resource calendar.Refers to a valid UID in the Calendars element of the Microsoft Project XML Schema.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? CalendarUID {
                    get {
                        XElement x = this.GetElement(CalendarUIDXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        this.SetElement(CalendarUIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The text notes associated with the resource.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual string Notes {
                    get {
                        XElement x = this.GetElement(NotesXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(NotesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The budget cost of work scheduled for the resource.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Single? BCWS {
                    get {
                        XElement x = this.GetElement(BCWSXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                    set {
                        this.SetElement(BCWSXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The budgeted cost of of the work performed by the resource for the project to-date.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Single? BCWP {
                    get {
                        XElement x = this.GetElement(BCWPXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                    set {
                        this.SetElement(BCWPXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether the resource is generic.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Boolean? IsGeneric {
                    get {
                        XElement x = this.GetElement(IsGenericXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(IsGenericXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether the resource is set to inactive.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Boolean? IsInactive {
                    get {
                        XElement x = this.GetElement(IsInactiveXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(IsInactiveXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether the resource is an Enterprise resource.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Boolean? IsEnterprise {
                    get {
                        XElement x = this.GetElement(IsEnterpriseXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(IsEnterpriseXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The booking type of the resource. 1=Commited, 2=Proposed.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? BookingType {
                    get {
                        XElement x = this.GetElement(BookingTypeXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(BookingTypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(BookingTypeXName, value, "BookingType", BookingTypeLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// The duration through which actual work is protected.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.TimeSpan? ActualWorkProtected {
                    get {
                        XElement x = this.GetElement(ActualWorkProtectedXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                    set {
                        this.SetElement(ActualWorkProtectedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The duration through which actual overtime work is protected.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.TimeSpan? ActualOvertimeWorkProtected {
                    get {
                        XElement x = this.GetElement(ActualOvertimeWorkProtectedXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                    set {
                        this.SetElement(ActualOvertimeWorkProtectedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The Active Directory GUID for the resource.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual string ActiveDirectoryGUID {
                    get {
                        XElement x = this.GetElement(ActiveDirectoryGUIDXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(ActiveDirectoryGUIDXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(ActiveDirectoryGUIDXName, value, "ActiveDirectoryGUID", ActiveDirectoryGUIDLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// The date that the resource was created.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.DateTime? CreationDate {
                    get {
                        XElement x = this.GetElement(CreationDateXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                    set {
                        this.SetElement(CreationDateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The value of an extended attribute.  Two pieces of data are necessary - a pointer back to the extended attribute table which is specified either by the unique ID or the Field ID, and the value which is specified either with the value, or a pointer back to the value list.
                /// </para>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual IList<Microsoft.Schemas.Project2007.Project.ResourcesLocalType.ResourceLocalType.ExtendedAttributeLocalType> ExtendedAttribute {
                    get {
                        if ((this.ExtendedAttributeField == null)) {
                            this.ExtendedAttributeField = new XTypedList<ExtendedAttributeLocalType>(this, LinqToXsdTypeManager.Instance, ExtendedAttributeXName);
                        }
                        return this.ExtendedAttributeField;
                    }
                    set {
                        if ((value == null)) {
                            this.ExtendedAttributeField = null;
                        }
                        else {
                            if ((this.ExtendedAttributeField == null)) {
                                this.ExtendedAttributeField = XTypedList<ExtendedAttributeLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ExtendedAttributeXName);
                            }
                            else {
                                XTypedServices.SetList<ExtendedAttributeLocalType>(this.ExtendedAttributeField, value);
                            }
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// The baseline values for the resources.
                /// </para>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual IList<Microsoft.Schemas.Project2007.Project.ResourcesLocalType.ResourceLocalType.BaselineLocalType> Baseline {
                    get {
                        if ((this.BaselineField == null)) {
                            this.BaselineField = new XTypedList<BaselineLocalType>(this, LinqToXsdTypeManager.Instance, BaselineXName);
                        }
                        return this.BaselineField;
                    }
                    set {
                        if ((value == null)) {
                            this.BaselineField = null;
                        }
                        else {
                            if ((this.BaselineField == null)) {
                                this.BaselineField = XTypedList<BaselineLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, BaselineXName);
                            }
                            else {
                                XTypedServices.SetList<BaselineLocalType>(this.BaselineField, value);
                            }
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// The value of an outline code.  Two pieces of data are necessary - a pointer to the outline code table that is specified by the FieldID, and the value that is specified either by the ValueID or ValueGUID pointer to the value list.
                /// </para>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual IList<Microsoft.Schemas.Project2007.Project.ResourcesLocalType.ResourceLocalType.OutlineCodeLocalType> OutlineCode {
                    get {
                        if ((this.OutlineCodeField == null)) {
                            this.OutlineCodeField = new XTypedList<OutlineCodeLocalType>(this, LinqToXsdTypeManager.Instance, OutlineCodeXName);
                        }
                        return this.OutlineCodeField;
                    }
                    set {
                        if ((value == null)) {
                            this.OutlineCodeField = null;
                        }
                        else {
                            if ((this.OutlineCodeField == null)) {
                                this.OutlineCodeField = XTypedList<OutlineCodeLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, OutlineCodeXName);
                            }
                            else {
                                XTypedServices.SetList<OutlineCodeLocalType>(this.OutlineCodeField, value);
                            }
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether the resource is a cost resource.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Boolean? IsCostResource {
                    get {
                        XElement x = this.GetElement(IsCostResourceXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(IsCostResourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The name of the assignment owner.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual string AssnOwner {
                    get {
                        XElement x = this.GetElement(AssnOwnerXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(AssnOwnerXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The GUID of the assignment owner.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual string AssnOwnerGuid {
                    get {
                        XElement x = this.GetElement(AssnOwnerGuidXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(AssnOwnerGuidXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether the resource is a budget resource.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Boolean? IsBudget {
                    get {
                        XElement x = this.GetElement(IsBudgetXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(IsBudgetXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The collection of periods during which the resource is available.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual AvailabilityPeriodsLocalType AvailabilityPeriods {
                    get {
                        XElement x = this.GetElement(AvailabilityPeriodsXName);
                        return ((AvailabilityPeriodsLocalType)(x));
                    }
                    set {
                        this.SetElement(AvailabilityPeriodsXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The collection of periods and the rates associated with each one.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual RatesLocalType Rates {
                    get {
                        XElement x = this.GetElement(RatesXName);
                        return ((RatesLocalType)(x));
                    }
                    set {
                        this.SetElement(RatesXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The time phased data.
                /// </para>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (UID, ID?, Name?, Type?, IsNull?, Initials?, Phonetics?, NTAccount?, MaterialLabel?, Code?, Group?, WorkGroup?, EmailAddress?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, MaxUnits?, PeakUnits?, OverAllocated?, AvailableFrom?, AvailableTo?, Start?, Finish?, CanLevel?, AccrueAt?, Work?, RegularWork?, OvertimeWork?, ActualWork?, RemainingWork?, ActualOvertimeWork?, RemainingOvertimeWork?, PercentWorkComplete?, StandardRate?, StandardRateFormat?, Cost?, OvertimeRate?, OvertimeRateFormat?, OvertimeCost?, CostPerUse?, ActualCost?, ActualOvertimeCost?, RemainingCost?, RemainingOvertimeCost?, WorkVariance?, CostVariance?, SV?, CV?, ACWP?, CalendarUID?, Notes?, BCWS?, BCWP?, IsGeneric?, IsInactive?, IsEnterprise?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, ActiveDirectoryGUID?, CreationDate?, ExtendedAttribute*, Baseline*, OutlineCode*, IsCostResource?, AssnOwner?, AssnOwnerGuid?, IsBudget?, AvailabilityPeriods?, Rates?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual IList<TimephasedDataType> TimephasedData {
                    get {
                        if ((this.TimephasedDataField == null)) {
                            this.TimephasedDataField = new XTypedList<TimephasedDataType>(this, LinqToXsdTypeManager.Instance, TimephasedDataXName);
                        }
                        return this.TimephasedDataField;
                    }
                    set {
                        if ((value == null)) {
                            this.TimephasedDataField = null;
                        }
                        else {
                            if ((this.TimephasedDataField == null)) {
                                this.TimephasedDataField = XTypedList<TimephasedDataType>.Initialize(this, LinqToXsdTypeManager.Instance, value, TimephasedDataXName);
                            }
                            else {
                                XTypedServices.SetList<TimephasedDataType>(this.TimephasedDataField, value);
                            }
                        }
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<ResourceLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(UIDXName, typeof(decimal));
                    localElementDictionary.Add(IDXName, typeof(decimal));
                    localElementDictionary.Add(NameXName, typeof(string));
                    localElementDictionary.Add(TypeXName, typeof(decimal));
                    localElementDictionary.Add(IsNullXName, typeof(bool));
                    localElementDictionary.Add(InitialsXName, typeof(string));
                    localElementDictionary.Add(PhoneticsXName, typeof(string));
                    localElementDictionary.Add(NTAccountXName, typeof(string));
                    localElementDictionary.Add(MaterialLabelXName, typeof(string));
                    localElementDictionary.Add(CodeXName, typeof(string));
                    localElementDictionary.Add(GroupXName, typeof(string));
                    localElementDictionary.Add(WorkGroupXName, typeof(decimal));
                    localElementDictionary.Add(EmailAddressXName, typeof(string));
                    localElementDictionary.Add(HyperlinkXName, typeof(string));
                    localElementDictionary.Add(HyperlinkAddressXName, typeof(string));
                    localElementDictionary.Add(HyperlinkSubAddressXName, typeof(string));
                    localElementDictionary.Add(MaxUnitsXName, typeof(float));
                    localElementDictionary.Add(PeakUnitsXName, typeof(float));
                    localElementDictionary.Add(OverAllocatedXName, typeof(bool));
                    localElementDictionary.Add(AvailableFromXName, typeof(System.DateTime));
                    localElementDictionary.Add(AvailableToXName, typeof(System.DateTime));
                    localElementDictionary.Add(StartXName, typeof(System.DateTime));
                    localElementDictionary.Add(FinishXName, typeof(System.DateTime));
                    localElementDictionary.Add(CanLevelXName, typeof(bool));
                    localElementDictionary.Add(AccrueAtXName, typeof(decimal));
                    localElementDictionary.Add(WorkXName, typeof(System.TimeSpan));
                    localElementDictionary.Add(RegularWorkXName, typeof(System.TimeSpan));
                    localElementDictionary.Add(OvertimeWorkXName, typeof(System.TimeSpan));
                    localElementDictionary.Add(ActualWorkXName, typeof(System.TimeSpan));
                    localElementDictionary.Add(RemainingWorkXName, typeof(System.TimeSpan));
                    localElementDictionary.Add(ActualOvertimeWorkXName, typeof(System.TimeSpan));
                    localElementDictionary.Add(RemainingOvertimeWorkXName, typeof(System.TimeSpan));
                    localElementDictionary.Add(PercentWorkCompleteXName, typeof(decimal));
                    localElementDictionary.Add(StandardRateXName, typeof(decimal));
                    localElementDictionary.Add(StandardRateFormatXName, typeof(decimal));
                    localElementDictionary.Add(CostXName, typeof(decimal));
                    localElementDictionary.Add(OvertimeRateXName, typeof(decimal));
                    localElementDictionary.Add(OvertimeRateFormatXName, typeof(decimal));
                    localElementDictionary.Add(OvertimeCostXName, typeof(decimal));
                    localElementDictionary.Add(CostPerUseXName, typeof(decimal));
                    localElementDictionary.Add(ActualCostXName, typeof(decimal));
                    localElementDictionary.Add(ActualOvertimeCostXName, typeof(decimal));
                    localElementDictionary.Add(RemainingCostXName, typeof(decimal));
                    localElementDictionary.Add(RemainingOvertimeCostXName, typeof(decimal));
                    localElementDictionary.Add(WorkVarianceXName, typeof(float));
                    localElementDictionary.Add(CostVarianceXName, typeof(float));
                    localElementDictionary.Add(SVXName, typeof(float));
                    localElementDictionary.Add(CVXName, typeof(float));
                    localElementDictionary.Add(ACWPXName, typeof(float));
                    localElementDictionary.Add(CalendarUIDXName, typeof(decimal));
                    localElementDictionary.Add(NotesXName, typeof(string));
                    localElementDictionary.Add(BCWSXName, typeof(float));
                    localElementDictionary.Add(BCWPXName, typeof(float));
                    localElementDictionary.Add(IsGenericXName, typeof(bool));
                    localElementDictionary.Add(IsInactiveXName, typeof(bool));
                    localElementDictionary.Add(IsEnterpriseXName, typeof(bool));
                    localElementDictionary.Add(BookingTypeXName, typeof(decimal));
                    localElementDictionary.Add(ActualWorkProtectedXName, typeof(System.TimeSpan));
                    localElementDictionary.Add(ActualOvertimeWorkProtectedXName, typeof(System.TimeSpan));
                    localElementDictionary.Add(ActiveDirectoryGUIDXName, typeof(string));
                    localElementDictionary.Add(CreationDateXName, typeof(System.DateTime));
                    localElementDictionary.Add(ExtendedAttributeXName, typeof(ExtendedAttributeLocalType));
                    localElementDictionary.Add(BaselineXName, typeof(BaselineLocalType));
                    localElementDictionary.Add(OutlineCodeXName, typeof(OutlineCodeLocalType));
                    localElementDictionary.Add(IsCostResourceXName, typeof(bool));
                    localElementDictionary.Add(AssnOwnerXName, typeof(string));
                    localElementDictionary.Add(AssnOwnerGuidXName, typeof(string));
                    localElementDictionary.Add(IsBudgetXName, typeof(bool));
                    localElementDictionary.Add(AvailabilityPeriodsXName, typeof(AvailabilityPeriodsLocalType));
                    localElementDictionary.Add(RatesXName, typeof(RatesLocalType));
                    localElementDictionary.Add(TimephasedDataXName, typeof(TimephasedDataType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                private class NameLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 512, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private NameLocalType() {
                    }
                }
                
                private class TypeLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    0m,
                                    1m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
                    
                    private TypeLocalType() {
                    }
                }
                
                private class InitialsLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 512, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private InitialsLocalType() {
                    }
                }
                
                private class PhoneticsLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 512, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private PhoneticsLocalType() {
                    }
                }
                
                private class NTAccountLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 512, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private NTAccountLocalType() {
                    }
                }
                
                private class MaterialLabelLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 512, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private MaterialLabelLocalType() {
                    }
                }
                
                private class CodeLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 512, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private CodeLocalType() {
                    }
                }
                
                private class GroupLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 512, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private GroupLocalType() {
                    }
                }
                
                private class WorkGroupLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    0m,
                                    1m,
                                    2m,
                                    3m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
                    
                    private WorkGroupLocalType() {
                    }
                }
                
                private class EmailAddressLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 512, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private EmailAddressLocalType() {
                    }
                }
                
                private class HyperlinkLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 512, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private HyperlinkLocalType() {
                    }
                }
                
                private class HyperlinkAddressLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 512, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private HyperlinkAddressLocalType() {
                    }
                }
                
                private class HyperlinkSubAddressLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 512, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private HyperlinkSubAddressLocalType() {
                    }
                }
                
                private class AccrueAtLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    1m,
                                    2m,
                                    3m,
                                    4m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
                    
                    private AccrueAtLocalType() {
                    }
                }
                
                private class StandardRateFormatLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    1m,
                                    2m,
                                    3m,
                                    4m,
                                    5m,
                                    7m,
                                    8m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
                    
                    private StandardRateFormatLocalType() {
                    }
                }
                
                private class OvertimeRateFormatLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    1m,
                                    2m,
                                    3m,
                                    4m,
                                    5m,
                                    7m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
                    
                    private OvertimeRateFormatLocalType() {
                    }
                }
                
                private class BookingTypeLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    0m,
                                    1m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
                    
                    private BookingTypeLocalType() {
                    }
                }
                
                private class ActiveDirectoryGUIDLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 16, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private ActiveDirectoryGUIDLocalType() {
                    }
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (FieldID?, Value?, ValueGUID?, DurationFormat?)
                /// </para>
                /// </summary>
                public partial class ExtendedAttributeLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName FieldIDXName = System.Xml.Linq.XName.Get("FieldID", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName ValueXName = System.Xml.Linq.XName.Get("Value", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName ValueGUIDXName = System.Xml.Linq.XName.Get("ValueGUID", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName DurationFormatXName = System.Xml.Linq.XName.Get("DurationFormat", "http://schemas.microsoft.com/project/2007");
                    
                    private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ExtendedAttribute", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
		public static explicit operator ExtendedAttributeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ExtendedAttributeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static ExtendedAttributeLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FieldIDXName), new NamedContentModelEntity(ValueXName), new NamedContentModelEntity(ValueGUIDXName), new NamedContentModelEntity(DurationFormatXName));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (FieldID?, Value?, ValueGUID?, DurationFormat?)
                    /// </para>
                    /// </summary>
                    public ExtendedAttributeLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The project ID (PID) of the custom field.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (FieldID?, Value?, ValueGUID?, DurationFormat?)
                    /// </para>
                    /// </summary>
                    public virtual string FieldID {
                        get {
                            XElement x = this.GetElement(FieldIDXName);
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetElement(FieldIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The actual value of the extended attribute.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (FieldID?, Value?, ValueGUID?, DurationFormat?)
                    /// </para>
                    /// </summary>
                    public virtual string Value {
                        get {
                            XElement x = this.GetElement(ValueXName);
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetElement(ValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The GUID of the value in the extended attribute lookup table.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (FieldID?, Value?, ValueGUID?, DurationFormat?)
                    /// </para>
                    /// </summary>
                    public virtual System.Decimal? ValueGUID {
                        get {
                            XElement x = this.GetElement(ValueGUIDXName);
                            if ((x == null)) {
                                return null;
                            }
                            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                        set {
                            this.SetElement(ValueGUIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The format for expressing the bulk duration.  Values are: 3=m, 4=em, 5=h, 6=eh, 7=d, 8=ed, 9=w, 10=ew, 11=mo, 12=emo, 19=%, 20=e%, 21=null, 35=m?, 36=em?, 37=h?, 38=eh?, 39=d?, 40=ed?, 41=w?, 42=ew?, 43=mo?, 44=emo?, 51=%?, 52=e%? and 53=null.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (FieldID?, Value?, ValueGUID?, DurationFormat?)
                    /// </para>
                    /// </summary>
                    public virtual System.Decimal? DurationFormat {
                        get {
                            XElement x = this.GetElement(DurationFormatXName);
                            if ((x == null)) {
                                return null;
                            }
                            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                        set {
                            if (value == null) {
                                this.SetElement(DurationFormatXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                            }
                            else {
                                this.SetElementWithValidation(DurationFormatXName, value, "DurationFormat", DurationFormatLocalType.TypeDefinition);
                            }
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    System.Xml.Linq.XName IXMetaData.SchemaName {
                        get {
                            return xName;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<ExtendedAttributeLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(FieldIDXName, typeof(string));
                        localElementDictionary.Add(ValueXName, typeof(string));
                        localElementDictionary.Add(ValueGUIDXName, typeof(decimal));
                        localElementDictionary.Add(DurationFormatXName, typeof(decimal));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                    
                    private class DurationFormatLocalType {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                        3m,
                                        4m,
                                        5m,
                                        6m,
                                        7m,
                                        8m,
                                        9m,
                                        10m,
                                        11m,
                                        12m,
                                        19m,
                                        20m,
                                        21m,
                                        35m,
                                        36m,
                                        37m,
                                        38m,
                                        39m,
                                        40m,
                                        41m,
                                        42m,
                                        43m,
                                        44m,
                                        51m,
                                        52m,
                                        53m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
                        
                        private DurationFormatLocalType() {
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (Number, Work?, Cost?, BCWS?, BCWP?)
                /// </para>
                /// </summary>
                public partial class BaselineLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName NumberXName = System.Xml.Linq.XName.Get("Number", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName WorkXName = System.Xml.Linq.XName.Get("Work", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName CostXName = System.Xml.Linq.XName.Get("Cost", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName BCWSXName = System.Xml.Linq.XName.Get("BCWS", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName BCWPXName = System.Xml.Linq.XName.Get("BCWP", "http://schemas.microsoft.com/project/2007");
                    
                    private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Baseline", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
		public static explicit operator BaselineLocalType(XElement xe) { return XTypedServices.ToXTypedElement<BaselineLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static BaselineLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(NumberXName), new NamedContentModelEntity(WorkXName), new NamedContentModelEntity(CostXName), new NamedContentModelEntity(BCWSXName), new NamedContentModelEntity(BCWPXName));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (Number, Work?, Cost?, BCWS?, BCWP?)
                    /// </para>
                    /// </summary>
                    public BaselineLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The unique number of the baseline data record.
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (Number, Work?, Cost?, BCWS?, BCWP?)
                    /// </para>
                    /// </summary>
                    public virtual decimal Number {
                        get {
                            XElement x = this.GetElement(NumberXName);
                            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                        set {
                            this.SetElement(NumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The work assigned the resource when the baseline is saved.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (Number, Work?, Cost?, BCWS?, BCWP?)
                    /// </para>
                    /// </summary>
                    public virtual System.TimeSpan? Work {
                        get {
                            XElement x = this.GetElement(WorkXName);
                            if ((x == null)) {
                                return null;
                            }
                            return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                        }
                        set {
                            this.SetElement(WorkXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The projected cost for the resource when the baseline was saved.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (Number, Work?, Cost?, BCWS?, BCWP?)
                    /// </para>
                    /// </summary>
                    public virtual System.Single? Cost {
                        get {
                            XElement x = this.GetElement(CostXName);
                            if ((x == null)) {
                                return null;
                            }
                            return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                        }
                        set {
                            this.SetElement(CostXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The budget cost of work scheduled for the resource.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (Number, Work?, Cost?, BCWS?, BCWP?)
                    /// </para>
                    /// </summary>
                    public virtual System.Single? BCWS {
                        get {
                            XElement x = this.GetElement(BCWSXName);
                            if ((x == null)) {
                                return null;
                            }
                            return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                        }
                        set {
                            this.SetElement(BCWSXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The budgeted cost of of the work performed by the resource for the project to-date.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (Number, Work?, Cost?, BCWS?, BCWP?)
                    /// </para>
                    /// </summary>
                    public virtual System.Single? BCWP {
                        get {
                            XElement x = this.GetElement(BCWPXName);
                            if ((x == null)) {
                                return null;
                            }
                            return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                        }
                        set {
                            this.SetElement(BCWPXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    System.Xml.Linq.XName IXMetaData.SchemaName {
                        get {
                            return xName;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<BaselineLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(NumberXName, typeof(decimal));
                        localElementDictionary.Add(WorkXName, typeof(System.TimeSpan));
                        localElementDictionary.Add(CostXName, typeof(float));
                        localElementDictionary.Add(BCWSXName, typeof(float));
                        localElementDictionary.Add(BCWPXName, typeof(float));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (FieldID?, ValueID?, ValueGUID?)
                /// </para>
                /// </summary>
                public partial class OutlineCodeLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName FieldIDXName = System.Xml.Linq.XName.Get("FieldID", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName ValueIDXName = System.Xml.Linq.XName.Get("ValueID", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName ValueGUIDXName = System.Xml.Linq.XName.Get("ValueGUID", "http://schemas.microsoft.com/project/2007");
                    
                    private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OutlineCode", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
		public static explicit operator OutlineCodeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<OutlineCodeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static OutlineCodeLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FieldIDXName), new NamedContentModelEntity(ValueIDXName), new NamedContentModelEntity(ValueGUIDXName));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (FieldID?, ValueID?, ValueGUID?)
                    /// </para>
                    /// </summary>
                    public OutlineCodeLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The number value of the custom field project ID (PID).
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (FieldID?, ValueID?, ValueGUID?)
                    /// </para>
                    /// </summary>
                    public virtual string FieldID {
                        get {
                            XElement x = this.GetElement(FieldIDXName);
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetElement(FieldIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The ID in the value list associated with the definition in the outline code collection
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (FieldID?, ValueID?, ValueGUID?)
                    /// </para>
                    /// </summary>
                    public virtual System.Decimal? ValueID {
                        get {
                            XElement x = this.GetElement(ValueIDXName);
                            if ((x == null)) {
                                return null;
                            }
                            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                        set {
                            this.SetElement(ValueIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The GUID of the value in the value list. The ValueGUID matches the FieldGUID in the value list.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (FieldID?, ValueID?, ValueGUID?)
                    /// </para>
                    /// </summary>
                    public virtual System.Decimal? ValueGUID {
                        get {
                            XElement x = this.GetElement(ValueGUIDXName);
                            if ((x == null)) {
                                return null;
                            }
                            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                        set {
                            this.SetElement(ValueGUIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    System.Xml.Linq.XName IXMetaData.SchemaName {
                        get {
                            return xName;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<OutlineCodeLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(FieldIDXName, typeof(string));
                        localElementDictionary.Add(ValueIDXName, typeof(decimal));
                        localElementDictionary.Add(ValueGUIDXName, typeof(decimal));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (AvailabilityPeriod*)
                /// </para>
                /// </summary>
                public partial class AvailabilityPeriodsLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName AvailabilityPeriodXName = System.Xml.Linq.XName.Get("AvailabilityPeriod", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<AvailabilityPeriodLocalType> AvailabilityPeriodField;
                    
                    private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AvailabilityPeriods", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
		public static explicit operator AvailabilityPeriodsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<AvailabilityPeriodsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static AvailabilityPeriodsLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AvailabilityPeriodXName));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (AvailabilityPeriod*)
                    /// </para>
                    /// </summary>
                    public AvailabilityPeriodsLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The period the resource is available.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (AvailabilityPeriod*)
                    /// </para>
                    /// </summary>
                    public virtual IList<Microsoft.Schemas.Project2007.Project.ResourcesLocalType.ResourceLocalType.AvailabilityPeriodsLocalType.AvailabilityPeriodLocalType> AvailabilityPeriod {
                        get {
                            if ((this.AvailabilityPeriodField == null)) {
                                this.AvailabilityPeriodField = new XTypedList<AvailabilityPeriodLocalType>(this, LinqToXsdTypeManager.Instance, AvailabilityPeriodXName);
                            }
                            return this.AvailabilityPeriodField;
                        }
                        set {
                            if ((value == null)) {
                                this.AvailabilityPeriodField = null;
                            }
                            else {
                                if ((this.AvailabilityPeriodField == null)) {
                                    this.AvailabilityPeriodField = XTypedList<AvailabilityPeriodLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, AvailabilityPeriodXName);
                                }
                                else {
                                    XTypedServices.SetList<AvailabilityPeriodLocalType>(this.AvailabilityPeriodField, value);
                                }
                            }
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    System.Xml.Linq.XName IXMetaData.SchemaName {
                        get {
                            return xName;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<AvailabilityPeriodsLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(AvailabilityPeriodXName, typeof(AvailabilityPeriodLocalType));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (AvailableFrom?, AvailableTo?, AvailableUnits?)
                    /// </para>
                    /// </summary>
                    public partial class AvailabilityPeriodLocalType : XTypedElement, IXMetaData {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName AvailableFromXName = System.Xml.Linq.XName.Get("AvailableFrom", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName AvailableToXName = System.Xml.Linq.XName.Get("AvailableTo", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName AvailableUnitsXName = System.Xml.Linq.XName.Get("AvailableUnits", "http://schemas.microsoft.com/project/2007");
                        
                        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AvailabilityPeriod", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;
                        
		public static explicit operator AvailabilityPeriodLocalType(XElement xe) { return XTypedServices.ToXTypedElement<AvailabilityPeriodLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                        
                        static AvailabilityPeriodLocalType() {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AvailableFromXName), new NamedContentModelEntity(AvailableToXName), new NamedContentModelEntity(AvailableUnitsXName));
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (AvailableFrom?, AvailableTo?, AvailableUnits?)
                        /// </para>
                        /// </summary>
                        public AvailabilityPeriodLocalType() {
                        }
                        
                        /// <summary>
                        /// <para>
                        /// The date that the resource becomes available for the specified period.
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (AvailableFrom?, AvailableTo?, AvailableUnits?)
                        /// </para>
                        /// </summary>
                        public virtual System.DateTime? AvailableFrom {
                            get {
                                XElement x = this.GetElement(AvailableFromXName);
                                if ((x == null)) {
                                    return null;
                                }
                                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                            }
                            set {
                                this.SetElement(AvailableFromXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// The last date that the resource is available for the specified period.
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (AvailableFrom?, AvailableTo?, AvailableUnits?)
                        /// </para>
                        /// </summary>
                        public virtual System.DateTime? AvailableTo {
                            get {
                                XElement x = this.GetElement(AvailableToXName);
                                if ((x == null)) {
                                    return null;
                                }
                                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                            }
                            set {
                                this.SetElement(AvailableToXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// The percentage that the resource is available during the specified period.
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (AvailableFrom?, AvailableTo?, AvailableUnits?)
                        /// </para>
                        /// </summary>
                        public virtual System.Single? AvailableUnits {
                            get {
                                XElement x = this.GetElement(AvailableUnitsXName);
                                if ((x == null)) {
                                    return null;
                                }
                                return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                            }
                            set {
                                this.SetElement(AvailableUnitsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                            get {
                                return localElementDictionary;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        System.Xml.Linq.XName IXMetaData.SchemaName {
                            get {
                                return xName;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin {
                            get {
                                return SchemaOrigin.Fragment;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager {
                            get {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }
                        
                        public override XTypedElement Clone() {
                            return XTypedServices.CloneXTypedElement<AvailabilityPeriodLocalType>(this);
                        }
                        
                        private static void BuildElementDictionary() {
                            localElementDictionary.Add(AvailableFromXName, typeof(System.DateTime));
                            localElementDictionary.Add(AvailableToXName, typeof(System.DateTime));
                            localElementDictionary.Add(AvailableUnitsXName, typeof(float));
                        }
                        
                        ContentModelEntity IXMetaData.GetContentModel() {
                            return contentModel;
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (Rate*)
                /// </para>
                /// </summary>
                public partial class RatesLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName RateXName = System.Xml.Linq.XName.Get("Rate", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<RateLocalType> RateField;
                    
                    private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Rates", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
		public static explicit operator RatesLocalType(XElement xe) { return XTypedServices.ToXTypedElement<RatesLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static RatesLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RateXName));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (Rate*)
                    /// </para>
                    /// </summary>
                    public RatesLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The definition of a time period, and the rates applicable for the resource during that period.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (Rate*)
                    /// </para>
                    /// </summary>
                    public virtual IList<Microsoft.Schemas.Project2007.Project.ResourcesLocalType.ResourceLocalType.RatesLocalType.RateLocalType> Rate {
                        get {
                            if ((this.RateField == null)) {
                                this.RateField = new XTypedList<RateLocalType>(this, LinqToXsdTypeManager.Instance, RateXName);
                            }
                            return this.RateField;
                        }
                        set {
                            if ((value == null)) {
                                this.RateField = null;
                            }
                            else {
                                if ((this.RateField == null)) {
                                    this.RateField = XTypedList<RateLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, RateXName);
                                }
                                else {
                                    XTypedServices.SetList<RateLocalType>(this.RateField, value);
                                }
                            }
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    System.Xml.Linq.XName IXMetaData.SchemaName {
                        get {
                            return xName;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<RatesLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(RateXName, typeof(RateLocalType));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (RatesFrom, RatesTo, RateTable?, StandardRate?, StandardRateFormat?, OvertimeRate?, OvertimeRateFormat?, CostPerUse?)
                    /// </para>
                    /// </summary>
                    public partial class RateLocalType : XTypedElement, IXMetaData {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName RatesFromXName = System.Xml.Linq.XName.Get("RatesFrom", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName RatesToXName = System.Xml.Linq.XName.Get("RatesTo", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName RateTableXName = System.Xml.Linq.XName.Get("RateTable", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName StandardRateXName = System.Xml.Linq.XName.Get("StandardRate", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName StandardRateFormatXName = System.Xml.Linq.XName.Get("StandardRateFormat", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName OvertimeRateXName = System.Xml.Linq.XName.Get("OvertimeRate", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName OvertimeRateFormatXName = System.Xml.Linq.XName.Get("OvertimeRateFormat", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        [EditorBrowsable(EditorBrowsableState.Never)]
                        internal static readonly System.Xml.Linq.XName CostPerUseXName = System.Xml.Linq.XName.Get("CostPerUse", "http://schemas.microsoft.com/project/2007");
                        
                        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Rate", "http://schemas.microsoft.com/project/2007");
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        private static ContentModelEntity contentModel;
                        
		public static explicit operator RateLocalType(XElement xe) { return XTypedServices.ToXTypedElement<RateLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                        
                        static RateLocalType() {
                            BuildElementDictionary();
                            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RatesFromXName), new NamedContentModelEntity(RatesToXName), new NamedContentModelEntity(RateTableXName), new NamedContentModelEntity(StandardRateXName), new NamedContentModelEntity(StandardRateFormatXName), new NamedContentModelEntity(OvertimeRateXName), new NamedContentModelEntity(OvertimeRateFormatXName), new NamedContentModelEntity(CostPerUseXName));
                        }
                        
                        /// <summary>
                        /// <para>
                        /// Regular expression: (RatesFrom, RatesTo, RateTable?, StandardRate?, StandardRateFormat?, OvertimeRate?, OvertimeRateFormat?, CostPerUse?)
                        /// </para>
                        /// </summary>
                        public RateLocalType() {
                        }
                        
                        /// <summary>
                        /// <para>
                        /// The date that the rate becomes effective.
                        /// </para>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (RatesFrom, RatesTo, RateTable?, StandardRate?, StandardRateFormat?, OvertimeRate?, OvertimeRateFormat?, CostPerUse?)
                        /// </para>
                        /// </summary>
                        public virtual System.DateTime RatesFrom {
                            get {
                                XElement x = this.GetElement(RatesFromXName);
                                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                            }
                            set {
                                this.SetElement(RatesFromXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// The last date that the rate is effective.
                        /// </para>
                        /// <para>
                        /// Occurrence: required
                        /// </para>
                        /// <para>
                        /// Regular expression: (RatesFrom, RatesTo, RateTable?, StandardRate?, StandardRateFormat?, OvertimeRate?, OvertimeRateFormat?, CostPerUse?)
                        /// </para>
                        /// </summary>
                        public virtual System.DateTime RatesTo {
                            get {
                                XElement x = this.GetElement(RatesToXName);
                                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                            }
                            set {
                                this.SetElement(RatesToXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// The unique identifier of the rate table for the resource. Values are: 0=A, 1=B, 2=C, 3=D, 4=E.
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (RatesFrom, RatesTo, RateTable?, StandardRate?, StandardRateFormat?, OvertimeRate?, OvertimeRateFormat?, CostPerUse?)
                        /// </para>
                        /// </summary>
                        public virtual System.Decimal? RateTable {
                            get {
                                XElement x = this.GetElement(RateTableXName);
                                if ((x == null)) {
                                    return null;
                                }
                                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                            }
                            set {
                                if (value == null) {
                                    this.SetElement(RateTableXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                                }
                                else {
                                    this.SetElementWithValidation(RateTableXName, value, "RateTable", RateTableLocalType.TypeDefinition);
                                }
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// The standard rate for the resource for the period specified.
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (RatesFrom, RatesTo, RateTable?, StandardRate?, StandardRateFormat?, OvertimeRate?, OvertimeRateFormat?, CostPerUse?)
                        /// </para>
                        /// </summary>
                        public virtual System.Decimal? StandardRate {
                            get {
                                XElement x = this.GetElement(StandardRateXName);
                                if ((x == null)) {
                                    return null;
                                }
                                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                            }
                            set {
                                this.SetElement(StandardRateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// The units used by Microsoft Project to display the standard rate.  1=m, 2=h, 3=d, 4=w, 5=mo, 7=y.
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (RatesFrom, RatesTo, RateTable?, StandardRate?, StandardRateFormat?, OvertimeRate?, OvertimeRateFormat?, CostPerUse?)
                        /// </para>
                        /// </summary>
                        public virtual System.Decimal? StandardRateFormat {
                            get {
                                XElement x = this.GetElement(StandardRateFormatXName);
                                if ((x == null)) {
                                    return null;
                                }
                                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                            }
                            set {
                                if (value == null) {
                                    this.SetElement(StandardRateFormatXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                                }
                                else {
                                    this.SetElementWithValidation(StandardRateFormatXName, value, "StandardRateFormat", StandardRateFormatLocalType.TypeDefinition);
                                }
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// The overtime rate for the resource for the period specified.
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (RatesFrom, RatesTo, RateTable?, StandardRate?, StandardRateFormat?, OvertimeRate?, OvertimeRateFormat?, CostPerUse?)
                        /// </para>
                        /// </summary>
                        public virtual System.Decimal? OvertimeRate {
                            get {
                                XElement x = this.GetElement(OvertimeRateXName);
                                if ((x == null)) {
                                    return null;
                                }
                                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                            }
                            set {
                                this.SetElement(OvertimeRateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// The units used by Microsoft Project to display the overtime rate.  1=m, 2=h, 3=d, 4=w, 5=mo, 7=y.
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (RatesFrom, RatesTo, RateTable?, StandardRate?, StandardRateFormat?, OvertimeRate?, OvertimeRateFormat?, CostPerUse?)
                        /// </para>
                        /// </summary>
                        public virtual System.Decimal? OvertimeRateFormat {
                            get {
                                XElement x = this.GetElement(OvertimeRateFormatXName);
                                if ((x == null)) {
                                    return null;
                                }
                                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                            }
                            set {
                                if (value == null) {
                                    this.SetElement(OvertimeRateFormatXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                                }
                                else {
                                    this.SetElementWithValidation(OvertimeRateFormatXName, value, "OvertimeRateFormat", OvertimeRateFormatLocalType.TypeDefinition);
                                }
                            }
                        }
                        
                        /// <summary>
                        /// <para>
                        /// The cost per use of the resource. This value is as of the current date if a rate table exists for the resource.
                        /// </para>
                        /// <para>
                        /// Occurrence: optional
                        /// </para>
                        /// <para>
                        /// Regular expression: (RatesFrom, RatesTo, RateTable?, StandardRate?, StandardRateFormat?, OvertimeRate?, OvertimeRateFormat?, CostPerUse?)
                        /// </para>
                        /// </summary>
                        public virtual System.Decimal? CostPerUse {
                            get {
                                XElement x = this.GetElement(CostPerUseXName);
                                if ((x == null)) {
                                    return null;
                                }
                                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                            }
                            set {
                                this.SetElement(CostPerUseXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                            get {
                                return localElementDictionary;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        System.Xml.Linq.XName IXMetaData.SchemaName {
                            get {
                                return xName;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        SchemaOrigin IXMetaData.TypeOrigin {
                            get {
                                return SchemaOrigin.Fragment;
                            }
                        }
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        ILinqToXsdTypeManager IXMetaData.TypeManager {
                            get {
                                return LinqToXsdTypeManager.Instance;
                            }
                        }
                        
                        public override XTypedElement Clone() {
                            return XTypedServices.CloneXTypedElement<RateLocalType>(this);
                        }
                        
                        private static void BuildElementDictionary() {
                            localElementDictionary.Add(RatesFromXName, typeof(System.DateTime));
                            localElementDictionary.Add(RatesToXName, typeof(System.DateTime));
                            localElementDictionary.Add(RateTableXName, typeof(decimal));
                            localElementDictionary.Add(StandardRateXName, typeof(decimal));
                            localElementDictionary.Add(StandardRateFormatXName, typeof(decimal));
                            localElementDictionary.Add(OvertimeRateXName, typeof(decimal));
                            localElementDictionary.Add(OvertimeRateFormatXName, typeof(decimal));
                            localElementDictionary.Add(CostPerUseXName, typeof(decimal));
                        }
                        
                        ContentModelEntity IXMetaData.GetContentModel() {
                            return contentModel;
                        }
                        
                        private class RateTableLocalType {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                            0m,
                                            1m,
                                            2m,
                                            3m,
                                            4m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
                            
                            private RateTableLocalType() {
                            }
                        }
                        
                        private class StandardRateFormatLocalType {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                            1m,
                                            2m,
                                            3m,
                                            4m,
                                            5m,
                                            7m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
                            
                            private StandardRateFormatLocalType() {
                            }
                        }
                        
                        private class OvertimeRateFormatLocalType {
                            
                            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                            1m,
                                            2m,
                                            3m,
                                            4m,
                                            5m,
                                            7m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
                            
                            private OvertimeRateFormatLocalType() {
                            }
                        }
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Assignment*)
        /// </para>
        /// </summary>
        public partial class AssignmentsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AssignmentXName = System.Xml.Linq.XName.Get("Assignment", "http://schemas.microsoft.com/project/2007");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<AssignmentLocalType> AssignmentField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Assignments", "http://schemas.microsoft.com/project/2007");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator AssignmentsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<AssignmentsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static AssignmentsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AssignmentXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Assignment*)
            /// </para>
            /// </summary>
            public AssignmentsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// There must be at least one assignment in each Assignments collection.
            /// </para>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Assignment*)
            /// </para>
            /// </summary>
            public virtual IList<Microsoft.Schemas.Project2007.Project.AssignmentsLocalType.AssignmentLocalType> Assignment {
                get {
                    if ((this.AssignmentField == null)) {
                        this.AssignmentField = new XTypedList<AssignmentLocalType>(this, LinqToXsdTypeManager.Instance, AssignmentXName);
                    }
                    return this.AssignmentField;
                }
                set {
                    if ((value == null)) {
                        this.AssignmentField = null;
                    }
                    else {
                        if ((this.AssignmentField == null)) {
                            this.AssignmentField = XTypedList<AssignmentLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, AssignmentXName);
                        }
                        else {
                            XTypedServices.SetList<AssignmentLocalType>(this.AssignmentField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<AssignmentsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(AssignmentXName, typeof(AssignmentLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
            /// </para>
            /// </summary>
            public partial class AssignmentLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName UIDXName = System.Xml.Linq.XName.Get("UID", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName TaskUIDXName = System.Xml.Linq.XName.Get("TaskUID", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ResourceUIDXName = System.Xml.Linq.XName.Get("ResourceUID", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName PercentWorkCompleteXName = System.Xml.Linq.XName.Get("PercentWorkComplete", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ActualCostXName = System.Xml.Linq.XName.Get("ActualCost", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ActualFinishXName = System.Xml.Linq.XName.Get("ActualFinish", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ActualOvertimeCostXName = System.Xml.Linq.XName.Get("ActualOvertimeCost", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ActualOvertimeWorkXName = System.Xml.Linq.XName.Get("ActualOvertimeWork", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ActualStartXName = System.Xml.Linq.XName.Get("ActualStart", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ActualWorkXName = System.Xml.Linq.XName.Get("ActualWork", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ACWPXName = System.Xml.Linq.XName.Get("ACWP", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ConfirmedXName = System.Xml.Linq.XName.Get("Confirmed", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName CostXName = System.Xml.Linq.XName.Get("Cost", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName CostRateTableXName = System.Xml.Linq.XName.Get("CostRateTable", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName CostVarianceXName = System.Xml.Linq.XName.Get("CostVariance", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName CVXName = System.Xml.Linq.XName.Get("CV", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName DelayXName = System.Xml.Linq.XName.Get("Delay", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName FinishXName = System.Xml.Linq.XName.Get("Finish", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName FinishVarianceXName = System.Xml.Linq.XName.Get("FinishVariance", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName HyperlinkXName = System.Xml.Linq.XName.Get("Hyperlink", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName HyperlinkAddressXName = System.Xml.Linq.XName.Get("HyperlinkAddress", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName HyperlinkSubAddressXName = System.Xml.Linq.XName.Get("HyperlinkSubAddress", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName WorkVarianceXName = System.Xml.Linq.XName.Get("WorkVariance", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName HasFixedRateUnitsXName = System.Xml.Linq.XName.Get("HasFixedRateUnits", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName FixedMaterialXName = System.Xml.Linq.XName.Get("FixedMaterial", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName LevelingDelayXName = System.Xml.Linq.XName.Get("LevelingDelay", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName LevelingDelayFormatXName = System.Xml.Linq.XName.Get("LevelingDelayFormat", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName LinkedFieldsXName = System.Xml.Linq.XName.Get("LinkedFields", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName MilestoneXName = System.Xml.Linq.XName.Get("Milestone", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName NotesXName = System.Xml.Linq.XName.Get("Notes", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName OverallocatedXName = System.Xml.Linq.XName.Get("Overallocated", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName OvertimeCostXName = System.Xml.Linq.XName.Get("OvertimeCost", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName OvertimeWorkXName = System.Xml.Linq.XName.Get("OvertimeWork", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName PeakUnitsXName = System.Xml.Linq.XName.Get("PeakUnits", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName RegularWorkXName = System.Xml.Linq.XName.Get("RegularWork", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName RemainingCostXName = System.Xml.Linq.XName.Get("RemainingCost", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName RemainingOvertimeCostXName = System.Xml.Linq.XName.Get("RemainingOvertimeCost", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName RemainingOvertimeWorkXName = System.Xml.Linq.XName.Get("RemainingOvertimeWork", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName RemainingWorkXName = System.Xml.Linq.XName.Get("RemainingWork", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ResponsePendingXName = System.Xml.Linq.XName.Get("ResponsePending", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName StartXName = System.Xml.Linq.XName.Get("Start", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName StopXName = System.Xml.Linq.XName.Get("Stop", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ResumeXName = System.Xml.Linq.XName.Get("Resume", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName StartVarianceXName = System.Xml.Linq.XName.Get("StartVariance", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName SummaryXName = System.Xml.Linq.XName.Get("Summary", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName SVXName = System.Xml.Linq.XName.Get("SV", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName UnitsXName = System.Xml.Linq.XName.Get("Units", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName UpdateNeededXName = System.Xml.Linq.XName.Get("UpdateNeeded", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName VACXName = System.Xml.Linq.XName.Get("VAC", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName WorkXName = System.Xml.Linq.XName.Get("Work", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName WorkContourXName = System.Xml.Linq.XName.Get("WorkContour", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName BCWSXName = System.Xml.Linq.XName.Get("BCWS", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName BCWPXName = System.Xml.Linq.XName.Get("BCWP", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName BookingTypeXName = System.Xml.Linq.XName.Get("BookingType", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ActualWorkProtectedXName = System.Xml.Linq.XName.Get("ActualWorkProtected", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ActualOvertimeWorkProtectedXName = System.Xml.Linq.XName.Get("ActualOvertimeWorkProtected", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName CreationDateXName = System.Xml.Linq.XName.Get("CreationDate", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName AssnOwnerXName = System.Xml.Linq.XName.Get("AssnOwner", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName AssnOwnerGuidXName = System.Xml.Linq.XName.Get("AssnOwnerGuid", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName BudgetCostXName = System.Xml.Linq.XName.Get("BudgetCost", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName BudgetWorkXName = System.Xml.Linq.XName.Get("BudgetWork", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName ExtendedAttributeXName = System.Xml.Linq.XName.Get("ExtendedAttribute", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<ExtendedAttributeLocalType> ExtendedAttributeField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName BaselineXName = System.Xml.Linq.XName.Get("Baseline", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<BaselineLocalType> BaselineField;
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404000XName = System.Xml.Linq.XName.Get("f404000", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404001XName = System.Xml.Linq.XName.Get("f404001", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404002XName = System.Xml.Linq.XName.Get("f404002", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404003XName = System.Xml.Linq.XName.Get("f404003", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404004XName = System.Xml.Linq.XName.Get("f404004", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404005XName = System.Xml.Linq.XName.Get("f404005", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404006XName = System.Xml.Linq.XName.Get("f404006", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404007XName = System.Xml.Linq.XName.Get("f404007", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404008XName = System.Xml.Linq.XName.Get("f404008", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404009XName = System.Xml.Linq.XName.Get("f404009", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40400aXName = System.Xml.Linq.XName.Get("f40400a", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40400bXName = System.Xml.Linq.XName.Get("f40400b", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40400cXName = System.Xml.Linq.XName.Get("f40400c", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40400dXName = System.Xml.Linq.XName.Get("f40400d", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40400eXName = System.Xml.Linq.XName.Get("f40400e", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40400fXName = System.Xml.Linq.XName.Get("f40400f", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404010XName = System.Xml.Linq.XName.Get("f404010", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404011XName = System.Xml.Linq.XName.Get("f404011", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404012XName = System.Xml.Linq.XName.Get("f404012", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404013XName = System.Xml.Linq.XName.Get("f404013", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404014XName = System.Xml.Linq.XName.Get("f404014", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404015XName = System.Xml.Linq.XName.Get("f404015", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404016XName = System.Xml.Linq.XName.Get("f404016", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404017XName = System.Xml.Linq.XName.Get("f404017", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404018XName = System.Xml.Linq.XName.Get("f404018", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404019XName = System.Xml.Linq.XName.Get("f404019", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40401aXName = System.Xml.Linq.XName.Get("f40401a", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40401bXName = System.Xml.Linq.XName.Get("f40401b", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40401cXName = System.Xml.Linq.XName.Get("f40401c", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40401dXName = System.Xml.Linq.XName.Get("f40401d", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40401eXName = System.Xml.Linq.XName.Get("f40401e", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40401fXName = System.Xml.Linq.XName.Get("f40401f", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404020XName = System.Xml.Linq.XName.Get("f404020", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404021XName = System.Xml.Linq.XName.Get("f404021", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404022XName = System.Xml.Linq.XName.Get("f404022", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404023XName = System.Xml.Linq.XName.Get("f404023", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404024XName = System.Xml.Linq.XName.Get("f404024", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404025XName = System.Xml.Linq.XName.Get("f404025", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404026XName = System.Xml.Linq.XName.Get("f404026", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404027XName = System.Xml.Linq.XName.Get("f404027", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404028XName = System.Xml.Linq.XName.Get("f404028", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404029XName = System.Xml.Linq.XName.Get("f404029", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40402aXName = System.Xml.Linq.XName.Get("f40402a", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40402bXName = System.Xml.Linq.XName.Get("f40402b", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40402cXName = System.Xml.Linq.XName.Get("f40402c", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40402dXName = System.Xml.Linq.XName.Get("f40402d", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40402eXName = System.Xml.Linq.XName.Get("f40402e", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40402fXName = System.Xml.Linq.XName.Get("f40402f", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404030XName = System.Xml.Linq.XName.Get("f404030", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404031XName = System.Xml.Linq.XName.Get("f404031", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404032XName = System.Xml.Linq.XName.Get("f404032", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404033XName = System.Xml.Linq.XName.Get("f404033", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404034XName = System.Xml.Linq.XName.Get("f404034", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404035XName = System.Xml.Linq.XName.Get("f404035", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404036XName = System.Xml.Linq.XName.Get("f404036", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404037XName = System.Xml.Linq.XName.Get("f404037", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404038XName = System.Xml.Linq.XName.Get("f404038", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404039XName = System.Xml.Linq.XName.Get("f404039", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40403aXName = System.Xml.Linq.XName.Get("f40403a", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40403bXName = System.Xml.Linq.XName.Get("f40403b", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40403cXName = System.Xml.Linq.XName.Get("f40403c", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40403dXName = System.Xml.Linq.XName.Get("f40403d", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40403eXName = System.Xml.Linq.XName.Get("f40403e", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40403fXName = System.Xml.Linq.XName.Get("f40403f", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404040XName = System.Xml.Linq.XName.Get("f404040", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404041XName = System.Xml.Linq.XName.Get("f404041", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404042XName = System.Xml.Linq.XName.Get("f404042", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404043XName = System.Xml.Linq.XName.Get("f404043", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404044XName = System.Xml.Linq.XName.Get("f404044", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404045XName = System.Xml.Linq.XName.Get("f404045", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404046XName = System.Xml.Linq.XName.Get("f404046", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404047XName = System.Xml.Linq.XName.Get("f404047", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404048XName = System.Xml.Linq.XName.Get("f404048", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404049XName = System.Xml.Linq.XName.Get("f404049", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40404aXName = System.Xml.Linq.XName.Get("f40404a", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40404bXName = System.Xml.Linq.XName.Get("f40404b", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40404cXName = System.Xml.Linq.XName.Get("f40404c", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40404dXName = System.Xml.Linq.XName.Get("f40404d", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40404eXName = System.Xml.Linq.XName.Get("f40404e", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40404fXName = System.Xml.Linq.XName.Get("f40404f", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404050XName = System.Xml.Linq.XName.Get("f404050", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404051XName = System.Xml.Linq.XName.Get("f404051", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404052XName = System.Xml.Linq.XName.Get("f404052", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404053XName = System.Xml.Linq.XName.Get("f404053", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404054XName = System.Xml.Linq.XName.Get("f404054", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404055XName = System.Xml.Linq.XName.Get("f404055", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404056XName = System.Xml.Linq.XName.Get("f404056", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404057XName = System.Xml.Linq.XName.Get("f404057", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404058XName = System.Xml.Linq.XName.Get("f404058", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404059XName = System.Xml.Linq.XName.Get("f404059", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40405aXName = System.Xml.Linq.XName.Get("f40405a", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40405bXName = System.Xml.Linq.XName.Get("f40405b", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40405cXName = System.Xml.Linq.XName.Get("f40405c", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40405dXName = System.Xml.Linq.XName.Get("f40405d", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40405eXName = System.Xml.Linq.XName.Get("f40405e", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40405fXName = System.Xml.Linq.XName.Get("f40405f", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404060XName = System.Xml.Linq.XName.Get("f404060", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404061XName = System.Xml.Linq.XName.Get("f404061", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404062XName = System.Xml.Linq.XName.Get("f404062", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404063XName = System.Xml.Linq.XName.Get("f404063", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404064XName = System.Xml.Linq.XName.Get("f404064", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404065XName = System.Xml.Linq.XName.Get("f404065", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404066XName = System.Xml.Linq.XName.Get("f404066", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404067XName = System.Xml.Linq.XName.Get("f404067", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404068XName = System.Xml.Linq.XName.Get("f404068", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404069XName = System.Xml.Linq.XName.Get("f404069", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40406aXName = System.Xml.Linq.XName.Get("f40406a", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40406bXName = System.Xml.Linq.XName.Get("f40406b", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40406cXName = System.Xml.Linq.XName.Get("f40406c", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40406dXName = System.Xml.Linq.XName.Get("f40406d", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40406eXName = System.Xml.Linq.XName.Get("f40406e", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40406fXName = System.Xml.Linq.XName.Get("f40406f", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404070XName = System.Xml.Linq.XName.Get("f404070", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404071XName = System.Xml.Linq.XName.Get("f404071", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404072XName = System.Xml.Linq.XName.Get("f404072", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404073XName = System.Xml.Linq.XName.Get("f404073", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404074XName = System.Xml.Linq.XName.Get("f404074", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404075XName = System.Xml.Linq.XName.Get("f404075", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404076XName = System.Xml.Linq.XName.Get("f404076", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404077XName = System.Xml.Linq.XName.Get("f404077", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404078XName = System.Xml.Linq.XName.Get("f404078", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404079XName = System.Xml.Linq.XName.Get("f404079", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40407aXName = System.Xml.Linq.XName.Get("f40407a", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40407bXName = System.Xml.Linq.XName.Get("f40407b", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40407cXName = System.Xml.Linq.XName.Get("f40407c", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40407dXName = System.Xml.Linq.XName.Get("f40407d", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40407eXName = System.Xml.Linq.XName.Get("f40407e", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40407fXName = System.Xml.Linq.XName.Get("f40407f", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404080XName = System.Xml.Linq.XName.Get("f404080", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404081XName = System.Xml.Linq.XName.Get("f404081", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404082XName = System.Xml.Linq.XName.Get("f404082", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404083XName = System.Xml.Linq.XName.Get("f404083", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404084XName = System.Xml.Linq.XName.Get("f404084", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404085XName = System.Xml.Linq.XName.Get("f404085", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404086XName = System.Xml.Linq.XName.Get("f404086", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404087XName = System.Xml.Linq.XName.Get("f404087", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404088XName = System.Xml.Linq.XName.Get("f404088", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404089XName = System.Xml.Linq.XName.Get("f404089", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40408aXName = System.Xml.Linq.XName.Get("f40408a", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40408bXName = System.Xml.Linq.XName.Get("f40408b", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40408cXName = System.Xml.Linq.XName.Get("f40408c", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40408dXName = System.Xml.Linq.XName.Get("f40408d", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40408eXName = System.Xml.Linq.XName.Get("f40408e", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40408fXName = System.Xml.Linq.XName.Get("f40408f", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404090XName = System.Xml.Linq.XName.Get("f404090", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404091XName = System.Xml.Linq.XName.Get("f404091", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404092XName = System.Xml.Linq.XName.Get("f404092", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404093XName = System.Xml.Linq.XName.Get("f404093", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404094XName = System.Xml.Linq.XName.Get("f404094", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404095XName = System.Xml.Linq.XName.Get("f404095", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404096XName = System.Xml.Linq.XName.Get("f404096", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404097XName = System.Xml.Linq.XName.Get("f404097", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404098XName = System.Xml.Linq.XName.Get("f404098", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f404099XName = System.Xml.Linq.XName.Get("f404099", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40409aXName = System.Xml.Linq.XName.Get("f40409a", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40409bXName = System.Xml.Linq.XName.Get("f40409b", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40409cXName = System.Xml.Linq.XName.Get("f40409c", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40409dXName = System.Xml.Linq.XName.Get("f40409d", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40409eXName = System.Xml.Linq.XName.Get("f40409e", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f40409fXName = System.Xml.Linq.XName.Get("f40409f", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f4040a0XName = System.Xml.Linq.XName.Get("f4040a0", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f4040a1XName = System.Xml.Linq.XName.Get("f4040a1", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f4040a2XName = System.Xml.Linq.XName.Get("f4040a2", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f4040a3XName = System.Xml.Linq.XName.Get("f4040a3", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f4040a4XName = System.Xml.Linq.XName.Get("f4040a4", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f4040a5XName = System.Xml.Linq.XName.Get("f4040a5", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f4040a6XName = System.Xml.Linq.XName.Get("f4040a6", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f4040a7XName = System.Xml.Linq.XName.Get("f4040a7", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f4040a8XName = System.Xml.Linq.XName.Get("f4040a8", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f4040a9XName = System.Xml.Linq.XName.Get("f4040a9", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f4040aaXName = System.Xml.Linq.XName.Get("f4040aa", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f4040abXName = System.Xml.Linq.XName.Get("f4040ab", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f4040acXName = System.Xml.Linq.XName.Get("f4040ac", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f4040adXName = System.Xml.Linq.XName.Get("f4040ad", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f4040aeXName = System.Xml.Linq.XName.Get("f4040ae", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f4040afXName = System.Xml.Linq.XName.Get("f4040af", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f4040b0XName = System.Xml.Linq.XName.Get("f4040b0", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f4040b1XName = System.Xml.Linq.XName.Get("f4040b1", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f4040b2XName = System.Xml.Linq.XName.Get("f4040b2", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f4040b3XName = System.Xml.Linq.XName.Get("f4040b3", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f4040b4XName = System.Xml.Linq.XName.Get("f4040b4", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f4040b5XName = System.Xml.Linq.XName.Get("f4040b5", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f4040b6XName = System.Xml.Linq.XName.Get("f4040b6", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f4040b7XName = System.Xml.Linq.XName.Get("f4040b7", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f4040b8XName = System.Xml.Linq.XName.Get("f4040b8", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f4040b9XName = System.Xml.Linq.XName.Get("f4040b9", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f4040baXName = System.Xml.Linq.XName.Get("f4040ba", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f4040bbXName = System.Xml.Linq.XName.Get("f4040bb", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f4040bcXName = System.Xml.Linq.XName.Get("f4040bc", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f4040bdXName = System.Xml.Linq.XName.Get("f4040bd", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f4040beXName = System.Xml.Linq.XName.Get("f4040be", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f4040bfXName = System.Xml.Linq.XName.Get("f4040bf", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f4040c0XName = System.Xml.Linq.XName.Get("f4040c0", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f4040c1XName = System.Xml.Linq.XName.Get("f4040c1", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f4040c2XName = System.Xml.Linq.XName.Get("f4040c2", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f4040c3XName = System.Xml.Linq.XName.Get("f4040c3", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f4040c4XName = System.Xml.Linq.XName.Get("f4040c4", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f4040c5XName = System.Xml.Linq.XName.Get("f4040c5", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f4040c6XName = System.Xml.Linq.XName.Get("f4040c6", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f4040c7XName = System.Xml.Linq.XName.Get("f4040c7", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName f4040c8XName = System.Xml.Linq.XName.Get("f4040c8", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName TimephasedDataXName = System.Xml.Linq.XName.Get("TimephasedData", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<TimephasedDataType> TimephasedDataField;
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Assignment", "http://schemas.microsoft.com/project/2007");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator AssignmentLocalType(XElement xe) { return XTypedServices.ToXTypedElement<AssignmentLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static AssignmentLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(UIDXName), new NamedContentModelEntity(TaskUIDXName), new NamedContentModelEntity(ResourceUIDXName), new NamedContentModelEntity(PercentWorkCompleteXName), new NamedContentModelEntity(ActualCostXName), new NamedContentModelEntity(ActualFinishXName), new NamedContentModelEntity(ActualOvertimeCostXName), new NamedContentModelEntity(ActualOvertimeWorkXName), new NamedContentModelEntity(ActualStartXName), new NamedContentModelEntity(ActualWorkXName), new NamedContentModelEntity(ACWPXName), new NamedContentModelEntity(ConfirmedXName), new NamedContentModelEntity(CostXName), new NamedContentModelEntity(CostRateTableXName), new NamedContentModelEntity(CostVarianceXName), new NamedContentModelEntity(CVXName), new NamedContentModelEntity(DelayXName), new NamedContentModelEntity(FinishXName), new NamedContentModelEntity(FinishVarianceXName), new NamedContentModelEntity(HyperlinkXName), new NamedContentModelEntity(HyperlinkAddressXName), new NamedContentModelEntity(HyperlinkSubAddressXName), new NamedContentModelEntity(WorkVarianceXName), new NamedContentModelEntity(HasFixedRateUnitsXName), new NamedContentModelEntity(FixedMaterialXName), new NamedContentModelEntity(LevelingDelayXName), new NamedContentModelEntity(LevelingDelayFormatXName), new NamedContentModelEntity(LinkedFieldsXName), new NamedContentModelEntity(MilestoneXName), new NamedContentModelEntity(NotesXName), new NamedContentModelEntity(OverallocatedXName), new NamedContentModelEntity(OvertimeCostXName), new NamedContentModelEntity(OvertimeWorkXName), new NamedContentModelEntity(PeakUnitsXName), new NamedContentModelEntity(RegularWorkXName), new NamedContentModelEntity(RemainingCostXName), new NamedContentModelEntity(RemainingOvertimeCostXName), new NamedContentModelEntity(RemainingOvertimeWorkXName), new NamedContentModelEntity(RemainingWorkXName), new NamedContentModelEntity(ResponsePendingXName), new NamedContentModelEntity(StartXName), new NamedContentModelEntity(StopXName), new NamedContentModelEntity(ResumeXName), new NamedContentModelEntity(StartVarianceXName), new NamedContentModelEntity(SummaryXName), new NamedContentModelEntity(SVXName), new NamedContentModelEntity(UnitsXName), new NamedContentModelEntity(UpdateNeededXName), new NamedContentModelEntity(VACXName), new NamedContentModelEntity(WorkXName), new NamedContentModelEntity(WorkContourXName), new NamedContentModelEntity(BCWSXName), new NamedContentModelEntity(BCWPXName), new NamedContentModelEntity(BookingTypeXName), new NamedContentModelEntity(ActualWorkProtectedXName), new NamedContentModelEntity(ActualOvertimeWorkProtectedXName), new NamedContentModelEntity(CreationDateXName), new NamedContentModelEntity(AssnOwnerXName), new NamedContentModelEntity(AssnOwnerGuidXName), new NamedContentModelEntity(BudgetCostXName), new NamedContentModelEntity(BudgetWorkXName), new NamedContentModelEntity(ExtendedAttributeXName), new NamedContentModelEntity(BaselineXName), new NamedContentModelEntity(f404000XName), new NamedContentModelEntity(f404001XName), new NamedContentModelEntity(f404002XName), new NamedContentModelEntity(f404003XName), new NamedContentModelEntity(f404004XName), new NamedContentModelEntity(f404005XName), new NamedContentModelEntity(f404006XName), new NamedContentModelEntity(f404007XName), new NamedContentModelEntity(f404008XName), new NamedContentModelEntity(f404009XName), new NamedContentModelEntity(f40400aXName), new NamedContentModelEntity(f40400bXName), new NamedContentModelEntity(f40400cXName), new NamedContentModelEntity(f40400dXName), new NamedContentModelEntity(f40400eXName), new NamedContentModelEntity(f40400fXName), new NamedContentModelEntity(f404010XName), new NamedContentModelEntity(f404011XName), new NamedContentModelEntity(f404012XName), new NamedContentModelEntity(f404013XName), new NamedContentModelEntity(f404014XName), new NamedContentModelEntity(f404015XName), new NamedContentModelEntity(f404016XName), new NamedContentModelEntity(f404017XName), new NamedContentModelEntity(f404018XName), new NamedContentModelEntity(f404019XName), new NamedContentModelEntity(f40401aXName), new NamedContentModelEntity(f40401bXName), new NamedContentModelEntity(f40401cXName), new NamedContentModelEntity(f40401dXName), new NamedContentModelEntity(f40401eXName), new NamedContentModelEntity(f40401fXName), new NamedContentModelEntity(f404020XName), new NamedContentModelEntity(f404021XName), new NamedContentModelEntity(f404022XName), new NamedContentModelEntity(f404023XName), new NamedContentModelEntity(f404024XName), new NamedContentModelEntity(f404025XName), new NamedContentModelEntity(f404026XName), new NamedContentModelEntity(f404027XName), new NamedContentModelEntity(f404028XName), new NamedContentModelEntity(f404029XName), new NamedContentModelEntity(f40402aXName), new NamedContentModelEntity(f40402bXName), new NamedContentModelEntity(f40402cXName), new NamedContentModelEntity(f40402dXName), new NamedContentModelEntity(f40402eXName), new NamedContentModelEntity(f40402fXName), new NamedContentModelEntity(f404030XName), new NamedContentModelEntity(f404031XName), new NamedContentModelEntity(f404032XName), new NamedContentModelEntity(f404033XName), new NamedContentModelEntity(f404034XName), new NamedContentModelEntity(f404035XName), new NamedContentModelEntity(f404036XName), new NamedContentModelEntity(f404037XName), new NamedContentModelEntity(f404038XName), new NamedContentModelEntity(f404039XName), new NamedContentModelEntity(f40403aXName), new NamedContentModelEntity(f40403bXName), new NamedContentModelEntity(f40403cXName), new NamedContentModelEntity(f40403dXName), new NamedContentModelEntity(f40403eXName), new NamedContentModelEntity(f40403fXName), new NamedContentModelEntity(f404040XName), new NamedContentModelEntity(f404041XName), new NamedContentModelEntity(f404042XName), new NamedContentModelEntity(f404043XName), new NamedContentModelEntity(f404044XName), new NamedContentModelEntity(f404045XName), new NamedContentModelEntity(f404046XName), new NamedContentModelEntity(f404047XName), new NamedContentModelEntity(f404048XName), new NamedContentModelEntity(f404049XName), new NamedContentModelEntity(f40404aXName), new NamedContentModelEntity(f40404bXName), new NamedContentModelEntity(f40404cXName), new NamedContentModelEntity(f40404dXName), new NamedContentModelEntity(f40404eXName), new NamedContentModelEntity(f40404fXName), new NamedContentModelEntity(f404050XName), new NamedContentModelEntity(f404051XName), new NamedContentModelEntity(f404052XName), new NamedContentModelEntity(f404053XName), new NamedContentModelEntity(f404054XName), new NamedContentModelEntity(f404055XName), new NamedContentModelEntity(f404056XName), new NamedContentModelEntity(f404057XName), new NamedContentModelEntity(f404058XName), new NamedContentModelEntity(f404059XName), new NamedContentModelEntity(f40405aXName), new NamedContentModelEntity(f40405bXName), new NamedContentModelEntity(f40405cXName), new NamedContentModelEntity(f40405dXName), new NamedContentModelEntity(f40405eXName), new NamedContentModelEntity(f40405fXName), new NamedContentModelEntity(f404060XName), new NamedContentModelEntity(f404061XName), new NamedContentModelEntity(f404062XName), new NamedContentModelEntity(f404063XName), new NamedContentModelEntity(f404064XName), new NamedContentModelEntity(f404065XName), new NamedContentModelEntity(f404066XName), new NamedContentModelEntity(f404067XName), new NamedContentModelEntity(f404068XName), new NamedContentModelEntity(f404069XName), new NamedContentModelEntity(f40406aXName), new NamedContentModelEntity(f40406bXName), new NamedContentModelEntity(f40406cXName), new NamedContentModelEntity(f40406dXName), new NamedContentModelEntity(f40406eXName), new NamedContentModelEntity(f40406fXName), new NamedContentModelEntity(f404070XName), new NamedContentModelEntity(f404071XName), new NamedContentModelEntity(f404072XName), new NamedContentModelEntity(f404073XName), new NamedContentModelEntity(f404074XName), new NamedContentModelEntity(f404075XName), new NamedContentModelEntity(f404076XName), new NamedContentModelEntity(f404077XName), new NamedContentModelEntity(f404078XName), new NamedContentModelEntity(f404079XName), new NamedContentModelEntity(f40407aXName), new NamedContentModelEntity(f40407bXName), new NamedContentModelEntity(f40407cXName), new NamedContentModelEntity(f40407dXName), new NamedContentModelEntity(f40407eXName), new NamedContentModelEntity(f40407fXName), new NamedContentModelEntity(f404080XName), new NamedContentModelEntity(f404081XName), new NamedContentModelEntity(f404082XName), new NamedContentModelEntity(f404083XName), new NamedContentModelEntity(f404084XName), new NamedContentModelEntity(f404085XName), new NamedContentModelEntity(f404086XName), new NamedContentModelEntity(f404087XName), new NamedContentModelEntity(f404088XName), new NamedContentModelEntity(f404089XName), new NamedContentModelEntity(f40408aXName), new NamedContentModelEntity(f40408bXName), new NamedContentModelEntity(f40408cXName), new NamedContentModelEntity(f40408dXName), new NamedContentModelEntity(f40408eXName), new NamedContentModelEntity(f40408fXName), new NamedContentModelEntity(f404090XName), new NamedContentModelEntity(f404091XName), new NamedContentModelEntity(f404092XName), new NamedContentModelEntity(f404093XName), new NamedContentModelEntity(f404094XName), new NamedContentModelEntity(f404095XName), new NamedContentModelEntity(f404096XName), new NamedContentModelEntity(f404097XName), new NamedContentModelEntity(f404098XName), new NamedContentModelEntity(f404099XName), new NamedContentModelEntity(f40409aXName), new NamedContentModelEntity(f40409bXName), new NamedContentModelEntity(f40409cXName), new NamedContentModelEntity(f40409dXName), new NamedContentModelEntity(f40409eXName), new NamedContentModelEntity(f40409fXName), new NamedContentModelEntity(f4040a0XName), new NamedContentModelEntity(f4040a1XName), new NamedContentModelEntity(f4040a2XName), new NamedContentModelEntity(f4040a3XName), new NamedContentModelEntity(f4040a4XName), new NamedContentModelEntity(f4040a5XName), new NamedContentModelEntity(f4040a6XName), new NamedContentModelEntity(f4040a7XName), new NamedContentModelEntity(f4040a8XName), new NamedContentModelEntity(f4040a9XName), new NamedContentModelEntity(f4040aaXName), new NamedContentModelEntity(f4040abXName), new NamedContentModelEntity(f4040acXName), new NamedContentModelEntity(f4040adXName), new NamedContentModelEntity(f4040aeXName), new NamedContentModelEntity(f4040afXName), new NamedContentModelEntity(f4040b0XName), new NamedContentModelEntity(f4040b1XName), new NamedContentModelEntity(f4040b2XName), new NamedContentModelEntity(f4040b3XName), new NamedContentModelEntity(f4040b4XName), new NamedContentModelEntity(f4040b5XName), new NamedContentModelEntity(f4040b6XName), new NamedContentModelEntity(f4040b7XName), new NamedContentModelEntity(f4040b8XName), new NamedContentModelEntity(f4040b9XName), new NamedContentModelEntity(f4040baXName), new NamedContentModelEntity(f4040bbXName), new NamedContentModelEntity(f4040bcXName), new NamedContentModelEntity(f4040bdXName), new NamedContentModelEntity(f4040beXName), new NamedContentModelEntity(f4040bfXName), new NamedContentModelEntity(f4040c0XName), new NamedContentModelEntity(f4040c1XName), new NamedContentModelEntity(f4040c2XName), new NamedContentModelEntity(f4040c3XName), new NamedContentModelEntity(f4040c4XName), new NamedContentModelEntity(f4040c5XName), new NamedContentModelEntity(f4040c6XName), new NamedContentModelEntity(f4040c7XName), new NamedContentModelEntity(f4040c8XName), new NamedContentModelEntity(TimephasedDataXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public AssignmentLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// The unique identifier of the assignment.
                /// </para>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual decimal UID {
                    get {
                        XElement x = this.GetElement(UIDXName);
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        this.SetElement(UIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The unique identifier of the task.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? TaskUID {
                    get {
                        XElement x = this.GetElement(TaskUIDXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        this.SetElement(TaskUIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The unique identifier of the resource.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? ResourceUID {
                    get {
                        XElement x = this.GetElement(ResourceUIDXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        this.SetElement(ResourceUIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The amount of work completed on the assignment.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? PercentWorkComplete {
                    get {
                        XElement x = this.GetElement(PercentWorkCompleteXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        this.SetElement(PercentWorkCompleteXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The actual cost incurred on the assignment.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? ActualCost {
                    get {
                        XElement x = this.GetElement(ActualCostXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElement(ActualCostXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The actual finish date of the assignment.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.DateTime? ActualFinish {
                    get {
                        XElement x = this.GetElement(ActualFinishXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                    set {
                        this.SetElement(ActualFinishXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The actual overtime cost incurred on the assignment.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? ActualOvertimeCost {
                    get {
                        XElement x = this.GetElement(ActualOvertimeCostXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElement(ActualOvertimeCostXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The actual amount of overtime work incurred on the assignment.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.TimeSpan? ActualOvertimeWork {
                    get {
                        XElement x = this.GetElement(ActualOvertimeWorkXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                    set {
                        this.SetElement(ActualOvertimeWorkXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The actual start date of the assignment.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.DateTime? ActualStart {
                    get {
                        XElement x = this.GetElement(ActualStartXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                    set {
                        this.SetElement(ActualStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The actual amount of work incurred on the assignment.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.TimeSpan? ActualWork {
                    get {
                        XElement x = this.GetElement(ActualWorkXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                    set {
                        this.SetElement(ActualWorkXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The actual cost of work performed on the assignment to-date.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Single? ACWP {
                    get {
                        XElement x = this.GetElement(ACWPXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                    set {
                        this.SetElement(ACWPXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether the Resource has accepted all of his or her assignments.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Boolean? Confirmed {
                    get {
                        XElement x = this.GetElement(ConfirmedXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(ConfirmedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The projected or scheduled cost of the assignment.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? Cost {
                    get {
                        XElement x = this.GetElement(CostXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElement(CostXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The cost rate table used for the assignment.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? CostRateTable {
                    get {
                        XElement x = this.GetElement(CostRateTableXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(CostRateTableXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(CostRateTableXName, value, "CostRateTable", CostRateTableLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// The difference between the cost and baseline cost for a resource.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Single? CostVariance {
                    get {
                        XElement x = this.GetElement(CostVarianceXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                    set {
                        this.SetElement(CostVarianceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The earned value cost variance.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Single? CV {
                    get {
                        XElement x = this.GetElement(CVXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                    set {
                        this.SetElement(CVXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The amount that the assignment is delayed.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? Delay {
                    get {
                        XElement x = this.GetElement(DelayXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        this.SetElement(DelayXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The scheduled finish date of the assignment.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.DateTime? Finish {
                    get {
                        XElement x = this.GetElement(FinishXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                    set {
                        this.SetElement(FinishXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The variance of the assignment finish date from the baseline finish date.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? FinishVariance {
                    get {
                        XElement x = this.GetElement(FinishVarianceXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        this.SetElement(FinishVarianceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The title of the hyperlink associated with the assignment.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual string Hyperlink {
                    get {
                        XElement x = this.GetElement(HyperlinkXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(HyperlinkXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(HyperlinkXName, value, "Hyperlink", HyperlinkLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// The hyperlink associated with the assignment.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual string HyperlinkAddress {
                    get {
                        XElement x = this.GetElement(HyperlinkAddressXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(HyperlinkAddressXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(HyperlinkAddressXName, value, "HyperlinkAddress", HyperlinkAddressLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// The document bookmark of the hyperlink associated with the assignment.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual string HyperlinkSubAddress {
                    get {
                        XElement x = this.GetElement(HyperlinkSubAddressXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(HyperlinkSubAddressXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(HyperlinkSubAddressXName, value, "HyperlinkSubAddress", HyperlinkSubAddressLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// The variance of assignment work from the baseline work as minutes x 1000.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Single? WorkVariance {
                    get {
                        XElement x = this.GetElement(WorkVarianceXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                    set {
                        this.SetElement(WorkVarianceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether the Units are Fixed Rate.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Boolean? HasFixedRateUnits {
                    get {
                        XElement x = this.GetElement(HasFixedRateUnitsXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(HasFixedRateUnitsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether the consumption of the assigned material resource occurs in a single, fixed amount.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Boolean? FixedMaterial {
                    get {
                        XElement x = this.GetElement(FixedMaterialXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(FixedMaterialXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The delay caused by leveling.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? LevelingDelay {
                    get {
                        XElement x = this.GetElement(LevelingDelayXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        this.SetElement(LevelingDelayXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The format for expressing the duration of the delay.  Values are: 3=m, 4=em, 5=h, 6=eh, 7=d, 8=ed, 9=w, 10=ew, 11=mo, 12=emo, 19=%, 20=e%, 21=null, 35=m?, 36=em?, 37=h?, 38=eh?, 39=d?, 40=ed?, 41=w?, 42=ew?, 43=mo?, 44=emo?, 51=%?, 52=e%? and 53=null.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? LevelingDelayFormat {
                    get {
                        XElement x = this.GetElement(LevelingDelayFormatXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(LevelingDelayFormatXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(LevelingDelayFormatXName, value, "LevelingDelayFormat", LevelingDelayFormatLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether the Project is linked to another OLE object.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Boolean? LinkedFields {
                    get {
                        XElement x = this.GetElement(LinkedFieldsXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(LinkedFieldsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether the assignment is a milestone.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Boolean? Milestone {
                    get {
                        XElement x = this.GetElement(MilestoneXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(MilestoneXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The text notes associated with the assignment.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual string Notes {
                    get {
                        XElement x = this.GetElement(NotesXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(NotesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether the assignment is overallocated.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Boolean? Overallocated {
                    get {
                        XElement x = this.GetElement(OverallocatedXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(OverallocatedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The sum of the actual and remaining overtime cost of the assignment.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? OvertimeCost {
                    get {
                        XElement x = this.GetElement(OvertimeCostXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElement(OvertimeCostXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The scheduled overtime work scheduled for the assignment.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.TimeSpan? OvertimeWork {
                    get {
                        XElement x = this.GetElement(OvertimeWorkXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                    set {
                        this.SetElement(OvertimeWorkXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The largest number of units that a resource is assigned for a task.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Single? PeakUnits {
                    get {
                        XElement x = this.GetElement(PeakUnitsXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                    set {
                        this.SetElement(PeakUnitsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The amount of non-overtime work scheduled for the assignment.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.TimeSpan? RegularWork {
                    get {
                        XElement x = this.GetElement(RegularWorkXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                    set {
                        this.SetElement(RegularWorkXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The remaining projected cost of completing the assignment.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? RemainingCost {
                    get {
                        XElement x = this.GetElement(RemainingCostXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElement(RemainingCostXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The remaining projected overtime cost of completing the assignment.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? RemainingOvertimeCost {
                    get {
                        XElement x = this.GetElement(RemainingOvertimeCostXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElement(RemainingOvertimeCostXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The remaining overtime work scheduled to complete the assignment.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.TimeSpan? RemainingOvertimeWork {
                    get {
                        XElement x = this.GetElement(RemainingOvertimeWorkXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                    set {
                        this.SetElement(RemainingOvertimeWorkXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The remaining work scheduled to complete the assignment.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.TimeSpan? RemainingWork {
                    get {
                        XElement x = this.GetElement(RemainingWorkXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                    set {
                        this.SetElement(RemainingWorkXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether a response has been received for a TeamAssign message. 
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Boolean? ResponsePending {
                    get {
                        XElement x = this.GetElement(ResponsePendingXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(ResponsePendingXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The scheduled start date of the assignment.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.DateTime? Start {
                    get {
                        XElement x = this.GetElement(StartXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                    set {
                        this.SetElement(StartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The date that the assignment was stopped.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.DateTime? Stop {
                    get {
                        XElement x = this.GetElement(StopXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                    set {
                        this.SetElement(StopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The date that the assignment resumed.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.DateTime? Resume {
                    get {
                        XElement x = this.GetElement(ResumeXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                    set {
                        this.SetElement(ResumeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The variance of the assignment start date from the baseline start date.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? StartVariance {
                    get {
                        XElement x = this.GetElement(StartVarianceXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        this.SetElement(StartVarianceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether the task is a summary task.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Boolean? Summary {
                    get {
                        XElement x = this.GetElement(SummaryXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(SummaryXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The earned value schedule variance, through the project status date.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Single? SV {
                    get {
                        XElement x = this.GetElement(SVXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                    set {
                        this.SetElement(SVXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The number of units for the assignment.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Single? Units {
                    get {
                        XElement x = this.GetElement(UnitsXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                    set {
                        this.SetElement(UnitsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Whether the resource assigned to a task needs to be updated as to the status of the task.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Boolean? UpdateNeeded {
                    get {
                        XElement x = this.GetElement(UpdateNeededXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                    set {
                        this.SetElement(UpdateNeededXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The difference between basline cost and total cost.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Single? VAC {
                    get {
                        XElement x = this.GetElement(VACXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                    set {
                        this.SetElement(VACXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The amount of scheduled work for the assignment.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.TimeSpan? Work {
                    get {
                        XElement x = this.GetElement(WorkXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                    set {
                        this.SetElement(WorkXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The work contour of the assignment. Values are: 0=Flat, 1=Back Loaded, 2=Front Loaded, 3=Double Peak, 4=Early Peak, 5=Late Peak, 6=Bell, 7=Turtle, 8=Contoured.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? WorkContour {
                    get {
                        XElement x = this.GetElement(WorkContourXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(WorkContourXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(WorkContourXName, value, "WorkContour", WorkContourLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// The budgeted cost of work on the assignment.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Single? BCWS {
                    get {
                        XElement x = this.GetElement(BCWSXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                    set {
                        this.SetElement(BCWSXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The budgeted cost of work performed on the assignment to-date.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Single? BCWP {
                    get {
                        XElement x = this.GetElement(BCWPXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                    set {
                        this.SetElement(BCWPXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The booking type of the assignment. 1=Commited, 2=Proposed.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? BookingType {
                    get {
                        XElement x = this.GetElement(BookingTypeXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    set {
                        if (value == null) {
                            this.SetElement(BookingTypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                        else {
                            this.SetElementWithValidation(BookingTypeXName, value, "BookingType", BookingTypeLocalType.TypeDefinition);
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// The duration through which actual work is protected.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.TimeSpan? ActualWorkProtected {
                    get {
                        XElement x = this.GetElement(ActualWorkProtectedXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                    set {
                        this.SetElement(ActualWorkProtectedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The duration through which actual overtime work is protected.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.TimeSpan? ActualOvertimeWorkProtected {
                    get {
                        XElement x = this.GetElement(ActualOvertimeWorkProtectedXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                    set {
                        this.SetElement(ActualOvertimeWorkProtectedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The date that the assignment was created.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.DateTime? CreationDate {
                    get {
                        XElement x = this.GetElement(CreationDateXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                    set {
                        this.SetElement(CreationDateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The name of the assignment owner.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual string AssnOwner {
                    get {
                        XElement x = this.GetElement(AssnOwnerXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(AssnOwnerXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The GUID of the assignment owner.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual string AssnOwnerGuid {
                    get {
                        XElement x = this.GetElement(AssnOwnerGuidXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElement(AssnOwnerGuidXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The budgeted amount for cost resources on this assignment.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.Decimal? BudgetCost {
                    get {
                        XElement x = this.GetElement(BudgetCostXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElement(BudgetCostXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The budgeted work amount for work or material resources on this assignment.
                /// </para>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual System.TimeSpan? BudgetWork {
                    get {
                        XElement x = this.GetElement(BudgetWorkXName);
                        if ((x == null)) {
                            return null;
                        }
                        return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                    set {
                        this.SetElement(BudgetWorkXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The value of an extended attribute.  Two pieces of data are necessary - a pointer back to the extended attribute table which is specified either by the unique ID or the Field ID, and the value which is specified either with the value, or a pointer back to the value list.
                /// </para>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual IList<Microsoft.Schemas.Project2007.Project.AssignmentsLocalType.AssignmentLocalType.ExtendedAttributeLocalType> ExtendedAttribute {
                    get {
                        if ((this.ExtendedAttributeField == null)) {
                            this.ExtendedAttributeField = new XTypedList<ExtendedAttributeLocalType>(this, LinqToXsdTypeManager.Instance, ExtendedAttributeXName);
                        }
                        return this.ExtendedAttributeField;
                    }
                    set {
                        if ((value == null)) {
                            this.ExtendedAttributeField = null;
                        }
                        else {
                            if ((this.ExtendedAttributeField == null)) {
                                this.ExtendedAttributeField = XTypedList<ExtendedAttributeLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ExtendedAttributeXName);
                            }
                            else {
                                XTypedServices.SetList<ExtendedAttributeLocalType>(this.ExtendedAttributeField, value);
                            }
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// The collection of baseline values associated with the assignment.
                /// </para>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual IList<Microsoft.Schemas.Project2007.Project.AssignmentsLocalType.AssignmentLocalType.BaselineLocalType> Baseline {
                    get {
                        if ((this.BaselineField == null)) {
                            this.BaselineField = new XTypedList<BaselineLocalType>(this, LinqToXsdTypeManager.Instance, BaselineXName);
                        }
                        return this.BaselineField;
                    }
                    set {
                        if ((value == null)) {
                            this.BaselineField = null;
                        }
                        else {
                            if ((this.BaselineField == null)) {
                                this.BaselineField = XTypedList<BaselineLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, BaselineXName);
                            }
                            else {
                                XTypedServices.SetList<BaselineLocalType>(this.BaselineField, value);
                            }
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404000 {
                    get {
                        XElement x = this.GetElement(f404000XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404000XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404001 {
                    get {
                        XElement x = this.GetElement(f404001XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404001XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404002 {
                    get {
                        XElement x = this.GetElement(f404002XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404002XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404003 {
                    get {
                        XElement x = this.GetElement(f404003XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404003XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404004 {
                    get {
                        XElement x = this.GetElement(f404004XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404004XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404005 {
                    get {
                        XElement x = this.GetElement(f404005XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404005XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404006 {
                    get {
                        XElement x = this.GetElement(f404006XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404006XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404007 {
                    get {
                        XElement x = this.GetElement(f404007XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404007XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404008 {
                    get {
                        XElement x = this.GetElement(f404008XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404008XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404009 {
                    get {
                        XElement x = this.GetElement(f404009XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404009XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40400a {
                    get {
                        XElement x = this.GetElement(f40400aXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40400aXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40400b {
                    get {
                        XElement x = this.GetElement(f40400bXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40400bXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40400c {
                    get {
                        XElement x = this.GetElement(f40400cXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40400cXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40400d {
                    get {
                        XElement x = this.GetElement(f40400dXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40400dXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40400e {
                    get {
                        XElement x = this.GetElement(f40400eXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40400eXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40400f {
                    get {
                        XElement x = this.GetElement(f40400fXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40400fXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404010 {
                    get {
                        XElement x = this.GetElement(f404010XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404010XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404011 {
                    get {
                        XElement x = this.GetElement(f404011XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404011XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404012 {
                    get {
                        XElement x = this.GetElement(f404012XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404012XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404013 {
                    get {
                        XElement x = this.GetElement(f404013XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404013XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404014 {
                    get {
                        XElement x = this.GetElement(f404014XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404014XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404015 {
                    get {
                        XElement x = this.GetElement(f404015XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404015XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404016 {
                    get {
                        XElement x = this.GetElement(f404016XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404016XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404017 {
                    get {
                        XElement x = this.GetElement(f404017XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404017XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404018 {
                    get {
                        XElement x = this.GetElement(f404018XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404018XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404019 {
                    get {
                        XElement x = this.GetElement(f404019XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404019XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40401a {
                    get {
                        XElement x = this.GetElement(f40401aXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40401aXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40401b {
                    get {
                        XElement x = this.GetElement(f40401bXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40401bXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40401c {
                    get {
                        XElement x = this.GetElement(f40401cXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40401cXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40401d {
                    get {
                        XElement x = this.GetElement(f40401dXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40401dXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40401e {
                    get {
                        XElement x = this.GetElement(f40401eXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40401eXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40401f {
                    get {
                        XElement x = this.GetElement(f40401fXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40401fXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404020 {
                    get {
                        XElement x = this.GetElement(f404020XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404020XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404021 {
                    get {
                        XElement x = this.GetElement(f404021XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404021XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404022 {
                    get {
                        XElement x = this.GetElement(f404022XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404022XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404023 {
                    get {
                        XElement x = this.GetElement(f404023XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404023XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404024 {
                    get {
                        XElement x = this.GetElement(f404024XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404024XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404025 {
                    get {
                        XElement x = this.GetElement(f404025XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404025XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404026 {
                    get {
                        XElement x = this.GetElement(f404026XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404026XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404027 {
                    get {
                        XElement x = this.GetElement(f404027XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404027XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404028 {
                    get {
                        XElement x = this.GetElement(f404028XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404028XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404029 {
                    get {
                        XElement x = this.GetElement(f404029XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404029XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40402a {
                    get {
                        XElement x = this.GetElement(f40402aXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40402aXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40402b {
                    get {
                        XElement x = this.GetElement(f40402bXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40402bXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40402c {
                    get {
                        XElement x = this.GetElement(f40402cXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40402cXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40402d {
                    get {
                        XElement x = this.GetElement(f40402dXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40402dXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40402e {
                    get {
                        XElement x = this.GetElement(f40402eXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40402eXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40402f {
                    get {
                        XElement x = this.GetElement(f40402fXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40402fXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404030 {
                    get {
                        XElement x = this.GetElement(f404030XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404030XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404031 {
                    get {
                        XElement x = this.GetElement(f404031XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404031XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404032 {
                    get {
                        XElement x = this.GetElement(f404032XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404032XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404033 {
                    get {
                        XElement x = this.GetElement(f404033XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404033XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404034 {
                    get {
                        XElement x = this.GetElement(f404034XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404034XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404035 {
                    get {
                        XElement x = this.GetElement(f404035XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404035XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404036 {
                    get {
                        XElement x = this.GetElement(f404036XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404036XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404037 {
                    get {
                        XElement x = this.GetElement(f404037XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404037XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404038 {
                    get {
                        XElement x = this.GetElement(f404038XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404038XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404039 {
                    get {
                        XElement x = this.GetElement(f404039XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404039XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40403a {
                    get {
                        XElement x = this.GetElement(f40403aXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40403aXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40403b {
                    get {
                        XElement x = this.GetElement(f40403bXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40403bXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40403c {
                    get {
                        XElement x = this.GetElement(f40403cXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40403cXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40403d {
                    get {
                        XElement x = this.GetElement(f40403dXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40403dXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40403e {
                    get {
                        XElement x = this.GetElement(f40403eXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40403eXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40403f {
                    get {
                        XElement x = this.GetElement(f40403fXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40403fXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404040 {
                    get {
                        XElement x = this.GetElement(f404040XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404040XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404041 {
                    get {
                        XElement x = this.GetElement(f404041XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404041XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404042 {
                    get {
                        XElement x = this.GetElement(f404042XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404042XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404043 {
                    get {
                        XElement x = this.GetElement(f404043XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404043XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404044 {
                    get {
                        XElement x = this.GetElement(f404044XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404044XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404045 {
                    get {
                        XElement x = this.GetElement(f404045XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404045XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404046 {
                    get {
                        XElement x = this.GetElement(f404046XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404046XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404047 {
                    get {
                        XElement x = this.GetElement(f404047XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404047XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404048 {
                    get {
                        XElement x = this.GetElement(f404048XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404048XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404049 {
                    get {
                        XElement x = this.GetElement(f404049XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404049XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40404a {
                    get {
                        XElement x = this.GetElement(f40404aXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40404aXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40404b {
                    get {
                        XElement x = this.GetElement(f40404bXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40404bXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40404c {
                    get {
                        XElement x = this.GetElement(f40404cXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40404cXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40404d {
                    get {
                        XElement x = this.GetElement(f40404dXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40404dXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40404e {
                    get {
                        XElement x = this.GetElement(f40404eXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40404eXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40404f {
                    get {
                        XElement x = this.GetElement(f40404fXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40404fXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404050 {
                    get {
                        XElement x = this.GetElement(f404050XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404050XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404051 {
                    get {
                        XElement x = this.GetElement(f404051XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404051XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404052 {
                    get {
                        XElement x = this.GetElement(f404052XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404052XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404053 {
                    get {
                        XElement x = this.GetElement(f404053XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404053XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404054 {
                    get {
                        XElement x = this.GetElement(f404054XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404054XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404055 {
                    get {
                        XElement x = this.GetElement(f404055XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404055XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404056 {
                    get {
                        XElement x = this.GetElement(f404056XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404056XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404057 {
                    get {
                        XElement x = this.GetElement(f404057XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404057XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404058 {
                    get {
                        XElement x = this.GetElement(f404058XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404058XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404059 {
                    get {
                        XElement x = this.GetElement(f404059XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404059XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40405a {
                    get {
                        XElement x = this.GetElement(f40405aXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40405aXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40405b {
                    get {
                        XElement x = this.GetElement(f40405bXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40405bXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40405c {
                    get {
                        XElement x = this.GetElement(f40405cXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40405cXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40405d {
                    get {
                        XElement x = this.GetElement(f40405dXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40405dXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40405e {
                    get {
                        XElement x = this.GetElement(f40405eXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40405eXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40405f {
                    get {
                        XElement x = this.GetElement(f40405fXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40405fXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404060 {
                    get {
                        XElement x = this.GetElement(f404060XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404060XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404061 {
                    get {
                        XElement x = this.GetElement(f404061XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404061XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404062 {
                    get {
                        XElement x = this.GetElement(f404062XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404062XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404063 {
                    get {
                        XElement x = this.GetElement(f404063XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404063XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404064 {
                    get {
                        XElement x = this.GetElement(f404064XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404064XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404065 {
                    get {
                        XElement x = this.GetElement(f404065XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404065XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404066 {
                    get {
                        XElement x = this.GetElement(f404066XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404066XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404067 {
                    get {
                        XElement x = this.GetElement(f404067XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404067XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404068 {
                    get {
                        XElement x = this.GetElement(f404068XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404068XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404069 {
                    get {
                        XElement x = this.GetElement(f404069XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404069XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40406a {
                    get {
                        XElement x = this.GetElement(f40406aXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40406aXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40406b {
                    get {
                        XElement x = this.GetElement(f40406bXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40406bXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40406c {
                    get {
                        XElement x = this.GetElement(f40406cXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40406cXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40406d {
                    get {
                        XElement x = this.GetElement(f40406dXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40406dXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40406e {
                    get {
                        XElement x = this.GetElement(f40406eXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40406eXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40406f {
                    get {
                        XElement x = this.GetElement(f40406fXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40406fXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404070 {
                    get {
                        XElement x = this.GetElement(f404070XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404070XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404071 {
                    get {
                        XElement x = this.GetElement(f404071XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404071XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404072 {
                    get {
                        XElement x = this.GetElement(f404072XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404072XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404073 {
                    get {
                        XElement x = this.GetElement(f404073XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404073XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404074 {
                    get {
                        XElement x = this.GetElement(f404074XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404074XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404075 {
                    get {
                        XElement x = this.GetElement(f404075XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404075XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404076 {
                    get {
                        XElement x = this.GetElement(f404076XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404076XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404077 {
                    get {
                        XElement x = this.GetElement(f404077XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404077XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404078 {
                    get {
                        XElement x = this.GetElement(f404078XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404078XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404079 {
                    get {
                        XElement x = this.GetElement(f404079XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404079XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40407a {
                    get {
                        XElement x = this.GetElement(f40407aXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40407aXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40407b {
                    get {
                        XElement x = this.GetElement(f40407bXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40407bXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40407c {
                    get {
                        XElement x = this.GetElement(f40407cXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40407cXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40407d {
                    get {
                        XElement x = this.GetElement(f40407dXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40407dXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40407e {
                    get {
                        XElement x = this.GetElement(f40407eXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40407eXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40407f {
                    get {
                        XElement x = this.GetElement(f40407fXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40407fXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404080 {
                    get {
                        XElement x = this.GetElement(f404080XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404080XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404081 {
                    get {
                        XElement x = this.GetElement(f404081XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404081XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404082 {
                    get {
                        XElement x = this.GetElement(f404082XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404082XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404083 {
                    get {
                        XElement x = this.GetElement(f404083XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404083XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404084 {
                    get {
                        XElement x = this.GetElement(f404084XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404084XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404085 {
                    get {
                        XElement x = this.GetElement(f404085XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404085XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404086 {
                    get {
                        XElement x = this.GetElement(f404086XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404086XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404087 {
                    get {
                        XElement x = this.GetElement(f404087XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404087XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404088 {
                    get {
                        XElement x = this.GetElement(f404088XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404088XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404089 {
                    get {
                        XElement x = this.GetElement(f404089XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404089XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40408a {
                    get {
                        XElement x = this.GetElement(f40408aXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40408aXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40408b {
                    get {
                        XElement x = this.GetElement(f40408bXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40408bXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40408c {
                    get {
                        XElement x = this.GetElement(f40408cXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40408cXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40408d {
                    get {
                        XElement x = this.GetElement(f40408dXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40408dXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40408e {
                    get {
                        XElement x = this.GetElement(f40408eXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40408eXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40408f {
                    get {
                        XElement x = this.GetElement(f40408fXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40408fXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404090 {
                    get {
                        XElement x = this.GetElement(f404090XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404090XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404091 {
                    get {
                        XElement x = this.GetElement(f404091XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404091XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404092 {
                    get {
                        XElement x = this.GetElement(f404092XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404092XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404093 {
                    get {
                        XElement x = this.GetElement(f404093XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404093XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404094 {
                    get {
                        XElement x = this.GetElement(f404094XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404094XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404095 {
                    get {
                        XElement x = this.GetElement(f404095XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404095XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404096 {
                    get {
                        XElement x = this.GetElement(f404096XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404096XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404097 {
                    get {
                        XElement x = this.GetElement(f404097XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404097XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404098 {
                    get {
                        XElement x = this.GetElement(f404098XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404098XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f404099 {
                    get {
                        XElement x = this.GetElement(f404099XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f404099XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40409a {
                    get {
                        XElement x = this.GetElement(f40409aXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40409aXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40409b {
                    get {
                        XElement x = this.GetElement(f40409bXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40409bXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40409c {
                    get {
                        XElement x = this.GetElement(f40409cXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40409cXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40409d {
                    get {
                        XElement x = this.GetElement(f40409dXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40409dXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40409e {
                    get {
                        XElement x = this.GetElement(f40409eXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40409eXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f40409f {
                    get {
                        XElement x = this.GetElement(f40409fXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f40409fXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f4040a0 {
                    get {
                        XElement x = this.GetElement(f4040a0XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f4040a0XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f4040a1 {
                    get {
                        XElement x = this.GetElement(f4040a1XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f4040a1XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f4040a2 {
                    get {
                        XElement x = this.GetElement(f4040a2XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f4040a2XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f4040a3 {
                    get {
                        XElement x = this.GetElement(f4040a3XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f4040a3XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f4040a4 {
                    get {
                        XElement x = this.GetElement(f4040a4XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f4040a4XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f4040a5 {
                    get {
                        XElement x = this.GetElement(f4040a5XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f4040a5XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f4040a6 {
                    get {
                        XElement x = this.GetElement(f4040a6XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f4040a6XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f4040a7 {
                    get {
                        XElement x = this.GetElement(f4040a7XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f4040a7XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f4040a8 {
                    get {
                        XElement x = this.GetElement(f4040a8XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f4040a8XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f4040a9 {
                    get {
                        XElement x = this.GetElement(f4040a9XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f4040a9XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f4040aa {
                    get {
                        XElement x = this.GetElement(f4040aaXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f4040aaXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f4040ab {
                    get {
                        XElement x = this.GetElement(f4040abXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f4040abXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f4040ac {
                    get {
                        XElement x = this.GetElement(f4040acXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f4040acXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f4040ad {
                    get {
                        XElement x = this.GetElement(f4040adXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f4040adXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f4040ae {
                    get {
                        XElement x = this.GetElement(f4040aeXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f4040aeXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f4040af {
                    get {
                        XElement x = this.GetElement(f4040afXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f4040afXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f4040b0 {
                    get {
                        XElement x = this.GetElement(f4040b0XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f4040b0XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f4040b1 {
                    get {
                        XElement x = this.GetElement(f4040b1XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f4040b1XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f4040b2 {
                    get {
                        XElement x = this.GetElement(f4040b2XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f4040b2XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f4040b3 {
                    get {
                        XElement x = this.GetElement(f4040b3XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f4040b3XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f4040b4 {
                    get {
                        XElement x = this.GetElement(f4040b4XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f4040b4XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f4040b5 {
                    get {
                        XElement x = this.GetElement(f4040b5XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f4040b5XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f4040b6 {
                    get {
                        XElement x = this.GetElement(f4040b6XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f4040b6XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f4040b7 {
                    get {
                        XElement x = this.GetElement(f4040b7XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f4040b7XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f4040b8 {
                    get {
                        XElement x = this.GetElement(f4040b8XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f4040b8XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f4040b9 {
                    get {
                        XElement x = this.GetElement(f4040b9XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f4040b9XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f4040ba {
                    get {
                        XElement x = this.GetElement(f4040baXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f4040baXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f4040bb {
                    get {
                        XElement x = this.GetElement(f4040bbXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f4040bbXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f4040bc {
                    get {
                        XElement x = this.GetElement(f4040bcXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f4040bcXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f4040bd {
                    get {
                        XElement x = this.GetElement(f4040bdXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f4040bdXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f4040be {
                    get {
                        XElement x = this.GetElement(f4040beXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f4040beXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f4040bf {
                    get {
                        XElement x = this.GetElement(f4040bfXName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f4040bfXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f4040c0 {
                    get {
                        XElement x = this.GetElement(f4040c0XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f4040c0XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f4040c1 {
                    get {
                        XElement x = this.GetElement(f4040c1XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f4040c1XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f4040c2 {
                    get {
                        XElement x = this.GetElement(f4040c2XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f4040c2XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f4040c3 {
                    get {
                        XElement x = this.GetElement(f4040c3XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f4040c3XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f4040c4 {
                    get {
                        XElement x = this.GetElement(f4040c4XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f4040c4XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f4040c5 {
                    get {
                        XElement x = this.GetElement(f4040c5XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f4040c5XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f4040c6 {
                    get {
                        XElement x = this.GetElement(f4040c6XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f4040c6XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f4040c7 {
                    get {
                        XElement x = this.GetElement(f4040c7XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f4040c7XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual XTypedElement f4040c8 {
                    get {
                        XElement x = this.GetElement(f4040c8XName);
                        return ((XTypedElement)(x));
                    }
                    set {
                        this.SetElement(f4040c8XName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// The time phased data associated with the assignment.
                /// </para>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (UID, TaskUID?, ResourceUID?, PercentWorkComplete?, ActualCost?, ActualFinish?, ActualOvertimeCost?, ActualOvertimeWork?, ActualStart?, ActualWork?, ACWP?, Confirmed?, Cost?, CostRateTable?, CostVariance?, CV?, Delay?, Finish?, FinishVariance?, Hyperlink?, HyperlinkAddress?, HyperlinkSubAddress?, WorkVariance?, HasFixedRateUnits?, FixedMaterial?, LevelingDelay?, LevelingDelayFormat?, LinkedFields?, Milestone?, Notes?, Overallocated?, OvertimeCost?, OvertimeWork?, PeakUnits?, RegularWork?, RemainingCost?, RemainingOvertimeCost?, RemainingOvertimeWork?, RemainingWork?, ResponsePending?, Start?, Stop?, Resume?, StartVariance?, Summary?, SV?, Units?, UpdateNeeded?, VAC?, Work?, WorkContour?, BCWS?, BCWP?, BookingType?, ActualWorkProtected?, ActualOvertimeWorkProtected?, CreationDate?, AssnOwner?, AssnOwnerGuid?, BudgetCost?, BudgetWork?, ExtendedAttribute*, Baseline*, f404000?, f404001?, f404002?, f404003?, f404004?, f404005?, f404006?, f404007?, f404008?, f404009?, f40400a?, f40400b?, f40400c?, f40400d?, f40400e?, f40400f?, f404010?, f404011?, f404012?, f404013?, f404014?, f404015?, f404016?, f404017?, f404018?, f404019?, f40401a?, f40401b?, f40401c?, f40401d?, f40401e?, f40401f?, f404020?, f404021?, f404022?, f404023?, f404024?, f404025?, f404026?, f404027?, f404028?, f404029?, f40402a?, f40402b?, f40402c?, f40402d?, f40402e?, f40402f?, f404030?, f404031?, f404032?, f404033?, f404034?, f404035?, f404036?, f404037?, f404038?, f404039?, f40403a?, f40403b?, f40403c?, f40403d?, f40403e?, f40403f?, f404040?, f404041?, f404042?, f404043?, f404044?, f404045?, f404046?, f404047?, f404048?, f404049?, f40404a?, f40404b?, f40404c?, f40404d?, f40404e?, f40404f?, f404050?, f404051?, f404052?, f404053?, f404054?, f404055?, f404056?, f404057?, f404058?, f404059?, f40405a?, f40405b?, f40405c?, f40405d?, f40405e?, f40405f?, f404060?, f404061?, f404062?, f404063?, f404064?, f404065?, f404066?, f404067?, f404068?, f404069?, f40406a?, f40406b?, f40406c?, f40406d?, f40406e?, f40406f?, f404070?, f404071?, f404072?, f404073?, f404074?, f404075?, f404076?, f404077?, f404078?, f404079?, f40407a?, f40407b?, f40407c?, f40407d?, f40407e?, f40407f?, f404080?, f404081?, f404082?, f404083?, f404084?, f404085?, f404086?, f404087?, f404088?, f404089?, f40408a?, f40408b?, f40408c?, f40408d?, f40408e?, f40408f?, f404090?, f404091?, f404092?, f404093?, f404094?, f404095?, f404096?, f404097?, f404098?, f404099?, f40409a?, f40409b?, f40409c?, f40409d?, f40409e?, f40409f?, f4040a0?, f4040a1?, f4040a2?, f4040a3?, f4040a4?, f4040a5?, f4040a6?, f4040a7?, f4040a8?, f4040a9?, f4040aa?, f4040ab?, f4040ac?, f4040ad?, f4040ae?, f4040af?, f4040b0?, f4040b1?, f4040b2?, f4040b3?, f4040b4?, f4040b5?, f4040b6?, f4040b7?, f4040b8?, f4040b9?, f4040ba?, f4040bb?, f4040bc?, f4040bd?, f4040be?, f4040bf?, f4040c0?, f4040c1?, f4040c2?, f4040c3?, f4040c4?, f4040c5?, f4040c6?, f4040c7?, f4040c8?, TimephasedData*)
                /// </para>
                /// </summary>
                public virtual IList<TimephasedDataType> TimephasedData {
                    get {
                        if ((this.TimephasedDataField == null)) {
                            this.TimephasedDataField = new XTypedList<TimephasedDataType>(this, LinqToXsdTypeManager.Instance, TimephasedDataXName);
                        }
                        return this.TimephasedDataField;
                    }
                    set {
                        if ((value == null)) {
                            this.TimephasedDataField = null;
                        }
                        else {
                            if ((this.TimephasedDataField == null)) {
                                this.TimephasedDataField = XTypedList<TimephasedDataType>.Initialize(this, LinqToXsdTypeManager.Instance, value, TimephasedDataXName);
                            }
                            else {
                                XTypedServices.SetList<TimephasedDataType>(this.TimephasedDataField, value);
                            }
                        }
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<AssignmentLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(UIDXName, typeof(decimal));
                    localElementDictionary.Add(TaskUIDXName, typeof(decimal));
                    localElementDictionary.Add(ResourceUIDXName, typeof(decimal));
                    localElementDictionary.Add(PercentWorkCompleteXName, typeof(decimal));
                    localElementDictionary.Add(ActualCostXName, typeof(decimal));
                    localElementDictionary.Add(ActualFinishXName, typeof(System.DateTime));
                    localElementDictionary.Add(ActualOvertimeCostXName, typeof(decimal));
                    localElementDictionary.Add(ActualOvertimeWorkXName, typeof(System.TimeSpan));
                    localElementDictionary.Add(ActualStartXName, typeof(System.DateTime));
                    localElementDictionary.Add(ActualWorkXName, typeof(System.TimeSpan));
                    localElementDictionary.Add(ACWPXName, typeof(float));
                    localElementDictionary.Add(ConfirmedXName, typeof(bool));
                    localElementDictionary.Add(CostXName, typeof(decimal));
                    localElementDictionary.Add(CostRateTableXName, typeof(decimal));
                    localElementDictionary.Add(CostVarianceXName, typeof(float));
                    localElementDictionary.Add(CVXName, typeof(float));
                    localElementDictionary.Add(DelayXName, typeof(decimal));
                    localElementDictionary.Add(FinishXName, typeof(System.DateTime));
                    localElementDictionary.Add(FinishVarianceXName, typeof(decimal));
                    localElementDictionary.Add(HyperlinkXName, typeof(string));
                    localElementDictionary.Add(HyperlinkAddressXName, typeof(string));
                    localElementDictionary.Add(HyperlinkSubAddressXName, typeof(string));
                    localElementDictionary.Add(WorkVarianceXName, typeof(float));
                    localElementDictionary.Add(HasFixedRateUnitsXName, typeof(bool));
                    localElementDictionary.Add(FixedMaterialXName, typeof(bool));
                    localElementDictionary.Add(LevelingDelayXName, typeof(decimal));
                    localElementDictionary.Add(LevelingDelayFormatXName, typeof(decimal));
                    localElementDictionary.Add(LinkedFieldsXName, typeof(bool));
                    localElementDictionary.Add(MilestoneXName, typeof(bool));
                    localElementDictionary.Add(NotesXName, typeof(string));
                    localElementDictionary.Add(OverallocatedXName, typeof(bool));
                    localElementDictionary.Add(OvertimeCostXName, typeof(decimal));
                    localElementDictionary.Add(OvertimeWorkXName, typeof(System.TimeSpan));
                    localElementDictionary.Add(PeakUnitsXName, typeof(float));
                    localElementDictionary.Add(RegularWorkXName, typeof(System.TimeSpan));
                    localElementDictionary.Add(RemainingCostXName, typeof(decimal));
                    localElementDictionary.Add(RemainingOvertimeCostXName, typeof(decimal));
                    localElementDictionary.Add(RemainingOvertimeWorkXName, typeof(System.TimeSpan));
                    localElementDictionary.Add(RemainingWorkXName, typeof(System.TimeSpan));
                    localElementDictionary.Add(ResponsePendingXName, typeof(bool));
                    localElementDictionary.Add(StartXName, typeof(System.DateTime));
                    localElementDictionary.Add(StopXName, typeof(System.DateTime));
                    localElementDictionary.Add(ResumeXName, typeof(System.DateTime));
                    localElementDictionary.Add(StartVarianceXName, typeof(decimal));
                    localElementDictionary.Add(SummaryXName, typeof(bool));
                    localElementDictionary.Add(SVXName, typeof(float));
                    localElementDictionary.Add(UnitsXName, typeof(float));
                    localElementDictionary.Add(UpdateNeededXName, typeof(bool));
                    localElementDictionary.Add(VACXName, typeof(float));
                    localElementDictionary.Add(WorkXName, typeof(System.TimeSpan));
                    localElementDictionary.Add(WorkContourXName, typeof(decimal));
                    localElementDictionary.Add(BCWSXName, typeof(float));
                    localElementDictionary.Add(BCWPXName, typeof(float));
                    localElementDictionary.Add(BookingTypeXName, typeof(decimal));
                    localElementDictionary.Add(ActualWorkProtectedXName, typeof(System.TimeSpan));
                    localElementDictionary.Add(ActualOvertimeWorkProtectedXName, typeof(System.TimeSpan));
                    localElementDictionary.Add(CreationDateXName, typeof(System.DateTime));
                    localElementDictionary.Add(AssnOwnerXName, typeof(string));
                    localElementDictionary.Add(AssnOwnerGuidXName, typeof(string));
                    localElementDictionary.Add(BudgetCostXName, typeof(decimal));
                    localElementDictionary.Add(BudgetWorkXName, typeof(System.TimeSpan));
                    localElementDictionary.Add(ExtendedAttributeXName, typeof(ExtendedAttributeLocalType));
                    localElementDictionary.Add(BaselineXName, typeof(BaselineLocalType));
                    localElementDictionary.Add(f404000XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404001XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404002XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404003XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404004XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404005XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404006XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404007XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404008XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404009XName, typeof(XTypedElement));
                    localElementDictionary.Add(f40400aXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40400bXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40400cXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40400dXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40400eXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40400fXName, typeof(XTypedElement));
                    localElementDictionary.Add(f404010XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404011XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404012XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404013XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404014XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404015XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404016XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404017XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404018XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404019XName, typeof(XTypedElement));
                    localElementDictionary.Add(f40401aXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40401bXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40401cXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40401dXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40401eXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40401fXName, typeof(XTypedElement));
                    localElementDictionary.Add(f404020XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404021XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404022XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404023XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404024XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404025XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404026XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404027XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404028XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404029XName, typeof(XTypedElement));
                    localElementDictionary.Add(f40402aXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40402bXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40402cXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40402dXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40402eXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40402fXName, typeof(XTypedElement));
                    localElementDictionary.Add(f404030XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404031XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404032XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404033XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404034XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404035XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404036XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404037XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404038XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404039XName, typeof(XTypedElement));
                    localElementDictionary.Add(f40403aXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40403bXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40403cXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40403dXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40403eXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40403fXName, typeof(XTypedElement));
                    localElementDictionary.Add(f404040XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404041XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404042XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404043XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404044XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404045XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404046XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404047XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404048XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404049XName, typeof(XTypedElement));
                    localElementDictionary.Add(f40404aXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40404bXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40404cXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40404dXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40404eXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40404fXName, typeof(XTypedElement));
                    localElementDictionary.Add(f404050XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404051XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404052XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404053XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404054XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404055XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404056XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404057XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404058XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404059XName, typeof(XTypedElement));
                    localElementDictionary.Add(f40405aXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40405bXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40405cXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40405dXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40405eXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40405fXName, typeof(XTypedElement));
                    localElementDictionary.Add(f404060XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404061XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404062XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404063XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404064XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404065XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404066XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404067XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404068XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404069XName, typeof(XTypedElement));
                    localElementDictionary.Add(f40406aXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40406bXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40406cXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40406dXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40406eXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40406fXName, typeof(XTypedElement));
                    localElementDictionary.Add(f404070XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404071XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404072XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404073XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404074XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404075XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404076XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404077XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404078XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404079XName, typeof(XTypedElement));
                    localElementDictionary.Add(f40407aXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40407bXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40407cXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40407dXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40407eXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40407fXName, typeof(XTypedElement));
                    localElementDictionary.Add(f404080XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404081XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404082XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404083XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404084XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404085XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404086XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404087XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404088XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404089XName, typeof(XTypedElement));
                    localElementDictionary.Add(f40408aXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40408bXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40408cXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40408dXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40408eXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40408fXName, typeof(XTypedElement));
                    localElementDictionary.Add(f404090XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404091XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404092XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404093XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404094XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404095XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404096XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404097XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404098XName, typeof(XTypedElement));
                    localElementDictionary.Add(f404099XName, typeof(XTypedElement));
                    localElementDictionary.Add(f40409aXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40409bXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40409cXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40409dXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40409eXName, typeof(XTypedElement));
                    localElementDictionary.Add(f40409fXName, typeof(XTypedElement));
                    localElementDictionary.Add(f4040a0XName, typeof(XTypedElement));
                    localElementDictionary.Add(f4040a1XName, typeof(XTypedElement));
                    localElementDictionary.Add(f4040a2XName, typeof(XTypedElement));
                    localElementDictionary.Add(f4040a3XName, typeof(XTypedElement));
                    localElementDictionary.Add(f4040a4XName, typeof(XTypedElement));
                    localElementDictionary.Add(f4040a5XName, typeof(XTypedElement));
                    localElementDictionary.Add(f4040a6XName, typeof(XTypedElement));
                    localElementDictionary.Add(f4040a7XName, typeof(XTypedElement));
                    localElementDictionary.Add(f4040a8XName, typeof(XTypedElement));
                    localElementDictionary.Add(f4040a9XName, typeof(XTypedElement));
                    localElementDictionary.Add(f4040aaXName, typeof(XTypedElement));
                    localElementDictionary.Add(f4040abXName, typeof(XTypedElement));
                    localElementDictionary.Add(f4040acXName, typeof(XTypedElement));
                    localElementDictionary.Add(f4040adXName, typeof(XTypedElement));
                    localElementDictionary.Add(f4040aeXName, typeof(XTypedElement));
                    localElementDictionary.Add(f4040afXName, typeof(XTypedElement));
                    localElementDictionary.Add(f4040b0XName, typeof(XTypedElement));
                    localElementDictionary.Add(f4040b1XName, typeof(XTypedElement));
                    localElementDictionary.Add(f4040b2XName, typeof(XTypedElement));
                    localElementDictionary.Add(f4040b3XName, typeof(XTypedElement));
                    localElementDictionary.Add(f4040b4XName, typeof(XTypedElement));
                    localElementDictionary.Add(f4040b5XName, typeof(XTypedElement));
                    localElementDictionary.Add(f4040b6XName, typeof(XTypedElement));
                    localElementDictionary.Add(f4040b7XName, typeof(XTypedElement));
                    localElementDictionary.Add(f4040b8XName, typeof(XTypedElement));
                    localElementDictionary.Add(f4040b9XName, typeof(XTypedElement));
                    localElementDictionary.Add(f4040baXName, typeof(XTypedElement));
                    localElementDictionary.Add(f4040bbXName, typeof(XTypedElement));
                    localElementDictionary.Add(f4040bcXName, typeof(XTypedElement));
                    localElementDictionary.Add(f4040bdXName, typeof(XTypedElement));
                    localElementDictionary.Add(f4040beXName, typeof(XTypedElement));
                    localElementDictionary.Add(f4040bfXName, typeof(XTypedElement));
                    localElementDictionary.Add(f4040c0XName, typeof(XTypedElement));
                    localElementDictionary.Add(f4040c1XName, typeof(XTypedElement));
                    localElementDictionary.Add(f4040c2XName, typeof(XTypedElement));
                    localElementDictionary.Add(f4040c3XName, typeof(XTypedElement));
                    localElementDictionary.Add(f4040c4XName, typeof(XTypedElement));
                    localElementDictionary.Add(f4040c5XName, typeof(XTypedElement));
                    localElementDictionary.Add(f4040c6XName, typeof(XTypedElement));
                    localElementDictionary.Add(f4040c7XName, typeof(XTypedElement));
                    localElementDictionary.Add(f4040c8XName, typeof(XTypedElement));
                    localElementDictionary.Add(TimephasedDataXName, typeof(TimephasedDataType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                private class CostRateTableLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    0m,
                                    1m,
                                    2m,
                                    3m,
                                    4m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
                    
                    private CostRateTableLocalType() {
                    }
                }
                
                private class HyperlinkLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 512, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private HyperlinkLocalType() {
                    }
                }
                
                private class HyperlinkAddressLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 512, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private HyperlinkAddressLocalType() {
                    }
                }
                
                private class HyperlinkSubAddressLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 512, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private HyperlinkSubAddressLocalType() {
                    }
                }
                
                private class LevelingDelayFormatLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    3m,
                                    4m,
                                    5m,
                                    6m,
                                    7m,
                                    8m,
                                    9m,
                                    10m,
                                    11m,
                                    12m,
                                    19m,
                                    20m,
                                    21m,
                                    35m,
                                    36m,
                                    37m,
                                    38m,
                                    39m,
                                    40m,
                                    41m,
                                    42m,
                                    43m,
                                    44m,
                                    51m,
                                    52m,
                                    53m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
                    
                    private LevelingDelayFormatLocalType() {
                    }
                }
                
                private class WorkContourLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    0m,
                                    1m,
                                    2m,
                                    3m,
                                    4m,
                                    5m,
                                    6m,
                                    7m,
                                    8m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
                    
                    private WorkContourLocalType() {
                    }
                }
                
                private class BookingTypeLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                    0m,
                                    1m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
                    
                    private BookingTypeLocalType() {
                    }
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (FieldID?, Value?, ValueGUID?, DurationFormat?)
                /// </para>
                /// </summary>
                public partial class ExtendedAttributeLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName FieldIDXName = System.Xml.Linq.XName.Get("FieldID", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName ValueXName = System.Xml.Linq.XName.Get("Value", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName ValueGUIDXName = System.Xml.Linq.XName.Get("ValueGUID", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName DurationFormatXName = System.Xml.Linq.XName.Get("DurationFormat", "http://schemas.microsoft.com/project/2007");
                    
                    private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ExtendedAttribute", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
		public static explicit operator ExtendedAttributeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ExtendedAttributeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static ExtendedAttributeLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FieldIDXName), new NamedContentModelEntity(ValueXName), new NamedContentModelEntity(ValueGUIDXName), new NamedContentModelEntity(DurationFormatXName));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (FieldID?, Value?, ValueGUID?, DurationFormat?)
                    /// </para>
                    /// </summary>
                    public ExtendedAttributeLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The project ID (PID) of the custom field.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (FieldID?, Value?, ValueGUID?, DurationFormat?)
                    /// </para>
                    /// </summary>
                    public virtual string FieldID {
                        get {
                            XElement x = this.GetElement(FieldIDXName);
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetElement(FieldIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The actual value of the extended attribute.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (FieldID?, Value?, ValueGUID?, DurationFormat?)
                    /// </para>
                    /// </summary>
                    public virtual string Value {
                        get {
                            XElement x = this.GetElement(ValueXName);
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetElement(ValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The GUID of the value in the extended attribute lookup table.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (FieldID?, Value?, ValueGUID?, DurationFormat?)
                    /// </para>
                    /// </summary>
                    public virtual System.Decimal? ValueGUID {
                        get {
                            XElement x = this.GetElement(ValueGUIDXName);
                            if ((x == null)) {
                                return null;
                            }
                            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                        set {
                            this.SetElement(ValueGUIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The format for expressing the bulk duration.  Values are: 3=m, 4=em, 5=h, 6=eh, 7=d, 8=ed, 9=w, 10=ew, 11=mo, 12=emo, 19=%, 20=e%, 21=null, 35=m?, 36=em?, 37=h?, 38=eh?, 39=d?, 40=ed?, 41=w?, 42=ew?, 43=mo?, 44=emo?, 51=%?, 52=e%? and 53=null.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (FieldID?, Value?, ValueGUID?, DurationFormat?)
                    /// </para>
                    /// </summary>
                    public virtual System.Decimal? DurationFormat {
                        get {
                            XElement x = this.GetElement(DurationFormatXName);
                            if ((x == null)) {
                                return null;
                            }
                            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                        set {
                            if (value == null) {
                                this.SetElement(DurationFormatXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                            }
                            else {
                                this.SetElementWithValidation(DurationFormatXName, value, "DurationFormat", DurationFormatLocalType.TypeDefinition);
                            }
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    System.Xml.Linq.XName IXMetaData.SchemaName {
                        get {
                            return xName;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<ExtendedAttributeLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(FieldIDXName, typeof(string));
                        localElementDictionary.Add(ValueXName, typeof(string));
                        localElementDictionary.Add(ValueGUIDXName, typeof(decimal));
                        localElementDictionary.Add(DurationFormatXName, typeof(decimal));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                    
                    private class DurationFormatLocalType {
                        
                        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                                        3m,
                                        4m,
                                        5m,
                                        6m,
                                        7m,
                                        8m,
                                        9m,
                                        10m,
                                        11m,
                                        12m,
                                        19m,
                                        20m,
                                        21m,
                                        35m,
                                        36m,
                                        37m,
                                        38m,
                                        39m,
                                        40m,
                                        41m,
                                        42m,
                                        43m,
                                        44m,
                                        51m,
                                        52m,
                                        53m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
                        
                        private DurationFormatLocalType() {
                        }
                    }
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (TimephasedData*, Number, Start?, Finish?, Work?, Cost?, BCWS?, BCWP?)
                /// </para>
                /// </summary>
                public partial class BaselineLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName TimephasedDataXName = System.Xml.Linq.XName.Get("TimephasedData", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<TimephasedDataType> TimephasedDataField;
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName NumberXName = System.Xml.Linq.XName.Get("Number", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName StartXName = System.Xml.Linq.XName.Get("Start", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName FinishXName = System.Xml.Linq.XName.Get("Finish", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName WorkXName = System.Xml.Linq.XName.Get("Work", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName CostXName = System.Xml.Linq.XName.Get("Cost", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName BCWSXName = System.Xml.Linq.XName.Get("BCWS", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName BCWPXName = System.Xml.Linq.XName.Get("BCWP", "http://schemas.microsoft.com/project/2007");
                    
                    private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Baseline", "http://schemas.microsoft.com/project/2007");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
		public static explicit operator BaselineLocalType(XElement xe) { return XTypedServices.ToXTypedElement<BaselineLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static BaselineLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TimephasedDataXName), new NamedContentModelEntity(NumberXName), new NamedContentModelEntity(StartXName), new NamedContentModelEntity(FinishXName), new NamedContentModelEntity(WorkXName), new NamedContentModelEntity(CostXName), new NamedContentModelEntity(BCWSXName), new NamedContentModelEntity(BCWPXName));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (TimephasedData*, Number, Start?, Finish?, Work?, Cost?, BCWS?, BCWP?)
                    /// </para>
                    /// </summary>
                    public BaselineLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The time phased data associated with the Baseline.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (TimephasedData*, Number, Start?, Finish?, Work?, Cost?, BCWS?, BCWP?)
                    /// </para>
                    /// </summary>
                    public virtual IList<TimephasedDataType> TimephasedData {
                        get {
                            if ((this.TimephasedDataField == null)) {
                                this.TimephasedDataField = new XTypedList<TimephasedDataType>(this, LinqToXsdTypeManager.Instance, TimephasedDataXName);
                            }
                            return this.TimephasedDataField;
                        }
                        set {
                            if ((value == null)) {
                                this.TimephasedDataField = null;
                            }
                            else {
                                if ((this.TimephasedDataField == null)) {
                                    this.TimephasedDataField = XTypedList<TimephasedDataType>.Initialize(this, LinqToXsdTypeManager.Instance, value, TimephasedDataXName);
                                }
                                else {
                                    XTypedServices.SetList<TimephasedDataType>(this.TimephasedDataField, value);
                                }
                            }
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The unique number of the baseline data record.
                    /// </para>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (TimephasedData*, Number, Start?, Finish?, Work?, Cost?, BCWS?, BCWP?)
                    /// </para>
                    /// </summary>
                    public virtual string Number {
                        get {
                            XElement x = this.GetElement(NumberXName);
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetElement(NumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The scheduled start date of the assignment when the baseline was saved.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (TimephasedData*, Number, Start?, Finish?, Work?, Cost?, BCWS?, BCWP?)
                    /// </para>
                    /// </summary>
                    public virtual string Start {
                        get {
                            XElement x = this.GetElement(StartXName);
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetElement(StartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The scheduled finish date of the assignment when the baseline was saved.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (TimephasedData*, Number, Start?, Finish?, Work?, Cost?, BCWS?, BCWP?)
                    /// </para>
                    /// </summary>
                    public virtual string Finish {
                        get {
                            XElement x = this.GetElement(FinishXName);
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetElement(FinishXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The total amount of work scheduled on the assignment when the baseline was saved.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (TimephasedData*, Number, Start?, Finish?, Work?, Cost?, BCWS?, BCWP?)
                    /// </para>
                    /// </summary>
                    public virtual System.TimeSpan? Work {
                        get {
                            XElement x = this.GetElement(WorkXName);
                            if ((x == null)) {
                                return null;
                            }
                            return XTypedServices.ParseValue<System.TimeSpan>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                        }
                        set {
                            this.SetElement(WorkXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Duration).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The total projected cost of the assignment when the baseline was saved.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (TimephasedData*, Number, Start?, Finish?, Work?, Cost?, BCWS?, BCWP?)
                    /// </para>
                    /// </summary>
                    public virtual string Cost {
                        get {
                            XElement x = this.GetElement(CostXName);
                            return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                        set {
                            this.SetElement(CostXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The budgeted cost of work on the assignment.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (TimephasedData*, Number, Start?, Finish?, Work?, Cost?, BCWS?, BCWP?)
                    /// </para>
                    /// </summary>
                    public virtual System.Single? BCWS {
                        get {
                            XElement x = this.GetElement(BCWSXName);
                            if ((x == null)) {
                                return null;
                            }
                            return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                        }
                        set {
                            this.SetElement(BCWSXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// The budgeted cost of work performed on the assignment to-date.
                    /// </para>
                    /// <para>
                    /// Occurrence: optional
                    /// </para>
                    /// <para>
                    /// Regular expression: (TimephasedData*, Number, Start?, Finish?, Work?, Cost?, BCWS?, BCWP?)
                    /// </para>
                    /// </summary>
                    public virtual System.Single? BCWP {
                        get {
                            XElement x = this.GetElement(BCWPXName);
                            if ((x == null)) {
                                return null;
                            }
                            return XTypedServices.ParseValue<float>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                        }
                        set {
                            this.SetElement(BCWPXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Float).Datatype);
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    System.Xml.Linq.XName IXMetaData.SchemaName {
                        get {
                            return xName;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<BaselineLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(TimephasedDataXName, typeof(TimephasedDataType));
                        localElementDictionary.Add(NumberXName, typeof(string));
                        localElementDictionary.Add(StartXName, typeof(string));
                        localElementDictionary.Add(FinishXName, typeof(string));
                        localElementDictionary.Add(WorkXName, typeof(System.TimeSpan));
                        localElementDictionary.Add(CostXName, typeof(string));
                        localElementDictionary.Add(BCWSXName, typeof(float));
                        localElementDictionary.Add(BCWPXName, typeof(float));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// The definition of the time phased data block.
    /// </para>
    /// <para>
    /// Regular expression: (Type?, UID, Start?, Finish?, Unit?, Value?)
    /// </para>
    /// </summary>
    public partial class TimephasedDataType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypeXName = System.Xml.Linq.XName.Get("Type", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UIDXName = System.Xml.Linq.XName.Get("UID", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StartXName = System.Xml.Linq.XName.Get("Start", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FinishXName = System.Xml.Linq.XName.Get("Finish", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UnitXName = System.Xml.Linq.XName.Get("Unit", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ValueXName = System.Xml.Linq.XName.Get("Value", "http://schemas.microsoft.com/project/2007");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TimephasedDataType", "http://schemas.microsoft.com/project/2007");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TimephasedDataType(XElement xe) { return XTypedServices.ToXTypedElement<TimephasedDataType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TimephasedDataType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TypeXName), new NamedContentModelEntity(UIDXName), new NamedContentModelEntity(StartXName), new NamedContentModelEntity(FinishXName), new NamedContentModelEntity(UnitXName), new NamedContentModelEntity(ValueXName));
        }
        
        /// <summary>
        /// <para>
        /// The definition of the time phased data block.
        /// </para>
        /// <para>
        /// Regular expression: (Type?, UID, Start?, Finish?, Unit?, Value?)
        /// </para>
        /// </summary>
        public TimephasedDataType() {
        }
        
        /// <summary>
        /// <para>
        /// 
        ///            The type of task timephased data. Values are:
        ///            1=Assignment Remaining Work
        ///            2=Assignment Actual Work
        ///            3=Assignment Actual Overtime Work
        ///            4=Assignment Baseline Work
        ///            5=Assignment Baseline Cost
        ///            6=Assignment Actual Cost
        ///            7=Resource Baseline Work
        ///            8=Resource Baseline Cost
        ///            9=Task Baseline Work
        ///            10=Task Baseline Cost
        ///            11=Task Percent Complete
        ///            16=Assignment Baseline 1 Work
        ///            17=Assignment Baseline 1 Cost
        ///            18=Task Baseline 1 Work
        ///            19=Task Baseline 1 Cost
        ///            20=Resource Baseline 1 Work
        ///            21=Resource Baseline 1 Cost
        ///            22=Assignment Baseline 2 Work
        ///            23=Assignment Baseline 2 Cost
        ///            24=Task Baseline 2 Work
        ///            25=Task Baseline 2 Cost
        ///            26=Resource Baseline 2 Work
        ///            27=Resource Baseline 2 Cost
        ///            28=Assignment Baseline 3 Work
        ///            29=Assignment Baseline 3 Cost
        ///            30=Task Baseline 3 Work
        ///            31=Task Baseline 3 Cost
        ///            32=Resource Baseline 3 Work
        ///            33=Resource Baseline 3 Cost
        ///            34=Assignment Baseline 4 Work
        ///            35=Assignment Baseline 4 Cost
        ///            36=Task Baseline 4 Work
        ///            37=Task Baseline 4 Cost
        ///            38=Resource Baseline 4 Work
        ///            39=Resource Baseline 4 Cost
        ///            40=Assignment Baseline 5 Work
        ///            41=Assignment Baseline 5 Cost
        ///            42=Task Baseline 5 Work
        ///            43=Task Baseline 5 Cost
        ///            44=Resource Baseline 5 Work
        ///            45=Resource Baseline 5 Cost
        ///            46=Assignment Baseline 6 Work
        ///            47=Assignment Baseline 6 Cost
        ///            48=Task Baseline 6 Work
        ///            49=Task Baseline 6 Cost
        ///            50=Resource Baseline 6 Work
        ///            51=Resource Baseline 6 Cost
        ///            52=Assignment Baseline 7 Work
        ///            53=Assignment Baseline 7 Cost
        ///            54=Task Baseline 7 Work
        ///            55=Task Baseline 7 Cost
        ///            56=Resource Baseline 7 Work
        ///            57=Resource Baseline 7 Cost
        ///            58=Assignment Baseline 8 Work
        ///            59=Assignment Baseline 8 Cost
        ///            60=Task Baseline 8 Work
        ///            61=Task Baseline 8 Cost
        ///            62=Resource Baseline 8 Work
        ///            63=Resource Baseline 8 Cost
        ///            64=Assignment Baseline 9 Work
        ///            65=Assignment Baseline 9 Cost
        ///            66=Task Baseline 9 Work
        ///            67=Task Baseline 9 Cost
        ///            68=Resource Baseline 9 Work
        ///            69=Resource Baseline 9 Cost
        ///            70=Assignment Baseline 10 Work
        ///            71=Assignment Baseline 10 Cost
        ///            72=Task Baseline 10 Work
        ///            73=Task Baseline 10 Cost
        ///            74=Resource Baseline 10 Work
        ///            75=Resource Baseline 10 Cost
        ///            76=Physical Percent Complete
        ///          
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Type?, UID, Start?, Finish?, Unit?, Value?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Type {
            get {
                XElement x = this.GetElement(TypeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(TypeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(TypeXName, value, "Type", TypeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The unique identifier of the timephased data record.
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Type?, UID, Start?, Finish?, Unit?, Value?)
        /// </para>
        /// </summary>
        public virtual decimal UID {
            get {
                XElement x = this.GetElement(UIDXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElement(UIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The start date of the timephased data period.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Type?, UID, Start?, Finish?, Unit?, Value?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? Start {
            get {
                XElement x = this.GetElement(StartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetElement(StartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The finish date of the timephased data period.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Type?, UID, Start?, Finish?, Unit?, Value?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? Finish {
            get {
                XElement x = this.GetElement(FinishXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetElement(FinishXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The time unit of the timephased data period. Values are: 0=m, 1=h, 2=d, 3=w, 5=mo, 8=y.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Type?, UID, Start?, Finish?, Unit?, Value?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Unit {
            get {
                XElement x = this.GetElement(UnitXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(UnitXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(UnitXName, value, "Unit", UnitLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The value per unit of time for the timephased data period.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Type?, UID, Start?, Finish?, Unit?, Value?)
        /// </para>
        /// </summary>
        public virtual string Value {
            get {
                XElement x = this.GetElement(ValueXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(ValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TimephasedDataType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TypeXName, typeof(decimal));
            localElementDictionary.Add(UIDXName, typeof(decimal));
            localElementDictionary.Add(StartXName, typeof(System.DateTime));
            localElementDictionary.Add(FinishXName, typeof(System.DateTime));
            localElementDictionary.Add(UnitXName, typeof(decimal));
            localElementDictionary.Add(ValueXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class TypeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            1m,
                            2m,
                            3m,
                            4m,
                            5m,
                            6m,
                            7m,
                            8m,
                            9m,
                            10m,
                            11m,
                            16m,
                            17m,
                            18m,
                            19m,
                            20m,
                            21m,
                            22m,
                            23m,
                            24m,
                            25m,
                            26m,
                            27m,
                            28m,
                            29m,
                            30m,
                            31m,
                            32m,
                            33m,
                            34m,
                            35m,
                            36m,
                            37m,
                            38m,
                            39m,
                            40m,
                            41m,
                            42m,
                            43m,
                            44m,
                            45m,
                            46m,
                            47m,
                            48m,
                            49m,
                            50m,
                            51m,
                            52m,
                            53m,
                            54m,
                            55m,
                            56m,
                            57m,
                            58m,
                            59m,
                            60m,
                            61m,
                            62m,
                            63m,
                            64m,
                            65m,
                            66m,
                            67m,
                            68m,
                            69m,
                            70m,
                            71m,
                            72m,
                            73m,
                            74m,
                            75m,
                            76m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
            
            private TypeLocalType() {
            }
        }
        
        private class UnitLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                            0m,
                            1m,
                            2m,
                            3m,
                            5m,
                            8m}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
            
            private UnitLocalType() {
            }
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> typeDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> elementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
        }
        
        private LinqToXsdTypeManager() {
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(System.Xml.Linq.XName.Get("TimephasedDataType", "http://schemas.microsoft.com/project/2007"), typeof(global::Microsoft.Schemas.Project2007.TimephasedDataType));
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(System.Xml.Linq.XName.Get("Project", "http://schemas.microsoft.com/project/2007"), typeof(global::Microsoft.Schemas.Project2007.Project));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[System.Xml.Linq.XName.Get("Project", "http://schemas.microsoft.com/project/2007")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public Project Project {  get {return rootObject as Project; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(Project root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public global::Microsoft.Schemas.Project2007.Project Project {  get {return rootObject as global::Microsoft.Schemas.Project2007.Project; } }
        
        private XRoot() {
        }
        
        public XRoot(global::Microsoft.Schemas.Project2007.Project root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
